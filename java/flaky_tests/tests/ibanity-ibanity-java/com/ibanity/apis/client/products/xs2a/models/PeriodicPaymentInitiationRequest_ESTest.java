/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 07:24:38 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.PeriodicPaymentInitiationRequest;
import com.ibanity.apis.client.products.xs2a.models.links.FinancialInstitutionLinks;
import com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationRequest_ESTest extends PeriodicPaymentInitiationRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.skipIbanityCompletionCallback(true);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertTrue(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback();
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertTrue(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      periodicPaymentInitiationRequest0.setAllowFinancialInstitutionRedirectUri(true);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri();
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      
      periodicPaymentInitiationRequest0.setStatusReason(", financialInstitutionLink=");
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertEquals(", financialInstitutionLink=", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      
      String string0 = periodicPaymentInitiationRequest0.getStatusReason();
      assertNotNull(string0);
      assertEquals(", financialInstitutionLink=", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertEquals(", financialInstitutionLink=", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.statusReason("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertEquals("", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getStatusReason();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertEquals("", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.status("9ciS\"hBb3W+p&");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("9ciS\"hBb3W+p&", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getStatus();
      assertNotNull(string0);
      assertEquals("9ciS\"hBb3W+p&", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("9ciS\"hBb3W+p&", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      periodicPaymentInitiationRequest0.setStatus("");
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertEquals("", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      String string0 = periodicPaymentInitiationRequest0.getStatus();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertEquals("", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.startDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate1 = periodicPaymentInitiationRequest0.getStartDate();
      assertNotNull(localDate1);
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(localDate0, localDate1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.selfLink("{paymentInitiationRequestId}");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getSelfLink();
      assertNotNull(string0);
      assertEquals("{paymentInitiationRequestId}", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.requestId("{paymentInitiationRequestId}");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getRequestId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getRequestId();
      assertNotNull(string0);
      assertEquals("{paymentInitiationRequestId}", string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getRequestId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.requestId("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertEquals("", periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getRequestId();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.remittanceInformationType("{paymentInitiationRequestId}");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformationType();
      assertNotNull(string0);
      assertEquals("{paymentInitiationRequestId}", string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.remittanceInformationType("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformationType();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.remittanceInformation("IGv");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertEquals("IGv", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformation();
      assertNotNull(string0);
      assertEquals("IGv", string0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertEquals("IGv", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.remittanceInformation("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformation();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.productType("s");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("s", periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getProductType();
      assertNotNull(string0);
      assertEquals("s", string0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("s", periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.productType("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertEquals("", periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getProductType();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertEquals("", periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      assertNotNull(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.links(periodicPaymentInitiationAuthorizationLinks0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks1 = periodicPaymentInitiationRequest0.getLinks();
      assertNotNull(periodicPaymentInitiationAuthorizationLinks1);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationAuthorizationLinks1.getRedirect());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationAuthorizationLinks0, periodicPaymentInitiationAuthorizationLinks1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertSame(periodicPaymentInitiationAuthorizationLinks1, periodicPaymentInitiationAuthorizationLinks0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Random.setNextRandom(3215);
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID0 = MockUUID.fromString("");
      assertNotNull(uUID0);
      assertEquals((-8139130424148606976L), uUID0.getMostSignificantBits());
      assertEquals((-7995015236039213056L), uUID0.getLeastSignificantBits());
      assertEquals("8f0c0000-900c-4000-910c-0000920c0000", uUID0.toString());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.id(uUID0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertEquals((-8139130424148606976L), uUID0.getMostSignificantBits());
      assertEquals((-7995015236039213056L), uUID0.getLeastSignificantBits());
      assertEquals("8f0c0000-900c-4000-910c-0000920c0000", uUID0.toString());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertEquals((-8139130424148606976L), uUID0.getMostSignificantBits());
      assertEquals((-7995015236039213056L), uUID0.getLeastSignificantBits());
      assertEquals("8f0c0000-900c-4000-910c-0000920c0000", uUID0.toString());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID1 = periodicPaymentInitiationRequest0.getId();
      assertNotNull(uUID1);
      assertEquals((-8139130424148606976L), uUID0.getMostSignificantBits());
      assertEquals((-7995015236039213056L), uUID0.getLeastSignificantBits());
      assertEquals("8f0c0000-900c-4000-910c-0000920c0000", uUID0.toString());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertEquals("8f0c0000-900c-4000-910c-0000920c0000", uUID1.toString());
      assertEquals((-8139130424148606976L), uUID1.getMostSignificantBits());
      assertEquals((-7995015236039213056L), uUID1.getLeastSignificantBits());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(uUID0, uUID1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID0 = MockUUID.fromString("");
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.id(uUID0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      UUID uUID1 = periodicPaymentInitiationRequest0.getId();
      assertNotNull(uUID1);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertEquals(16793600L, uUID1.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.frequency("QlO[mDsQWm0d&-P");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("QlO[mDsQWm0d&-P", periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getFrequency();
      assertNotNull(string0);
      assertEquals("QlO[mDsQWm0d&-P", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("QlO[mDsQWm0d&-P", periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      periodicPaymentInitiationRequest0.setFrequency("");
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("", periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      String string0 = periodicPaymentInitiationRequest0.getFrequency();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("", periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      FinancialInstitutionLinks financialInstitutionLinks0 = new FinancialInstitutionLinks();
      assertNotNull(financialInstitutionLinks0);
      assertNull(financialInstitutionLinks0.getRelated());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionLink(financialInstitutionLinks0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNull(financialInstitutionLinks0.getRelated());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      FinancialInstitutionLinks financialInstitutionLinks1 = periodicPaymentInitiationRequest0.getFinancialInstitutionLink();
      assertNotNull(financialInstitutionLinks1);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(financialInstitutionLinks1.getRelated());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(financialInstitutionLinks1, financialInstitutionLinks0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Random.setNextRandom(1489);
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("d1050000-d205-4000-9305-0000d4050000", uUID0.toString());
      assertEquals((-7852870371693494272L), uUID0.getLeastSignificantBits());
      assertEquals((-3385299541375500288L), uUID0.getMostSignificantBits());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionId(uUID0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertEquals("d1050000-d205-4000-9305-0000d4050000", uUID0.toString());
      assertEquals((-7852870371693494272L), uUID0.getLeastSignificantBits());
      assertEquals((-3385299541375500288L), uUID0.getMostSignificantBits());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertEquals("d1050000-d205-4000-9305-0000d4050000", uUID0.toString());
      assertEquals((-7852870371693494272L), uUID0.getLeastSignificantBits());
      assertEquals((-3385299541375500288L), uUID0.getMostSignificantBits());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID1 = periodicPaymentInitiationRequest0.getFinancialInstitutionId();
      assertNotNull(uUID1);
      assertEquals("d1050000-d205-4000-9305-0000d4050000", uUID0.toString());
      assertEquals((-7852870371693494272L), uUID0.getLeastSignificantBits());
      assertEquals((-3385299541375500288L), uUID0.getMostSignificantBits());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals((-7852870371693494272L), uUID1.getLeastSignificantBits());
      assertEquals("d1050000-d205-4000-9305-0000d4050000", uUID1.toString());
      assertEquals((-3385299541375500288L), uUID1.getMostSignificantBits());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(uUID0, uUID1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionId(uUID0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      UUID uUID1 = periodicPaymentInitiationRequest0.getFinancialInstitutionId();
      assertNotNull(uUID1);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertEquals(16793600L, uUID1.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(uUID0, uUID1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionCustomerReference("periodic-payment-initiation-requests");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference();
      assertNotNull(string0);
      assertEquals("periodic-payment-initiation-requests", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      periodicPaymentInitiationRequest0.setFinancialInstitutionCustomerReference("");
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertEquals("", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      String string0 = periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertEquals("", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.executionRule("O{wl-L");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("O{wl-L", periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getExecutionRule();
      assertNotNull(string0);
      assertEquals("O{wl-L", string0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("O{wl-L", periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      periodicPaymentInitiationRequest0.setEndToEndId("TMe/g-%=!VJ/<X+q8(");
      assertEquals("TMe/g-%=!VJ/<X+q8(", periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      String string0 = periodicPaymentInitiationRequest0.getEndToEndId();
      assertNotNull(string0);
      assertEquals("TMe/g-%=!VJ/<X+q8(", string0);
      assertEquals("TMe/g-%=!VJ/<X+q8(", periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      periodicPaymentInitiationRequest0.setEndToEndId("");
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("", periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      String string0 = periodicPaymentInitiationRequest0.getEndToEndId();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("", periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      LocalDate localDate1 = periodicPaymentInitiationRequest0.getEndDate();
      assertNotNull(localDate1);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorName("e");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("e", periodicPaymentInitiationRequest0.getDebtorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorName();
      assertNotNull(string0);
      assertEquals("e", string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("e", periodicPaymentInitiationRequest0.getDebtorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorName("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorAccountReferenceType("#z@0v'YDYg~^.vyKs");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReferenceType();
      assertNotNull(string0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.setDebtorAccountReferenceType("");
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReferenceType();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorAccountReference(", executionRule=");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReference();
      assertNotNull(string0);
      assertEquals(", executionRule=", string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      periodicPaymentInitiationRequest0.setDebtorAccountReference("");
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReference();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals("", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.currency(", executionRule=");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getCurrency();
      assertNotNull(string0);
      assertEquals(", executionRule=", string0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      
      periodicPaymentInitiationRequest0.setCurrency("");
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertEquals("", periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      
      String string0 = periodicPaymentInitiationRequest0.getCurrency();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertEquals("", periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorName("s");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("s", periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorName();
      assertNotNull(string0);
      assertEquals("s", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("s", periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorName("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorName();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgentType("o_9MaQ9G");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("o_9MaQ9G", periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgentType();
      assertNotNull(string0);
      assertEquals("o_9MaQ9G", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("o_9MaQ9G", periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgentType("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgentType();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      periodicPaymentInitiationRequest0.setCreditorAgent("bQ;&fc,8aR");
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertEquals("bQ;&fc,8aR", periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgent();
      assertNotNull(string0);
      assertEquals("bQ;&fc,8aR", string0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertEquals("bQ;&fc,8aR", periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgent("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgent();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReferenceType("QP1");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("QP1", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReferenceType();
      assertNotNull(string0);
      assertEquals("QP1", string0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("QP1", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReferenceType("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReferenceType();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      
      periodicPaymentInitiationRequest0.setCreditorAccountReference(">");
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertEquals(">", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReference();
      assertNotNull(string0);
      assertEquals(">", string0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertEquals(">", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.setCreditorAccountReference("");
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReference();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      
      periodicPaymentInitiationRequest0.setConsentReference(", creditorAgentType=");
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals(", creditorAgentType=", periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      
      String string0 = periodicPaymentInitiationRequest0.getConsentReference();
      assertNotNull(string0);
      assertEquals(", creditorAgentType=", string0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals(", creditorAgentType=", periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      periodicPaymentInitiationRequest0.setConsentReference("");
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertEquals("", periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      String string0 = periodicPaymentInitiationRequest0.getConsentReference();
      assertNotNull(string0);
      assertEquals("", string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertEquals("", periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      BigDecimal bigDecimal0 = new BigDecimal((double) 0L);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      periodicPaymentInitiationRequest0.setAmount(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = periodicPaymentInitiationRequest0.getAmount();
      assertNotNull(bigDecimal1);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      BigDecimal bigDecimal0 = new BigDecimal((-928));
      assertNotNull(bigDecimal0);
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-928), bigDecimal0.shortValue());
      
      periodicPaymentInitiationRequest0.setAmount(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-928), bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = periodicPaymentInitiationRequest0.getAmount();
      assertNotNull(bigDecimal1);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertEquals((byte)96, bigDecimal1.byteValue());
      assertEquals((short) (-928), bigDecimal1.shortValue());
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      
      BigDecimal bigDecimal0 = new BigDecimal(2006);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-42), bigDecimal0.byteValue());
      assertEquals((short)2006, bigDecimal0.shortValue());
      
      periodicPaymentInitiationRequest0.setAmount(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertEquals((byte) (-42), bigDecimal0.byteValue());
      assertEquals((short)2006, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = periodicPaymentInitiationRequest0.getAmount();
      assertNotNull(bigDecimal1);
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertEquals((byte) (-42), bigDecimal1.byteValue());
      assertEquals((short)2006, bigDecimal1.shortValue());
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.canEqual(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.canEqual(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgent();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getFrequency();
      assertNull(string0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReference();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorName();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getSelfLink();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      UUID uUID0 = periodicPaymentInitiationRequest0.getId();
      assertNull(uUID0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      String string0 = periodicPaymentInitiationRequest0.getExecutionRule();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      LocalDate localDate0 = periodicPaymentInitiationRequest0.getStartDate();
      assertNull(localDate0);
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      String string0 = periodicPaymentInitiationRequest0.getDebtorAccountReferenceType();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      String string0 = periodicPaymentInitiationRequest0.getConsentReference();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReferenceType();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      BigDecimal bigDecimal0 = periodicPaymentInitiationRequest0.getAmount();
      assertNull(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback();
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      
      UUID uUID0 = periodicPaymentInitiationRequest0.getFinancialInstitutionId();
      assertNull(uUID0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorName();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationRequest0.getLinks();
      assertNull(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAccountReference();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      String string0 = periodicPaymentInitiationRequest0.getStatusReason();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getCreditorAgentType();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      String string0 = periodicPaymentInitiationRequest0.getProductType();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      
      String string0 = periodicPaymentInitiationRequest0.getCurrency();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      String string0 = periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri();
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      String string0 = periodicPaymentInitiationRequest0.getStatus();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      String string0 = periodicPaymentInitiationRequest0.getEndToEndId();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformationType();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      String string0 = periodicPaymentInitiationRequest0.getRequestId();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      FinancialInstitutionLinks financialInstitutionLinks0 = periodicPaymentInitiationRequest0.getFinancialInstitutionLink();
      assertNull(financialInstitutionLinks0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      LocalDate localDate0 = periodicPaymentInitiationRequest0.getEndDate();
      assertNull(localDate0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      String string0 = periodicPaymentInitiationRequest0.getRemittanceInformation();
      assertNull(string0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      FinancialInstitutionLinks financialInstitutionLinks0 = new FinancialInstitutionLinks();
      assertNotNull(financialInstitutionLinks0);
      assertNull(financialInstitutionLinks0.getRelated());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionLink(financialInstitutionLinks0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNull(financialInstitutionLinks0.getRelated());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(financialInstitutionLinks0.getRelated());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertNull(financialInstitutionLinks0.getRelated());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      FinancialInstitutionLinks financialInstitutionLinks0 = new FinancialInstitutionLinks();
      assertNotNull(financialInstitutionLinks0);
      assertNull(financialInstitutionLinks0.getRelated());
      
      periodicPaymentInitiationRequest1.setFinancialInstitutionLink(financialInstitutionLinks0);
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(financialInstitutionLinks0.getRelated());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      
      FinancialInstitutionLinks financialInstitutionLinks0 = new FinancialInstitutionLinks();
      assertNotNull(financialInstitutionLinks0);
      assertNull(financialInstitutionLinks0.getRelated());
      
      periodicPaymentInitiationRequest0.setFinancialInstitutionLink(financialInstitutionLinks0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(financialInstitutionLinks0.getRelated());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      assertNotNull(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      
      periodicPaymentInitiationRequest0.setLinks(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      assertNotNull(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      
      periodicPaymentInitiationRequest1.setLinks(periodicPaymentInitiationAuthorizationLinks0);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationAuthorizationLinks0.getRedirect());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.executionRule("periodicPaymentInitiationRequest");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest0.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setExecutionRule("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.executionRule("periodicPaymentInitiationRequest");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setFrequency("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setFrequency("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.startDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.startDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      periodicPaymentInitiationRequest0.setAmount(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      periodicPaymentInitiationRequest1.setAmount(bigDecimal0);
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.amount(bigDecimal0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setFinancialInstitutionCustomerReference("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setFinancialInstitutionCustomerReference("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setStatusReason("periodic-payment-initiation-requests");
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.statusReason("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("", periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("", periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setStatus("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setStatus("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAgentType("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgentType("=WhC,ge!yl?$mC.J");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("=WhC,ge!yl?$mC.J", periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("=WhC,ge!yl?$mC.J", periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAgent("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAgent("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReferenceType("}1");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("}1", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("}1", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("}1", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("}1", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAccountReferenceType("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReferenceType("}1");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("}1", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("}1", periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAccountReference("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorAccountReference("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorName("ZSO;Z@fTIL$F-");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCreditorName("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorName("ZSO;Z@fTIL$F-");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorAccountReferenceType("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorAccountReferenceType("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorAccountReference("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorAccountReference("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorName("periodicPaymentInitiationRequest");
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setDebtorName("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setCurrency("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.currency("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("", periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertEquals("", periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      periodicPaymentInitiationRequest0.setRemittanceInformation("");
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRemittanceInformation("");
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertEquals("", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertEquals("", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRemittanceInformation("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRemittanceInformation("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRemittanceInformationType("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRemittanceInformationType("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setProductType("{paymentInitiationRequestId}");
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.productType("M.O>");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("M.O>", periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("M.O>", periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setEndToEndId("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setEndToEndId("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setConsentReference("{paymentInitiationRequestId}");
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setConsentReference("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.selfLink("PeriodicPaymentInitiationAuthorizationLinks(redirect=");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertTrue(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setSelfLink("periodic-payment-initiation-requests");
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.selfLink("PeriodicPaymentInitiationAuthorizationLinks(redirect=");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRequestId("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setRequestId("periodicPaymentInitiationRequest");
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      periodicPaymentInitiationRequest0.setFinancialInstitutionId(uUID0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      UUID uUID0 = MockUUID.fromString("periodicPaymentInitiationRequest");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      periodicPaymentInitiationRequest1.setFinancialInstitutionId(uUID0);
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      periodicPaymentInitiationRequest0.setId(uUID0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      UUID uUID0 = MockUUID.randomUUID();
      assertNotNull(uUID0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      periodicPaymentInitiationRequest1.setId(uUID0);
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertTrue(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      periodicPaymentInitiationRequest1.setSkipIbanityCompletionCallback(true);
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertTrue(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertTrue(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      periodicPaymentInitiationRequest0.setAllowFinancialInstitutionRedirectUri(true);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertTrue(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest1);
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertTrue(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getConsentReference());
      assertNull(periodicPaymentInitiationRequest1.getDebtorName());
      assertNull(periodicPaymentInitiationRequest1.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest1.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest1.getRequestId());
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest1.getProductType());
      assertNull(periodicPaymentInitiationRequest1.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest1.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest1.getSelfLink());
      assertNull(periodicPaymentInitiationRequest1.getCurrency());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest1.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest1.getStatus());
      assertNull(periodicPaymentInitiationRequest1.getCreditorName());
      assertNull(periodicPaymentInitiationRequest1.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.equals((Object)periodicPaymentInitiationRequest1));
      assertFalse(periodicPaymentInitiationRequest1.equals((Object)periodicPaymentInitiationRequest0));
      assertNotSame(periodicPaymentInitiationRequest0, periodicPaymentInitiationRequest1);
      assertNotSame(periodicPaymentInitiationRequest1, periodicPaymentInitiationRequest0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(", creditorAgentType=");
      assertFalse(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.setExecutionRule("{paymentInitiationRequestId}");
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.frequency("");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("", periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("", periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      LocalDate localDate0 = MockLocalDate.ofYearDay(79, 79);
      assertNotNull(localDate0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endDate(localDate0);
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      periodicPaymentInitiationRequest0.setFinancialInstitutionCustomerReference(", executionRule=");
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertEquals(", executionRule=", periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      periodicPaymentInitiationRequest0.setStatusReason(", remittanceInformationType=");
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals(", remittanceInformationType=", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals(", remittanceInformationType=", periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.status("{paymentInitiationRequestId}");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      
      periodicPaymentInitiationRequest0.setCreditorAgent("*&R;USQc-%itAPkL<=");
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("*&R;USQc-%itAPkL<=", periodicPaymentInitiationRequest0.getCreditorAgent());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertEquals("*&R;USQc-%itAPkL<=", periodicPaymentInitiationRequest0.getCreditorAgent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.setCreditorAccountReferenceType("FinancialInstitutionLinks(related=");
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals("FinancialInstitutionLinks(related=", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertEquals("FinancialInstitutionLinks(related=", periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReference("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks$1");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks$1", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks$1", periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      
      periodicPaymentInitiationRequest0.setCreditorName("vA8&$pG%3x%n9");
      assertEquals("vA8&$pG%3x%n9", periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("vA8&$pG%3x%n9", periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorAccountReferenceType("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks");
      assertNotNull(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0);
      
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks", periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
      
      periodicPaymentInitiationRequest0.hashCode();
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks", periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      assertNotNull(periodicPaymentInitiationRequest0);
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      periodicPaymentInitiationRequest0.setDebtorAccountReference("PeriodicPaymentInitiationAuthorizationLinks(redirect=");
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
      
      periodicPaymentInitiationRequest0.hashCode();
      assertNull(periodicPaymentInitiationRequest0.getDebtorName());
      assertNull(periodicPaymentInitiationRequest0.getFinancialInstitutionCustomerReference());
      assertNull(periodicPaymentInitiationRequest0.getDebtorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReferenceType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getStatus());
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=", periodicPaymentInitiationRequest0.getDebtorAccountReference());
      assertNull(periodicPaymentInitiationRequest0.getCreditorName());
      assertNull(periodicPaymentInitiationRequest0.getExecutionRule());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformationType());
      assertNull(periodicPaymentInitiationRequest0.getFrequency());
      assertNull(periodicPaymentInitiationRequest0.getCurrency());
      assertNull(periodicPaymentInitiationRequest0.getRequestId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(periodicPaymentInitiationRequest0.getSelfLink());
      assertNull(periodicPaymentInitiationRequest0.getRemittanceInformation());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertNull(periodicPaymentInitiationRequest0.getProductType());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgent());
      assertNull(periodicPaymentInitiationRequest0.getCreditorAgentType());
      assertNull(periodicPaymentInitiationRequest0.getStatusReason());
      assertNull(periodicPaymentInitiationRequest0.getConsentReference());
      assertNull(periodicPaymentInitiationRequest0.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setDebtorName("PeriodicPaymentInitiationRequest(id=null, financialInstitutionId=null, requestId=null, selfLink=null, consentReference=null, endToEndId=null, productType=null, remittanceInformationType=null, remittanceInformation=null, currency=null, debtorName=null, debtorAccountReference=null, debtorAccountReferenceType=null, creditorName=null, creditorAccountReference=null, creditorAccountReferenceType=null, creditorAgent=null, creditorAgentType=null, status=null, statusReason=null, financialInstitutionCustomerReference=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, amount=null, startDate=null, endDate=null, frequency=null, executionRule=null, links=null, financialInstitutionLink=null)");
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("PeriodicPaymentInitiationRequest(id=null, financialInstitutionId=null, requestId=null, selfLink=null, consentReference=null, endToEndId=null, productType=null, remittanceInformationType=null, remittanceInformation=null, currency=null, debtorName=null, debtorAccountReference=null, debtorAccountReferenceType=null, creditorName=null, creditorAccountReference=null, creditorAccountReferenceType=null, creditorAgent=null, creditorAgentType=null, status=null, statusReason=null, financialInstitutionCustomerReference=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, amount=null, startDate=null, endDate=null, frequency=null, executionRule=null, links=null, financialInstitutionLink=null)", periodicPaymentInitiationRequest0.getDebtorName());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.currency("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      periodicPaymentInitiationRequest0.hashCode();
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", periodicPaymentInitiationRequest0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setRemittanceInformationType("");
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("", periodicPaymentInitiationRequest0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.productType("PeriodicPaymentInitiationRequest(id=");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      periodicPaymentInitiationRequest0.hashCode();
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("PeriodicPaymentInitiationRequest(id=", periodicPaymentInitiationRequest0.getProductType());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endToEndId("{paymentInitiationRequestId}");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("{paymentInitiationRequestId}", periodicPaymentInitiationRequest0.getEndToEndId());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.consentReference("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks$1");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks$1", periodicPaymentInitiationRequest0.getConsentReference());
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.selfLink("PeriodicPaymentInitiationRequest(id=");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.hashCode();
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("PeriodicPaymentInitiationRequest(id=", periodicPaymentInitiationRequest0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setRequestId(", remittanceInformationType=");
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals(", remittanceInformationType=", periodicPaymentInitiationRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      UUID uUID0 = MockUUID.fromString("");
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.id(uUID0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      LocalDate localDate0 = MockLocalDate.now();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.startDate(localDate0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgentType("=WhC,ge!yl?$mC.J");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertEquals("=WhC,ge!yl?$mC.J", periodicPaymentInitiationRequest1.getCreditorAgentType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.status("fMueh4?T[A OZ0gP}");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertEquals("fMueh4?T[A OZ0gP}", periodicPaymentInitiationRequest1.getStatus());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.statusReason("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.frequency("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertEquals("", periodicPaymentInitiationRequest1.getFrequency());
      assertEquals("", periodicPaymentInitiationRequest0.getFrequency());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.allowFinancialInstitutionRedirectUri(false);
      assertSame(periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0, periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorName("{paymentInitiationRequestId}");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      LocalDate localDate0 = MockLocalDate.now();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endDate(localDate0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorAccountReference("E");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertEquals("E", periodicPaymentInitiationRequest1.getDebtorAccountReference());
      assertEquals("E", periodicPaymentInitiationRequest0.getDebtorAccountReference());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.requestId("fMueh4?T[A OZ0gP}");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionCustomerReference("J");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertTrue(boolean0);
      assertEquals("J", periodicPaymentInitiationRequest1.getFinancialInstitutionCustomerReference());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAgent("Cr");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertEquals("Cr", periodicPaymentInitiationRequest1.getCreditorAgent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.links(periodicPaymentInitiationAuthorizationLinks0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.endToEndId("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", periodicPaymentInitiationRequest1.getEndToEndId());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.remittanceInformationType("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertTrue(boolean0);
      assertEquals("", periodicPaymentInitiationRequest1.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.currency("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
      assertEquals("", periodicPaymentInitiationRequest1.getCurrency());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.amount(bigDecimal0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.productType("FinancialInstitutionLinks(related=");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertEquals("FinancialInstitutionLinks(related=", periodicPaymentInitiationRequest1.getProductType());
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.selfLink("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      String string0 = periodicPaymentInitiationRequest0.getSelfLink();
      assertNotNull(string0);
      assertFalse(periodicPaymentInitiationRequest0.isSkipIbanityCompletionCallback());
      assertFalse(periodicPaymentInitiationRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      String string0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder(id=null, financialInstitutionId=null, requestId=null, selfLink=null, consentReference=null, endToEndId=null, productType=null, remittanceInformationType=null, remittanceInformation=null, currency=null, debtorName=null, debtorAccountReference=null, debtorAccountReferenceType=null, creditorName=null, creditorAccountReference=null, creditorAccountReferenceType=null, creditorAgent=null, creditorAgentType=null, status=null, statusReason=null, financialInstitutionCustomerReference=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, amount=null, startDate=null, endDate=null, frequency=null, executionRule=null, links=null, financialInstitutionLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.consentReference("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder1.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest0.equals(periodicPaymentInitiationRequest1);
      assertTrue(boolean0);
      assertEquals("", periodicPaymentInitiationRequest1.getConsentReference());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.creditorAccountReference(", productType=");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
      assertFalse(periodicPaymentInitiationRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = new PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder();
      periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.debtorAccountReferenceType("");
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      periodicPaymentInitiationRequest0.setLinks(periodicPaymentInitiationAuthorizationLinks0);
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setAllowFinancialInstitutionRedirectUri(true);
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setRemittanceInformation("periodic-payment-initiation-requests");
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("periodic-payment-initiation-requests", periodicPaymentInitiationRequest0.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      LocalDate localDate0 = MockLocalDate.now();
      periodicPaymentInitiationRequest0.setEndDate(localDate0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setExecutionRule("");
      String string0 = periodicPaymentInitiationRequest0.getExecutionRule();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      FinancialInstitutionLinks financialInstitutionLinks0 = new FinancialInstitutionLinks();
      periodicPaymentInitiationRequest0.setFinancialInstitutionLink(financialInstitutionLinks0);
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PeriodicPaymentInitiationRequest.PeriodicPaymentInitiationRequestBuilder periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0 = PeriodicPaymentInitiationRequest.builder();
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = periodicPaymentInitiationRequest_PeriodicPaymentInitiationRequestBuilder0.build();
      String string0 = periodicPaymentInitiationRequest0.toString();
      assertEquals("PeriodicPaymentInitiationRequest(id=null, financialInstitutionId=null, requestId=null, selfLink=null, consentReference=null, endToEndId=null, productType=null, remittanceInformationType=null, remittanceInformation=null, currency=null, debtorName=null, debtorAccountReference=null, debtorAccountReferenceType=null, creditorName=null, creditorAccountReference=null, creditorAccountReferenceType=null, creditorAgent=null, creditorAgentType=null, status=null, statusReason=null, financialInstitutionCustomerReference=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, amount=null, startDate=null, endDate=null, frequency=null, executionRule=null, links=null, financialInstitutionLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequest0.setId(uUID0);
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setCreditorAgentType("periodicPaymentInitiationRequest");
      periodicPaymentInitiationRequest0.hashCode();
      assertEquals("periodicPaymentInitiationRequest", periodicPaymentInitiationRequest0.getCreditorAgentType());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      periodicPaymentInitiationRequest0.setSkipIbanityCompletionCallback(true);
      periodicPaymentInitiationRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest0 = new PeriodicPaymentInitiationRequest();
      LocalDate localDate0 = MockLocalDate.now();
      periodicPaymentInitiationRequest0.setStartDate(localDate0);
      PeriodicPaymentInitiationRequest periodicPaymentInitiationRequest1 = new PeriodicPaymentInitiationRequest();
      boolean boolean0 = periodicPaymentInitiationRequest1.equals(periodicPaymentInitiationRequest0);
      assertFalse(boolean0);
  }
}
