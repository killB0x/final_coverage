/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:27:59 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete.FinancialInstitutionDeleteQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionDeleteQuery_ESTest extends FinancialInstitutionDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = FinancialInstitutionDeleteQuery.builder();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionDeleteQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(722);
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      UUID uUID1 = financialInstitutionDeleteQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionDeleteQuery0.canEqual(financialInstitutionDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionDeleteQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      UUID uUID1 = financialInstitutionDeleteQuery0.getFinancialInstitutionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery1 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionDeleteQuery1.equals(financialInstitutionDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery1 = new FinancialInstitutionDeleteQuery(uUID0);
      boolean boolean0 = financialInstitutionDeleteQuery0.equals(financialInstitutionDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionDeleteQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionDeleteQuery0.equals(financialInstitutionDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      financialInstitutionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      String string0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.toString();
      assertEquals("FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder(financialInstitutionId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.financialInstitutionId(uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID1);
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery1 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionDeleteQuery1.equals(financialInstitutionDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = new FinancialInstitutionDeleteQuery(uUID0);
      String string0 = financialInstitutionDeleteQuery0.toString();
      assertEquals("FinancialInstitutionDeleteQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = FinancialInstitutionDeleteQuery.builder();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      financialInstitutionDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0 = new FinancialInstitutionDeleteQuery.FinancialInstitutionDeleteQueryBuilder();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery0 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      FinancialInstitutionDeleteQuery financialInstitutionDeleteQuery1 = financialInstitutionDeleteQuery_FinancialInstitutionDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionDeleteQuery1.equals(financialInstitutionDeleteQuery0);
      assertTrue(boolean0);
  }
}
