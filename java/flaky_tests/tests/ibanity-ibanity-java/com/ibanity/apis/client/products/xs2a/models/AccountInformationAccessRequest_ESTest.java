/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:00:05 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.AccountInformationAccessRequest;
import com.ibanity.apis.client.products.xs2a.models.links.AccountInformationAccessLinks;
import com.ibanity.apis.client.products.xs2a.models.links.AccountLinks;
import com.ibanity.apis.client.products.xs2a.models.links.InitialAccountTransactionsSynchronizationsLinks;
import java.util.LinkedList;
import java.util.List;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountInformationAccessRequest_ESTest extends AccountInformationAccessRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.skipIbanityCompletionCallback(true);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.isSkipIbanityCompletionCallback();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowFinancialInstitutionRedirectUri(true);
      boolean boolean0 = accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.status("{accountInformationAccessRequestId}");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.getStatus();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(string0);
      assertEquals("{accountInformationAccessRequestId}", string0);
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.status("");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      String string0 = accountInformationAccessRequest0.getStatus();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.selfLink("L;jBE\"erE6C[fIw");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.getSelfLink();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("L;jBE\"erE6C[fIw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.selfLink("");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      String string0 = accountInformationAccessRequest0.getSelfLink();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setRequestedAccountReferences((List<String>) null);
      List<String> list0 = accountInformationAccessRequest0.getRequestedAccountReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.requestedAccountReferences(linkedList0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.getRequestedAccountReferences();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("A}TQGXOx");
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.requestedAccountReferences(linkedList0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      List<String> list0 = accountInformationAccessRequest0.getRequestedAccountReferences();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertTrue(list0.contains("A}TQGXOx"));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setRequestId("lI>'ooTRmHgF");
      String string0 = accountInformationAccessRequest0.getRequestId();
      assertEquals("lI>'ooTRmHgF", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.requestId("");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.getRequestId();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertNotNull(string0);
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = new InitialAccountTransactionsSynchronizationsLinks();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.initialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.getInitialAccountTransactionsSynchronizationsLinks();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(1694);
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      UUID uUID0 = MockUUID.fromString("A2;X|$&NUpjKcwa)`Bf");
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.id(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      accountInformationAccessRequest0.getId();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.id(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      accountInformationAccessRequest0.getId();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowedAccountSubtypes((List<String>) null);
      List<String> list0 = accountInformationAccessRequest0.getAllowedAccountSubtypes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.allowedAccountSubtypes(linkedList0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      accountInformationAccessRequest0.getAllowedAccountSubtypes();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountLinks accountLinks0 = new AccountLinks();
      accountInformationAccessRequest0.setAccountLinks(accountLinks0);
      AccountLinks accountLinks1 = accountInformationAccessRequest0.getAccountLinks();
      assertNull(accountLinks1.getRelated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest0.canEqual(accountInformationAccessRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.canEqual(accountInformationAccessRequest_AccountInformationAccessRequestBuilder0);
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      UUID uUID0 = accountInformationAccessRequest0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      String string0 = accountInformationAccessRequest0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.getStatus();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountLinks accountLinks0 = accountInformationAccessRequest0.getAccountLinks();
      assertNull(accountLinks0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.getRequestId();
      assertNull(string0);
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = accountInformationAccessRequest0.getInitialAccountTransactionsSynchronizationsLinks();
      assertNull(initialAccountTransactionsSynchronizationsLinks0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest0.isSkipIbanityCompletionCallback();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessLinks accountInformationAccessLinks0 = accountInformationAccessRequest0.getAccountInformationAccessLinks();
      assertNull(accountInformationAccessLinks0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.allowedAccountSubtypes(linkedList0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      linkedList0.add("j5HB}`0m`");
      List<String> list0 = accountInformationAccessRequest0.getAllowedAccountSubtypes();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertTrue(list0.contains("j5HB}`0m`"));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      AccountLinks accountLinks0 = new AccountLinks();
      accountInformationAccessRequest1.setAccountLinks(accountLinks0);
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountLinks accountLinks0 = new AccountLinks();
      accountInformationAccessRequest0.setAccountLinks(accountLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = new InitialAccountTransactionsSynchronizationsLinks();
      accountInformationAccessRequest0.setInitialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      assertFalse(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      
      accountInformationAccessRequest1.setInitialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertTrue(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = new InitialAccountTransactionsSynchronizationsLinks();
      accountInformationAccessRequest0.setInitialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = new InitialAccountTransactionsSynchronizationsLinks();
      accountInformationAccessRequest0.setInitialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessLinks accountInformationAccessLinks0 = new AccountInformationAccessLinks();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.accountInformationAccessLinks(accountInformationAccessLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      AccountInformationAccessLinks accountInformationAccessLinks0 = new AccountInformationAccessLinks();
      accountInformationAccessRequest1.setAccountInformationAccessLinks(accountInformationAccessLinks0);
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessLinks accountInformationAccessLinks0 = new AccountInformationAccessLinks();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.accountInformationAccessLinks(accountInformationAccessLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowedAccountSubtypes((List<String>) null);
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowedAccountSubtypes((List<String>) null);
      assertFalse(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      
      accountInformationAccessRequest1.setAllowedAccountSubtypes((List<String>) null);
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertTrue(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      accountInformationAccessRequest1.setAllowedAccountSubtypes((List<String>) null);
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setRequestedAccountReferences((List<String>) null);
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.requestedAccountReferences((List<String>) null);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      accountInformationAccessRequest1.setRequestedAccountReferences((List<String>) null);
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.status("6~:nczQ'oTDJ=%L:AL");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertEquals("6~:nczQ'oTDJ=%L:AL", accountInformationAccessRequest1.getStatus());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.status("6~:nczQ'oTDJ=%L:AL");
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      assertEquals("6~:nczQ'oTDJ=%L:AL", accountInformationAccessRequest1.getStatus());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.status("6~:nczQ'oTDJ=%L:AL");
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertEquals("6~:nczQ'oTDJ=%L:AL", accountInformationAccessRequest1.getStatus());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setRequestId("{accountInformationAccessRequestId}");
      assertFalse(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      
      accountInformationAccessRequest1.setRequestId("{accountInformationAccessRequestId}");
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertTrue(accountInformationAccessRequest0.equals((Object)accountInformationAccessRequest1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      accountInformationAccessRequest1.setRequestId("accountInformationAccessRequest");
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      accountInformationAccessRequest1.setRequestId("{accountInformationAccessRequestId}");
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      assertTrue(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      
      accountInformationAccessRequest1.setSelfLink("accountInformationAccessRequest");
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.equals((Object)accountInformationAccessRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.selfLink("accountInformationAccessRequest");
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertEquals("accountInformationAccessRequest", accountInformationAccessRequest1.getSelfLink());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      UUID uUID0 = MockUUID.fromString("{accountInformationAccessRequestId}");
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.id(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequest0.setId(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      UUID uUID0 = MockUUID.fromString("{accountInformationAccessRequestId}");
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.id(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      Object object0 = new Object();
      boolean boolean0 = accountInformationAccessRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessLinks accountInformationAccessLinks0 = new AccountInformationAccessLinks();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.accountInformationAccessLinks(accountInformationAccessLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.hashCode();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.requestedAccountReferences((List<String>) null);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder1.build();
      accountInformationAccessRequest0.hashCode();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setStatus("");
      accountInformationAccessRequest0.hashCode();
      assertEquals("", accountInformationAccessRequest0.getStatus());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setRequestId("accountInformationAccessRequest");
      accountInformationAccessRequest0.hashCode();
      assertEquals("accountInformationAccessRequest", accountInformationAccessRequest0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.setSelfLink("");
      accountInformationAccessRequest0.hashCode();
      assertFalse(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequest0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      UUID uUID0 = MockUUID.fromString("{accountInformationAccessRequestId}");
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.id(uUID0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.hashCode();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.skipIbanityCompletionCallback(true);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.hashCode();
      assertFalse(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowFinancialInstitutionRedirectUri(true);
      accountInformationAccessRequest0.hashCode();
      assertTrue(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountInformationAccessLinks accountInformationAccessLinks0 = new AccountInformationAccessLinks();
      accountInformationAccessRequest0.setAccountInformationAccessLinks(accountInformationAccessLinks0);
      AccountInformationAccessLinks accountInformationAccessLinks1 = accountInformationAccessRequest0.getAccountInformationAccessLinks();
      assertSame(accountInformationAccessLinks1, accountInformationAccessLinks0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      AccountLinks accountLinks0 = new AccountLinks();
      accountInformationAccessRequest0.setAccountLinks(accountLinks0);
      accountInformationAccessRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      InitialAccountTransactionsSynchronizationsLinks initialAccountTransactionsSynchronizationsLinks0 = new InitialAccountTransactionsSynchronizationsLinks();
      accountInformationAccessRequest0.setInitialAccountTransactionsSynchronizationsLinks(initialAccountTransactionsSynchronizationsLinks0);
      accountInformationAccessRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      accountInformationAccessRequest0.setAllowFinancialInstitutionRedirectUri(true);
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(boolean0);
      assertTrue(accountInformationAccessRequest0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      String string0 = accountInformationAccessRequest0.toString();
      assertEquals("AccountInformationAccessRequest(id=null, selfLink=null, requestId=null, status=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, requestedAccountReferences=[], allowedAccountSubtypes=[], accountInformationAccessLinks=null, initialAccountTransactionsSynchronizationsLinks=null, accountLinks=null)", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setAllowedAccountSubtypes((List<String>) null);
      accountInformationAccessRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AccountInformationAccessRequest accountInformationAccessRequest0 = new AccountInformationAccessRequest();
      accountInformationAccessRequest0.setSkipIbanityCompletionCallback(true);
      AccountInformationAccessRequest accountInformationAccessRequest1 = new AccountInformationAccessRequest();
      boolean boolean0 = accountInformationAccessRequest1.equals(accountInformationAccessRequest0);
      assertTrue(accountInformationAccessRequest0.isSkipIbanityCompletionCallback());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      String string0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.toString();
      assertEquals("AccountInformationAccessRequest.AccountInformationAccessRequestBuilder(id=null, selfLink=null, requestId=null, status=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, requestedAccountReferences$value=null, allowedAccountSubtypes$value=null, accountInformationAccessLinks=null, initialAccountTransactionsSynchronizationsLinks=null, accountLinks=null)", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = AccountInformationAccessRequest.builder();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.selfLink("accountInformationAccessRequest");
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertEquals("accountInformationAccessRequest", accountInformationAccessRequest1.getSelfLink());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountLinks accountLinks0 = new AccountLinks();
      accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.accountLinks(accountLinks0);
      AccountInformationAccessRequest accountInformationAccessRequest0 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      AccountInformationAccessRequest accountInformationAccessRequest1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.build();
      boolean boolean0 = accountInformationAccessRequest0.equals(accountInformationAccessRequest1);
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequest1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequest1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder0 = new AccountInformationAccessRequest.AccountInformationAccessRequestBuilder();
      AccountInformationAccessRequest.AccountInformationAccessRequestBuilder accountInformationAccessRequest_AccountInformationAccessRequestBuilder1 = accountInformationAccessRequest_AccountInformationAccessRequestBuilder0.allowFinancialInstitutionRedirectUri(true);
      assertSame(accountInformationAccessRequest_AccountInformationAccessRequestBuilder0, accountInformationAccessRequest_AccountInformationAccessRequestBuilder1);
  }
}
