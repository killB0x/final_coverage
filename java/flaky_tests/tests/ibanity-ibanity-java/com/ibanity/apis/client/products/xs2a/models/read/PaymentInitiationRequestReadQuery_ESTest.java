/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:16:43 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.PaymentInitiationRequestReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentInitiationRequestReadQuery_ESTest extends PaymentInitiationRequestReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder(customerAccessToken=");
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-2481));
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("EG()MVQw-q*xR,", uUID0, uUID0, hashMap0);
      UUID uUID1 = paymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder(customerAccessToken=");
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID1 = paymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-2481));
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("EG()MVQw-q*xR,", uUID0, uUID0, hashMap0);
      UUID uUID1 = paymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID1 = paymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      Map<String, String> map0 = paymentInitiationRequestReadQuery0.getAdditionalHeaders();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = new PaymentInitiationRequestReadQuery("7_NpnZl:BR\"yYddH", uUID0, uUID0, map0);
      String string0 = paymentInitiationRequestReadQuery1.getCustomerAccessToken();
      assertEquals("7_NpnZl:BR\"yYddH", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("", uUID0, uUID0, hashMap0);
      String string0 = paymentInitiationRequestReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("dM\"BYHC", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = paymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("e2xR", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = paymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("EG()MVQw-q*xR,", "");
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("EG()MVQw-q*xR,", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = paymentInitiationRequestReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.canEqual(paymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.canEqual(paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      String string0 = paymentInitiationRequestReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = paymentInitiationRequestReadQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = paymentInitiationRequestReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = new PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery1.equals(paymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = new PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery1.equals(paymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = new PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery1);
      assertFalse(paymentInitiationRequestReadQuery1.equals((Object)paymentInitiationRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("!/<FGmSv5:>Au7", uUID0, uUID0, (Map<String, String>) null);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = new PaymentInitiationRequestReadQuery("!/<FGmSv5:>Au7", uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = paymentInitiationRequestReadQuery1.equals(paymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = new PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery1.equals(paymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.financialInstitutionId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery1);
      assertFalse(boolean0);
      assertFalse(paymentInitiationRequestReadQuery1.equals((Object)paymentInitiationRequestReadQuery0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.customerAccessToken("d)IQ{pAByGf;= | gj");
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery1);
      assertFalse(paymentInitiationRequestReadQuery1.equals((Object)paymentInitiationRequestReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("Zq_c=", uUID0, uUID0, (Map<String, String>) null);
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.customerAccessToken("Mg=OXbU) ^'nuG2");
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder1.build();
      boolean boolean0 = paymentInitiationRequestReadQuery1.equals(paymentInitiationRequestReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("Zq_c=", uUID0, uUID0, (Map<String, String>) null);
      Object object0 = new Object();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = new PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = new PaymentInitiationRequestReadQuery("6>ZNeiQ,\u0004]dvq@r1", uUID0, uUID0, (Map<String, String>) null);
      paymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      paymentInitiationRequestReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.paymentInitiationRequestId(uUID0);
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery1 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      boolean boolean0 = paymentInitiationRequestReadQuery0.equals(paymentInitiationRequestReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      String string0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.toString();
      assertEquals("PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder(customerAccessToken=null, financialInstitutionId=null, paymentInitiationRequestId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentInitiationRequestReadQuery.PaymentInitiationRequestReadQueryBuilder paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0 = PaymentInitiationRequestReadQuery.builder();
      PaymentInitiationRequestReadQuery paymentInitiationRequestReadQuery0 = paymentInitiationRequestReadQuery_PaymentInitiationRequestReadQueryBuilder0.build();
      String string0 = paymentInitiationRequestReadQuery0.toString();
      assertEquals("PaymentInitiationRequestReadQuery(customerAccessToken=null, financialInstitutionId=null, paymentInitiationRequestId=null, additionalHeaders={})", string0);
  }
}
