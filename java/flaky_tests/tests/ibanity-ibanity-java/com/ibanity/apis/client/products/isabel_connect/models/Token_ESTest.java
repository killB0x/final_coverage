/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:54:17 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.isabel_connect.models.AccessToken;
import com.ibanity.apis.client.products.isabel_connect.models.InitialToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshExpiresIn((-321));
      accessToken0.hashCode();
      assertEquals((-321), accessToken0.getRefreshExpiresIn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setExpiresIn((-494));
      initialToken0.hashCode();
      assertEquals((-494), initialToken0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshExpiresIn((-166));
      AccessToken accessToken1 = new AccessToken();
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertEquals((-166), accessToken0.getRefreshExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      accessToken0.setExpiresIn((-1581));
      boolean boolean0 = accessToken1.equals(accessToken0);
      assertEquals((-1581), accessToken0.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setAccessToken((String) null);
      assertNull(initialToken0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.toString();
      assertEquals("InitialToken(super=Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, refreshExpiresIn=0, scope=null), accessToken=null, refreshToken=null)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setTokenType("bgbi");
      String string0 = accessToken0.getTokenType();
      assertEquals("bgbi", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setTokenType("");
      String string0 = accessToken0.getTokenType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setScope("");
      String string0 = initialToken0.getScope();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshToken("M/N~R`y9enG.M_B");
      String string0 = accessToken0.getRefreshToken();
      assertEquals("M/N~R`y9enG.M_B", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshToken("");
      String string0 = initialToken0.getRefreshToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setRefreshExpiresIn(366);
      int int0 = initialToken0.getRefreshExpiresIn();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshExpiresIn((-1138));
      int int0 = accessToken0.getRefreshExpiresIn();
      assertEquals((-1138), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setExpiresIn(59);
      int int0 = accessToken0.getExpiresIn();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setExpiresIn((-113));
      int int0 = initialToken0.getExpiresIn();
      assertEquals((-113), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setAccessToken(", scope=");
      String string0 = accessToken0.getAccessToken();
      assertEquals(", scope=", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setAccessToken("");
      String string0 = accessToken0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      boolean boolean0 = accessToken0.canEqual(accessToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      boolean boolean0 = accessToken0.canEqual("AccessToken(super=Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, refreshExpiresIn=0, scope=null), accessToken=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      String string0 = accessToken0.getTokenType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      int int0 = initialToken0.getExpiresIn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      String string0 = accessToken0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      String string0 = initialToken0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      int int0 = accessToken0.getRefreshExpiresIn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setScope("P',$%*w_.");
      AccessToken accessToken1 = new AccessToken();
      assertFalse(accessToken1.equals((Object)accessToken0));
      
      accessToken1.setScope("P',$%*w_.");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertTrue(accessToken1.equals((Object)accessToken0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      assertTrue(accessToken1.equals((Object)accessToken0));
      
      accessToken1.setScope("com.ibanity.apis.client.products.isabel_connect.models.Token$TokenBuilder");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertFalse(accessToken1.equals((Object)accessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken.AccessTokenBuilder<?, ?> accessToken_AccessTokenBuilder0 = AccessToken.builder();
      AccessToken accessToken1 = new AccessToken(accessToken_AccessTokenBuilder0);
      assertTrue(accessToken1.equals((Object)accessToken0));
      
      accessToken1.setScope("m=DlmMX7}P~6");
      boolean boolean0 = accessToken1.equals(accessToken0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setTokenType(")8K-x'");
      AccessToken accessToken1 = new AccessToken();
      assertFalse(accessToken1.equals((Object)accessToken0));
      
      accessToken1.setTokenType(")8K-x'");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertTrue(accessToken1.equals((Object)accessToken0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setTokenType("C3/");
      AccessToken accessToken1 = new AccessToken();
      boolean boolean0 = accessToken1.equals(accessToken0);
      assertEquals(0, accessToken1.getRefreshExpiresIn());
      assertFalse(accessToken0.equals((Object)accessToken1));
      assertFalse(boolean0);
      assertEquals(0, accessToken1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken.AccessTokenBuilder<?, ?> accessToken_AccessTokenBuilder0 = AccessToken.builder();
      accessToken0.setTokenType("xS");
      AccessToken accessToken1 = new AccessToken(accessToken_AccessTokenBuilder0);
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertFalse(boolean0);
      assertEquals(0, accessToken1.getRefreshExpiresIn());
      assertEquals(0, accessToken1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      accessToken0.setRefreshToken("com.ibanity.apis.client.products.isabel_connect.models.InitialToken");
      assertFalse(accessToken0.equals((Object)accessToken1));
      
      accessToken1.setRefreshToken("com.ibanity.apis.client.products.isabel_connect.models.InitialToken");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertTrue(accessToken0.equals((Object)accessToken1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      accessToken1.setAccessToken("");
      accessToken0.setAccessToken("");
      assertTrue(accessToken0.equals((Object)accessToken1));
      
      accessToken1.setRefreshToken("");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      assertTrue(accessToken1.equals((Object)accessToken0));
      
      accessToken0.setRefreshToken("com.ibanity.apis.client.products.isabel_connect.models.InitialToken");
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      assertTrue(accessToken1.equals((Object)accessToken0));
      
      accessToken1.setAccessToken(", refreshExpiresIn=");
      accessToken0.equals(accessToken1);
      assertEquals(0, accessToken0.getRefreshExpiresIn());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setAccessToken("L");
      AccessToken accessToken1 = new AccessToken();
      accessToken0.equals(accessToken1);
      assertEquals(0, accessToken1.getExpiresIn());
      assertEquals(0, accessToken1.getRefreshExpiresIn());
      assertEquals(0, accessToken0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshExpiresIn(2104);
      AccessToken accessToken1 = new AccessToken();
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertEquals(2104, accessToken0.getRefreshExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken accessToken1 = new AccessToken();
      accessToken0.setExpiresIn((-1178));
      boolean boolean0 = accessToken0.equals(accessToken1);
      assertEquals((-1178), accessToken0.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setScope("");
      initialToken0.hashCode();
      assertEquals(0, initialToken0.getExpiresIn());
      assertEquals(0, initialToken0.getRefreshExpiresIn());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setTokenType(", scope=");
      initialToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      accessToken0.setRefreshToken("M/N~R`y9enG.M_B");
      accessToken0.hashCode();
      assertEquals(0, accessToken0.getRefreshExpiresIn());
      assertEquals(0, accessToken0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setAccessToken("w.44rO");
      initialToken0.hashCode();
      assertEquals(0, initialToken0.getRefreshExpiresIn());
      assertEquals(0, initialToken0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AccessToken accessToken0 = new AccessToken();
      AccessToken.AccessTokenBuilder<?, ?> accessToken_AccessTokenBuilder0 = accessToken0.toBuilder();
      assertNotNull(accessToken_AccessTokenBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InitialToken initialToken0 = new InitialToken();
      initialToken0.setScope("m=DlmMX7}P~6");
      String string0 = initialToken0.getScope();
      assertEquals("m=DlmMX7}P~6", string0);
  }
}
