/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:59:39 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.refresh;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.refresh.TokenRefreshQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenRefreshQuery_ESTest extends TokenRefreshQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = TokenRefreshQuery.builder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.refreshToken("ti{WROTXDy/F2I,/\"");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getRefreshToken();
      assertEquals("ti{WROTXDy/F2I,/\"", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = TokenRefreshQuery.builder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.refreshToken("");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getRefreshToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.clientSecret("RP:bz\"XIFh}XYO");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getClientSecret();
      assertEquals("RP:bz\"XIFh}XYO", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.clientSecret("");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getClientSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setAdditionalHeaders((Map<String, String>) null);
      Map<String, String> map0 = tokenRefreshQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder1 = tokenRefreshQuery_TokenRefreshQueryBuilder0.additionalHeaders(hashMap0);
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder1.build();
      Map<String, String> map0 = tokenRefreshQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      tokenRefreshQuery0.setAdditionalHeaders(hashMap0);
      Map<String, String> map0 = tokenRefreshQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.canEqual(tokenRefreshQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.canEqual("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getClientSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      String string0 = tokenRefreshQuery0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      assertTrue(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      
      tokenRefreshQuery1.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setAdditionalHeaders((Map<String, String>) null);
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      assertFalse(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      
      tokenRefreshQuery1.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertTrue(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setAdditionalHeaders((Map<String, String>) null);
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertFalse(boolean0);
      assertFalse(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setClientSecret("");
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      assertFalse(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      
      tokenRefreshQuery1.setClientSecret("");
      boolean boolean0 = tokenRefreshQuery1.equals(tokenRefreshQuery0);
      assertTrue(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      assertTrue(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      
      tokenRefreshQuery1.setClientSecret("kPN@b?O&TO~r^c,Cb");
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertFalse(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.clientSecret("RP:bz\"XIFh}XYO");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      tokenRefreshQuery0.setRefreshToken(")");
      assertFalse(tokenRefreshQuery0.equals((Object)tokenRefreshQuery1));
      
      tokenRefreshQuery1.setRefreshToken(")");
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertTrue(tokenRefreshQuery0.equals((Object)tokenRefreshQuery1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = TokenRefreshQuery.builder();
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = tokenRefreshQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.clientSecret("RP:bz\"XIFh}XYO");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      tokenRefreshQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setRefreshToken("");
      tokenRefreshQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setAdditionalHeaders((Map<String, String>) null);
      tokenRefreshQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      tokenRefreshQuery0.setRefreshToken("TokenRefreshQuery.TokenRefreshQueryBuilder(refreshToken=");
      TokenRefreshQuery tokenRefreshQuery1 = new TokenRefreshQuery();
      boolean boolean0 = tokenRefreshQuery0.equals(tokenRefreshQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenRefreshQuery tokenRefreshQuery0 = new TokenRefreshQuery();
      String string0 = tokenRefreshQuery0.toString();
      assertEquals("TokenRefreshQuery(refreshToken=null, clientSecret=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = TokenRefreshQuery.builder();
      String string0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.toString();
      assertEquals("TokenRefreshQuery.TokenRefreshQueryBuilder(refreshToken=null, clientSecret=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenRefreshQuery.TokenRefreshQueryBuilder tokenRefreshQuery_TokenRefreshQueryBuilder0 = new TokenRefreshQuery.TokenRefreshQueryBuilder();
      tokenRefreshQuery_TokenRefreshQueryBuilder0.refreshToken("xP Y)9BTSlGw");
      TokenRefreshQuery tokenRefreshQuery0 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      TokenRefreshQuery tokenRefreshQuery1 = tokenRefreshQuery_TokenRefreshQueryBuilder0.build();
      assertTrue(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      
      tokenRefreshQuery1.setRefreshToken((String) null);
      boolean boolean0 = tokenRefreshQuery1.equals(tokenRefreshQuery0);
      assertFalse(tokenRefreshQuery1.equals((Object)tokenRefreshQuery0));
      assertFalse(boolean0);
  }
}
