/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:40:32 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.FinancialInstitutionAccount;
import java.time.Instant;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionAccount_ESTest extends FinancialInstitutionAccount_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.ofEpochMilli(3868L);
      financialInstitutionAccount0.setUpdatedAt(instant0);
      Instant instant1 = financialInstitutionAccount0.getUpdatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Random.setNextRandom((-1712));
      UUID uUID0 = MockUUID.fromString("account");
      financialInstitutionAccount0.setFinancialInstitutionUserId(uUID0);
      UUID uUID1 = financialInstitutionAccount0.getFinancialInstitutionUserId();
      assertEquals("b0060000-b106-4000-b206-0000b3060000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionAccount0.setFinancialInstitutionUserId(uUID0);
      UUID uUID1 = financialInstitutionAccount0.getFinancialInstitutionUserId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount0.setCreatedAt(instant0);
      Instant instant1 = financialInstitutionAccount0.getCreatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      boolean boolean0 = financialInstitutionAccount0.canEqual(financialInstitutionAccount0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionAccount0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = null;
      try {
        financialInstitutionAccount0 = new FinancialInstitutionAccount((FinancialInstitutionAccount.FinancialInstitutionAccountBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.xs2a.models.Account$AccountBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = financialInstitutionAccount0.getUpdatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = financialInstitutionAccount0.getCreatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      UUID uUID0 = financialInstitutionAccount0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount0.setUpdatedAt(instant0);
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      financialInstitutionAccount1.setUpdatedAt(instant0);
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount1.setUpdatedAt(instant0);
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount1.setCreatedAt(instant0);
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      financialInstitutionAccount0.setCreatedAt(instant0);
      boolean boolean0 = financialInstitutionAccount1.equals(financialInstitutionAccount0);
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount0.setCreatedAt(instant0);
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      UUID uUID0 = MockUUID.fromString("financialInstitutionAccount");
      financialInstitutionAccount0.setFinancialInstitutionUserId(uUID0);
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      financialInstitutionAccount1.setFinancialInstitutionUserId(uUID0);
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      UUID uUID0 = MockUUID.fromString("account");
      financialInstitutionAccount1.setFinancialInstitutionUserId(uUID0);
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      UUID uUID0 = MockUUID.fromString("account");
      financialInstitutionAccount1.setFinancialInstitutionUserId(uUID0);
      boolean boolean0 = financialInstitutionAccount1.equals(financialInstitutionAccount0);
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      assertTrue(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      
      financialInstitutionAccount1.setAvailability("account");
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertFalse(financialInstitutionAccount1.equals((Object)financialInstitutionAccount0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionAccount0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.ofEpochSecond((-2399L));
      financialInstitutionAccount0.setUpdatedAt(instant0);
      financialInstitutionAccount0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      financialInstitutionAccount0.setCreatedAt(instant0);
      financialInstitutionAccount0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionAccount0.setFinancialInstitutionUserId(uUID0);
      financialInstitutionAccount0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      String string0 = financialInstitutionAccount0.toString();
      assertEquals("FinancialInstitutionAccount(super=Account(id=null, selfLink=null, financialInstitutionId=null, requestId=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, synchronizedAt=null, latestSynchronization=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null, authorizedAt=null, authorizationExpirationExpectedAt=null, availability=null), financialInstitutionUserId=null, createdAt=null, updatedAt=null)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      FinancialInstitutionAccount.FinancialInstitutionAccountBuilder<?, ?> financialInstitutionAccount_FinancialInstitutionAccountBuilder0 = financialInstitutionAccount0.toBuilder();
      assertNotNull(financialInstitutionAccount_FinancialInstitutionAccountBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionAccount.FinancialInstitutionAccountBuilder<?, ?> financialInstitutionAccount_FinancialInstitutionAccountBuilder0 = FinancialInstitutionAccount.builder();
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount(financialInstitutionAccount_FinancialInstitutionAccountBuilder0);
      assertNull(financialInstitutionAccount0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount0.setCreatedAt(instant0);
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      boolean boolean0 = financialInstitutionAccount1.equals(financialInstitutionAccount0);
      assertFalse(boolean0);
      assertFalse(financialInstitutionAccount0.equals((Object)financialInstitutionAccount1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FinancialInstitutionAccount financialInstitutionAccount0 = new FinancialInstitutionAccount();
      Instant instant0 = MockInstant.now();
      financialInstitutionAccount0.setUpdatedAt(instant0);
      FinancialInstitutionAccount financialInstitutionAccount1 = new FinancialInstitutionAccount();
      boolean boolean0 = financialInstitutionAccount0.equals(financialInstitutionAccount1);
      assertFalse(boolean0);
  }
}
