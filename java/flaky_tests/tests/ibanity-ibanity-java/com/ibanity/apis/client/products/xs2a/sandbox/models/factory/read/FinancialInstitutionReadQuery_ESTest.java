/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:28:56 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read.FinancialInstitutionReadQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionReadQuery_ESTest extends FinancialInstitutionReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-448));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      UUID uUID1 = financialInstitutionReadQuery0.getFinancialInstitutionId();
      assertEquals("c0010000-c101-4000-8201-0000c3010000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      boolean boolean0 = financialInstitutionReadQuery0.canEqual(financialInstitutionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      boolean boolean0 = financialInstitutionReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      UUID uUID1 = financialInstitutionReadQuery0.getFinancialInstitutionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery(uUID0);
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery((UUID) null);
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery1.equals(financialInstitutionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      boolean boolean0 = financialInstitutionReadQuery0.equals(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = new FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      financialInstitutionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      String string0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder(financialInstitutionId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.financialInstitutionId(uUID0);
      assertSame(financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0, financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      String string0 = financialInstitutionReadQuery0.toString();
      assertEquals("FinancialInstitutionReadQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0);
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = new FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      financialInstitutionReadQuery0.hashCode();
  }
}
