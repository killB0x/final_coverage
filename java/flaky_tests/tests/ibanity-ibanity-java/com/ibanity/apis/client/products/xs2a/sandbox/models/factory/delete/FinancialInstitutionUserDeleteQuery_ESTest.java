/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:32:43 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete.FinancialInstitutionUserDeleteQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionUserDeleteQuery_ESTest extends FinancialInstitutionUserDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = new FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery((UUID) null);
      UUID uUID0 = financialInstitutionUserDeleteQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-1212));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      UUID uUID1 = financialInstitutionUserDeleteQuery0.getFinancialInstitutionUserId();
      assertEquals("bc040000-bd04-4000-be04-0000bf040000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery((UUID) null);
      boolean boolean0 = financialInstitutionUserDeleteQuery0.canEqual(financialInstitutionUserDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery((UUID) null);
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      boolean boolean0 = financialInstitutionUserDeleteQuery0.canEqual(financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      UUID uUID1 = financialInstitutionUserDeleteQuery0.getFinancialInstitutionUserId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery1 = new FinancialInstitutionUserDeleteQuery(uUID0);
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(financialInstitutionUserDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery1 = new FinancialInstitutionUserDeleteQuery(uUID0);
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(financialInstitutionUserDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionUserDeleteQuery1.equals((Object)financialInstitutionUserDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery1 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(financialInstitutionUserDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(financialInstitutionUserDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery((UUID) null);
      financialInstitutionUserDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      financialInstitutionUserDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder1 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      assertSame(financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder1, financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      String string0 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.toString();
      assertEquals("FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder(financialInstitutionUserId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionUserDeleteQuery.FinancialInstitutionUserDeleteQueryBuilder financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0 = FinancialInstitutionUserDeleteQuery.builder();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.build();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery1 = financialInstitutionUserDeleteQuery_FinancialInstitutionUserDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionUserDeleteQuery0.equals(financialInstitutionUserDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserDeleteQuery financialInstitutionUserDeleteQuery0 = new FinancialInstitutionUserDeleteQuery(uUID0);
      String string0 = financialInstitutionUserDeleteQuery0.toString();
      assertEquals("FinancialInstitutionUserDeleteQuery(financialInstitutionUserId=00000000-0100-4000-8200-000003000000)", string0);
  }
}
