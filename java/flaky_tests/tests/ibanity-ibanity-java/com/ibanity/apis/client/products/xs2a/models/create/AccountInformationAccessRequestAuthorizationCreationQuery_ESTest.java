/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:33:19 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.create.AccountInformationAccessRequestAuthorizationCreationQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountInformationAccessRequestAuthorizationCreationQuery_ESTest extends AccountInformationAccessRequestAuthorizationCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString("ezE/8w");
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AccountInformationAccessRequestAuthorizationCreationQuery");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "Y|qwbZ`*{`+z''.", "BIa{kP6IeZ", (Map<String, String>) null, (Map<String, String>) null);
      accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertEquals("Y|qwbZ`*{`+z''.", accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("BIa{kP6IeZ", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.fromString("+VH.rURs~u)m]z");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "/ap", "", hashMap0, hashMap0);
      accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertEquals("/ap", accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery((UUID) null, (UUID) null, "", "", hashMap0, hashMap0);
      hashMap0.put("zw|Jv", "");
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(192);
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "", "", map0, map0);
      UUID uUID1 = accountInformationAccessRequestAuthorizationCreationQuery1.getFinancialInstitutionId();
      assertEquals((-9079256845507362816L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "", "", map0, map0);
      UUID uUID1 = accountInformationAccessRequestAuthorizationCreationQuery1.getFinancialInstitutionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.customerAccessToken("#x?Ig-q]Al8Y:g>:q+I");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("#x?Ig-q]Al8Y:g>:q+I", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.customerAccessToken("");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString("ezE/8w");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, (String) null, "h.t", map0, map0);
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery1.getCredentialsEncryptionKey();
      assertEquals("h.t", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("\"Y81*Tjmr\"zH");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "\"Y81*Tjmr\"zH", "\"Y81*Tjmr\"zH", hashMap0, hashMap0);
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "N^t]Few}Z;!Co0?");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "N^t]Few}Z;!Co0?", "", hashMap0, hashMap0);
      accountInformationAccessRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertEquals("", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
      assertEquals("N^t]Few}Z;!Co0?", accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Random.setNextRandom((-2237));
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "N^t]Few}Z;!Co0?", "", hashMap0, hashMap0);
      accountInformationAccessRequestAuthorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertEquals("", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
      assertEquals("N^t]Few}Z;!Co0?", accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "N^t]Few}Z;!Co0?", "", hashMap0, hashMap0);
      accountInformationAccessRequestAuthorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertEquals("N^t]Few}Z;!Co0?", accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.canEqual(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "", "", hashMap0, (Map<String, String>) null);
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = accountInformationAccessRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = accountInformationAccessRequestAuthorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestAuthorizationCreationQuery1.equals((Object)accountInformationAccessRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNotNull(map0);
      
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "okW[J/D[Mg2i j0", "okW[J/D[Mg2i j0", map0, map0);
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.accountInformationAccessRequestId(uUID0);
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.customerAccessToken("okW[J/D[Mg2i j0");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery2 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.customerAccessToken("AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder(financialInstitutionId=");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestAuthorizationCreationQuery1.equals((Object)accountInformationAccessRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNotNull(map0);
      
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "okW[J/D[Mg2i j0", "okW[J/D[Mg2i j0", map0, map0);
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery2 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery2);
      assertFalse(accountInformationAccessRequestAuthorizationCreationQuery2.equals((Object)accountInformationAccessRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(accountInformationAccessRequestAuthorizationCreationQuery1.equals((Object)accountInformationAccessRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNotNull(map0);
      
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "okW[J/D[Mg2i j0", "okW[J/D[Mg2i j0", map0, map0);
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery1);
      assertFalse(accountInformationAccessRequestAuthorizationCreationQuery1.equals((Object)accountInformationAccessRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNotNull(map0);
      
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, "okW[J/D[Mg2i j0", "okW[J/D[Mg2i j0", map0, map0);
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery0.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = new AccountInformationAccessRequestAuthorizationCreationQuery(uUID0, uUID0, ":Y0F_Y]v6", "287^", hashMap0, hashMap0);
      hashMap0.getOrDefault(accountInformationAccessRequestAuthorizationCreationQuery0, "287^");
      assertEquals("287^", accountInformationAccessRequestAuthorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.toString();
      assertEquals("AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder(financialInstitutionId=null, accountInformationAccessRequestId=null, customerAccessToken=null, credentialsEncryptionKey=null, queryParameters$value=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery1 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationCreationQuery1.equals(accountInformationAccessRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = new AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder();
      accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      accountInformationAccessRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationCreationQuery.AccountInformationAccessRequestAuthorizationCreationQueryBuilder accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0 = AccountInformationAccessRequestAuthorizationCreationQuery.builder();
      AccountInformationAccessRequestAuthorizationCreationQuery accountInformationAccessRequestAuthorizationCreationQuery0 = accountInformationAccessRequestAuthorizationCreationQuery_AccountInformationAccessRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationCreationQuery0.toString();
      assertEquals("AccountInformationAccessRequestAuthorizationCreationQuery(financialInstitutionId=null, accountInformationAccessRequestId=null, customerAccessToken=null, credentialsEncryptionKey=null, queryParameters={}, additionalHeaders={})", string0);
  }
}
