/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 07:41:57 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.xs2a.models.Account;
import com.ibanity.apis.client.products.xs2a.models.Synchronization;
import java.math.BigDecimal;
import java.math.MathContext;
import java.time.Clock;
import java.time.Instant;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setSynchronizedAt(instant0);
      Instant instant1 = account0.getSynchronizedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype(", authorizedAt=");
      String string0 = account0.getSubtype();
      assertEquals(", authorizedAt=", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("");
      String string0 = account0.getSubtype();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Account account0 = new Account();
      account0.setSelfLink("synchronization");
      String string0 = account0.getSelfLink();
      assertEquals("synchronization", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Account account0 = new Account();
      account0.setSelfLink("");
      String string0 = account0.getSelfLink();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("{synchronizationId}");
      String string0 = account0.getRequestId();
      assertEquals("{synchronizationId}", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("");
      String string0 = account0.getRequestId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Account account0 = new Account();
      account0.setReferenceType("account");
      String string0 = account0.getReferenceType();
      assertEquals("account", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Account account0 = new Account();
      account0.setReferenceType("");
      String string0 = account0.getReferenceType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("jLG-%=u");
      String string0 = account0.getReference();
      assertEquals("jLG-%=u", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("");
      String string0 = account0.getReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("Account(id=null, selfLink=null, financialInstitutionId=null, requestId=null, subtype= , currency=Dtn/yJMHPS'7:83wj@, description=null, reference=Dtn/yJMHPS'7:83wj@, referenceType=null, currentBalance=null, availableBalance=null, synchronizedAt=null, latestSynchronization=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null, authorizedAt=null, authorizationExpirationExpectedAt=null, availability= )");
      String string0 = account0.getProduct();
      assertEquals("Account(id=null, selfLink=null, financialInstitutionId=null, requestId=null, subtype= , currency=Dtn/yJMHPS'7:83wj@, description=null, reference=Dtn/yJMHPS'7:83wj@, referenceType=null, currentBalance=null, availableBalance=null, synchronizedAt=null, latestSynchronization=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null, authorizedAt=null, authorizationExpirationExpectedAt=null, availability= )", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("");
      String string0 = account0.getProduct();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      Synchronization synchronization1 = account0.getLatestSynchronization();
      assertNull(synchronization1.getSubtype());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Account account0 = new Account();
      account0.setInternalReference("account");
      String string0 = account0.getInternalReference();
      assertEquals("account", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Account account0 = new Account();
      account0.setInternalReference("");
      String string0 = account0.getInternalReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Random.setNextRandom((-3521));
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString((String) null);
      account0.setId(uUID0);
      UUID uUID1 = account0.getId();
      assertEquals((-4535969246436573184L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("");
      account0.setId(uUID0);
      UUID uUID1 = account0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Account account0 = new Account();
      account0.setHolderName(", currency=");
      String string0 = account0.getHolderName();
      assertEquals(", currency=", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Account account0 = new Account();
      account0.setHolderName("");
      String string0 = account0.getHolderName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Random.setNextRandom(957);
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      UUID uUID1 = account0.getFinancialInstitutionId();
      assertEquals((-4827014372423155712L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      UUID uUID1 = account0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Account account0 = new Account();
      account0.setDescription("eg");
      String string0 = account0.getDescription();
      assertEquals("eg", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Account account0 = new Account();
      account0.setDescription("");
      String string0 = account0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      Instant instant1 = account0.getCurrentBalanceVariationObservedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Account account0 = new Account();
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      account0.setCurrentBalanceChangedAt(instant0);
      Instant instant1 = account0.getCurrentBalanceChangedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setCurrentBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getCurrentBalance();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = new BigDecimal((long) (-389));
      account0.setCurrentBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getCurrentBalance();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = new BigDecimal(1789L);
      account0.setCurrentBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getCurrentBalance();
      assertEquals((byte) (-3), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("$E");
      String string0 = account0.getCurrency();
      assertEquals("$E", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("");
      String string0 = account0.getCurrency();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli((-364L));
      account0.setAvailableBalanceVariationObservedAt(instant0);
      Instant instant1 = account0.getAvailableBalanceVariationObservedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli((-364L));
      account0.setAvailableBalanceReferenceDate(instant0);
      Instant instant1 = account0.getAvailableBalanceReferenceDate();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account0.setAvailableBalanceChangedAt(instant0);
      Instant instant1 = account0.getAvailableBalanceChangedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      account0.setAvailableBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getAvailableBalance();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      account0.setAvailableBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getAvailableBalance();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = new BigDecimal((-330.6789));
      account0.setAvailableBalance(bigDecimal0);
      BigDecimal bigDecimal1 = account0.getAvailableBalance();
      assertEquals((byte) (-74), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Account account0 = new Account();
      account0.setAvailability("Synchronization(id=");
      String string0 = account0.getAvailability();
      assertEquals("Synchronization(id=", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Account account0 = new Account();
      account0.setAvailability("");
      String string0 = account0.getAvailability();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizedAt(instant0);
      Instant instant1 = account0.getAuthorizedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond((-757L));
      account0.setAuthorizationExpirationExpectedAt(instant0);
      Instant instant1 = account0.getAuthorizationExpirationExpectedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Account account0 = new Account();
      boolean boolean0 = account0.canEqual(account0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Account account0 = new Account();
      boolean boolean0 = account0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Account account0 = null;
      try {
        account0 = new Account((Account.AccountBuilder<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibanity.apis.client.products.xs2a.models.Account$AccountBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = account0.getAvailableBalance();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getCurrency();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getProduct();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getSynchronizedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = account0.getCurrentBalance();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = account0.getLatestSynchronization();
      assertNull(synchronization0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getAvailableBalanceChangedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = account0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getSubtype();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getAvailableBalanceReferenceDate();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getAuthorizationExpirationExpectedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getInternalReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getCurrentBalanceVariationObservedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getHolderName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getReferenceType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getCurrentBalanceReferenceDate();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = account0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getAvailableBalanceVariationObservedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getAvailability();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getAuthorizedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = account0.getCurrentBalanceChangedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Account account0 = new Account();
      account0.setAvailability("account");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAvailability("account");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setAvailability("account");
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Account account0 = new Account();
      account0.setAvailability("account");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertEquals("account", account0.getAvailability());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizationExpirationExpectedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAuthorizationExpirationExpectedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizationExpirationExpectedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizationExpirationExpectedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAuthorizedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      Instant instant0 = MockInstant.now();
      account1.setAvailableBalanceVariationObservedAt(instant0);
      assertFalse(account1.equals((Object)account0));
      
      account0.setAvailableBalanceVariationObservedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceVariationObservedAt(instant0);
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      Instant instant0 = MockInstant.now();
      account1.setAvailableBalanceVariationObservedAt(instant0);
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceReferenceDate(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAvailableBalanceReferenceDate(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setAvailableBalanceReferenceDate(instant0);
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account0.setAvailableBalanceReferenceDate(instant0);
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceChangedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAvailableBalanceChangedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceChangedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceChangedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setCurrentBalanceVariationObservedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setCurrentBalanceReferenceDate(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceChangedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setCurrentBalanceChangedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceChangedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceChangedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setHolderName("account");
      assertFalse(account1.equals((Object)account0));
      
      account0.setHolderName("account");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Account account0 = new Account();
      account0.setHolderName("account");
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
      assertEquals("account", account0.getHolderName());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setHolderName("account");
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("account");
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
      assertEquals("account", account1.getProduct());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setProduct("{accountId}");
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("account");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertEquals("account", account0.getProduct());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setInternalReference("account");
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setInternalReference("{accountId}");
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setSynchronizedAt(instant0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setSynchronizedAt(instant0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setSynchronizedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setAvailableBalance(bigDecimal0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setAvailableBalance(bigDecimal0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setAvailableBalance(bigDecimal0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setAvailableBalance(bigDecimal0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Account account0 = new Account();
      MathContext mathContext0 = new MathContext(740);
      BigDecimal bigDecimal0 = new BigDecimal(1184.489424, mathContext0);
      account0.setCurrentBalance(bigDecimal0);
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      account0.setCurrentBalance(bigDecimal0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      account0.setCurrentBalance(bigDecimal0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Account account0 = new Account();
      account0.setReferenceType(", availableBalanceReferenceDate=");
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertEquals(", availableBalanceReferenceDate=", account1.getReferenceType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account0.setReferenceType("account");
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account0.setReferenceType("{accountId}");
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("{accountId}");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setReference("{accountId}");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("account");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertEquals("account", account0.getReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Account account0 = new Account();
      account0.setDescription("iq7\"R(WI2pUV");
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
      assertEquals("iq7\"R(WI2pUV", account1.getDescription());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setDescription("{accountId}");
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setDescription("{accountId}");
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("account");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setCurrency("account");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("account");
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertEquals("account", account0.getCurrency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("account");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
      assertEquals("account", account0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("{accountId}");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setSubtype("{accountId}");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("{accountId}");
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
      assertEquals("{accountId}", account0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("{accountId}");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
      assertEquals("{accountId}", account0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("4");
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = account0.toBuilder();
      Account account1 = new Account(account_AccountBuilder0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
      assertEquals("4", account1.getRequestId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setRequestId("account");
      boolean boolean0 = account0.equals(account1);
      assertFalse(account1.equals((Object)account0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("%~!n0]pBGJiD5*H<)|");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertEquals("%~!n0]pBGJiD5*H<)|", account0.getRequestId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setFinancialInstitutionId(uUID0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Account account0 = new Account();
      account0.setSelfLink("Y!Q'[G@9*h$0j");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setSelfLink("Y!Q'[G@9*h$0j");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setSelfLink("account");
      boolean boolean0 = account0.equals(account1);
      assertFalse(account1.equals((Object)account0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      account1.setSelfLink("{accountId}");
      boolean boolean0 = account1.equals(account0);
      assertFalse(account1.equals((Object)account0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("{accountId}");
      account0.setId(uUID0);
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setId(uUID0);
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("account");
      account0.setId(uUID0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("account");
      account0.setId(uUID0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Account account0 = new Account();
      boolean boolean0 = account0.equals("{accountId}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Account account0 = new Account();
      boolean boolean0 = account0.equals(account0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizationExpirationExpectedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      account0.setAvailableBalanceVariationObservedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      account0.setAvailableBalanceReferenceDate(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Account account0 = new Account();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Account account0 = new Account();
      account0.setInternalReference("F#B(B(@9+Nip'eGS");
      account0.hashCode();
      assertEquals("F#B(B(@9+Nip'eGS", account0.getInternalReference());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli(1101L);
      account0.setSynchronizedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setCurrentBalance(bigDecimal0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("account");
      account0.hashCode();
      assertEquals("account", account0.getReference());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Account account0 = new Account();
      account0.setDescription("");
      account0.hashCode();
      assertEquals("", account0.getDescription());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("JUe~ ");
      account0.hashCode();
      assertEquals("JUe~ ", account0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Account account0 = new Account();
      account0.setSelfLink("y6O&}9<:.2*Iv");
      account0.hashCode();
      assertEquals("y6O&}9<:.2*Iv", account0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Account account0 = new Account();
      account0.setReferenceType("{accountId}");
      account0.hashCode();
      assertEquals("{accountId}", account0.getReferenceType());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("{accountId}");
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Account account0 = new Account();
      account0.setReference("{accountId}");
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertEquals("{accountId}", account0.getReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("account");
      account0.setId(uUID0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceChangedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Account account0 = new Account();
      account0.setInternalReference("account");
      Account account1 = new Account();
      assertFalse(account1.equals((Object)account0));
      
      account1.setInternalReference("account");
      boolean boolean0 = account0.equals(account1);
      assertTrue(account1.equals((Object)account0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("{accountId}");
      account0.hashCode();
      assertEquals("{accountId}", account0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.toString();
      assertEquals("Account(id=null, selfLink=null, financialInstitutionId=null, requestId=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, synchronizedAt=null, latestSynchronization=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null, authorizedAt=null, authorizationExpirationExpectedAt=null, availability=null)", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("account");
      account0.hashCode();
      assertEquals("account", account0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      account0.setAvailableBalance(bigDecimal0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceChangedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.fromString("account");
      account0.setFinancialInstitutionId(uUID0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Account account0 = new Account();
      account0.setAvailability("account");
      account0.hashCode();
      assertEquals("account", account0.getAvailability());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Account.AccountBuilder<?, ?> account_AccountBuilder0 = Account.builder();
      Account account0 = new Account(account_AccountBuilder0);
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      Instant instant1 = account0.getCurrentBalanceReferenceDate();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Account account0 = new Account();
      account0.setHolderName("account");
      account0.hashCode();
      assertEquals("account", account0.getHolderName());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setSynchronizedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizedAt(instant0);
      account0.hashCode();
  }
}
