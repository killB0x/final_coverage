/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:07:06 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountReadQuery_ESTest extends AccountReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", "", (Map<String, String>) null);
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder1 = accountReadQuery_AccountReadQueryBuilder0.additionalHeaders(hashMap0);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder1.build();
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      accountReadQuery_AccountReadQueryBuilder0.additionalHeaders(hashMap0);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      hashMap0.put("", "AccountReadQuery.AccountReadQueryBuilder(accessToken=");
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", "", (Map<String, String>) null);
      accountReadQuery0.setAccountId("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery");
      String string0 = accountReadQuery0.getAccountId();
      assertEquals("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      AccountReadQuery accountReadQuery1 = new AccountReadQuery("C})1;9Rf8y50BsTT", "", map0);
      String string0 = accountReadQuery1.getAccountId();
      assertEquals("C})1;9Rf8y50BsTT", accountReadQuery1.getAccessToken());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      accountReadQuery_AccountReadQueryBuilder0.accessToken("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery");
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.getAccessToken();
      assertEquals("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", "", (Map<String, String>) null);
      String string0 = accountReadQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("fxQh_koSbM^F2HuCO", "fxQh_koSbM^F2HuCO", hashMap0);
      boolean boolean0 = accountReadQuery0.canEqual(accountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.getAccountId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      boolean boolean0 = accountReadQuery0.canEqual(map0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      assertTrue(accountReadQuery1.equals((Object)accountReadQuery0));
      
      accountReadQuery1.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.setAdditionalHeaders((Map<String, String>) null);
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      assertTrue(accountReadQuery1.equals((Object)accountReadQuery0));
      
      accountReadQuery1.setAccountId("");
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      accountReadQuery_AccountReadQueryBuilder0.accountId("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery$AccountReadQueryBuilder");
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery_AccountReadQueryBuilder0.accessToken("&G@%/?E18l[f");
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery1.equals(accountReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery_AccountReadQueryBuilder0.accessToken("");
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      accountReadQuery_AccountReadQueryBuilder0.accessToken("com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery$AccountReadQueryBuilder");
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", "", (Map<String, String>) null);
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.setAccountId("AccountReadQuery.AccountReadQueryBuilder(accessToken=com.ibanity.apis.client.products.isabel_connect.models.read.AccountReadQuery, accountId=null, additionalHeaders$value=null)");
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      accountReadQuery_AccountReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      String string0 = accountReadQuery_AccountReadQueryBuilder0.toString();
      assertEquals("AccountReadQuery.AccountReadQueryBuilder(accessToken=null, accountId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.toString();
      assertEquals("AccountReadQuery(accessToken=null, accountId=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.setAccountId("");
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.setAccessToken("'i[R<>0#u3F#NUWG/ @");
      assertEquals("'i[R<>0#u3F#NUWG/ @", accountReadQuery0.getAccessToken());
  }
}
