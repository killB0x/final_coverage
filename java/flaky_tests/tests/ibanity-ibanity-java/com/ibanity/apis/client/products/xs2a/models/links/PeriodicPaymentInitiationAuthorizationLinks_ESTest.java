/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:26:07 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.links;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationAuthorizationLinks;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationAuthorizationLinks_ESTest extends PeriodicPaymentInitiationAuthorizationLinks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("H(-,/u83.");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1.build();
      String string0 = periodicPaymentInitiationAuthorizationLinks0.getRedirect();
      assertEquals("H(-,/u83.", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1.build();
      String string0 = periodicPaymentInitiationAuthorizationLinks0.getRedirect();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.canEqual(periodicPaymentInitiationAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      String string0 = periodicPaymentInitiationAuthorizationLinks0.getRedirect();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder();
      periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("}8ob*50DNmP P");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.equals(periodicPaymentInitiationAuthorizationLinks1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("I");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.equals(periodicPaymentInitiationAuthorizationLinks1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationAuthorizationLinks1.equals((Object)periodicPaymentInitiationAuthorizationLinks0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("H(-,/u83.");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks1.equals(periodicPaymentInitiationAuthorizationLinks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.equals("/L=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.equals(periodicPaymentInitiationAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      periodicPaymentInitiationAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.redirect("/L=");
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      periodicPaymentInitiationAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder();
      String string0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder(redirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      String string0 = periodicPaymentInitiationAuthorizationLinks0.toString();
      assertEquals("PeriodicPaymentInitiationAuthorizationLinks(redirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks0 = new PeriodicPaymentInitiationAuthorizationLinks();
      PeriodicPaymentInitiationAuthorizationLinks.PeriodicPaymentInitiationAuthorizationLinksBuilder periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0 = PeriodicPaymentInitiationAuthorizationLinks.builder();
      PeriodicPaymentInitiationAuthorizationLinks periodicPaymentInitiationAuthorizationLinks1 = periodicPaymentInitiationAuthorizationLinks_PeriodicPaymentInitiationAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationAuthorizationLinks0.equals(periodicPaymentInitiationAuthorizationLinks1);
      assertTrue(boolean0);
  }
}
