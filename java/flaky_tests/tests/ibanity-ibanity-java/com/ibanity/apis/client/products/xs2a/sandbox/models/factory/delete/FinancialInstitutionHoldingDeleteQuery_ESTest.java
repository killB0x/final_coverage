/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:18:03 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete.FinancialInstitutionHoldingDeleteQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionHoldingDeleteQuery_ESTest extends FinancialInstitutionHoldingDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      financialInstitutionHoldingDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      financialInstitutionHoldingDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionHoldingId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery1.equals(financialInstitutionHoldingDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-209));
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionUserId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-397));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, (UUID) null, uUID0);
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionId();
      assertEquals("8d010000-8e01-4000-8f01-000090010000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom((-397));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, (UUID) null, uUID0);
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionHoldingId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionHoldingId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionHoldingId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-209));
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.canEqual(financialInstitutionHoldingDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.canEqual(financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionHoldingId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionHoldingId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionHoldingDeleteQuery1.equals((Object)financialInstitutionHoldingDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery1.equals(financialInstitutionHoldingDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(financialInstitutionHoldingDeleteQuery1.equals((Object)financialInstitutionHoldingDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery1.equals(financialInstitutionHoldingDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionHoldingDeleteQuery1.equals((Object)financialInstitutionHoldingDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("&[Iew");
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      financialInstitutionHoldingDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionUserId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionId(uUID0);
      assertSame(financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1, financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      String string0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.toString();
      assertEquals("FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionHoldingId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionHoldingId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      financialInstitutionHoldingDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = new FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.build();
      String string0 = financialInstitutionHoldingDeleteQuery0.toString();
      assertEquals("FinancialInstitutionHoldingDeleteQuery(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionHoldingId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0 = FinancialInstitutionHoldingDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery.FinancialInstitutionHoldingDeleteQueryBuilder financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = financialInstitutionHoldingDeleteQuery_FinancialInstitutionHoldingDeleteQueryBuilder1.build();
      UUID uUID1 = financialInstitutionHoldingDeleteQuery0.getFinancialInstitutionAccountId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery0 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingDeleteQuery financialInstitutionHoldingDeleteQuery1 = new FinancialInstitutionHoldingDeleteQuery(uUID0, uUID0, uUID0, (UUID) null);
      boolean boolean0 = financialInstitutionHoldingDeleteQuery0.equals(financialInstitutionHoldingDeleteQuery1);
      assertFalse(boolean0);
  }
}
