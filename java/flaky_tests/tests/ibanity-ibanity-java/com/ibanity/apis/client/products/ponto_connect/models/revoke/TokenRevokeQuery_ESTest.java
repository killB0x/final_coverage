/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:53:46 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.revoke;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.revoke.TokenRevokeQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenRevokeQuery_ESTest extends TokenRevokeQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = TokenRevokeQuery.builder();
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder1 = tokenRevokeQuery_TokenRevokeQueryBuilder0.token("!p!uUc8(Hp_");
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder1.build();
      String string0 = tokenRevokeQuery0.getToken();
      assertEquals("!p!uUc8(Hp_", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      tokenRevokeQuery0.setToken("");
      String string0 = tokenRevokeQuery0.getToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = TokenRevokeQuery.builder();
      tokenRevokeQuery_TokenRevokeQueryBuilder0.clientSecret("!p!uUc8(Hp_");
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      String string0 = tokenRevokeQuery0.getClientSecret();
      assertEquals("!p!uUc8(Hp_", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder1 = tokenRevokeQuery_TokenRevokeQueryBuilder0.clientSecret("");
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder1.build();
      String string0 = tokenRevokeQuery0.getClientSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setAdditionalHeaders((Map<String, String>) null);
      Map<String, String> map0 = tokenRevokeQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      tokenRevokeQuery0.setAdditionalHeaders(hashMap0);
      Map<String, String> map0 = tokenRevokeQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = TokenRevokeQuery.builder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      boolean boolean0 = tokenRevokeQuery0.canEqual(tokenRevokeQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      boolean boolean0 = tokenRevokeQuery0.canEqual(tokenRevokeQuery_TokenRevokeQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      String string0 = tokenRevokeQuery0.getClientSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      String string0 = tokenRevokeQuery0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery0.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = tokenRevokeQuery1.equals(tokenRevokeQuery0);
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setAdditionalHeaders((Map<String, String>) null);
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery1.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery1);
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setAdditionalHeaders((Map<String, String>) null);
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery1);
      assertFalse(boolean0);
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery0.setClientSecret("zewl^Qf=pUV");
      boolean boolean0 = tokenRevokeQuery1.equals(tokenRevokeQuery0);
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery1.setClientSecret(", clientSecret=");
      boolean boolean0 = tokenRevokeQuery1.equals(tokenRevokeQuery0);
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery1.setToken("");
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery1);
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      boolean boolean0 = tokenRevokeQuery0.equals(",J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder1 = tokenRevokeQuery_TokenRevokeQueryBuilder0.clientSecret("");
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder1.build();
      tokenRevokeQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setToken("");
      tokenRevokeQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setAdditionalHeaders((Map<String, String>) null);
      tokenRevokeQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setClientSecret(", clientSecret=");
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      assertFalse(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      
      tokenRevokeQuery1.setClientSecret(", clientSecret=");
      boolean boolean0 = tokenRevokeQuery1.equals(tokenRevokeQuery0);
      assertTrue(tokenRevokeQuery1.equals((Object)tokenRevokeQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenRevokeQuery tokenRevokeQuery0 = new TokenRevokeQuery();
      tokenRevokeQuery0.setToken("/rYTi|KqD(/T_dj");
      TokenRevokeQuery tokenRevokeQuery1 = new TokenRevokeQuery();
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      String string0 = tokenRevokeQuery0.toString();
      assertEquals("TokenRevokeQuery(token=null, clientSecret=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = TokenRevokeQuery.builder();
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder1 = tokenRevokeQuery_TokenRevokeQueryBuilder0.token("");
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder1.build();
      TokenRevokeQuery tokenRevokeQuery1 = tokenRevokeQuery_TokenRevokeQueryBuilder1.build();
      boolean boolean0 = tokenRevokeQuery0.equals(tokenRevokeQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tokenRevokeQuery_TokenRevokeQueryBuilder0.additionalHeaders(hashMap0);
      TokenRevokeQuery tokenRevokeQuery0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.build();
      Map<String, String> map0 = tokenRevokeQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenRevokeQuery.TokenRevokeQueryBuilder tokenRevokeQuery_TokenRevokeQueryBuilder0 = new TokenRevokeQuery.TokenRevokeQueryBuilder();
      String string0 = tokenRevokeQuery_TokenRevokeQueryBuilder0.toString();
      assertEquals("TokenRevokeQuery.TokenRevokeQueryBuilder(token=null, clientSecret=null, additionalHeaders$value=null)", string0);
  }
}
