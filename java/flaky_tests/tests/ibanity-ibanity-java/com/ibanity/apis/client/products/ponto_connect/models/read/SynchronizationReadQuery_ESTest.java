/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:00:51 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.SynchronizationReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SynchronizationReadQuery_ESTest extends SynchronizationReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      Random.setNextRandom(1197);
      UUID uUID0 = MockUUID.randomUUID();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      Map<String, String> map0 = synchronizationReadQuery0.getAdditionalHeaders();
      SynchronizationReadQuery synchronizationReadQuery1 = new SynchronizationReadQuery("U|,J760Z5:;_ll7]", uUID0, map0);
      UUID uUID1 = synchronizationReadQuery1.getSynchronizationId();
      assertEquals("ad040000-ae04-4000-af04-0000b0040000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      UUID uUID1 = synchronizationReadQuery0.getSynchronizationId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders(hashMap0);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      Map<String, String> map0 = synchronizationReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("(l| ");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("(l| ", "(l| ");
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("(l| ", uUID0, hashMap0);
      Map<String, String> map0 = synchronizationReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      String string0 = synchronizationReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.accessToken("");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      String string0 = synchronizationReadQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery(".?``PUtgH@", uUID0, hashMap0);
      boolean boolean0 = synchronizationReadQuery0.canEqual(synchronizationReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = synchronizationReadQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery(",(]D;IC=TgUv.", uUID0, hashMap0);
      String string0 = synchronizationReadQuery0.getAccessToken();
      assertEquals(",(]D;IC=TgUv.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("]%m+!{`;", (UUID) null, (Map<String, String>) null);
      Map<String, String> map0 = synchronizationReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("]%m+!{`;", (UUID) null, (Map<String, String>) null);
      UUID uUID0 = synchronizationReadQuery0.getSynchronizationId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery0.equals((Object)synchronizationReadQuery1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.equals((Object)synchronizationReadQuery0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.accessToken("");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      SynchronizationReadQuery synchronizationReadQuery1 = new SynchronizationReadQuery("", uUID0, hashMap0);
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.accessToken("X#");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery_SynchronizationReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("S>S", (UUID) null, hashMap0);
      String string0 = hashMap0.remove((Object) synchronizationReadQuery0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      String string0 = synchronizationReadQuery0.toString();
      assertEquals("SynchronizationReadQuery(accessToken=null, synchronizationId=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      String string0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.toString();
      assertEquals("SynchronizationReadQuery.SynchronizationReadQueryBuilder(accessToken=null, synchronizationId=null, additionalHeaders$value=null)", string0);
  }
}
