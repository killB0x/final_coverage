/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:58:28 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read.FinancialInstitutionAccountReadQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionAccountReadQuery_ESTest extends FinancialInstitutionAccountReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("bzQADKwZM`,O");
      financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      financialInstitutionAccountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountReadQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-746));
      UUID uUID0 = MockUUID.fromString(":7V|sojZ");
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionUserId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-746));
      UUID uUID0 = MockUUID.fromString(":7V|sojZ");
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountReadQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-746));
      UUID uUID0 = MockUUID.fromString(":7V|sojZ");
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountReadQuery0.canEqual(financialInstitutionAccountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("bzQADKwZM`,O");
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountReadQuery0.canEqual(financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(":7V|sojZ");
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionAccountId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountReadQuery0.getFinancialInstitutionUserId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID1);
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(financialInstitutionAccountReadQuery1.equals((Object)financialInstitutionAccountReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID1, uUID1);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionAccountReadQuery1.equals((Object)financialInstitutionAccountReadQuery0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery1.equals(financialInstitutionAccountReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountReadQuery0.equals(financialInstitutionAccountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = new FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      financialInstitutionAccountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = new FinancialInstitutionAccountReadQuery(uUID0, uUID0, uUID0);
      financialInstitutionAccountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1.build();
      financialInstitutionAccountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1.build();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery1 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionAccountReadQuery1.equals(financialInstitutionAccountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      String string0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FinancialInstitutionAccountReadQuery.FinancialInstitutionAccountReadQueryBuilder financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0 = FinancialInstitutionAccountReadQuery.builder();
      FinancialInstitutionAccountReadQuery financialInstitutionAccountReadQuery0 = financialInstitutionAccountReadQuery_FinancialInstitutionAccountReadQueryBuilder0.build();
      String string0 = financialInstitutionAccountReadQuery0.toString();
      assertEquals("FinancialInstitutionAccountReadQuery(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null)", string0);
  }
}
