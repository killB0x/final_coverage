/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:44:16 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Integration;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Integration_ESTest extends Integration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = new Integration.IntegrationBuilder();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integration integration0 = new Integration();
      integration0.setSelfLink("Y]'V1*B|");
      String string0 = integration0.getSelfLink();
      assertEquals("Y]'V1*B|", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration integration0 = integration_IntegrationBuilder0.build();
      integration0.setSelfLink("");
      integration0.getSelfLink();
      assertEquals("", integration0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integration integration0 = new Integration();
      integration0.setRequestId("{integrationId}");
      String string0 = integration0.getRequestId();
      assertEquals("{integrationId}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integration integration0 = new Integration();
      integration0.setRequestId("");
      String string0 = integration0.getRequestId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2508));
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      UUID uUID0 = MockUUID.fromString((String) null);
      Integration.IntegrationBuilder integration_IntegrationBuilder1 = integration_IntegrationBuilder0.id(uUID0);
      Integration integration0 = integration_IntegrationBuilder1.build();
      UUID uUID1 = integration0.getId();
      assertEquals("cc090000-cd09-4000-8e09-0000cf090000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integration integration0 = new Integration();
      UUID uUID0 = MockUUID.randomUUID();
      integration0.setId(uUID0);
      UUID uUID1 = integration0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integration integration0 = new Integration();
      boolean boolean0 = integration0.canEqual(integration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      boolean boolean0 = integration0.canEqual(integration_IntegrationBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integration integration0 = new Integration();
      UUID uUID0 = integration0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integration integration0 = new Integration();
      String string0 = integration0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integration integration0 = new Integration();
      String string0 = integration0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration.IntegrationBuilder integration_IntegrationBuilder1 = integration_IntegrationBuilder0.requestId("");
      Integration integration1 = integration_IntegrationBuilder1.build();
      boolean boolean0 = integration0.equals(integration1);
      assertFalse(integration1.equals((Object)integration0));
      assertEquals("", integration1.getRequestId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration.IntegrationBuilder integration_IntegrationBuilder1 = integration_IntegrationBuilder0.requestId("");
      Integration integration1 = integration_IntegrationBuilder1.build();
      boolean boolean0 = integration1.equals(integration0);
      assertEquals("", integration1.getRequestId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration integration1 = integration_IntegrationBuilder0.build();
      assertTrue(integration1.equals((Object)integration0));
      
      integration0.setSelfLink("");
      boolean boolean0 = integration1.equals(integration0);
      assertFalse(integration1.equals((Object)integration0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration integration1 = integration_IntegrationBuilder0.build();
      assertTrue(integration1.equals((Object)integration0));
      
      integration1.setSelfLink("");
      boolean boolean0 = integration1.equals(integration0);
      assertFalse(integration1.equals((Object)integration0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integration integration0 = new Integration();
      UUID uUID0 = MockUUID.randomUUID();
      integration0.setId(uUID0);
      Integration integration1 = new Integration();
      assertFalse(integration1.equals((Object)integration0));
      
      integration1.setId(uUID0);
      boolean boolean0 = integration0.equals(integration1);
      assertTrue(integration1.equals((Object)integration0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integration integration0 = new Integration();
      Integration integration1 = new Integration();
      assertTrue(integration1.equals((Object)integration0));
      
      UUID uUID0 = MockUUID.randomUUID();
      integration1.setId(uUID0);
      boolean boolean0 = integration0.equals(integration1);
      assertFalse(integration1.equals((Object)integration0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integration integration0 = new Integration();
      UUID uUID0 = MockUUID.randomUUID();
      integration0.setId(uUID0);
      Integration integration1 = new Integration();
      boolean boolean0 = integration0.equals(integration1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integration integration0 = new Integration();
      Object object0 = new Object();
      boolean boolean0 = integration0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integration integration0 = new Integration();
      boolean boolean0 = integration0.equals(integration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integration integration0 = new Integration();
      integration0.setRequestId("{integrationId}");
      integration0.hashCode();
      assertEquals("{integrationId}", integration0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integration integration0 = new Integration();
      integration0.setSelfLink("b");
      integration0.hashCode();
      assertEquals("b", integration0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integration integration0 = new Integration();
      UUID uUID0 = MockUUID.fromString("integration");
      integration0.setId(uUID0);
      integration0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      String string0 = integration_IntegrationBuilder0.toString();
      assertEquals("Integration.IntegrationBuilder(id=null, selfLink=null, requestId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      Integration.IntegrationBuilder integration_IntegrationBuilder1 = integration_IntegrationBuilder0.requestId("");
      Integration integration0 = integration_IntegrationBuilder0.build();
      Integration integration1 = integration_IntegrationBuilder1.build();
      boolean boolean0 = integration0.equals(integration1);
      assertEquals("", integration1.getRequestId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integration.IntegrationBuilder integration_IntegrationBuilder0 = Integration.builder();
      integration_IntegrationBuilder0.selfLink("integration");
      Integration integration0 = integration_IntegrationBuilder0.build();
      Integration integration1 = integration_IntegrationBuilder0.build();
      boolean boolean0 = integration1.equals(integration0);
      assertTrue(boolean0);
      assertEquals("integration", integration1.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integration integration0 = new Integration();
      String string0 = integration0.toString();
      assertEquals("Integration(id=null, selfLink=null, requestId=null)", string0);
  }
}
