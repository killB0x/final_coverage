/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:50:05 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.create.BulkPaymentInitiationRequestAuthorizationCreationQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BulkPaymentInitiationRequestAuthorizationCreationQuery_ESTest extends BulkPaymentInitiationRequestAuthorizationCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)bulkPaymentInitiationRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters(hashMap0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_)PLU g0[v^XNhZUp", hashMap0, hashMap0);
      hashMap0.put("", (String) null);
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-233));
      UUID uUID0 = MockUUID.fromString("");
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", (Map<String, String>) null, (Map<String, String>) null);
      UUID uUID1 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString("ydkkrSOeg'?[1{");
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID1 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-233));
      UUID uUID0 = MockUUID.fromString("");
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", (Map<String, String>) null, (Map<String, String>) null);
      UUID uUID1 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals((-1657324658946457600L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString("ydkkrSOeg'?[1{");
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID1 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("ydkkrSOeg'?[1{");
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("ydkkrSOeg'?[1{", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, ", queryParameters$value=", hashMap0, hashMap0);
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "_)PLU g0[v^XNhZUp", hashMap0, hashMap0);
      hashMap0.put("", (String) null);
      Map<String, String> map0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.canEqual(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("xh?t\"5TxE^E\"r7c0HK|");
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0, 314.336F);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", hashMap0, hashMap0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.canEqual(bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("");
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "BulkPaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters={}, additionalHeaders={})", (Map<String, String>) null, (Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "BulkPaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters={}, additionalHeaders={})", (Map<String, String>) null, (Map<String, String>) null);
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, ", queryParameters$value=", hashMap0, hashMap0);
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)bulkPaymentInitiationRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, ", queryParameters$value=", hashMap0, hashMap0);
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)bulkPaymentInitiationRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, ", paymentInitiationRequestId=", (Map<String, String>) null, (Map<String, String>) null);
      bulkPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      bulkPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, ", queryParameters$value=", hashMap0, hashMap0);
      bulkPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      bulkPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      String string0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.toString();
      assertEquals("BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters$value=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      bulkPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("");
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      String string0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = bulkPaymentInitiationRequestAuthorizationCreationQuery0.toString();
      assertEquals("BulkPaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters={}, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BulkPaymentInitiationRequestAuthorizationCreationQuery.BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = BulkPaymentInitiationRequestAuthorizationCreationQuery.builder();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery0 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      BulkPaymentInitiationRequestAuthorizationCreationQuery bulkPaymentInitiationRequestAuthorizationCreationQuery1 = bulkPaymentInitiationRequestAuthorizationCreationQuery_BulkPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = bulkPaymentInitiationRequestAuthorizationCreationQuery1.equals(bulkPaymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }
}
