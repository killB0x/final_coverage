/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:50:11 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.Customer;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Customer_ESTest extends Customer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Customer customer0 = new Customer();
      customer0.setSelfLink("A)&P&h");
      String string0 = customer0.getSelfLink();
      assertEquals("A)&P&h", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      customer_CustomerBuilder0.selfLink("");
      Customer customer0 = customer_CustomerBuilder0.build();
      String string0 = customer0.getSelfLink();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Customer customer0 = new Customer();
      customer0.setRequestId("8R0Aw|Sc=@/B u[:w");
      String string0 = customer0.getRequestId();
      assertEquals("8R0Aw|Sc=@/B u[:w", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      customer_CustomerBuilder0.requestId("");
      Customer customer0 = customer_CustomerBuilder0.build();
      String string0 = customer0.getRequestId();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-1966));
      Customer customer0 = new Customer();
      UUID uUID0 = MockUUID.randomUUID();
      customer0.setId(uUID0);
      UUID uUID1 = customer0.getId();
      assertEquals("ae070000-af07-4000-b007-0000b1070000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      UUID uUID0 = MockUUID.randomUUID();
      customer_CustomerBuilder0.id(uUID0);
      Customer customer0 = customer_CustomerBuilder0.build();
      UUID uUID1 = customer0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer customer0 = customer_CustomerBuilder0.build();
      boolean boolean0 = customer0.canEqual(customer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Customer customer0 = new Customer();
      Object object0 = new Object();
      boolean boolean0 = customer0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Customer customer0 = new Customer();
      UUID uUID0 = customer0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Customer customer0 = new Customer();
      String string0 = customer0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer customer0 = customer_CustomerBuilder0.build();
      String string0 = customer0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer customer0 = customer_CustomerBuilder0.build();
      customer0.setRequestId("+#t|k");
      Customer customer1 = customer_CustomerBuilder0.build();
      boolean boolean0 = customer0.equals(customer1);
      assertFalse(boolean0);
      assertEquals("+#t|k", customer0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Customer customer0 = new Customer();
      Customer customer1 = new Customer();
      assertTrue(customer1.equals((Object)customer0));
      
      customer1.setRequestId("customer");
      boolean boolean0 = customer0.equals(customer1);
      assertFalse(customer1.equals((Object)customer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      customer_CustomerBuilder0.requestId("Id");
      Customer customer0 = customer_CustomerBuilder0.build();
      Customer customer1 = customer_CustomerBuilder0.build();
      boolean boolean0 = customer0.equals(customer1);
      assertTrue(boolean0);
      assertEquals("Id", customer1.getRequestId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer.CustomerBuilder customer_CustomerBuilder1 = customer_CustomerBuilder0.selfLink("+#t|k");
      Customer customer0 = customer_CustomerBuilder1.build();
      Customer customer1 = customer_CustomerBuilder1.build();
      boolean boolean0 = customer0.equals(customer1);
      assertTrue(boolean0);
      assertEquals("+#t|k", customer1.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Customer customer0 = new Customer();
      Customer customer1 = new Customer();
      assertTrue(customer1.equals((Object)customer0));
      
      customer1.setSelfLink("customer");
      boolean boolean0 = customer0.equals(customer1);
      assertFalse(customer1.equals((Object)customer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer customer0 = customer_CustomerBuilder0.build();
      Customer.CustomerBuilder customer_CustomerBuilder1 = customer_CustomerBuilder0.selfLink("+#t|k");
      Customer customer1 = customer_CustomerBuilder1.build();
      boolean boolean0 = customer1.equals(customer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Customer customer0 = new Customer();
      UUID uUID0 = MockUUID.fromString("customer");
      customer0.setId(uUID0);
      Customer customer1 = new Customer();
      boolean boolean0 = customer0.equals(customer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Customer customer0 = new Customer();
      Customer customer1 = new Customer();
      assertTrue(customer1.equals((Object)customer0));
      
      UUID uUID0 = MockUUID.randomUUID();
      customer1.setId(uUID0);
      boolean boolean0 = customer0.equals(customer1);
      assertFalse(customer1.equals((Object)customer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      UUID uUID0 = MockUUID.randomUUID();
      Customer.CustomerBuilder customer_CustomerBuilder1 = customer_CustomerBuilder0.id(uUID0);
      Customer customer0 = customer_CustomerBuilder1.build();
      Customer customer1 = customer_CustomerBuilder0.build();
      boolean boolean0 = customer0.equals(customer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Customer customer0 = new Customer();
      Object object0 = new Object();
      boolean boolean0 = customer0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Customer customer0 = new Customer();
      boolean boolean0 = customer0.equals(customer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      customer_CustomerBuilder0.requestId("Id");
      Customer customer0 = customer_CustomerBuilder0.build();
      customer0.hashCode();
      assertEquals("Id", customer0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      Customer.CustomerBuilder customer_CustomerBuilder1 = customer_CustomerBuilder0.selfLink("+#t|k");
      Customer customer0 = customer_CustomerBuilder1.build();
      customer0.hashCode();
      assertEquals("+#t|k", customer0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      UUID uUID0 = MockUUID.randomUUID();
      customer_CustomerBuilder0.id(uUID0);
      Customer customer0 = customer_CustomerBuilder0.build();
      customer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = Customer.builder();
      String string0 = customer_CustomerBuilder0.toString();
      assertEquals("Customer.CustomerBuilder(id=null, selfLink=null, requestId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Customer.CustomerBuilder customer_CustomerBuilder0 = new Customer.CustomerBuilder();
      Customer.CustomerBuilder customer_CustomerBuilder1 = customer_CustomerBuilder0.selfLink("qcqV.&*B[*EUGS)z");
      assertSame(customer_CustomerBuilder0, customer_CustomerBuilder1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Customer customer0 = new Customer();
      String string0 = customer0.toString();
      assertEquals("Customer(id=null, selfLink=null, requestId=null)", string0);
  }
}
