/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:31:45 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.create.AuthorizationCreationQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthorizationCreationQuery_ESTest extends AuthorizationCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Au\"n|'+Z3}49-o.OS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery((UUID) null, uUID0, "x>", ")", hashMap0, hashMap0);
      authorizationCreationQuery0.hashCode();
      assertEquals("x>", authorizationCreationQuery0.getCustomerAccessToken());
      assertEquals(")", authorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery((UUID) null, (UUID) null, "afB>Vo #,", "", (Map<String, String>) null, (Map<String, String>) null);
      authorizationCreationQuery0.getQueryParameters();
      assertEquals("afB>Vo #,", authorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("", authorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "VR19ss?V0H/'e", (String) null, hashMap0, hashMap0);
      Map<String, String> map0 = authorizationCreationQuery0.getQueryParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "", (String) null, hashMap0, hashMap0);
      hashMap0.put("a4\u0002]Wn1;9\u0001qPc", "y#{lm6|.jLDlU91G");
      Map<String, String> map0 = authorizationCreationQuery0.getQueryParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(1209);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "6@1sLy", "6@1sLy", hashMap0, hashMap0);
      UUID uUID1 = authorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals((-5114963273665200128L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID1 = authorizationCreationQuery0.getFinancialInstitutionId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Au\"n|'+Z3}49-o.OS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "x>", "x>", hashMap0, hashMap0);
      String string0 = authorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("x>", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "", "'#T ", hashMap0, hashMap0);
      String string0 = authorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("'#T ", authorizationCreationQuery0.getCredentialsEncryptionKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("p`JAs");
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = authorizationCreationQuery0.getQueryParameters();
      AuthorizationCreationQuery authorizationCreationQuery1 = new AuthorizationCreationQuery(uUID0, uUID0, (String) null, "AuthorizationCreationQuery.AuthorizationCreationQueryBuilder(financialInstitutionId=", map0, map0);
      String string0 = authorizationCreationQuery1.getCredentialsEncryptionKey();
      assertEquals("AuthorizationCreationQuery.AuthorizationCreationQueryBuilder(financialInstitutionId=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder1.build();
      String string0 = authorizationCreationQuery0.getCredentialsEncryptionKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("h> v4)t50hu");
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "qeP-'926*", "h> v4)t50hu", (Map<String, String>) null, (Map<String, String>) null);
      authorizationCreationQuery0.getAdditionalHeaders();
      assertEquals("qeP-'926*", authorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("h> v4)t50hu", authorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Au\"n|'+Z3}49-o.OS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "Au\"n|'+Z3}49-o.OS", "Au\"n|'+Z3}49-o.OS", hashMap0, hashMap0);
      Map<String, String> map0 = authorizationCreationQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.additionalHeaders(hashMap0);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      hashMap0.put("", (String) null);
      Map<String, String> map0 = authorizationCreationQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Random.setNextRandom(1209);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "6@1sLy", "6@1sLy", hashMap0, hashMap0);
      UUID uUID1 = authorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("Au\"n|'+Z3}49-o.OS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "x>", "x>", hashMap0, hashMap0);
      UUID uUID1 = authorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery((UUID) null, (UUID) null, "afB>Vo #,", "", (Map<String, String>) null, (Map<String, String>) null);
      authorizationCreationQuery0.canEqual(authorizationCreationQuery0);
      assertEquals("afB>Vo #,", authorizationCreationQuery0.getCustomerAccessToken());
      assertEquals("", authorizationCreationQuery0.getCredentialsEncryptionKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.canEqual(authorizationCreationQuery_AuthorizationCreationQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = authorizationCreationQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      String string0 = authorizationCreationQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      String string0 = authorizationCreationQuery0.getCredentialsEncryptionKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = authorizationCreationQuery0.getAccountInformationAccessRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.credentialsEncryptionKey("AuthorizationCreationQuery.AuthorizationCreationQueryBuilder(financialInstitutionId=");
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(authorizationCreationQuery1.equals((Object)authorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.credentialsEncryptionKey("");
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.customerAccessToken("T>`X`Mm(\"S2");
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.customerAccessToken("");
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(authorizationCreationQuery1.equals((Object)authorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.customerAccessToken("");
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(authorizationCreationQuery1.equals((Object)authorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("Au\"n|'+Z3}49-o.OS");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationCreationQuery authorizationCreationQuery1 = new AuthorizationCreationQuery((UUID) null, uUID0, "x>", ")", hashMap0, hashMap0);
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertEquals(")", authorizationCreationQuery1.getCredentialsEncryptionKey());
      assertFalse(boolean0);
      assertEquals("x>", authorizationCreationQuery1.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = new AuthorizationCreationQuery.AuthorizationCreationQueryBuilder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery1.equals(authorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(authorizationCreationQuery1.equals((Object)authorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AuthorizationCreationQuery authorizationCreationQuery0 = new AuthorizationCreationQuery(uUID0, uUID0, "", "7\"[zn;c+l>5<", (Map<String, String>) null, (Map<String, String>) null);
      authorizationCreationQuery0.hashCode();
      assertEquals("7\"[zn;c+l>5<", authorizationCreationQuery0.getCredentialsEncryptionKey());
      assertEquals("", authorizationCreationQuery0.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      authorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      String string0 = authorizationCreationQuery0.toString();
      assertEquals("AuthorizationCreationQuery(financialInstitutionId=null, accountInformationAccessRequestId=null, customerAccessToken=null, credentialsEncryptionKey=null, queryParameters={}, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      String string0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.toString();
      assertEquals("AuthorizationCreationQuery.AuthorizationCreationQueryBuilder(financialInstitutionId=null, accountInformationAccessRequestId=null, customerAccessToken=null, credentialsEncryptionKey=null, queryParameters$value=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AuthorizationCreationQuery.AuthorizationCreationQueryBuilder authorizationCreationQuery_AuthorizationCreationQueryBuilder0 = AuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      authorizationCreationQuery_AuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      AuthorizationCreationQuery authorizationCreationQuery0 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      AuthorizationCreationQuery authorizationCreationQuery1 = authorizationCreationQuery_AuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = authorizationCreationQuery0.equals(authorizationCreationQuery1);
      assertTrue(boolean0);
  }
}
