/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:05:59 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.FinancialInstitutionUser;
import java.time.Clock;
import java.time.Instant;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionUser_ESTest extends FinancialInstitutionUser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = MockInstant.ofEpochSecond(1364L);
      financialInstitutionUser0.setUpdatedAt(instant0);
      Instant instant1 = financialInstitutionUser0.getUpdatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setSelfLink("7&");
      String string0 = financialInstitutionUser0.getSelfLink();
      assertEquals("7&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      financialInstitutionUser_FinancialInstitutionUserBuilder0.selfLink("");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      String string0 = financialInstitutionUser0.getSelfLink();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.requestId("~<{Te:;P{1o-ECh");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      String string0 = financialInstitutionUser0.getRequestId();
      assertNotNull(string0);
      assertEquals("~<{Te:;P{1o-ECh", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setRequestId("");
      String string0 = financialInstitutionUser0.getRequestId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.password("+u}:O(%L");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      String string0 = financialInstitutionUser0.getPassword();
      assertNotNull(string0);
      assertEquals("+u}:O(%L", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.password("");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      String string0 = financialInstitutionUser0.getPassword();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.login(")");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      String string0 = financialInstitutionUser0.getLogin();
      assertNotNull(string0);
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setLogin("");
      String string0 = financialInstitutionUser0.getLogin();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      financialInstitutionUser0.setLastName(", createdAt=");
      financialInstitutionUser0.getLastName();
      assertEquals(", createdAt=", financialInstitutionUser0.getLastName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.lastName("");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      String string0 = financialInstitutionUser0.getLastName();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Random.setNextRandom((-1963));
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      UUID uUID0 = MockUUID.fromString("Id");
      financialInstitutionUser0.setId(uUID0);
      UUID uUID1 = financialInstitutionUser0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      UUID uUID0 = MockUUID.fromString("");
      financialInstitutionUser0.setId(uUID0);
      UUID uUID1 = financialInstitutionUser0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setFirstName(", updatedAt=");
      String string0 = financialInstitutionUser0.getFirstName();
      assertEquals(", updatedAt=", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setFirstName("");
      String string0 = financialInstitutionUser0.getFirstName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      financialInstitutionUser0.setCreatedAt(instant0);
      Instant instant1 = financialInstitutionUser0.getCreatedAt();
      assertSame(instant1, instant0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      boolean boolean0 = financialInstitutionUser0.canEqual(financialInstitutionUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionUser0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = financialInstitutionUser0.getUpdatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      String string0 = financialInstitutionUser0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      UUID uUID0 = financialInstitutionUser0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      String string0 = financialInstitutionUser0.getLastName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      String string0 = financialInstitutionUser0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      String string0 = financialInstitutionUser0.getFirstName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = financialInstitutionUser0.getCreatedAt();
      assertNull(instant0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      String string0 = financialInstitutionUser0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      Instant instant0 = MockInstant.now();
      financialInstitutionUser1.setUpdatedAt(instant0);
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      financialInstitutionUser_FinancialInstitutionUserBuilder0.updatedAt(instant0);
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      financialInstitutionUser0.setCreatedAt(instant0);
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      financialInstitutionUser_FinancialInstitutionUserBuilder0.createdAt(instant0);
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setLogin("financialInstitutionUser");
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setLogin("{financialInstitutionUserId}");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setLastName("{financialInstitutionUserId}");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.lastName("financialInstitutionUser");
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertEquals("financialInstitutionUser", financialInstitutionUser1.getLastName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setFirstName("{financialInstitutionUserId}");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.firstName("financialInstitutionUser");
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
      assertEquals("financialInstitutionUser", financialInstitutionUser1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setPassword("financialInstitutionUser");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.password("{financialInstitutionUserId}");
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertEquals("{financialInstitutionUserId}", financialInstitutionUser1.getPassword());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setRequestId("financialInstitutionUser");
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setRequestId("financialInstitutionUser");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setSelfLink("{financialInstitutionUserId}");
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      financialInstitutionUser1.setSelfLink("financialInstitutionUser");
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      assertTrue(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      
      UUID uUID0 = MockUUID.fromString("financialInstitutionUser");
      financialInstitutionUser1.setId(uUID0);
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(financialInstitutionUser1.equals((Object)financialInstitutionUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionUser0.setId(uUID0);
      FinancialInstitutionUser financialInstitutionUser1 = new FinancialInstitutionUser();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser_FinancialInstitutionUserBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = MockInstant.ofEpochSecond(1364L);
      financialInstitutionUser0.setUpdatedAt(instant0);
      financialInstitutionUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      Instant instant0 = MockInstant.ofEpochSecond(1364L);
      financialInstitutionUser0.setCreatedAt(instant0);
      financialInstitutionUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      financialInstitutionUser_FinancialInstitutionUserBuilder0.login(", firstName=");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      financialInstitutionUser0.hashCode();
      assertEquals(", firstName=", financialInstitutionUser0.getLogin());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      financialInstitutionUser0.setLastName(", createdAt=");
      financialInstitutionUser0.hashCode();
      assertEquals(", createdAt=", financialInstitutionUser0.getLastName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      financialInstitutionUser0.setFirstName(", createdAt=");
      financialInstitutionUser0.hashCode();
      assertEquals(", createdAt=", financialInstitutionUser0.getFirstName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.password("+u}:O(%L");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      financialInstitutionUser0.hashCode();
      assertEquals("+u}:O(%L", financialInstitutionUser0.getPassword());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setRequestId("b%&nBR5S*");
      financialInstitutionUser0.hashCode();
      assertEquals("b%&nBR5S*", financialInstitutionUser0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      financialInstitutionUser0.setSelfLink("{financialInstitutionUserId}");
      financialInstitutionUser0.hashCode();
      assertEquals("{financialInstitutionUserId}", financialInstitutionUser0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionUser0.setId(uUID0);
      financialInstitutionUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.firstName("financialInstitutionUser");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertEquals("financialInstitutionUser", financialInstitutionUser1.getFirstName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      String string0 = financialInstitutionUser0.getLogin();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.id(uUID0);
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.lastName("financialInstitutionUser");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertEquals("financialInstitutionUser", financialInstitutionUser1.getLastName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = new FinancialInstitutionUser.FinancialInstitutionUserBuilder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.login("Z@Gjm,N");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertEquals("Z@Gjm,N", financialInstitutionUser1.getLogin());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.requestId("IHh'");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertTrue(boolean0);
      assertEquals("IHh'", financialInstitutionUser1.getRequestId());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      String string0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.toString();
      assertEquals("FinancialInstitutionUser.FinancialInstitutionUserBuilder(id=null, selfLink=null, requestId=null, password=null, firstName=null, lastName=null, login=null, createdAt=null, updatedAt=null)", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.password("{financialInstitutionUserId}");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertEquals("{financialInstitutionUserId}", financialInstitutionUser1.getPassword());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.createdAt(instant0);
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.updatedAt(instant0);
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      boolean boolean0 = financialInstitutionUser1.equals(financialInstitutionUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder0 = FinancialInstitutionUser.builder();
      FinancialInstitutionUser.FinancialInstitutionUserBuilder financialInstitutionUser_FinancialInstitutionUserBuilder1 = financialInstitutionUser_FinancialInstitutionUserBuilder0.selfLink("M+=j~4");
      FinancialInstitutionUser financialInstitutionUser0 = financialInstitutionUser_FinancialInstitutionUserBuilder0.build();
      FinancialInstitutionUser financialInstitutionUser1 = financialInstitutionUser_FinancialInstitutionUserBuilder1.build();
      boolean boolean0 = financialInstitutionUser0.equals(financialInstitutionUser1);
      assertTrue(boolean0);
      assertEquals("M+=j~4", financialInstitutionUser1.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FinancialInstitutionUser financialInstitutionUser0 = new FinancialInstitutionUser();
      String string0 = financialInstitutionUser0.toString();
      assertEquals("FinancialInstitutionUser(id=null, selfLink=null, requestId=null, password=null, firstName=null, lastName=null, login=null, createdAt=null, updatedAt=null)", string0);
  }
}
