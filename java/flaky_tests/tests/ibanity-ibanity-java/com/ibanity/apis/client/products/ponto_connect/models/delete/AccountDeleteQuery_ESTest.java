/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:52:34 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.delete.AccountDeleteQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountDeleteQuery_ESTest extends AccountDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(")");
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("", uUID0, (Map<String, String>) null);
      Map<String, String> map0 = accountDeleteQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      accountDeleteQuery_AccountDeleteQueryBuilder0.additionalHeaders(hashMap0);
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      Map<String, String> map0 = accountDeleteQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("#R~lLh5V[lxNI6M^(7X", uUID0, hashMap0);
      hashMap0.put("#R~lLh5V[lxNI6M^(7X", (String) null);
      Map<String, String> map0 = accountDeleteQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-2534));
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("", uUID0, hashMap0);
      UUID uUID1 = accountDeleteQuery0.getAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", accountId=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery((String) null, uUID0, hashMap0);
      UUID uUID1 = accountDeleteQuery0.getAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("ea6=;k=5+~-$Vec");
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      Map<String, String> map0 = accountDeleteQuery0.getAdditionalHeaders();
      AccountDeleteQuery accountDeleteQuery1 = new AccountDeleteQuery("ea6=;k=5+~-$Vec", uUID0, map0);
      String string0 = accountDeleteQuery1.getAccessToken();
      assertEquals("ea6=;k=5+~-$Vec", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(")");
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("", uUID0, (Map<String, String>) null);
      String string0 = accountDeleteQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.canEqual(accountDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.canEqual("AccountDeleteQuery.AccountDeleteQueryBuilder(accessToken=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      String string0 = accountDeleteQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      UUID uUID0 = accountDeleteQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      accountDeleteQuery_AccountDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      accountDeleteQuery_AccountDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery1.equals(accountDeleteQuery0);
      assertFalse(accountDeleteQuery0.equals((Object)accountDeleteQuery1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      UUID uUID0 = MockUUID.fromString("");
      accountDeleteQuery_AccountDeleteQueryBuilder0.accountId(uUID0);
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder1 = accountDeleteQuery_AccountDeleteQueryBuilder0.accountId(uUID0);
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder1.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(accountDeleteQuery1.equals((Object)accountDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountDeleteQuery_AccountDeleteQueryBuilder0.accountId(uUID0);
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery1.equals(accountDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      accountDeleteQuery_AccountDeleteQueryBuilder0.accessToken("Fb0b-B.K!|q?-7");
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      accountDeleteQuery_AccountDeleteQueryBuilder0.accessToken(".s}s7`rqu%r#ju/u");
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(accountDeleteQuery1.equals((Object)accountDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      accountDeleteQuery_AccountDeleteQueryBuilder0.accessToken("");
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery1.equals(accountDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery_AccountDeleteQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = new AccountDeleteQuery.AccountDeleteQueryBuilder();
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      accountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("F1`WOLttn6^");
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("F1`WOLttn6^", uUID0, (Map<String, String>) null);
      accountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder1 = accountDeleteQuery_AccountDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountDeleteQuery accountDeleteQuery0 = accountDeleteQuery_AccountDeleteQueryBuilder0.build();
      AccountDeleteQuery accountDeleteQuery1 = accountDeleteQuery_AccountDeleteQueryBuilder1.build();
      boolean boolean0 = accountDeleteQuery0.equals(accountDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountDeleteQuery.AccountDeleteQueryBuilder accountDeleteQuery_AccountDeleteQueryBuilder0 = AccountDeleteQuery.builder();
      String string0 = accountDeleteQuery_AccountDeleteQueryBuilder0.toString();
      assertEquals("AccountDeleteQuery.AccountDeleteQueryBuilder(accessToken=null, accountId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountDeleteQuery accountDeleteQuery0 = new AccountDeleteQuery("", uUID0, hashMap0);
      String string0 = accountDeleteQuery0.toString();
      assertEquals("AccountDeleteQuery(accessToken=, accountId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", string0);
  }
}
