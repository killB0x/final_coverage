/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:12:36 GMT 2022
 */

package com.ibanity.apis.client.paging;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.paging.IbanityPagingSpec;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IbanityPagingSpec_ESTest extends IbanityPagingSpec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = new IbanityPagingSpec.IbanityPagingSpecBuilder();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.limit(0L);
      IbanityPagingSpec ibanityPagingSpec0 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      long long0 = ibanityPagingSpec0.getLimit();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.setLimit((-1213L));
      long long0 = ibanityPagingSpec0.getLimit();
      assertEquals((-1213L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = IbanityPagingSpec.builder();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.before(")");
      IbanityPagingSpec ibanityPagingSpec0 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      String string0 = ibanityPagingSpec0.getBefore();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.setBefore("");
      ibanityPagingSpec0.getBefore();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.getAfter();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      ibanityPagingSpec0.setAfter("^gLUebd1XQ:");
      String string0 = ibanityPagingSpec0.getAfter();
      assertEquals("^gLUebd1XQ:", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      boolean boolean0 = ibanityPagingSpec0.canEqual(ibanityPagingSpec0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      Object object0 = new Object();
      boolean boolean0 = ibanityPagingSpec0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.setBefore(")");
      IbanityPagingSpec ibanityPagingSpec1 = new IbanityPagingSpec();
      boolean boolean0 = ibanityPagingSpec1.equals(ibanityPagingSpec0);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.setBefore(")");
      ibanityPagingSpec0.hashCode();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      long long0 = ibanityPagingSpec0.getLimit();
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.getBefore();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = new IbanityPagingSpec.IbanityPagingSpecBuilder();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.after("");
      IbanityPagingSpec ibanityPagingSpec1 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      boolean boolean0 = ibanityPagingSpec0.equals(ibanityPagingSpec1);
      assertFalse(boolean0);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = IbanityPagingSpec.builder();
      UUID uUID0 = MockUUID.randomUUID();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.after(uUID0);
      IbanityPagingSpec ibanityPagingSpec1 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      boolean boolean0 = ibanityPagingSpec1.equals(ibanityPagingSpec0);
      assertFalse(boolean0);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
      assertFalse(ibanityPagingSpec0.equals((Object)ibanityPagingSpec1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      ibanityPagingSpec0.setBefore(")");
      IbanityPagingSpec ibanityPagingSpec1 = new IbanityPagingSpec();
      boolean boolean0 = ibanityPagingSpec0.equals(ibanityPagingSpec1);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
      assertFalse(boolean0);
      assertFalse(ibanityPagingSpec1.equals((Object)ibanityPagingSpec0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      IbanityPagingSpec ibanityPagingSpec1 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      boolean boolean0 = ibanityPagingSpec0.equals(ibanityPagingSpec1);
      assertTrue(boolean0);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      Object object0 = new Object();
      boolean boolean0 = ibanityPagingSpec0.equals(object0);
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      boolean boolean0 = ibanityPagingSpec0.equals(ibanityPagingSpec0);
      assertTrue(boolean0);
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      ibanityPagingSpec0.hashCode();
      IbanityPagingSpec ibanityPagingSpec1 = new IbanityPagingSpec();
      assertTrue(ibanityPagingSpec1.equals((Object)ibanityPagingSpec0));
      
      IbanityPagingSpec.builder();
      ibanityPagingSpec1.setAfter("");
      ibanityPagingSpec0.equals(ibanityPagingSpec1);
      ibanityPagingSpec1.getAfter();
      assertFalse(ibanityPagingSpec1.equals((Object)ibanityPagingSpec0));
      
      String string0 = ibanityPagingSpec0.toString();
      assertEquals("IbanityPagingSpec(limit=10, before=null, after=null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = new IbanityPagingSpec.IbanityPagingSpecBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.before(uUID0);
      assertSame(ibanityPagingSpec_IbanityPagingSpecBuilder0, ibanityPagingSpec_IbanityPagingSpecBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = new IbanityPagingSpec.IbanityPagingSpecBuilder();
      String string0 = ibanityPagingSpec_IbanityPagingSpecBuilder0.toString();
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=0, before=null, after=null)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = new IbanityPagingSpec.IbanityPagingSpecBuilder();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.after("");
      IbanityPagingSpec ibanityPagingSpec0 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      ibanityPagingSpec0.hashCode();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      IbanityPagingSpec ibanityPagingSpec1 = new IbanityPagingSpec();
      ibanityPagingSpec0.setBefore("EJYsB{Gxzzm>Zo#S1U1");
      assertFalse(ibanityPagingSpec0.equals((Object)ibanityPagingSpec1));
      
      ibanityPagingSpec1.setBefore("EJYsB{Gxzzm>Zo#S1U1");
      boolean boolean0 = ibanityPagingSpec1.equals(ibanityPagingSpec0);
      assertTrue(ibanityPagingSpec1.equals((Object)ibanityPagingSpec0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder0 = IbanityPagingSpec.builder();
      UUID uUID0 = MockUUID.randomUUID();
      IbanityPagingSpec.IbanityPagingSpecBuilder ibanityPagingSpec_IbanityPagingSpecBuilder1 = ibanityPagingSpec_IbanityPagingSpecBuilder0.after(uUID0);
      IbanityPagingSpec ibanityPagingSpec0 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      IbanityPagingSpec ibanityPagingSpec1 = ibanityPagingSpec_IbanityPagingSpecBuilder1.build();
      boolean boolean0 = ibanityPagingSpec0.equals(ibanityPagingSpec1);
      assertEquals(10L, ibanityPagingSpec1.getLimit());
      assertTrue(boolean0);
  }
}
