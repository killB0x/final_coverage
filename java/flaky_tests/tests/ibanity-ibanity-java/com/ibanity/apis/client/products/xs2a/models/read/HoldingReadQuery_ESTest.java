/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:52:51 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.HoldingReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HoldingReadQuery_ESTest extends HoldingReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("ick#|YN6R&uDS79{-");
      holdingReadQuery_HoldingReadQueryBuilder0.holdingId(uUID0);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      holdingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("ick#|YN6R&uDS79{-");
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = holdingReadQuery_HoldingReadQueryBuilder0.accountId(uUID0);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder1.build();
      holdingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("2tCqp?_:");
      holdingReadQuery_HoldingReadQueryBuilder0.holdingId(uUID0);
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = holdingReadQuery0.getHoldingId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom(4351);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getHoldingId();
      assertEquals((-9146529368178098176L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(4351);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getFinancialInstitutionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      holdingReadQuery_HoldingReadQueryBuilder0.customerAccessToken("XV[qF_jQL6`'I");
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      String string0 = holdingReadQuery0.getCustomerAccessToken();
      assertEquals("XV[qF_jQL6`'I", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      String string0 = holdingReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      Map<String, String> map0 = holdingReadQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      hashMap0.put("REp-s3SC 4NtJLwb-n", "w2a;}H ");
      Map<String, String> map0 = holdingReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = holdingReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(4351);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getAccountId();
      assertEquals((-9146529368178098176L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = holdingReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      String string0 = holdingReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("pMq", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getHoldingId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("pMq", uUID0, uUID0, uUID0, hashMap0);
      UUID uUID1 = holdingReadQuery0.getAccountId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("", uUID0, uUID0, uUID0, (Map<String, String>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("", uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = holdingReadQuery1.equals(holdingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("b", uUID0, uUID0, uUID0, (Map<String, String>) null);
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("b", uUID0, uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UUID uUID1 = MockUUID.fromString(", financialInstitutionId=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("pMq", uUID0, uUID1, uUID1, hashMap0);
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("pMq", uUID0, uUID1, uUID0, hashMap0);
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
      assertFalse(holdingReadQuery1.equals((Object)holdingReadQuery0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("lGOP(32=EY");
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = holdingReadQuery_HoldingReadQueryBuilder0.accountId(uUID0);
      holdingReadQuery_HoldingReadQueryBuilder1.customerAccessToken("KzTe<XSid;05QBlz");
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder2 = holdingReadQuery_HoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder2.build();
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("KzTe<XSid;05QBlz", uUID0, uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("REp-s3SC 4NtJLwb-n", uUID0, uUID0, uUID0, hashMap0);
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = holdingReadQuery_HoldingReadQueryBuilder0.customerAccessToken("REp-s3SC 4NtJLwb-n");
      holdingReadQuery_HoldingReadQueryBuilder1.financialInstitutionId(uUID0);
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString(".)sTaR|`~m");
      holdingReadQuery_HoldingReadQueryBuilder0.accountId(uUID0);
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(holdingReadQuery1.equals((Object)holdingReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      holdingReadQuery_HoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder1.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      holdingReadQuery_HoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(boolean0);
      assertFalse(holdingReadQuery1.equals((Object)holdingReadQuery0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      Map<String, String> map0 = holdingReadQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("w|.ofm^Si", uUID0, uUID0, uUID0, map0);
      boolean boolean0 = holdingReadQuery1.equals(holdingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      holdingReadQuery_HoldingReadQueryBuilder0.customerAccessToken("$I.nTr");
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertFalse(holdingReadQuery1.equals((Object)holdingReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("?", uUID0, uUID0, uUID0, hashMap0);
      HoldingReadQuery holdingReadQuery1 = new HoldingReadQuery("?", uUID0, uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = holdingReadQuery1.equals(holdingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder0.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("?", uUID0, uUID0, uUID0, hashMap0);
      boolean boolean0 = holdingReadQuery0.equals(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("?", uUID0, uUID0, uUID0, (Map<String, String>) null);
      String string0 = hashMap0.getOrDefault(holdingReadQuery0, "973Zn:`b");
      assertEquals("973Zn:`b", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = holdingReadQuery_HoldingReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder1.build();
      Map<String, String> map0 = holdingReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = new HoldingReadQuery.HoldingReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("");
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder1 = holdingReadQuery_HoldingReadQueryBuilder0.holdingId(uUID0);
      HoldingReadQuery holdingReadQuery0 = holdingReadQuery_HoldingReadQueryBuilder1.build();
      HoldingReadQuery holdingReadQuery1 = holdingReadQuery_HoldingReadQueryBuilder1.build();
      boolean boolean0 = holdingReadQuery0.equals(holdingReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HoldingReadQuery holdingReadQuery0 = new HoldingReadQuery("pMq", uUID0, uUID0, uUID0, hashMap0);
      String string0 = holdingReadQuery0.toString();
      assertEquals("HoldingReadQuery(customerAccessToken=pMq, financialInstitutionId=00000000-0100-4000-8200-000003000000, accountId=00000000-0100-4000-8200-000003000000, holdingId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HoldingReadQuery.HoldingReadQueryBuilder holdingReadQuery_HoldingReadQueryBuilder0 = HoldingReadQuery.builder();
      String string0 = holdingReadQuery_HoldingReadQueryBuilder0.toString();
      assertEquals("HoldingReadQuery.HoldingReadQueryBuilder(customerAccessToken=null, financialInstitutionId=null, accountId=null, holdingId=null, additionalHeaders$value=null)", string0);
  }
}
