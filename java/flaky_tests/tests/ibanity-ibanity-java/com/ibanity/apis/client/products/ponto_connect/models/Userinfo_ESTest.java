/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:49:00 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Userinfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Userinfo_ESTest extends Userinfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setPaymentsActivated(true);
      boolean boolean0 = userinfo0.isPaymentsActivated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setSub("`u'Sgk6t].-]rF ");
      String string0 = userinfo0.getSub();
      assertEquals("`u'Sgk6t].-]rF ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      userinfo0.setSub("");
      userinfo0.getSub();
      assertFalse(userinfo0.isPaymentsActivated());
      assertFalse(userinfo0.isOnboardingComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      userinfo0.setName("<3&]rI1$Dnm$W1O.vV");
      userinfo0.getName();
      assertFalse(userinfo0.isPaymentsActivated());
      assertFalse(userinfo0.isOnboardingComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      userinfo_UserinfoBuilder0.name("");
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      String string0 = userinfo0.getName();
      assertFalse(userinfo0.isPaymentsActivated());
      assertFalse(userinfo0.isOnboardingComplete());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      boolean boolean0 = userinfo0.canEqual(userinfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Object object0 = new Object();
      boolean boolean0 = userinfo0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      userinfo0.getSub();
      assertFalse(userinfo0.isPaymentsActivated());
      assertFalse(userinfo0.isOnboardingComplete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      boolean boolean0 = userinfo0.isPaymentsActivated();
      assertFalse(userinfo0.isOnboardingComplete());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = new Userinfo.UserinfoBuilder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      userinfo0.getName();
      assertFalse(userinfo0.isPaymentsActivated());
      assertFalse(userinfo0.isOnboardingComplete());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Userinfo userinfo1 = new Userinfo();
      userinfo1.setSub("");
      assertFalse(userinfo1.equals((Object)userinfo0));
      
      userinfo0.setSub("");
      boolean boolean0 = userinfo1.equals(userinfo0);
      assertTrue(userinfo0.equals((Object)userinfo1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Userinfo userinfo1 = new Userinfo();
      assertTrue(userinfo1.equals((Object)userinfo0));
      
      userinfo1.setSub("F08p>s>s{zo_");
      boolean boolean0 = userinfo0.equals(userinfo1);
      assertFalse(userinfo1.equals((Object)userinfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Userinfo userinfo1 = new Userinfo();
      assertTrue(userinfo1.equals((Object)userinfo0));
      
      userinfo1.setSub("");
      boolean boolean0 = userinfo1.equals(userinfo0);
      assertFalse(userinfo1.equals((Object)userinfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setName("u,b=pcZie");
      Userinfo userinfo1 = new Userinfo();
      boolean boolean0 = userinfo0.equals(userinfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Userinfo userinfo1 = new Userinfo();
      userinfo1.setOnboardingComplete(true);
      boolean boolean0 = userinfo0.equals(userinfo1);
      assertTrue(userinfo1.isOnboardingComplete());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      Userinfo userinfo1 = new Userinfo();
      userinfo1.setPaymentsActivated(true);
      boolean boolean0 = userinfo0.equals(userinfo1);
      assertTrue(userinfo1.isPaymentsActivated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = new Userinfo();
      boolean boolean0 = userinfo0.equals(userinfo_UserinfoBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      boolean boolean0 = userinfo0.equals(userinfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setSub("+va6OfOI_/kWS~V");
      userinfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setName("`u'Sgk6t].-]rF ");
      userinfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setPaymentsActivated(true);
      userinfo0.hashCode();
      assertTrue(userinfo0.isPaymentsActivated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = new Userinfo.UserinfoBuilder();
      String string0 = userinfo_UserinfoBuilder0.toString();
      assertEquals("Userinfo.UserinfoBuilder(name=null, sub=null, paymentsActivated=false, onboardingComplete=false)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      userinfo_UserinfoBuilder0.onboardingComplete(true);
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      boolean boolean0 = userinfo0.isOnboardingComplete();
      assertFalse(userinfo0.isPaymentsActivated());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = new Userinfo.UserinfoBuilder();
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder1 = userinfo_UserinfoBuilder0.paymentsActivated(false);
      assertSame(userinfo_UserinfoBuilder0, userinfo_UserinfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = new Userinfo.UserinfoBuilder();
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder1 = userinfo_UserinfoBuilder0.name("R;");
      Userinfo userinfo0 = userinfo_UserinfoBuilder1.build();
      Userinfo userinfo1 = userinfo_UserinfoBuilder0.build();
      boolean boolean0 = userinfo0.equals(userinfo1);
      assertFalse(userinfo1.isOnboardingComplete());
      assertTrue(boolean0);
      assertFalse(userinfo1.isPaymentsActivated());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo userinfo0 = userinfo_UserinfoBuilder0.build();
      boolean boolean0 = userinfo0.isOnboardingComplete();
      assertFalse(boolean0);
      assertFalse(userinfo0.isPaymentsActivated());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      String string0 = userinfo0.toString();
      assertEquals("Userinfo(name=null, sub=null, paymentsActivated=false, onboardingComplete=false)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder0 = Userinfo.builder();
      Userinfo.UserinfoBuilder userinfo_UserinfoBuilder1 = userinfo_UserinfoBuilder0.sub(")|,(f)yR]W");
      assertSame(userinfo_UserinfoBuilder0, userinfo_UserinfoBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setOnboardingComplete(true);
      userinfo0.hashCode();
      assertTrue(userinfo0.isOnboardingComplete());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Userinfo userinfo0 = new Userinfo();
      userinfo0.setName("");
      Userinfo userinfo1 = new Userinfo();
      boolean boolean0 = userinfo1.equals(userinfo0);
      assertFalse(boolean0);
  }
}
