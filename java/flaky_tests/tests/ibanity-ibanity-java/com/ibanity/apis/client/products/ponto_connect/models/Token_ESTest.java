/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:58:22 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Token;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token.TokenBuilder token_TokenBuilder1 = token_TokenBuilder0.expiresIn((-1));
      Token token0 = token_TokenBuilder1.build();
      token0.hashCode();
      assertEquals((-1), token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token token0 = new Token();
      Token token1 = new Token();
      token1.setExpiresIn((-1278));
      boolean boolean0 = token0.equals(token1);
      assertEquals((-1278), token1.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token token0 = token_TokenBuilder0.build();
      token0.setTokenType("O$V`l8");
      token0.getTokenType();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token token0 = token_TokenBuilder0.build();
      token0.setTokenType("");
      token0.getTokenType();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      token_TokenBuilder0.scope("%");
      Token token0 = token_TokenBuilder0.build();
      String string0 = token0.getScope();
      assertEquals(0, token0.getExpiresIn());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token token0 = token_TokenBuilder0.build();
      token0.setScope("");
      token0.getScope();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = new Token();
      token0.setRefreshToken("Bk'3S>X");
      String string0 = token0.getRefreshToken();
      assertEquals("Bk'3S>X", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token token0 = new Token();
      token0.setRefreshToken("");
      String string0 = token0.getRefreshToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token token0 = new Token();
      token0.setExpiresIn(46);
      int int0 = token0.getExpiresIn();
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token token0 = token_TokenBuilder0.build();
      assertEquals(0, token0.getExpiresIn());
      
      token0.setExpiresIn((-1));
      int int0 = token0.getExpiresIn();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token token0 = new Token();
      token0.setAccessToken("Token(accessToken=");
      String string0 = token0.getAccessToken();
      assertEquals("Token(accessToken=", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      token_TokenBuilder0.accessToken("");
      Token token0 = token_TokenBuilder0.build();
      String string0 = token0.getAccessToken();
      assertEquals(0, token0.getExpiresIn());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.canEqual(token0);
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token token0 = new Token();
      String string0 = token0.getTokenType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token token0 = new Token();
      int int0 = token0.getExpiresIn();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token token0 = new Token();
      String string0 = token0.getRefreshToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.getScope();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setAccessToken("");
      token0.setScope("Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=1, scope=null)");
      Token token1 = token_TokenBuilder0.build();
      token1.setAccessToken("");
      boolean boolean0 = token0.equals(token1);
      assertEquals(0, token1.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token token0 = new Token();
      token0.setTokenType("){hOY>rx");
      Token token1 = new Token();
      boolean boolean0 = token0.equals(token1);
      assertFalse(boolean0);
      assertEquals(0, token1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token token0 = new Token();
      Token token1 = new Token();
      assertTrue(token1.equals((Object)token0));
      
      token1.setTokenType("@-c");
      boolean boolean0 = token0.equals(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token token0 = new Token();
      token0.setRefreshToken("");
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      
      token1.setRefreshToken("");
      boolean boolean0 = token0.equals(token1);
      assertTrue(token1.equals((Object)token0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token token0 = new Token();
      token0.setRefreshToken("Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, scope=null)");
      Token token1 = new Token();
      boolean boolean0 = token1.equals(token0);
      assertFalse(boolean0);
      assertEquals(0, token1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setAccessToken("");
      Token token1 = token_TokenBuilder0.build();
      assertFalse(token1.equals((Object)token0));
      
      token1.setAccessToken("");
      boolean boolean0 = token0.equals(token1);
      assertTrue(token1.equals((Object)token0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token token0 = new Token();
      Token token1 = new Token();
      assertTrue(token1.equals((Object)token0));
      
      token1.setAccessToken(", scope=");
      boolean boolean0 = token0.equals(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setAccessToken("");
      Token token1 = token_TokenBuilder0.build();
      boolean boolean0 = token0.equals(token1);
      assertFalse(boolean0);
      assertEquals(0, token1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token token0 = new Token();
      Token token1 = new Token();
      token1.setExpiresIn(1558);
      boolean boolean0 = token0.equals(token1);
      assertEquals(1558, token1.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      boolean boolean0 = token0.equals(token_TokenBuilder0);
      assertEquals(0, token0.getExpiresIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token token0 = new Token();
      boolean boolean0 = token0.equals(token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setScope("Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=1, scope=null)");
      token0.hashCode();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      token_TokenBuilder0.tokenType("");
      Token token0 = token_TokenBuilder0.build();
      token0.hashCode();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setRefreshToken("T");
      token0.hashCode();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = new Token.TokenBuilder();
      Token token0 = token_TokenBuilder0.build();
      token0.setAccessToken("");
      token0.hashCode();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token token0 = token_TokenBuilder0.build();
      token0.getAccessToken();
      assertEquals(0, token0.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      String string0 = token_TokenBuilder0.toString();
      assertEquals("Token.TokenBuilder(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, scope=null)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      token_TokenBuilder0.scope("JZa-J]6|gfum");
      Token token0 = token_TokenBuilder0.build();
      Token token1 = token_TokenBuilder0.build();
      boolean boolean0 = token0.equals(token1);
      assertEquals(0, token1.getExpiresIn());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token.TokenBuilder token_TokenBuilder1 = token_TokenBuilder0.refreshToken("");
      assertSame(token_TokenBuilder1, token_TokenBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token.TokenBuilder token_TokenBuilder0 = Token.builder();
      Token.TokenBuilder token_TokenBuilder1 = token_TokenBuilder0.tokenType("");
      Token token0 = token_TokenBuilder1.build();
      Token token1 = token_TokenBuilder1.build();
      boolean boolean0 = token0.equals(token1);
      assertEquals(0, token1.getExpiresIn());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token token0 = new Token();
      token0.setRefreshToken("");
      Token token1 = new Token();
      boolean boolean0 = token0.equals(token1);
      assertFalse(boolean0);
      assertEquals(0, token1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token token0 = new Token();
      token0.setScope("");
      Token token1 = new Token();
      boolean boolean0 = token1.equals(token0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(boolean0);
      assertEquals(0, token1.getExpiresIn());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token token0 = new Token();
      String string0 = token0.toString();
      assertEquals("Token(accessToken=null, refreshToken=null, tokenType=null, expiresIn=0, scope=null)", string0);
  }
}
