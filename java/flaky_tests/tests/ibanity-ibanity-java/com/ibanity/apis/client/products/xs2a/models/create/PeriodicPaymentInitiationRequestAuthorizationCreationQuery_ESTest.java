/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:42:56 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationRequestAuthorizationCreationQuery_ESTest extends PeriodicPaymentInitiationRequestAuthorizationCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(450, 450);
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters(hashMap0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("@6oWr");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      UUID uUID0 = MockUUID.fromString((String) null);
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "H|:h3r4E5+2Qw2~a", hashMap0, hashMap0);
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters(hashMap0);
      hashMap0.put("at[x", "K~Y2O#W%=d]89T");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder1.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      Random.setNextRandom((-1249));
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", map0, map0);
      UUID uUID1 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.getPaymentInitiationRequestId();
      assertEquals("e1040000-e204-4000-a304-0000e4040000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      Random.setNextRandom((-1249));
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", map0, map0);
      UUID uUID1 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.getFinancialInstitutionId();
      assertEquals((-6700230341794988032L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "", map0, map0);
      UUID uUID1 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, (String) null, (Map<String, String>) null, (Map<String, String>) null);
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "H|:h3r4E5+2Qw2~a", hashMap0, hashMap0);
      hashMap0.put("PeriodicPaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, customerAccessToken=H|:h3r4E5+2Qw2~a, queryParameters={}, additionalHeaders={})", "H|:h3r4E5+2Qw2~a");
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "H|:h3r4E5+2Qw2~a", hashMap0, hashMap0);
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.canEqual(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "H|:h3r4E5+2Qw2~a", hashMap0, hashMap0);
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "H|:h3r4E5+2Qw2~a", hashMap0, hashMap0);
      String string0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getCustomerAccessToken();
      assertEquals("H|:h3r4E5+2Qw2~a", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery", (Map<String, String>) null, (Map<String, String>) null);
      UUID uUID1 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getPaymentInitiationRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery", (Map<String, String>) null, (Map<String, String>) null);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery", (Map<String, String>) null, (Map<String, String>) null);
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.customerAccessToken("aTh]G6VS*7k:");
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)periodicPaymentInitiationRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)periodicPaymentInitiationRequestAuthorizationCreationQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals((Object)periodicPaymentInitiationRequestAuthorizationCreationQuery0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.cli%nt.products.xs2a.models.create.PeriodicPaymentIntiationRequestAuthorizationCreationQuery", (Map<String, String>) null, (Map<String, String>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.cli%nt.products.xs2a.models.create.PeriodicPaymentIntiationRequestAuthorizationCreationQuery", (Map<String, String>) null, hashMap0);
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, (String) null, (Map<String, String>) null, (Map<String, String>) null);
      periodicPaymentInitiationRequestAuthorizationCreationQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("[x]yx94rv8r'C='(>6");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "[x]yx94rv8r'C='(>6", hashMap0, hashMap0);
      boolean boolean0 = hashMap0.remove((Object) periodicPaymentInitiationRequestAuthorizationCreationQuery0, (Object) "[x]yx94rv8r'C='(>6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.queryParameters((Map<String, String>) null);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.getQueryParameters();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = PeriodicPaymentInitiationRequestAuthorizationCreationQuery.builder();
      String string0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder(financialInstitutionId=null, paymentInitiationRequestId=null, customerAccessToken=null, queryParameters$value=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery.PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery1 = periodicPaymentInitiationRequestAuthorizationCreationQuery_PeriodicPaymentInitiationRequestAuthorizationCreationQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationCreationQuery1.equals(periodicPaymentInitiationRequestAuthorizationCreationQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestAuthorizationCreationQuery periodicPaymentInitiationRequestAuthorizationCreationQuery0 = new PeriodicPaymentInitiationRequestAuthorizationCreationQuery(uUID0, uUID0, "com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery", (Map<String, String>) null, (Map<String, String>) null);
      String string0 = periodicPaymentInitiationRequestAuthorizationCreationQuery0.toString();
      assertEquals("PeriodicPaymentInitiationRequestAuthorizationCreationQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, customerAccessToken=com.ibanity.apis.client.products.xs2a.models.create.PeriodicPaymentInitiationRequestAuthorizationCreationQuery, queryParameters=null, additionalHeaders=null)", string0);
  }
}
