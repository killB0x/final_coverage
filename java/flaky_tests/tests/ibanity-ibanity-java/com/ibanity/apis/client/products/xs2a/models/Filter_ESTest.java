/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:55:39 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.xs2a.models.Filter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field("zJ");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getIn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter("hEc|,Jt+xb", "", "", "");
      String string0 = filter0.getIn();
      assertEquals("", string0);
      assertEquals("hEc|,Jt+xb", filter0.getField());
      assertEquals("", filter0.getContains());
      assertEquals("", filter0.getEq());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "field is marked non-null but is null");
      String string0 = filter0.getField();
      assertEquals("", filter0.getEq());
      assertEquals("", filter0.getContains());
      assertEquals("", string0);
      assertEquals("field is marked non-null but is null", filter0.getIn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field("zJ");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getEq();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter("field is marked non-null but is null", "_R", "qZhd", "field is marked non-null but is null");
      String string0 = filter0.getEq();
      assertEquals("field is marked non-null but is null", filter0.getIn());
      assertEquals("qZhd", string0);
      assertEquals("_R", filter0.getContains());
      assertEquals("field is marked non-null but is null", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("N]3nk7=(");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getContains();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter("field is marked non-null but is null", "", ">A5wY2FFQ^|?w", (String) null);
      String string0 = filter0.getContains();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(">A5wY2FFQ^|?w", filter0.getEq());
      assertEquals("field is marked non-null but is null", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter("~!AyCU,p<*g3N", "~!AyCU,p<*g3N", "~!AyCU,p<*g3N", "~!AyCU,p<*g3N");
      boolean boolean0 = filter0.canEqual(filter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter("field is marked non-null but is null", "_R", "qZhd", "field is marked non-null but is null");
      Object object0 = new Object();
      filter0.canEqual(object0);
      assertEquals("qZhd", filter0.getEq());
      assertEquals("field is marked non-null but is null", filter0.getIn());
      assertEquals("_R", filter0.getContains());
      assertEquals("field is marked non-null but is null", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = null;
      try {
        filter0 = new Filter((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is marked non-null but is null
         //
         verifyException("com.ibanity.apis.client.products.xs2a.models.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter("jqaw=Tn)iW+V57P!Tf}", "jqaw=Tn)iW+V57P!Tf}", "jqaw=Tn)iW+V57P!Tf}", "jqaw=Tn)iW+V57P!Tf}");
      String string0 = filter0.getField();
      assertEquals("jqaw=Tn)iW+V57P!Tf}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter("+40<PlIG", "Filter.FilterBuilder(field=", "Filter.FilterBuilder(field=", "Filter.FilterBuilder(field=");
      String string0 = filter0.getContains();
      assertEquals("Filter.FilterBuilder(field=", filter0.getIn());
      assertEquals("Filter.FilterBuilder(field=", string0);
      assertEquals("Filter.FilterBuilder(field=", filter0.getEq());
      assertEquals("+40<PlIG", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter("+40<PlIG", "Filter.FilterBuilder(field=", "Filter.FilterBuilder(field=", "Filter.FilterBuilder(field=");
      String string0 = filter0.getIn();
      assertEquals("Filter.FilterBuilder(field=", string0);
      assertEquals("Filter.FilterBuilder(field=", filter0.getEq());
      assertEquals("+40<PlIG", filter0.getField());
      assertEquals("Filter.FilterBuilder(field=", filter0.getContains());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter("", ", in=", "", "-^#)Ris}8@\u0003#39");
      String string0 = filter0.getEq();
      assertEquals(", in=", filter0.getContains());
      assertEquals("-^#)Ris}8@\u0003#39", filter0.getIn());
      assertEquals("", filter0.getField());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.field(" tne,li");
      Filter.FilterBuilder filter_FilterBuilder2 = filter_FilterBuilder1.in(".6b4");
      Filter filter0 = filter_FilterBuilder2.build();
      Filter filter1 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals(filter1);
      assertTrue(boolean0);
      assertEquals(" tne,li", filter1.getField());
      assertEquals(".6b4", filter1.getIn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("m~");
      Filter filter0 = filter_FilterBuilder0.build();
      filter_FilterBuilder0.in("m~");
      Filter filter1 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals(filter1);
      assertFalse(boolean0);
      assertFalse(filter1.equals((Object)filter0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      Filter filter1 = new Filter("", "", "", (String) null);
      boolean boolean0 = filter0.equals(filter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter("6Q<7$h|h<=", "6Q<7$h|h<=", "6Q<7$h|h<=", "6Q<7$h|h<=");
      Filter filter1 = new Filter("6Q<7$h|h<=", "6Q<7$h|h<=", "", "");
      boolean boolean0 = filter1.equals(filter0);
      assertEquals("", filter1.getIn());
      assertFalse(boolean0);
      assertEquals("6Q<7$h|h<=", filter1.getField());
      assertEquals("6Q<7$h|h<=", filter1.getContains());
      assertEquals("", filter1.getEq());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter("oXP(L&&-*K{y]", "oXP(L&&-*K{y]", "oXP(L&&-*K{y]", "oXP(L&&-*K{y]");
      Filter filter1 = new Filter("oXP(L&&-*K{y]", "oXP(L&&-*K{y]", (String) null, (String) null);
      boolean boolean0 = filter1.equals(filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("m~");
      filter_FilterBuilder0.eq("m~");
      Filter filter0 = filter_FilterBuilder0.build();
      Filter filter1 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals(filter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter("2", (String) null, (String) null, "2");
      Filter filter1 = new Filter("2", "2", "2", "2");
      boolean boolean0 = filter1.equals(filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter("A)q4\u0004f$FQec3G1GSMr~", "A)q4\u0004f$FQec3G1GSMr~", "A)q4\u0004f$FQec3G1GSMr~", "A)q4\u0004f$FQec3G1GSMr~");
      Filter filter1 = new Filter("A)q4\u0004f$FQec3G1GSMr~", (String) null, (String) null, "A)q4\u0004f$FQec3G1GSMr~");
      boolean boolean0 = filter1.equals(filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("~");
      filter_FilterBuilder0.contains("kRou}2ELy5L");
      Filter filter0 = filter_FilterBuilder0.build();
      Filter filter1 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals(filter1);
      assertEquals("~", filter1.getField());
      assertTrue(boolean0);
      assertEquals("kRou}2ELy5L", filter1.getContains());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter("&H", "&H", "&H", "&H");
      Filter filter1 = new Filter("", "&H", "&H", "");
      boolean boolean0 = filter0.equals(filter1);
      assertEquals("", filter1.getField());
      assertEquals("&H", filter1.getContains());
      assertEquals("&H", filter1.getEq());
      assertEquals("", filter1.getIn());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("m~");
      Filter filter0 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals("m~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter("faiNR%VVEdnkHL=$", "faiNR%VVEdnkHL=$", "faiNR%VVEdnkHL=$", "faiNR%VVEdnkHL=$");
      boolean boolean0 = filter0.equals(filter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      filter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("m~");
      filter_FilterBuilder0.eq("m~");
      Filter filter0 = filter_FilterBuilder0.build();
      filter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("~");
      filter_FilterBuilder0.contains("kRou}2ELy5L");
      Filter filter0 = filter_FilterBuilder0.build();
      filter0.hashCode();
      assertEquals("~", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      // Undeclared exception!
      try { 
        filter_FilterBuilder0.field((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is marked non-null but is null
         //
         verifyException("com.ibanity.apis.client.products.xs2a.models.Filter$FilterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      filter_FilterBuilder0.field("~");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.toString();
      assertEquals("Filter(field=~, contains=null, eq=null, in=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
      String string0 = filter_FilterBuilder0.toString();
      assertEquals("Filter.FilterBuilder(field=null, contains=null, eq=null, in=null)", string0);
  }
}
