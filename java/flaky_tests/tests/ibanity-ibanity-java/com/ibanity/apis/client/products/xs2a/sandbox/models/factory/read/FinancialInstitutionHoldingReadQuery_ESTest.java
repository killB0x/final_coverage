/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:23:25 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read.FinancialInstitutionHoldingReadQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionHoldingReadQuery_ESTest extends FinancialInstitutionHoldingReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UUID uUID1 = MockUUID.fromString("");
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID1);
      financialInstitutionHoldingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UUID uUID1 = MockUUID.fromString("/3yZ>?if}w");
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID1, uUID0);
      financialInstitutionHoldingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      financialInstitutionHoldingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      financialInstitutionHoldingReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionHoldingId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery1.equals(financialInstitutionHoldingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery1.equals(financialInstitutionHoldingReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery1.equals(financialInstitutionHoldingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionHoldingId=null)");
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(5045);
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionUserId();
      assertEquals((-5254856337122983936L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom(5045);
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionId();
      assertEquals((-5254856337122983936L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionHoldingId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.setNextRandom(5045);
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionHoldingId();
      assertEquals("b5130000-b613-4000-b713-0000b8130000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random.setNextRandom(5045);
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionAccountId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.canEqual(financialInstitutionHoldingReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionHoldingReadQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionHoldingId();
      assertEquals(16793600L, uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionUserId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionHoldingReadQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID1);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(financialInstitutionHoldingReadQuery1.equals((Object)financialInstitutionHoldingReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = new FinancialInstitutionHoldingReadQuery((UUID) null, (UUID) null, (UUID) null, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(financialInstitutionHoldingReadQuery1.equals((Object)financialInstitutionHoldingReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID1, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(financialInstitutionHoldingReadQuery1.equals((Object)financialInstitutionHoldingReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionHoldingReadQuery1.equals((Object)financialInstitutionHoldingReadQuery0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery1.equals(financialInstitutionHoldingReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals("FinancialInstitutionHoldingReadQuery(financialInstitutionId=cf030000-d003-4000-9103-0000d2030000, financialInstitutionUserId=d3030000-d403-4000-9503-0000d6030000, financialInstitutionAccountId=cf030000-d003-4000-9103-0000d2030000, financialInstitutionHoldingId=d3030000-d403-4000-9503-0000d6030000)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = new FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder();
      String string0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null, financialInstitutionHoldingId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      String string0 = financialInstitutionHoldingReadQuery0.toString();
      assertEquals("FinancialInstitutionHoldingReadQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, financialInstitutionUserId=00000000-0100-4000-8200-000003000000, financialInstitutionAccountId=00000000-0100-4000-8200-000003000000, financialInstitutionHoldingId=00000000-0100-4000-8200-000003000000)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FinancialInstitutionHoldingReadQuery.FinancialInstitutionHoldingReadQueryBuilder financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0 = FinancialInstitutionHoldingReadQuery.builder();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = financialInstitutionHoldingReadQuery_FinancialInstitutionHoldingReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery0 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      FinancialInstitutionHoldingReadQuery financialInstitutionHoldingReadQuery1 = new FinancialInstitutionHoldingReadQuery(uUID0, uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionHoldingReadQuery0.equals(financialInstitutionHoldingReadQuery1);
      assertTrue(boolean0);
  }
}
