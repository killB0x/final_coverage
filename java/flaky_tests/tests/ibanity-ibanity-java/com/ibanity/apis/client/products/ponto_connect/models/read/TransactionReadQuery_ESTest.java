/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:24:43 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.TransactionReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransactionReadQuery_ESTest extends TransactionReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1174);
      UUID uUID0 = MockUUID.fromString((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery((String) null, uUID0, uUID0, hashMap0);
      UUID uUID1 = transactionReadQuery0.getTransactionId();
      assertEquals((-7636979065579880448L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("H|1P^", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = transactionReadQuery0.getTransactionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(", additionalHeaders=", "fhWwho]A+M3LF6ai[");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery(", additionalHeaders=", (UUID) null, (UUID) null, hashMap0);
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(1528);
      UUID uUID0 = MockUUID.randomUUID();
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      TransactionReadQuery transactionReadQuery1 = new TransactionReadQuery(", accountId=", uUID0, uUID0, map0);
      UUID uUID1 = transactionReadQuery1.getAccountId();
      assertEquals("f8050000-f905-4000-ba05-0000fb050000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("H|1P^", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = transactionReadQuery0.getAccountId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      String string0 = transactionReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("H|1P^", uUID0, uUID0, (Map<String, String>) null);
      String string0 = transactionReadQuery0.getAccessToken();
      assertEquals("H|1P^", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.canEqual(transactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      String string0 = transactionReadQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      UUID uUID0 = transactionReadQuery0.getTransactionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      UUID uUID0 = transactionReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.ponto_connect.models.read.TransactionReadQuery$TransactionReadQueryBuilder");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("-", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = transactionReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(transactionReadQuery0.equals((Object)transactionReadQuery1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder1 = transactionReadQuery_TransactionReadQueryBuilder0.accessToken("");
      UUID uUID0 = MockUUID.fromString("q");
      transactionReadQuery_TransactionReadQueryBuilder1.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString((String) null);
      transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.accountId(uUID0);
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.accessToken("com.ibanity.apis.client.products.ponto_connect.models.read.TransactionReadQuery$TransactionReadQueryBuilder");
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertFalse(boolean0);
      assertFalse(transactionReadQuery1.equals((Object)transactionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery_TransactionReadQueryBuilder0.accessToken("xytvUY8j9/Q_A_:-T<");
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("", (UUID) null, (UUID) null, hashMap0);
      boolean boolean0 = transactionReadQuery0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      TransactionReadQuery transactionReadQuery0 = new TransactionReadQuery("p.7#.YclC^(4}", uUID0, uUID0, (Map<String, String>) null);
      transactionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      transactionReadQuery_TransactionReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery1.equals(transactionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      transactionReadQuery_TransactionReadQueryBuilder0.transactionId(uUID0);
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      TransactionReadQuery transactionReadQuery1 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      boolean boolean0 = transactionReadQuery0.equals(transactionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = TransactionReadQuery.builder();
      String string0 = transactionReadQuery_TransactionReadQueryBuilder0.toString();
      assertEquals("TransactionReadQuery.TransactionReadQueryBuilder(accessToken=null, accountId=null, transactionId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TransactionReadQuery.TransactionReadQueryBuilder transactionReadQuery_TransactionReadQueryBuilder0 = new TransactionReadQuery.TransactionReadQueryBuilder();
      TransactionReadQuery transactionReadQuery0 = transactionReadQuery_TransactionReadQueryBuilder0.build();
      String string0 = transactionReadQuery0.toString();
      assertEquals("TransactionReadQuery(accessToken=null, accountId=null, transactionId=null, additionalHeaders={})", string0);
  }
}
