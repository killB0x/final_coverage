/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:14:05 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.BulkPaymentReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BulkPaymentReadQuery_ESTest extends BulkPaymentReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1.build();
      bulkPaymentReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(1748);
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = new BulkPaymentReadQuery(".{qWR\u0004;xqT`Bm)c", uUID0, uUID0, hashMap0);
      UUID uUID1 = bulkPaymentReadQuery0.getBulkPaymentId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      BulkPaymentReadQuery bulkPaymentReadQuery0 = new BulkPaymentReadQuery("", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = bulkPaymentReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders(hashMap0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("w", "w");
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders(hashMap0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-2182));
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("Fnr\"pi>'%@9]t");
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accountId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID1 = bulkPaymentReadQuery0.getAccountId();
      assertEquals((-8788774670548058112L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = new BulkPaymentReadQuery("]y|Jf", uUID0, uUID0, hashMap0);
      UUID uUID1 = bulkPaymentReadQuery0.getAccountId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accessToken(", accountId=");
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      String string0 = bulkPaymentReadQuery0.getAccessToken();
      assertEquals(", accountId=", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentReadQuery0.getAdditionalHeaders();
      BulkPaymentReadQuery bulkPaymentReadQuery1 = new BulkPaymentReadQuery("", uUID0, uUID0, map0);
      String string0 = bulkPaymentReadQuery1.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.canEqual(bulkPaymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = bulkPaymentReadQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      String string0 = bulkPaymentReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = bulkPaymentReadQuery0.getBulkPaymentId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = bulkPaymentReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertFalse(bulkPaymentReadQuery0.equals((Object)bulkPaymentReadQuery1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentReadQuery1.equals((Object)bulkPaymentReadQuery0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accountId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accountId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentReadQuery1.equals((Object)bulkPaymentReadQuery0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accessToken("Fw`Z?~|79.9-C");
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accessToken("");
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentReadQuery1.equals((Object)bulkPaymentReadQuery0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accessToken("");
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals("BulkPaymentReadQuery(accessToken=wALR{X!vJm<, accountId=null, bulkPaymentId=00000000-0100-4000-8200-000003000000, additionalHeaders={})");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      bulkPaymentReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = new BulkPaymentReadQuery("]y|Jf", uUID0, uUID0, hashMap0);
      String string0 = hashMap0.remove((Object) bulkPaymentReadQuery0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery1.equals(bulkPaymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder1.build();
      UUID uUID1 = bulkPaymentReadQuery0.getBulkPaymentId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      String string0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.toString();
      assertEquals("BulkPaymentReadQuery.BulkPaymentReadQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = BulkPaymentReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.accountId(uUID0);
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      BulkPaymentReadQuery bulkPaymentReadQuery1 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      boolean boolean0 = bulkPaymentReadQuery0.equals(bulkPaymentReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BulkPaymentReadQuery.BulkPaymentReadQueryBuilder bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0 = new BulkPaymentReadQuery.BulkPaymentReadQueryBuilder();
      BulkPaymentReadQuery bulkPaymentReadQuery0 = bulkPaymentReadQuery_BulkPaymentReadQueryBuilder0.build();
      String string0 = bulkPaymentReadQuery0.toString();
      assertEquals("BulkPaymentReadQuery(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders={})", string0);
  }
}
