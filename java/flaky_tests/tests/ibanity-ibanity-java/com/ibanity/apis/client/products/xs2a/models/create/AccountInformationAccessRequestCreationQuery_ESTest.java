/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:19:03 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.paging.IbanityPagingSpec;
import com.ibanity.apis.client.products.xs2a.models.create.AccountInformationAccessRequestCreationQuery;
import com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery;
import com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountInformationAccessRequestCreationQuery_ESTest extends AccountInformationAccessRequestCreationQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString(", financialInstitutionId=");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionId(uUID0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      accountInformationAccessRequestCreationQuery0.hashCode();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("\".!tSa\u0007L|-?!5XZ48");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery((String) null, "ave2Vj2>", "ave2Vj2>", "\".!tSa\u0007L|-?!5XZ48");
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(10L);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("\".!tSa\u0007L|-?!5XZ48"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "\".!tSa\u0007L|-?!5XZ48", "\".!tSa\u0007L|-?!5XZ48", (String) null, "", (String) null, false, true, false, ", requestedPastTransactionDays=", (String) null, ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, hashMap0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(", requestedPastTransactionDays=", accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("\".!tSa\u0007L|-?!5XZ48"));
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback();
      assertTrue(boolean0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("ave2Vj2>", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("\".!tSa\u0007L|-?!5XZ48", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(", requestedPastTransactionDays=", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(list0.contains("\".!tSa\u0007L|-?!5XZ48"));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("x#h7N]>", "B~cxqSPJx;;4l+*\"q", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", "B~cxqSPJx;;4l+*\"q");
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("x#h7N]>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(315.158117);
      assertEquals((byte)59, bigDecimal0.byteValue());
      assertEquals((short)315, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("x#h7N]>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)59, bigDecimal0.byteValue());
      assertEquals((short)315, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", "", false, false, false, "", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, hashMap0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("x#h7N]>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)59, bigDecimal0.byteValue());
      assertEquals((short)315, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder"));
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts();
      assertFalse(boolean0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("B~cxqSPJx;;4l+*\"q", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("x#h7N]>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)59, bigDecimal0.byteValue());
      assertEquals((short)315, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(linkedList0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery$AuthorizationPortalCreationQueryBuilder"));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "GQL0xK$</]4", ", allowedAccountSubtypes$value=", ", allowedAccountSubtypes$value=", "GQL0xK$</]4", true, true, true, ", allowedAccountSubtypes$value=", (String) null, ibanityPagingSpec0, (MetaRequestCreationQuery) null, list0, list0, map0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("GQL0xK$</]4", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("GQL0xK$</]4", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("GQL0xK$</]4"));
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri();
      assertTrue(boolean0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("GQL0xK$</]4", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("GQL0xK$</]4", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(list0.contains("GQL0xK$</]4"));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("wg9", ", locale=", (String) null, "");
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", locale=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("wg9", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", locale=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("wg9", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, (String) null, ", allowMulticurrencyAccounts=", "com.ibanity.apis.client.paging.IbanityPagingSpec", "wg9", "lcLJCI&)@D", true, true, true, "g@3n", (String) null, ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, hashMap0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", locale=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("wg9", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("lcLJCI&)@D", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("wg9", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("g@3n"));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getState();
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", locale=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("wg9", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("lcLJCI&)@D", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("wg9", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(string0);
      assertFalse(list0.contains("g@3n"));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("P{m/9C0Z+]", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", "VIL", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=");
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("P{m/9C0Z+]"));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "\"", "[", "\"", true, true, true, "", "3<9[,.h#z6M>W|c{4W1", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getState();
      assertEquals("", string0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNotNull(string0);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.requestedAccountReferences((List<String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString("xf]@1@dLv%}cqr-gWb8");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", "0", "_G,$VX", ", disclaimerContent=");
      assertEquals("_G,$VX", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerContent=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("0", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("_G,$VX", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerContent=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("0", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(", disclaimerContent="));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, (UUID) null, ", allowedAccountSubtypes$value=", "", "It>@GSUZ/EzT", "AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", "\"Vf,}Kg<H#R{Y1g", true, true, true, "{Uk/W`+", "0", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, map0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("_G,$VX", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerContent=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("0", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("0", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("\"Vf,}Kg<H#R{Y1g", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("It>@GSUZ/EzT", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("{Uk/W`+", accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(linkedList0.contains("{Uk/W`+"));
      
      List<String> list0 = accountInformationAccessRequestCreationQuery1.getRequestedAccountReferences();
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("_G,$VX", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerContent=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("0", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("0", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals(", allowedAccountSubtypes$value=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("\"Vf,}Kg<H#R{Y1g", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("It>@GSUZ/EzT", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("{Uk/W`+", accountInformationAccessRequestCreationQuery1.getState());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains("{Uk/W`+"));
      assertFalse(list0.contains("{Uk/W`+"));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("I]J]?5@F+wi_");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("I]J]?5@F+wi_"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "k0!^", "", "MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", "^*gIJ", false, false, false, "^*gIJ", "MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", ibanityPagingSpec0, (MetaRequestCreationQuery) null, linkedList0, (List<String>) null, hashMap0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("^*gIJ", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("^*gIJ", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("k0!^", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertTrue(linkedList0.contains("I]J]?5@F+wi_"));
      assertFalse(linkedList0.contains("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery="));
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("^*gIJ", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("^*gIJ", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("k0!^", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains("I]J]?5@F+wi_"));
      assertFalse(linkedList0.contains("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery="));
      assertTrue(list0.contains("I]J]?5@F+wi_"));
      assertFalse(list0.contains("MetaRequestCreationQuery.MetaRequestCreationQueryBuilder(authorizationPortalCreationQuery="));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getRedirectUri();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery((String) null, "", "", "");
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      UUID uUID0 = MockUUID.fromString("");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "", "MetaRequestCreationQuery(authorizationPortalCreationQuery=", "", "XVh0?='NZ", false, false, false, "RpJ5", (String) null, ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, hashMap0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("MetaRequestCreationQuery(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("RpJ5", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("XVh0?='NZ", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains(""));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getRedirectUri();
      assertEquals("", string0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("MetaRequestCreationQuery(authorizationPortalCreationQuery=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("RpJ5", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("XVh0?='NZ", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(string0);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString("");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", ", allowMulticurrencyAccounts=", "~2jo9rN1,;E1>1(+F(", "");
      assertEquals("~2jo9rN1,;E1>1(+F(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      ibanityPagingSpec0.setLimit(0L);
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(0L, ibanityPagingSpec0.getLimit());
      
      BigDecimal bigDecimal0 = new BigDecimal((-2509.467692));
      assertEquals((byte)51, bigDecimal0.byteValue());
      assertEquals((short) (-2509), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("~2jo9rN1,;E1>1(+F(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)51, bigDecimal0.byteValue());
      assertEquals((short) (-2509), bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "kO]?|tb", "", "", "", "7r F&", false, false, true, "", "2wHkFi2LG5w", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(0L, ibanityPagingSpec0.getLimit());
      assertEquals("~2jo9rN1,;E1>1(+F(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)51, bigDecimal0.byteValue());
      assertEquals((short) (-2509), bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("7r F&", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("2wHkFi2LG5w", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("kO]?|tb", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("7r F&"));
      
      IbanityPagingSpec ibanityPagingSpec1 = accountInformationAccessRequestCreationQuery1.getPagingSpec();
      assertSame(ibanityPagingSpec0, ibanityPagingSpec1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertSame(ibanityPagingSpec1, ibanityPagingSpec0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(0L, ibanityPagingSpec0.getLimit());
      assertEquals("~2jo9rN1,;E1>1(+F(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)51, bigDecimal0.byteValue());
      assertEquals((short) (-2509), bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("7r F&", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("2wHkFi2LG5w", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("kO]?|tb", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(ibanityPagingSpec1.getAfter());
      assertEquals(0L, ibanityPagingSpec1.getLimit());
      assertNull(ibanityPagingSpec1.getBefore());
      assertNotNull(ibanityPagingSpec1);
      assertFalse(list0.contains("7r F&"));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      UUID uUID0 = MockUUID.fromString("$)Y!M|@8wa9|");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("u}bu+sspj-1a/}89 ", "$)Y!M|@8wa9|", ", financialInstitutionSecondaryColor=", "IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=");
      assertEquals("u}bu+sspj-1a/}89 ", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("$)Y!M|@8wa9|", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", financialInstitutionSecondaryColor=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, (BigDecimal) null);
      assertEquals("u}bu+sspj-1a/}89 ", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("$)Y!M|@8wa9|", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", financialInstitutionSecondaryColor=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "$)Y!M|@8wa9|", (String) null, "%<c@3", "$)Y!M|@8wa9|", ", financialInstitutionSecondaryColor=", false, false, false, "u}bu+sspj-1a/}89 ", "u}bu+sspj-1a/}89 ", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("u}bu+sspj-1a/}89 ", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("$)Y!M|@8wa9|", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", financialInstitutionSecondaryColor=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("%<c@3", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("u}bu+sspj-1a/}89 ", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("$)Y!M|@8wa9|", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("u}bu+sspj-1a/}89 ", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(", financialInstitutionSecondaryColor=", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("$)Y!M|@8wa9|", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("%<c@3"));
      
      IbanityPagingSpec ibanityPagingSpec1 = accountInformationAccessRequestCreationQuery0.getPagingSpec();
      assertSame(ibanityPagingSpec0, ibanityPagingSpec1);
      assertSame(ibanityPagingSpec1, ibanityPagingSpec0);
      assertEquals(0, linkedList0.size());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("u}bu+sspj-1a/}89 ", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("$)Y!M|@8wa9|", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", financialInstitutionSecondaryColor=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("%<c@3", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("u}bu+sspj-1a/}89 ", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("$)Y!M|@8wa9|", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("u}bu+sspj-1a/}89 ", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals(", financialInstitutionSecondaryColor=", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("$)Y!M|@8wa9|", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals(10L, ibanityPagingSpec1.getLimit());
      assertNull(ibanityPagingSpec1.getAfter());
      assertNull(ibanityPagingSpec1.getBefore());
      assertNotNull(ibanityPagingSpec1);
      assertFalse(linkedList0.contains("%<c@3"));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.pagingSpec(ibanityPagingSpec0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      ibanityPagingSpec0.setLimit((-2535L));
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals((-2535L), ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      IbanityPagingSpec ibanityPagingSpec1 = accountInformationAccessRequestCreationQuery0.getPagingSpec();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(ibanityPagingSpec1, ibanityPagingSpec0);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(ibanityPagingSpec1.getAfter());
      assertEquals((-2535L), ibanityPagingSpec1.getLimit());
      assertNull(ibanityPagingSpec1.getBefore());
      assertNotNull(ibanityPagingSpec1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = accountInformationAccessRequestCreationQuery0.getMetaRequestCreationQuery();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(metaRequestCreationQuery0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("NC");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("#kD/?86GPP.|", ", disclaimerTitle=", ")[{zE!v~P\"w_", ", disclaimerTitle=");
      assertEquals(")[{zE!v~P\"w_", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("#kD/?86GPP.|", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals(")[{zE!v~P\"w_", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("#kD/?86GPP.|", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(", disclaimerTitle="));
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "up+75P0", "", "NC", "lj695&4c.Xs9P-}4|", ", allowMulticurrencyAccounts=", false, false, false, ", allowMulticurrencyAccounts=", "c4K >.", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, map0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(")[{zE!v~P\"w_", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("#kD/?86GPP.|", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("c4K >.", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("up+75P0", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("NC", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("lj695&4c.Xs9P-}4|", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains(", disclaimerTitle="));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getLocale();
      assertEquals("lj695&4c.Xs9P-}4|", string0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(")[{zE!v~P\"w_", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("#kD/?86GPP.|", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("c4K >.", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("up+75P0", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", allowMulticurrencyAccounts=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("NC", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("lj695&4c.Xs9P-}4|", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(string0);
      assertFalse(list0.contains(", disclaimerTitle="));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.locale("");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getLocale();
      assertEquals("", string0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Random.setNextRandom(2009);
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString(", state=");
      assertEquals((-2808275838984306688L), uUID0.getMostSignificantBits());
      assertEquals("d9070000-da07-4000-9b07-0000dc070000", uUID0.toString());
      assertEquals((-7275846669302300672L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionId(uUID0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals((-2808275838984306688L), uUID0.getMostSignificantBits());
      assertEquals("d9070000-da07-4000-9b07-0000dc070000", uUID0.toString());
      assertEquals((-7275846669302300672L), uUID0.getLeastSignificantBits());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      UUID uUID1 = accountInformationAccessRequestCreationQuery0.getFinancialInstitutionId();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(uUID1, uUID0);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals((-7275846669302300672L), uUID1.getLeastSignificantBits());
      assertEquals((-2808275838984306688L), uUID1.getMostSignificantBits());
      assertEquals("d9070000-da07-4000-9b07-0000dc070000", uUID1.toString());
      assertNotNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery(", allowedAccountSubtypes=", ", allowMulticurrencyAccounts=", ", allowedAccountSubtypes=", ", allowedAccountSubtypes=");
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(", allowedAccountSubtypes="));
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "", "", "-*5euLTTO", ", allowedAccountSubtypes=", true, true, true, "-*5euLTTO", "", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, map0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("-*5euLTTO", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals(", allowedAccountSubtypes=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("-*5euLTTO", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains(""));
      
      UUID uUID1 = accountInformationAccessRequestCreationQuery1.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertSame(uUID1, uUID0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", allowedAccountSubtypes=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("-*5euLTTO", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals(", allowedAccountSubtypes=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("-*5euLTTO", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals(16793600L, uUID1.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
      assertNotNull(uUID1);
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("com.ibanity.apis.client.paging.IbanityPagingSpec$1", (String) null, "Z\"(", "stH$DJ");
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.paging.IbanityPagingSpec$1"));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder(accountInformationAccessRequestId=", ", disclaimerContent=", ".vUJ_sT5FBh`wkqQ7", "/!Hu=;<oU2:N", false, false, true, "mGXcg:bU(k", "", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("/!Hu=;<oU2:N", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals(", disclaimerContent=", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder(accountInformationAccessRequestId=", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("mGXcg:bU(k"));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference();
      assertEquals("", string0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("/!Hu=;<oU2:N", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals(", disclaimerContent=", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder(accountInformationAccessRequestId=", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(string0);
      assertFalse(linkedList0.contains("mGXcg:bU(k"));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", "", "", "");
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, (String) null, "]", (String) null, "]", (String) null, true, true, false, "Z\"(", "]", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains(""));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getCustomerIpAddress();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("]", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(string0);
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerIpAddress("8`\"P");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("8`\"P", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getCustomerIpAddress();
      assertEquals("8`\"P", string0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("8`\"P", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("P{m/9C0Z+]", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", "VIL", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=");
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "\"", "[", "\"", true, true, true, "", "3<9[,.h#z6M>W|c{4W1", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("P{m/9C0Z+]"));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getCustomerAccessToken();
      assertEquals("\"", string0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(string0);
      assertFalse(list0.contains("P{m/9C0Z+]"));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerAccessToken("");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getCustomerAccessToken();
      assertEquals("", string0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("mui:N", ",SHb(3,?t:ZX(u\"U", ")", "mui:N");
      assertEquals(")", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(",SHb(3,?t:ZX(u\"U", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals(")", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(",SHb(3,?t:ZX(u\"U", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("mui:N"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "mui:N", ")", "u-.(+Abt@V^A", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", ",SHb(3,?t:ZX(u\"U", false, true, true, "", "u-.(+Abt@V^A", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, hashMap0);
      assertEquals(")", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(",SHb(3,?t:ZX(u\"U", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("u-.(+Abt@V^A", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals(")", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals(",SHb(3,?t:ZX(u\"U", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("u-.(+Abt@V^A", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("mui:N", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("mui:N"));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getConsentReference();
      assertEquals("mui:N", string0);
      assertEquals(")", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals(",SHb(3,?t:ZX(u\"U", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("mui:N", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("u-.(+Abt@V^A", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals(")", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals(",SHb(3,?t:ZX(u\"U", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("u-.(+Abt@V^A", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("mui:N", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(string0);
      assertFalse(linkedList0.contains("mui:N"));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery(", financialInstitutionId=", ", allowMulticurrencyAccounts=", ", additionalHeaders$value=", "");
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", financialInstitutionId=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1974));
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertEquals((short) (-1974), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", financialInstitutionId=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertEquals((short) (-1974), bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "|X[`RPIx", "|X[`RPIx", "", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", true, false, false, ", financialInstitutionId=", (String) null, ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, hashMap0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", financialInstitutionId=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertEquals((short) (-1974), bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("|X[`RPIx", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", financialInstitutionId=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("|X[`RPIx", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("|X[`RPIx"));
      
      String string0 = accountInformationAccessRequestCreationQuery1.getConsentReference();
      assertEquals("", string0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(", allowMulticurrencyAccounts=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", financialInstitutionId=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)74, bigDecimal0.byteValue());
      assertEquals((short) (-1974), bigDecimal0.shortValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("|X[`RPIx", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", financialInstitutionId=", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("|X[`RPIx", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(string0);
      assertFalse(list0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", ", requestedPastTransactionDays=", "", "");
      assertEquals(", requestedPastTransactionDays=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, (BigDecimal) null);
      assertEquals(", requestedPastTransactionDays=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "", ", requestedPastTransactionDays=", "", (String) null, false, false, true, "", "", ibanityPagingSpec0, metaRequestCreationQuery0, (List<String>) null, (List<String>) null, map0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(", requestedPastTransactionDays=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", requestedPastTransactionDays=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery1.getAllowedAccountSubtypes();
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(", requestedPastTransactionDays=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(", requestedPastTransactionDays=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("[wx", "AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", "\"QQVeBV8Bazs3<F9i", "R\"Dwa{[");
      assertEquals("R\"Dwa{[", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("[wx", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\"QQVeBV8Bazs3<F9i", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("R\"Dwa{[", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("[wx", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\"QQVeBV8Bazs3<F9i", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\"QQVeBV8Bazs3<F9i"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1568);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, (String) null, "", (String) null, "", "", false, false, false, "R\"Dwa{[", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", (IbanityPagingSpec) null, metaRequestCreationQuery0, linkedList0, linkedList0, hashMap0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("R\"Dwa{[", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("[wx", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\"QQVeBV8Bazs3<F9i", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("R\"Dwa{[", accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains(""));
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("R\"Dwa{[", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("[wx", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("\"QQVeBV8Bazs3<F9i", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("R\"Dwa{[", accountInformationAccessRequestCreationQuery0.getState());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(""));
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("\"@)).[~>", "IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", "com.ibanity.apis.client.paging.IbanityPagingSpec$1", (String) null);
      assertEquals("\"@)).[~>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("\"@)).[~>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value="));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value="));
      assertTrue(linkedList0.contains(""));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "IbanityPagingSpec(limit=", "\"@)).[~>", "IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", "", "\"@)).[~>", true, true, true, "\"@)).[~>", "", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, hashMap0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("\"@)).[~>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(1, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("IbanityPagingSpec(limit=", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value="));
      assertTrue(linkedList0.contains(""));
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("\"@)).[~>", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNull(authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(1, linkedList0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("IbanityPagingSpec(limit=", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value=", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("\"@)).[~>", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value="));
      assertTrue(linkedList0.contains(""));
      assertFalse(list0.contains("IbanityPagingSpec.IbanityPagingSpecBuilder(limit$value="));
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("P{m/9C0Z+]", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", "VIL", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=");
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getAllowedAccountSubtypes();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor="));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", "\"", "[", "\"", true, true, true, "", "3<9[,.h#z6M>W|c{4W1", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("["));
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery1.getAdditionalHeaders();
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("VIL", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("P{m/9C0Z+]", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("AuthorizationPortalCreationQuery.AuthorizationPortalCreationQueryBuilder(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("3<9[,.h#z6M>W|c{4W1", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("[", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(map0);
      assertFalse(list0.contains("["));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", "", ", disclaimerTitle=", "");
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery((UUID) null, (UUID) null, "", "", "", "", "", true, true, false, "", "", (IbanityPagingSpec) null, metaRequestCreationQuery0, (List<String>) null, (List<String>) null, hashMap0);
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString((String) null);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("V", "IbanityPagingSpec(limit=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, (String) null, "uC3ar_UI", "}.\"", "", "uC3ar_UI", false, false, false, "}.\"", "*$fg%=21$", ibanityPagingSpec0, (MetaRequestCreationQuery) null, list0, list0, hashMap0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("uC3ar_UI", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("uC3ar_UI", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("}.\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("}.\"", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("*$fg%=21$", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("}.\""));
      
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery1.getAdditionalHeaders();
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("uC3ar_UI", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("uC3ar_UI", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("}.\"", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("}.\"", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("*$fg%=21$", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      assertFalse(list0.contains("}.\""));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      Random.setNextRandom((-3487));
      UUID uUID0 = MockUUID.fromString(">");
      assertEquals((-6841812256187154432L), uUID0.getLeastSignificantBits());
      assertEquals("9f0d0000-a00d-4000-a10d-0000a20d0000", uUID0.toString());
      assertEquals((-6985927444296548352L), uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery(">", "X[a n)/bq", "com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", ">");
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("X[a n)/bq", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(">", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(">", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("X[a n)/bq", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(">", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(">", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, ">", "EXC3g", "(+uq^dyeZ-h", "", ">", false, true, false, "", "!PjL", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-6841812256187154432L), uUID0.getLeastSignificantBits());
      assertEquals("9f0d0000-a00d-4000-a10d-0000a20d0000", uUID0.toString());
      assertEquals((-6985927444296548352L), uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("X[a n)/bq", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(">", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(">", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("!PjL", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("(+uq^dyeZ-h", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals(">", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(">", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("EXC3g", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
      
      UUID uUID1 = accountInformationAccessRequestCreationQuery1.getAccountInformationAccessRequestId();
      assertSame(uUID0, uUID1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertSame(uUID1, uUID0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals((-6841812256187154432L), uUID0.getLeastSignificantBits());
      assertEquals("9f0d0000-a00d-4000-a10d-0000a20d0000", uUID0.toString());
      assertEquals((-6985927444296548352L), uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("X[a n)/bq", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(">", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(">", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("!PjL", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("(+uq^dyeZ-h", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals(">", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertTrue(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(">", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals("EXC3g", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals((-6841812256187154432L), uUID1.getLeastSignificantBits());
      assertEquals((-6985927444296548352L), uUID1.getMostSignificantBits());
      assertEquals("9f0d0000-a00d-4000-a10d-0000a20d0000", uUID1.toString());
      assertNotNull(uUID1);
      assertFalse(list0.contains("com.ibanity.apis.client.products.xs2a.models.create.AuthorizationPortalCreationQuery"));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      UUID uUID1 = accountInformationAccessRequestCreationQuery0.getAccountInformationAccessRequestId();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(uUID1, uUID0);
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
      assertEquals(16793600L, uUID1.getMostSignificantBits());
      assertNotNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", "", ", disclaimerTitle=", "");
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery((UUID) null, (UUID) null, "", "", "", "", "", true, true, false, "", "", (IbanityPagingSpec) null, metaRequestCreationQuery0, (List<String>) null, (List<String>) null, hashMap0);
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      MetaRequestCreationQuery metaRequestCreationQuery1 = accountInformationAccessRequestCreationQuery0.getMetaRequestCreationQuery();
      assertSame(metaRequestCreationQuery0, metaRequestCreationQuery1);
      assertSame(metaRequestCreationQuery1, metaRequestCreationQuery0);
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", disclaimerTitle=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(metaRequestCreationQuery1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      UUID uUID0 = accountInformationAccessRequestCreationQuery0.getFinancialInstitutionId();
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getLocale();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback();
      assertFalse(boolean0);
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getConsentReference();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getCustomerAccessToken();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("/t:fs");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("/t:fs", "", "", "[84M.*<>");
      assertEquals("[84M.*<>", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("/t:fs", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("[84M.*<>", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("/t:fs", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("/t:fs"));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "/t:fs", "/t:fs", "", ", before=", false, false, false, "Z^$z", "/t:fs", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, hashMap0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("[84M.*<>", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("/t:fs", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z^$z", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals(", before=", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("[84M.*<>"));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getRedirectUri();
      assertEquals("/t:fs", string0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("[84M.*<>", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("/t:fs", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z^$z", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("/t:fs", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals(", before=", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(string0);
      assertFalse(linkedList0.contains("[84M.*<>"));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      UUID uUID0 = accountInformationAccessRequestCreationQuery0.getAccountInformationAccessRequestId();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      IbanityPagingSpec ibanityPagingSpec0 = accountInformationAccessRequestCreationQuery0.getPagingSpec();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(ibanityPagingSpec0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNotNull(ibanityPagingSpec0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, (String) null, (String) null, (String) null, "", (String) null, true, true, true, (String) null, "", ibanityPagingSpec0, (MetaRequestCreationQuery) null, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains(""));
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts();
      assertTrue(boolean0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      String string0 = accountInformationAccessRequestCreationQuery0.getState();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("com.ibanity.apis.client.paging.IbanityPagingSpec$1", (String) null, "Z\"(", "stH$DJ");
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("stH$DJ"));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "mGXcg:bU(k", ".vUJ_sT5FBh`wkqQ7", "com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", "", "", false, false, true, "Z\"(", "y7N>y_", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("y7N>y_", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.paging.IbanityPagingSpec$1"));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getCustomerIpAddress();
      assertEquals("", string0);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("y7N>y_", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(string0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.paging.IbanityPagingSpec$1"));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNotNull(ibanityPagingSpec0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("com.ibanity.apis.client.paging.IbanityPagingSpec$1", (String) null, "Z\"(", "stH$DJ");
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(metaRequestCreationQuery0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Z\"("));
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "mGXcg:bU(k", ".vUJ_sT5FBh`wkqQ7", "com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", "", "", false, false, true, "Z\"(", "y7N>y_", ibanityPagingSpec0, metaRequestCreationQuery0, linkedList0, linkedList0, (Map<String, String>) null);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("y7N>y_", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder"));
      
      String string0 = accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference();
      assertEquals("y7N>y_", string0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNull(ibanityPagingSpec0.getAfter());
      assertNull(authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("Z\"(", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals("com.ibanity.apis.client.paging.IbanityPagingSpec$1", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("stH$DJ", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, linkedList0.size());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertEquals("mGXcg:bU(k", accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertEquals("y7N>y_", accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertEquals(".vUJ_sT5FBh`wkqQ7", accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertEquals("Z\"(", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertEquals("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(string0);
      assertFalse(linkedList0.contains("com.ibanity.apis.client.products.xs2a.models.create.MetaRequestCreationQuery$MetaRequestCreationQueryBuilder"));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri();
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("w", ", locale=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.additionalHeaders(hashMap0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.additionalHeaders((Map<String, String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertTrue(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.allowedAccountSubtypes((List<String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.allowedAccountSubtypes((List<String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.requestedAccountReferences((List<String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.requestedAccountReferences((List<String>) null);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.build();
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2));
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1));
      assertFalse(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder2.equals((Object)accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery(", requestedAccountReferences=", ", additionalHeaders$value=", ", additionalHeaders$value=", "@A");
      assertEquals("@A", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", requestedAccountReferences=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, (BigDecimal) null);
      assertEquals("@A", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", requestedAccountReferences=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.metaRequestCreationQuery(metaRequestCreationQuery0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals("@A", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals(", requestedAccountReferences=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals(", additionalHeaders$value=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("IbanityPagingSpec(limit=", "IbanityPagingSpec(limit=", "IbanityPagingSpec(limit=", "IbanityPagingSpec(limit=");
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertNotNull(authorizationPortalCreationQuery0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(metaRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.metaRequestCreationQuery(metaRequestCreationQuery0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionPrimaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerContent());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getFinancialInstitutionSecondaryColor());
      assertEquals("IbanityPagingSpec(limit=", authorizationPortalCreationQuery0.getDisclaimerTitle());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      IbanityPagingSpec ibanityPagingSpec0 = new IbanityPagingSpec();
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.pagingSpec(ibanityPagingSpec0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(ibanityPagingSpec0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.pagingSpec(ibanityPagingSpec0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNull(ibanityPagingSpec0.getAfter());
      assertEquals(10L, ibanityPagingSpec0.getLimit());
      assertNull(ibanityPagingSpec0.getBefore());
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionCustomerReference(", customerAccessToken=");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionCustomerReference("");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.state(".(H");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals(".(H", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals(".(H", accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.state("(l%Mj})ciwEkHEE");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("(l%Mj})ciwEkHEE", accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("(l%Mj})ciwEkHEE", accountInformationAccessRequestCreationQuery1.getState());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.state("");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertTrue(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerIpAddress("T/vE'&EY6I9Z~J[A}8J");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("T/vE'&EY6I9Z~J[A}8J", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("T/vE'&EY6I9Z~J[A}8J", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerIpAddress("#m,5q HLFXM<Znub");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("#m,5q HLFXM<Znub", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("#m,5q HLFXM<Znub", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.locale("?=M9|1f");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("?=M9|1f", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("?=M9|1f", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.locale("0jI_QEGl8(:nZXEz:");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("0jI_QEGl8(:nZXEz:", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("0jI_QEGl8(:nZXEz:", accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerAccessToken("8O'2c9C&JE(urgm5\"*");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("8O'2c9C&JE(urgm5\"*", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("8O'2c9C&JE(urgm5\"*", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerAccessToken("g>ky.Ou(kJ4+W");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("g>ky.Ou(kJ4+W", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("g>ky.Ou(kJ4+W", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerAccessToken("_`3l}hxWi");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertEquals("_`3l}hxWi", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("_`3l}hxWi", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertTrue(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertTrue(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertTrue(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertEquals("_`3l}hxWi", accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("_`3l}hxWi", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.redirectUri(", customerAccessToken=");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.redirectUri("");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.consentReference(", customerAccessToken=");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals(", customerAccessToken=", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertNotNull(accountInformationAccessRequestCreationQuery0);
      
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.consentReference("5uXbh");
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0);
      assertNotNull(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("5uXbh", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertNotNull(accountInformationAccessRequestCreationQuery1);
      
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertSame(accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0, accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1);
      assertNotSame(accountInformationAccessRequestCreationQuery0, accountInformationAccessRequestCreationQuery1);
      assertNotSame(accountInformationAccessRequestCreationQuery1, accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.equals((Object)accountInformationAccessRequestCreationQuery1));
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery0.getLocale());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerAccessToken());
      assertNull(accountInformationAccessRequestCreationQuery0.getRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery0.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getState());
      assertNull(accountInformationAccessRequestCreationQuery0.getFinancialInstitutionCustomerReference());
      assertNull(accountInformationAccessRequestCreationQuery0.getCustomerIpAddress());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertNull(accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("5uXbh", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertNull(accountInformationAccessRequestCreationQuery1.getState());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertNull(accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertNull(accountInformationAccessRequestCreationQuery1.getLocale());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertNull(accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("oa/s@5PU=");
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString(", financialInstitutionSecondaryColor=");
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.equals((Object)accountInformationAccessRequestCreationQuery0));
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.allowMulticurrencyAccounts(true);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.skipIbanityCompletionCallback(true);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.allowFinancialInstitutionRedirectUri(true);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(object0);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("", ", requestedPastTransactionDays=", "", "");
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, (BigDecimal) null);
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      Map<String, String> map0 = accountInformationAccessRequestCreationQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, "", "", ", requestedPastTransactionDays=", "", (String) null, false, false, true, "", "", ibanityPagingSpec0, metaRequestCreationQuery0, (List<String>) null, (List<String>) null, map0);
      accountInformationAccessRequestCreationQuery1.hashCode();
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals(", requestedPastTransactionDays=", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getRedirectUri());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      List<String> list0 = accountInformationAccessRequestCreationQuery0.getRequestedAccountReferences();
      UUID uUID0 = MockUUID.fromString("{8r_PCm5+E&a?,2@");
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery((String) null, ", additionalHeaders=", "", "cDFmLV~Q5=NVkw{.");
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = new AccountInformationAccessRequestCreationQuery(uUID0, uUID0, ")", "AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", "", "", "3-\"b", false, false, true, "{8r_PCm5+E&a?,2@", "AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", ibanityPagingSpec0, metaRequestCreationQuery0, list0, list0, (Map<String, String>) null);
      accountInformationAccessRequestCreationQuery1.hashCode();
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getFinancialInstitutionCustomerReference());
      assertEquals("{8r_PCm5+E&a?,2@", accountInformationAccessRequestCreationQuery1.getState());
      assertEquals("AuthorizationPortalCreationQuery(financialInstitutionPrimaryColor=", accountInformationAccessRequestCreationQuery1.getRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getCustomerAccessToken());
      assertTrue(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertEquals("3-\"b", accountInformationAccessRequestCreationQuery1.getCustomerIpAddress());
      assertEquals(")", accountInformationAccessRequestCreationQuery1.getConsentReference());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertEquals("", accountInformationAccessRequestCreationQuery1.getLocale());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.skipIbanityCompletionCallback(true);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      accountInformationAccessRequestCreationQuery0.hashCode();
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
      assertTrue(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.allowFinancialInstitutionRedirectUri(true);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      accountInformationAccessRequestCreationQuery0.hashCode();
      assertFalse(accountInformationAccessRequestCreationQuery0.isSkipIbanityCompletionCallback());
      assertTrue(accountInformationAccessRequestCreationQuery0.isAllowFinancialInstitutionRedirectUri());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionCustomerReference("");
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      IbanityPagingSpec ibanityPagingSpec0 = IbanityPagingSpec.DEFAULT_PAGING_SPEC;
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.pagingSpec(ibanityPagingSpec0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      String string0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.toString();
      assertEquals("AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder(accountInformationAccessRequestId=null, financialInstitutionId=null, consentReference=null, redirectUri=null, customerAccessToken=null, locale=null, customerIpAddress=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, allowMulticurrencyAccounts=false, state=null, financialInstitutionCustomerReference=null, pagingSpec=null, metaRequestCreationQuery=null, requestedAccountReferences$value=null, allowedAccountSubtypes$value=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.locale("4<P4?KZ^F");
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.requestedAccountReferences((List<String>) null);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.financialInstitutionId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery1.equals(accountInformationAccessRequestCreationQuery0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.redirectUri(",Lk18D,ofe");
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder1.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.allowedAccountSubtypes((List<String>) null);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.accountInformationAccessRequestId(uUID0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AuthorizationPortalCreationQuery authorizationPortalCreationQuery0 = new AuthorizationPortalCreationQuery("2'kbLS8E~)K==(", "d^mUpmcrWuU_6-Gth", "d^mUpmcrWuU_6-Gth", "d^mUpmcrWuU_6-Gth");
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      MetaRequestCreationQuery metaRequestCreationQuery0 = new MetaRequestCreationQuery(authorizationPortalCreationQuery0, bigDecimal0);
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.metaRequestCreationQuery(metaRequestCreationQuery0);
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.customerIpAddress("");
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = new AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder();
      accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.consentReference("com.ibanity.apis.client.products.xs2a.models.create.AccountInformationAccessRequestCreationQuery");
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery1 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestCreationQuery0.equals(accountInformationAccessRequestCreationQuery1);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowMulticurrencyAccounts());
      assertTrue(boolean0);
      assertFalse(accountInformationAccessRequestCreationQuery1.isAllowFinancialInstitutionRedirectUri());
      assertFalse(accountInformationAccessRequestCreationQuery1.isSkipIbanityCompletionCallback());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AccountInformationAccessRequestCreationQuery.AccountInformationAccessRequestCreationQueryBuilder accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0 = AccountInformationAccessRequestCreationQuery.builder();
      AccountInformationAccessRequestCreationQuery accountInformationAccessRequestCreationQuery0 = accountInformationAccessRequestCreationQuery_AccountInformationAccessRequestCreationQueryBuilder0.build();
      String string0 = accountInformationAccessRequestCreationQuery0.toString();
      assertEquals("AccountInformationAccessRequestCreationQuery(accountInformationAccessRequestId=null, financialInstitutionId=null, consentReference=null, redirectUri=null, customerAccessToken=null, locale=null, customerIpAddress=null, allowFinancialInstitutionRedirectUri=false, skipIbanityCompletionCallback=false, allowMulticurrencyAccounts=false, state=null, financialInstitutionCustomerReference=null, pagingSpec=null, metaRequestCreationQuery=null, requestedAccountReferences=[], allowedAccountSubtypes=[], additionalHeaders={})", string0);
  }
}
