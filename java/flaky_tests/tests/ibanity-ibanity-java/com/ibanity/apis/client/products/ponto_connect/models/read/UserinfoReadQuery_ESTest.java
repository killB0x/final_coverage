/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:13:43 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.UserinfoReadQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserinfoReadQuery_ESTest extends UserinfoReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("v#H", (Map<String, String>) null);
      Map<String, String> map0 = userinfoReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("", hashMap0);
      Map<String, String> map0 = userinfoReadQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("", hashMap0);
      hashMap0.put("", "");
      Map<String, String> map0 = userinfoReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      userinfoReadQuery_UserinfoReadQueryBuilder0.accessToken("UserinfoReadQuery.UserinfoReadQueryBuilder(accessToken=null, additionalHeaders$value={=})");
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      String string0 = userinfoReadQuery0.getAccessToken();
      assertEquals("UserinfoReadQuery.UserinfoReadQueryBuilder(accessToken=null, additionalHeaders$value={=})", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = new UserinfoReadQuery.UserinfoReadQueryBuilder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      Map<String, String> map0 = userinfoReadQuery0.getAdditionalHeaders();
      UserinfoReadQuery userinfoReadQuery1 = new UserinfoReadQuery("", map0);
      String string0 = userinfoReadQuery1.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery0.canEqual(userinfoReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = new UserinfoReadQuery.UserinfoReadQueryBuilder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery0.canEqual(userinfoReadQuery_UserinfoReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = new UserinfoReadQuery.UserinfoReadQueryBuilder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      String string0 = userinfoReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("", (Map<String, String>) null);
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder1 = userinfoReadQuery_UserinfoReadQueryBuilder0.accessToken("");
      UserinfoReadQuery userinfoReadQuery1 = userinfoReadQuery_UserinfoReadQueryBuilder1.build();
      boolean boolean0 = userinfoReadQuery0.equals(userinfoReadQuery1);
      assertFalse(boolean0);
      assertFalse(userinfoReadQuery1.equals((Object)userinfoReadQuery0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("", (Map<String, String>) null);
      userinfoReadQuery_UserinfoReadQueryBuilder0.accessToken("");
      UserinfoReadQuery userinfoReadQuery1 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery1.equals(userinfoReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = new UserinfoReadQuery.UserinfoReadQueryBuilder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      Map<String, String> map0 = userinfoReadQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      UserinfoReadQuery userinfoReadQuery1 = new UserinfoReadQuery("", map0);
      boolean boolean0 = userinfoReadQuery0.equals(userinfoReadQuery1);
      assertFalse(boolean0);
      assertFalse(userinfoReadQuery1.equals((Object)userinfoReadQuery0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("v#H", (Map<String, String>) null);
      UserinfoReadQuery userinfoReadQuery1 = new UserinfoReadQuery("", (Map<String, String>) null);
      boolean boolean0 = userinfoReadQuery0.equals(userinfoReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("v#H", (Map<String, String>) null);
      boolean boolean0 = userinfoReadQuery0.equals("8uZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery0.equals(userinfoReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      userinfoReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("v#H", (Map<String, String>) null);
      userinfoReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      String string0 = userinfoReadQuery_UserinfoReadQueryBuilder0.toString();
      assertEquals("UserinfoReadQuery.UserinfoReadQueryBuilder(accessToken=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      userinfoReadQuery_UserinfoReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      UserinfoReadQuery userinfoReadQuery1 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery1.equals(userinfoReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserinfoReadQuery userinfoReadQuery0 = new UserinfoReadQuery("v#H", (Map<String, String>) null);
      String string0 = userinfoReadQuery0.toString();
      assertEquals("UserinfoReadQuery(accessToken=v#H, additionalHeaders=null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserinfoReadQuery.UserinfoReadQueryBuilder userinfoReadQuery_UserinfoReadQueryBuilder0 = UserinfoReadQuery.builder();
      UserinfoReadQuery userinfoReadQuery0 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      UserinfoReadQuery userinfoReadQuery1 = userinfoReadQuery_UserinfoReadQueryBuilder0.build();
      boolean boolean0 = userinfoReadQuery0.equals(userinfoReadQuery1);
      assertTrue(boolean0);
  }
}
