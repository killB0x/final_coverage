/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:36:30 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.read.FinancialInstitutionUserReadQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionUserReadQuery_ESTest extends FinancialInstitutionUserReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionUserReadQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom((-969));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      UUID uUID1 = financialInstitutionUserReadQuery0.getFinancialInstitutionUserId();
      assertEquals((-3962323243766693888L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionUserReadQuery0.canEqual(financialInstitutionUserReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionUserReadQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      UUID uUID1 = financialInstitutionUserReadQuery0.getFinancialInstitutionUserId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = FinancialInstitutionUserReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      UUID uUID1 = MockUUID.fromString("FinancialInstitutionUserReadQuery(financialInstitutionUserId=00000000-0100-4000-8200-000003000000)");
      financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.financialInstitutionUserId(uUID1);
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery1 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionUserReadQuery1.equals(financialInstitutionUserReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery1 = new FinancialInstitutionUserReadQuery(uUID0);
      boolean boolean0 = financialInstitutionUserReadQuery0.equals(financialInstitutionUserReadQuery1);
      assertFalse(financialInstitutionUserReadQuery1.equals((Object)financialInstitutionUserReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery1 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionUserReadQuery1.equals(financialInstitutionUserReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      boolean boolean0 = financialInstitutionUserReadQuery0.equals(financialInstitutionUserReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      financialInstitutionUserReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      String string0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder(financialInstitutionUserId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder1 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder1.build();
      financialInstitutionUserReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = FinancialInstitutionUserReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      boolean boolean0 = financialInstitutionUserReadQuery0.equals(financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0 = new FinancialInstitutionUserReadQuery.FinancialInstitutionUserReadQueryBuilder();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = financialInstitutionUserReadQuery_FinancialInstitutionUserReadQueryBuilder0.build();
      String string0 = financialInstitutionUserReadQuery0.toString();
      assertEquals("FinancialInstitutionUserReadQuery(financialInstitutionUserId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery0 = new FinancialInstitutionUserReadQuery(uUID0);
      FinancialInstitutionUserReadQuery financialInstitutionUserReadQuery1 = new FinancialInstitutionUserReadQuery(uUID0);
      boolean boolean0 = financialInstitutionUserReadQuery0.equals(financialInstitutionUserReadQuery1);
      assertTrue(boolean0);
  }
}
