/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:33:40 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.links;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.links.PeriodicPaymentInitiationRequestAuthorizationLinks;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationRequestAuthorizationLinks_ESTest extends PeriodicPaymentInitiationRequestAuthorizationLinks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("PeriodicPaymentInitiationRequestAuthorizationLinks(nextRedirect=");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationLinks0.getNextRedirect();
      assertEquals("PeriodicPaymentInitiationRequestAuthorizationLinks(nextRedirect=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationLinks0.getNextRedirect();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.canEqual(periodicPaymentInitiationRequestAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationLinks0.getNextRedirect();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1.build();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(periodicPaymentInitiationRequestAuthorizationLinks1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(periodicPaymentInitiationRequestAuthorizationLinks1);
      assertFalse(boolean0);
      assertFalse(periodicPaymentInitiationRequestAuthorizationLinks1.equals((Object)periodicPaymentInitiationRequestAuthorizationLinks0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = new PeriodicPaymentInitiationRequestAuthorizationLinks();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(periodicPaymentInitiationRequestAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      periodicPaymentInitiationRequestAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("PeriodicPaymentInitiationRequestAuthorizationLinks(nextRedirect=");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1.build();
      periodicPaymentInitiationRequestAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.nextRedirect("");
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder1.build();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks1 = new PeriodicPaymentInitiationRequestAuthorizationLinks();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(periodicPaymentInitiationRequestAuthorizationLinks1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = new PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      String string0 = periodicPaymentInitiationRequestAuthorizationLinks0.toString();
      assertEquals("PeriodicPaymentInitiationRequestAuthorizationLinks(nextRedirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks0 = new PeriodicPaymentInitiationRequestAuthorizationLinks();
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      PeriodicPaymentInitiationRequestAuthorizationLinks periodicPaymentInitiationRequestAuthorizationLinks1 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestAuthorizationLinks0.equals(periodicPaymentInitiationRequestAuthorizationLinks1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0 = PeriodicPaymentInitiationRequestAuthorizationLinks.builder();
      String string0 = periodicPaymentInitiationRequestAuthorizationLinks_PeriodicPaymentInitiationRequestAuthorizationLinksBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationRequestAuthorizationLinks.PeriodicPaymentInitiationRequestAuthorizationLinksBuilder(nextRedirect=null)", string0);
  }
}
