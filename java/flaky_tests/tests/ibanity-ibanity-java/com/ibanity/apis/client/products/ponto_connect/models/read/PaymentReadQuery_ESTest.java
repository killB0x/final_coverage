/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:04:54 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.PaymentReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentReadQuery_ESTest extends PaymentReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.fromString("");
      paymentReadQuery_PaymentReadQueryBuilder0.paymentId(uUID0);
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      paymentReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder1 = paymentReadQuery_PaymentReadQueryBuilder0.paymentId(uUID0);
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder1.build();
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder1.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-1493));
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      PaymentReadQuery paymentReadQuery1 = new PaymentReadQuery("hT|i#rW?", uUID0, uUID0, map0);
      UUID uUID1 = paymentReadQuery1.getPaymentId();
      assertEquals("d5050000-d605-4000-9705-0000d8050000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery paymentReadQuery0 = new PaymentReadQuery(" ", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentReadQuery paymentReadQuery0 = new PaymentReadQuery("k'Y *EtFg?mr", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", (String) null);
      paymentReadQuery_PaymentReadQueryBuilder0.additionalHeaders(hashMap0);
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-1493));
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      PaymentReadQuery paymentReadQuery1 = new PaymentReadQuery("hT|i#rW?", uUID0, uUID0, map0);
      UUID uUID1 = paymentReadQuery1.getAccountId();
      assertEquals((-3097069165156679680L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentReadQuery paymentReadQuery0 = new PaymentReadQuery((String) null, uUID0, uUID0, hashMap0);
      UUID uUID1 = paymentReadQuery0.getAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      paymentReadQuery_PaymentReadQueryBuilder0.accessToken("PaymentReadQuery(accessToken=");
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      String string0 = paymentReadQuery0.getAccessToken();
      assertEquals("PaymentReadQuery(accessToken=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      paymentReadQuery_PaymentReadQueryBuilder0.accessToken("");
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      String string0 = paymentReadQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.canEqual(paymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = paymentReadQuery0.getPaymentId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = paymentReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      String string0 = paymentReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      paymentReadQuery_PaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder1 = paymentReadQuery_PaymentReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder1.build();
      boolean boolean0 = paymentReadQuery1.equals(paymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentReadQuery_PaymentReadQueryBuilder0.paymentId(uUID0);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery1.equals(paymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentReadQuery_PaymentReadQueryBuilder0.paymentId(uUID0);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertFalse(boolean0);
      assertFalse(paymentReadQuery1.equals((Object)paymentReadQuery0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery paymentReadQuery0 = new PaymentReadQuery("LYAk<", uUID0, uUID0, (Map<String, String>) null);
      PaymentReadQuery paymentReadQuery1 = new PaymentReadQuery("LYAk<", uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentReadQuery_PaymentReadQueryBuilder0.accountId(uUID0);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertFalse(paymentReadQuery1.equals((Object)paymentReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentReadQuery_PaymentReadQueryBuilder0.accountId(uUID0);
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery1.equals(paymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      paymentReadQuery_PaymentReadQueryBuilder0.accessToken("yN");
      PaymentReadQuery paymentReadQuery1 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery1);
      assertFalse(paymentReadQuery1.equals((Object)paymentReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      Map<String, String> map0 = paymentReadQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      PaymentReadQuery paymentReadQuery1 = new PaymentReadQuery("PaymentReadQuery(accessToken=null, accountId=null, paymentId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", uUID0, uUID0, map0);
      boolean boolean0 = paymentReadQuery1.equals(paymentReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals("4XL#j7s\"ij");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      boolean boolean0 = paymentReadQuery0.equals(paymentReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      PaymentReadQuery paymentReadQuery0 = new PaymentReadQuery("G$JOxx;|0", uUID0, uUID0, (Map<String, String>) null);
      paymentReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      paymentReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      paymentReadQuery_PaymentReadQueryBuilder0.paymentId(uUID0);
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      UUID uUID1 = paymentReadQuery0.getPaymentId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = PaymentReadQuery.builder();
      String string0 = paymentReadQuery_PaymentReadQueryBuilder0.toString();
      assertEquals("PaymentReadQuery.PaymentReadQueryBuilder(accessToken=null, accountId=null, paymentId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentReadQuery.PaymentReadQueryBuilder paymentReadQuery_PaymentReadQueryBuilder0 = new PaymentReadQuery.PaymentReadQueryBuilder();
      PaymentReadQuery paymentReadQuery0 = paymentReadQuery_PaymentReadQueryBuilder0.build();
      String string0 = paymentReadQuery0.toString();
      assertEquals("PaymentReadQuery(accessToken=null, accountId=null, paymentId=null, additionalHeaders={})", string0);
  }
}
