/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:29:53 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.links;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.links.AccountInformationAccessRequestAuthorizationLinks;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountInformationAccessRequestAuthorizationLinks_ESTest extends AccountInformationAccessRequestAuthorizationLinks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = new AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationLinks0.getNextRedirect();
      assertEquals("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = new AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      String string0 = accountInformationAccessRequestAuthorizationLinks0.getNextRedirect();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      String string0 = accountInformationAccessRequestAuthorizationLinks0.getNextRedirect();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = new AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks1 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.equals(accountInformationAccessRequestAuthorizationLinks1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = new AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks1 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.equals(accountInformationAccessRequestAuthorizationLinks1);
      assertFalse(boolean0);
      assertFalse(accountInformationAccessRequestAuthorizationLinks1.equals((Object)accountInformationAccessRequestAuthorizationLinks0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = AccountInformationAccessRequestAuthorizationLinks.builder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("U,tt7L\"&K");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks1 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks1.equals(accountInformationAccessRequestAuthorizationLinks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      Object object0 = new Object();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.equals(accountInformationAccessRequestAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      accountInformationAccessRequestAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = new AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder();
      accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.nextRedirect("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)");
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      accountInformationAccessRequestAuthorizationLinks0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = AccountInformationAccessRequestAuthorizationLinks.builder();
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.build();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.canEqual(accountInformationAccessRequestAuthorizationLinks0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0 = AccountInformationAccessRequestAuthorizationLinks.builder();
      String string0 = accountInformationAccessRequestAuthorizationLinks_AccountInformationAccessRequestAuthorizationLinksBuilder0.toString();
      assertEquals("AccountInformationAccessRequestAuthorizationLinks.AccountInformationAccessRequestAuthorizationLinksBuilder(nextRedirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      String string0 = accountInformationAccessRequestAuthorizationLinks0.toString();
      assertEquals("AccountInformationAccessRequestAuthorizationLinks(nextRedirect=null)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks0 = new AccountInformationAccessRequestAuthorizationLinks();
      AccountInformationAccessRequestAuthorizationLinks accountInformationAccessRequestAuthorizationLinks1 = new AccountInformationAccessRequestAuthorizationLinks();
      boolean boolean0 = accountInformationAccessRequestAuthorizationLinks0.equals(accountInformationAccessRequestAuthorizationLinks1);
      assertTrue(boolean0);
  }
}
