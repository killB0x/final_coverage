/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:03:13 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.create.PaymentActivationRequestCreateQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentActivationRequestCreateQuery_ESTest extends PaymentActivationRequestCreateQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.redirectUri("");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      String string0 = paymentActivationRequestCreateQuery0.getRedirectUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.redirectUri(", addo[ionalHeadersU");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1.build();
      String string0 = paymentActivationRequestCreateQuery0.getRedirectUri();
      assertEquals(", addo[ionalHeadersU", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("", "", (Map<String, String>) null);
      Map<String, String> map0 = paymentActivationRequestCreateQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder(accessToken=null, redirectUri=null, additionalHeaders$value=null)", "PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder(accessToken=null, redirectUri=null, additionalHeaders$value=null)", hashMap0);
      Map<String, String> map0 = paymentActivationRequestCreateQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery((String) null, "", hashMap0);
      Map<String, String> map0 = paymentActivationRequestCreateQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.accessToken("C-SBQe3An%ui:");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1.build();
      String string0 = paymentActivationRequestCreateQuery0.getAccessToken();
      assertEquals("C-SBQe3An%ui:", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("", "", hashMap0);
      String string0 = paymentActivationRequestCreateQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.canEqual(paymentActivationRequestCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.canEqual(paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery((String) null, "", hashMap0);
      String string0 = paymentActivationRequestCreateQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery((String) null, "", hashMap0);
      String string0 = paymentActivationRequestCreateQuery0.getRedirectUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery1.equals(paymentActivationRequestCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("", "", (Map<String, String>) null);
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = new PaymentActivationRequestCreateQuery("", (String) null, (Map<String, String>) null);
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.redirectUri("");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery1);
      assertFalse(boolean0);
      assertFalse(paymentActivationRequestCreateQuery1.equals((Object)paymentActivationRequestCreateQuery0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      Map<String, String> map0 = paymentActivationRequestCreateQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = new PaymentActivationRequestCreateQuery("com.ibanity.apis.client.products.ponto_connect.models.create.PaymentActivationRequestCreateQuery", "com.ibanity.apis.client.products.ponto_connect.models.create.PaymentActivationRequestCreateQuery", map0);
      boolean boolean0 = paymentActivationRequestCreateQuery1.equals(paymentActivationRequestCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      Map<String, String> map0 = paymentActivationRequestCreateQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = new PaymentActivationRequestCreateQuery("+c@R^A=)O?;F)V", "+c@R^A=)O?;F)V", map0);
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("", "", (Map<String, String>) null);
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery1 = new PaymentActivationRequestCreateQuery("", "", (Map<String, String>) null);
      boolean boolean0 = paymentActivationRequestCreateQuery1.equals(paymentActivationRequestCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      boolean boolean0 = paymentActivationRequestCreateQuery0.equals(paymentActivationRequestCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = new PaymentActivationRequestCreateQuery("", "", (Map<String, String>) null);
      paymentActivationRequestCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = new PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder();
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.redirectUri("C-SBQe3An%ui:");
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder1.build();
      paymentActivationRequestCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = hashMap0.getOrDefault(paymentActivationRequestCreateQuery0, "B]h?>0>A:x");
      assertEquals("B]h?>0>A:x", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      PaymentActivationRequestCreateQuery paymentActivationRequestCreateQuery0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.build();
      String string0 = paymentActivationRequestCreateQuery0.toString();
      assertEquals("PaymentActivationRequestCreateQuery(accessToken=null, redirectUri=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0 = PaymentActivationRequestCreateQuery.builder();
      String string0 = paymentActivationRequestCreateQuery_PaymentActivationRequestCreateQueryBuilder0.toString();
      assertEquals("PaymentActivationRequestCreateQuery.PaymentActivationRequestCreateQueryBuilder(accessToken=null, redirectUri=null, additionalHeaders$value=null)", string0);
  }
}
