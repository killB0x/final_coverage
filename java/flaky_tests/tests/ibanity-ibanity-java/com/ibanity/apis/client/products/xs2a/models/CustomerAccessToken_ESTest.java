/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:40:03 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.CustomerAccessToken;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CustomerAccessToken_ESTest extends CustomerAccessToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder1 = customerAccessToken_CustomerAccessTokenBuilder0.token("#Q:cGt_}|xQlp%^I");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      String string0 = customerAccessToken0.getToken();
      assertNotNull(string0);
      assertEquals("#Q:cGt_}|xQlp%^I", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      customerAccessToken0.setSelfLink(")");
      String string0 = customerAccessToken0.getSelfLink();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setSelfLink("");
      customerAccessToken0.getSelfLink();
      assertEquals("", customerAccessToken0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setRequestId("*52>>D6UrvEIq");
      customerAccessToken0.getRequestId();
      assertEquals("*52>>D6UrvEIq", customerAccessToken0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      customerAccessToken_CustomerAccessTokenBuilder0.requestId("");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getRequestId();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-3211));
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      UUID uUID1 = customerAccessToken0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      UUID uUID1 = customerAccessToken0.getId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setApplicationCustomerReference("#Q:cGt_}|xQlp%^I");
      customerAccessToken0.getApplicationCustomerReference();
      assertEquals("#Q:cGt_}|xQlp%^I", customerAccessToken0.getApplicationCustomerReference());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      boolean boolean0 = customerAccessToken0.canEqual(customerAccessToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      boolean boolean0 = customerAccessToken0.canEqual(customerAccessToken_CustomerAccessTokenBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      UUID uUID0 = customerAccessToken0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getApplicationCustomerReference();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      customerAccessToken0.setRequestId("customerAccessToken");
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setRequestId("customerAccessToken");
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setRequestId("customerAccessToken");
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setApplicationCustomerReference("customerAccessToken");
      boolean boolean0 = customerAccessToken1.equals(customerAccessToken0);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setApplicationCustomerReference("customerAccessToken");
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder1 = customerAccessToken_CustomerAccessTokenBuilder0.applicationCustomerReference("?5`qG( wH1]~");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      CustomerAccessToken customerAccessToken1 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertTrue(boolean0);
      assertEquals("?5`qG( wH1]~", customerAccessToken1.getApplicationCustomerReference());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setToken("customerAccessToken");
      boolean boolean0 = customerAccessToken1.equals(customerAccessToken0);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setToken("customerAccessToken");
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      customerAccessToken_CustomerAccessTokenBuilder0.token(".|$0$zW{P8^~bxv|Ey");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      CustomerAccessToken customerAccessToken1 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertEquals(".|$0$zW{P8^~bxv|Ey", customerAccessToken1.getToken());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setSelfLink("customerAccessToken");
      boolean boolean0 = customerAccessToken1.equals(customerAccessToken0);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      customerAccessToken1.setSelfLink("customerAccessToken");
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      assertFalse(customerAccessToken0.equals((Object)customerAccessToken1));
      
      customerAccessToken1.setId(uUID0);
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertTrue(customerAccessToken0.equals((Object)customerAccessToken1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      boolean boolean0 = customerAccessToken1.equals(customerAccessToken0);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      assertTrue(customerAccessToken1.equals((Object)customerAccessToken0));
      
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(customerAccessToken1.equals((Object)customerAccessToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = customerAccessToken0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setRequestId("*52>>D6UrvEIq");
      customerAccessToken0.hashCode();
      assertEquals("*52>>D6UrvEIq", customerAccessToken0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setApplicationCustomerReference("#Q:cGt_}|xQlp%^I");
      customerAccessToken0.hashCode();
      assertEquals("#Q:cGt_}|xQlp%^I", customerAccessToken0.getApplicationCustomerReference());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder1 = customerAccessToken_CustomerAccessTokenBuilder0.token("#Q:cGt_}|xQlp%^I");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      customerAccessToken0.hashCode();
      assertEquals("#Q:cGt_}|xQlp%^I", customerAccessToken0.getToken());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      customerAccessToken0.setSelfLink("");
      customerAccessToken0.hashCode();
      assertEquals("", customerAccessToken0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      UUID uUID0 = MockUUID.fromString("customerAccessToken");
      customerAccessToken0.setId(uUID0);
      customerAccessToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder1 = customerAccessToken_CustomerAccessTokenBuilder0.id((UUID) null);
      assertSame(customerAccessToken_CustomerAccessTokenBuilder0, customerAccessToken_CustomerAccessTokenBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      customerAccessToken_CustomerAccessTokenBuilder0.applicationCustomerReference("");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getApplicationCustomerReference();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder1 = customerAccessToken_CustomerAccessTokenBuilder0.selfLink("");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      CustomerAccessToken customerAccessToken1 = customerAccessToken_CustomerAccessTokenBuilder1.build();
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertTrue(boolean0);
      assertEquals("", customerAccessToken1.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      customerAccessToken_CustomerAccessTokenBuilder0.token("");
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.getToken();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = new CustomerAccessToken.CustomerAccessTokenBuilder();
      String string0 = customerAccessToken_CustomerAccessTokenBuilder0.toString();
      assertEquals("CustomerAccessToken.CustomerAccessTokenBuilder(id=null, selfLink=null, token=null, applicationCustomerReference=null, requestId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CustomerAccessToken customerAccessToken0 = new CustomerAccessToken();
      customerAccessToken0.setRequestId("customerAccessToken");
      CustomerAccessToken customerAccessToken1 = new CustomerAccessToken();
      boolean boolean0 = customerAccessToken0.equals(customerAccessToken1);
      assertFalse(boolean0);
      assertEquals("customerAccessToken", customerAccessToken0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CustomerAccessToken.CustomerAccessTokenBuilder customerAccessToken_CustomerAccessTokenBuilder0 = CustomerAccessToken.builder();
      CustomerAccessToken customerAccessToken0 = customerAccessToken_CustomerAccessTokenBuilder0.build();
      String string0 = customerAccessToken0.toString();
      assertEquals("CustomerAccessToken(id=null, selfLink=null, token=null, applicationCustomerReference=null, requestId=null)", string0);
  }
}
