/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:35:28 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.create.TokenCreateQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenCreateQuery_ESTest extends TokenCreateQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setRedirectUri("TokenCreateQuery(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders={})");
      String string0 = tokenCreateQuery0.getRedirectUri();
      assertEquals("TokenCreateQuery(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setRedirectUri("");
      String string0 = tokenCreateQuery0.getRedirectUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setCodeVerifier("4t");
      String string0 = tokenCreateQuery0.getCodeVerifier();
      assertEquals("4t", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setCodeVerifier("");
      String string0 = tokenCreateQuery0.getCodeVerifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setClientSecret("jslh$v<c9e}B`u5xY)");
      String string0 = tokenCreateQuery0.getClientSecret();
      assertEquals("jslh$v<c9e}B`u5xY)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      tokenCreateQuery_TokenCreateQueryBuilder0.clientSecret("");
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      String string0 = tokenCreateQuery0.getClientSecret();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setAuthorizationCode("p7-CUhx^|/i]");
      String string0 = tokenCreateQuery0.getAuthorizationCode();
      assertEquals("p7-CUhx^|/i]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder1 = tokenCreateQuery_TokenCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder1.build();
      Map<String, String> map0 = tokenCreateQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tokenCreateQuery0.setAdditionalHeaders(hashMap0);
      Map<String, String> map0 = tokenCreateQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      tokenCreateQuery0.setAdditionalHeaders(hashMap0);
      Map<String, String> map0 = tokenCreateQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery0.canEqual(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery0.canEqual(tokenCreateQuery_TokenCreateQueryBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      String string0 = tokenCreateQuery0.getClientSecret();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      String string0 = tokenCreateQuery0.getAuthorizationCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      String string0 = tokenCreateQuery0.getCodeVerifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      String string0 = tokenCreateQuery0.getRedirectUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setAdditionalHeaders((Map<String, String>) null);
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      tokenCreateQuery_TokenCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setClientSecret("");
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      assertFalse(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      
      tokenCreateQuery1.setClientSecret("");
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery1);
      assertTrue(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      assertTrue(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      
      tokenCreateQuery1.setClientSecret("");
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery1);
      assertFalse(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setClientSecret("");
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      assertTrue(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      
      tokenCreateQuery1.setRedirectUri("");
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setRedirectUri("");
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      tokenCreateQuery_TokenCreateQueryBuilder0.redirectUri("?uB1B");
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setCodeVerifier("c=bNKV4iPK'y(P>w&");
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      assertTrue(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      
      tokenCreateQuery1.setCodeVerifier("/IOL>k(deDzjGH7");
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery1);
      assertFalse(tokenCreateQuery1.equals((Object)tokenCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      tokenCreateQuery_TokenCreateQueryBuilder0.authorizationCode("TokenCreateQuery(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders={})");
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery_TokenCreateQueryBuilder0.authorizationCode("TokenCreateQuery(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders={})");
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery0.equals(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setClientSecret("com.ibanity.apis.client.products.ponto_connect.models.create.TokenCreateQuery$TokenCreateQueryBuilder");
      tokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setRedirectUri("<");
      tokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setCodeVerifier("*DI\"i6b");
      tokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      tokenCreateQuery0.setAuthorizationCode("@");
      tokenCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = new TokenCreateQuery.TokenCreateQueryBuilder();
      tokenCreateQuery_TokenCreateQueryBuilder0.codeVerifier("r3yJ^f)Fd04=j~d");
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder1 = tokenCreateQuery_TokenCreateQueryBuilder0.authorizationCode("");
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder1.build();
      String string0 = tokenCreateQuery0.getAuthorizationCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      tokenCreateQuery_TokenCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      TokenCreateQuery tokenCreateQuery0 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      TokenCreateQuery tokenCreateQuery1 = tokenCreateQuery_TokenCreateQueryBuilder0.build();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenCreateQuery.TokenCreateQueryBuilder tokenCreateQuery_TokenCreateQueryBuilder0 = TokenCreateQuery.builder();
      String string0 = tokenCreateQuery_TokenCreateQueryBuilder0.toString();
      assertEquals("TokenCreateQuery.TokenCreateQueryBuilder(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      String string0 = tokenCreateQuery0.toString();
      assertEquals("TokenCreateQuery(authorizationCode=null, codeVerifier=null, redirectUri=null, clientSecret=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setAuthorizationCode("");
      TokenCreateQuery tokenCreateQuery1 = new TokenCreateQuery();
      boolean boolean0 = tokenCreateQuery1.equals(tokenCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenCreateQuery tokenCreateQuery0 = new TokenCreateQuery();
      tokenCreateQuery0.setAdditionalHeaders((Map<String, String>) null);
      tokenCreateQuery0.hashCode();
  }
}
