/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:51:22 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.isabel_connect.models.Account;
import com.ibanity.apis.client.products.isabel_connect.models.BulkPaymentInitiationRequest;
import com.ibanity.apis.client.products.isabel_connect.models.IntradayTransaction;
import com.ibanity.apis.client.products.isabel_connect.models.Transaction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsabelModel_ESTest extends IsabelModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.toString();
      assertEquals("Transaction(super=IsabelModel(id=null, selfLink=null, requestId=null), amount=null, counterpartAccountReference=null, counterpartFinancialInstitutionBic=null, counterpartName=null, endToEndId=null, internalId=null, remittanceInformation=null, remittanceInformationType=null, status=null, additionalInformation=null, valueDate=null, executionDate=null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest();
      bulkPaymentInitiationRequest0.setId("Xz");
      String string0 = bulkPaymentInitiationRequest0.getId();
      assertEquals("Xz", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.equals(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest();
      Object object0 = new Object();
      boolean boolean0 = bulkPaymentInitiationRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      boolean boolean0 = transaction0.canEqual(transaction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest();
      Transaction transaction0 = new Transaction();
      boolean boolean0 = bulkPaymentInitiationRequest0.canEqual(transaction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest();
      String string0 = bulkPaymentInitiationRequest0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      String string0 = transaction0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction1.setRequestId("{accountId}");
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction0.setRequestId("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction1.equals((Object)transaction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setRequestId("{accountId}");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setRequestId("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction1.setSelfLink("{accountId}");
      assertFalse(transaction1.equals((Object)transaction0));
      
      transaction0.setSelfLink("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertTrue(transaction0.equals((Object)transaction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setSelfLink("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setSelfLink("{accountId}");
      boolean boolean0 = transaction0.equals(transaction1);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      transaction0.setId("transaction");
      assertFalse(transaction0.equals((Object)transaction1));
      
      transaction1.setId("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertTrue(transaction0.equals((Object)transaction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction0.setId("");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(transaction0.equals((Object)transaction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transaction transaction0 = new Transaction();
      Transaction transaction1 = new Transaction();
      assertTrue(transaction1.equals((Object)transaction0));
      
      transaction1.setId("transaction");
      boolean boolean0 = transaction1.equals(transaction0);
      assertFalse(transaction1.equals((Object)transaction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntradayTransaction intradayTransaction0 = new IntradayTransaction();
      intradayTransaction0.setRequestId("");
      intradayTransaction0.hashCode();
      assertEquals("", intradayTransaction0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntradayTransaction intradayTransaction0 = new IntradayTransaction();
      intradayTransaction0.setSelfLink("");
      intradayTransaction0.hashCode();
      assertEquals("", intradayTransaction0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntradayTransaction intradayTransaction0 = new IntradayTransaction();
      intradayTransaction0.setId("IntradayTransaction(super=");
      intradayTransaction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest();
      BulkPaymentInitiationRequest.BulkPaymentInitiationRequestBuilder<?, ?> bulkPaymentInitiationRequest_BulkPaymentInitiationRequestBuilder0 = bulkPaymentInitiationRequest0.toBuilder();
      assertNotNull(bulkPaymentInitiationRequest_BulkPaymentInitiationRequestBuilder0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BulkPaymentInitiationRequest.BulkPaymentInitiationRequestBuilder<?, ?> bulkPaymentInitiationRequest_BulkPaymentInitiationRequestBuilder0 = BulkPaymentInitiationRequest.builder();
      BulkPaymentInitiationRequest bulkPaymentInitiationRequest0 = new BulkPaymentInitiationRequest(bulkPaymentInitiationRequest_BulkPaymentInitiationRequestBuilder0);
      assertNull(bulkPaymentInitiationRequest0.getRequestId());
  }
}
