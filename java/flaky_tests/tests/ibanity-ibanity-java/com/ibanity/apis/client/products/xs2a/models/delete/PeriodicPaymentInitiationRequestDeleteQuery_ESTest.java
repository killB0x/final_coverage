/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:28:38 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.delete.PeriodicPaymentInitiationRequestDeleteQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeriodicPaymentInitiationRequestDeleteQuery_ESTest extends PeriodicPaymentInitiationRequestDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery((String) null, uUID0, uUID0, (Map<String, String>) null);
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestDeleteQuery0.getPaymentInitiationRequestId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      Random.setNextRandom(3054);
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = new PeriodicPaymentInitiationRequestDeleteQuery("", uUID0, uUID0, map0);
      UUID uUID1 = periodicPaymentInitiationRequestDeleteQuery1.getPaymentInitiationRequestId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      UUID uUID0 = periodicPaymentInitiationRequestDeleteQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      Random.setNextRandom(3054);
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = new PeriodicPaymentInitiationRequestDeleteQuery("", uUID0, uUID0, map0);
      UUID uUID1 = periodicPaymentInitiationRequestDeleteQuery1.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      String string0 = periodicPaymentInitiationRequestDeleteQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.customerAccessToken("");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      String string0 = periodicPaymentInitiationRequestDeleteQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.additionalHeaders(hashMap0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("", uUID0, uUID0, hashMap0);
      hashMap0.put("PeriodicPaymentInitiationRequestDeleteQuery(customerAccessToken=, financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", "PeriodicPaymentInitiationRequestDeleteQuery(customerAccessToken=, financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, additionalHeaders={})");
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.canEqual(periodicPaymentInitiationRequestDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.canEqual("PeriodicPaymentInitiationRequestDeleteQuery(customerAccessToken=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = periodicPaymentInitiationRequestDeleteQuery0.getPaymentInitiationRequestId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = periodicPaymentInitiationRequestDeleteQuery0.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      String string0 = periodicPaymentInitiationRequestDeleteQuery0.getCustomerAccessToken();
      assertEquals("a33< i", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery1.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery1.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertFalse(periodicPaymentInitiationRequestDeleteQuery1.equals((Object)periodicPaymentInitiationRequestDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery1.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertFalse(periodicPaymentInitiationRequestDeleteQuery1.equals((Object)periodicPaymentInitiationRequestDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      Map<String, String> map0 = periodicPaymentInitiationRequestDeleteQuery0.getAdditionalHeaders();
      assertNotNull(map0);
      
      UUID uUID0 = MockUUID.fromString("");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = new PeriodicPaymentInitiationRequestDeleteQuery("", uUID0, uUID0, map0);
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.customerAccessToken("w[Us");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery1.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = new PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery0.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString(", additionalHeaders=");
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("8xK@;p(^;t", uUID0, uUID0, (Map<String, String>) null);
      periodicPaymentInitiationRequestDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString(", additionalHeaders=");
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.paymentInitiationRequestId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      periodicPaymentInitiationRequestDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString(", additionalHeaders=");
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.financialInstitutionId(uUID0);
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder1.build();
      periodicPaymentInitiationRequestDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      String string0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.toString();
      assertEquals("PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder(customerAccessToken=null, financialInstitutionId=null, paymentInitiationRequestId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = new PeriodicPaymentInitiationRequestDeleteQuery("a33< i", uUID0, uUID0, (Map<String, String>) null);
      String string0 = periodicPaymentInitiationRequestDeleteQuery0.toString();
      assertEquals("PeriodicPaymentInitiationRequestDeleteQuery(customerAccessToken=a33< i, financialInstitutionId=00000000-0100-4000-8200-000003000000, paymentInitiationRequestId=00000000-0100-4000-8200-000003000000, additionalHeaders=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodicPaymentInitiationRequestDeleteQuery.PeriodicPaymentInitiationRequestDeleteQueryBuilder periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0 = PeriodicPaymentInitiationRequestDeleteQuery.builder();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery0 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      PeriodicPaymentInitiationRequestDeleteQuery periodicPaymentInitiationRequestDeleteQuery1 = periodicPaymentInitiationRequestDeleteQuery_PeriodicPaymentInitiationRequestDeleteQueryBuilder0.build();
      boolean boolean0 = periodicPaymentInitiationRequestDeleteQuery1.equals(periodicPaymentInitiationRequestDeleteQuery0);
      assertTrue(boolean0);
  }
}
