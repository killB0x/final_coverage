/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:46:37 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.sandbox.models.factory.delete.FinancialInstitutionAccountDeleteQuery;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionAccountDeleteQuery_ESTest extends FinancialInstitutionAccountDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, (UUID) null);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(financialInstitutionAccountDeleteQuery1.equals((Object)financialInstitutionAccountDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-2042));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, (UUID) null);
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionUserId();
      assertEquals((-430375235179036672L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionUserId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-2042));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, (UUID) null);
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionId();
      assertEquals((-430375235179036672L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1.build();
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Random.setNextRandom((-453));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID1 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery((UUID) null, (UUID) null, (UUID) null);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.canEqual(financialInstitutionAccountDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.canEqual(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionUserId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID0 = financialInstitutionAccountDeleteQuery0.getFinancialInstitutionAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionAccountDeleteQuery1.equals((Object)financialInstitutionAccountDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery1.equals(financialInstitutionAccountDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      UUID uUID1 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID1, uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(financialInstitutionAccountDeleteQuery1.equals((Object)financialInstitutionAccountDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = new FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery1 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, uUID0);
      boolean boolean0 = financialInstitutionAccountDeleteQuery0.equals(financialInstitutionAccountDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      financialInstitutionAccountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder1.build();
      financialInstitutionAccountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionUserId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      financialInstitutionAccountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("]wo4A}UOCks");
      financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.financialInstitutionAccountId(uUID0);
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.build();
      financialInstitutionAccountDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0 = FinancialInstitutionAccountDeleteQuery.builder();
      String string0 = financialInstitutionAccountDeleteQuery_FinancialInstitutionAccountDeleteQueryBuilder0.toString();
      assertEquals("FinancialInstitutionAccountDeleteQuery.FinancialInstitutionAccountDeleteQueryBuilder(financialInstitutionId=null, financialInstitutionUserId=null, financialInstitutionAccountId=null)", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionAccountDeleteQuery financialInstitutionAccountDeleteQuery0 = new FinancialInstitutionAccountDeleteQuery(uUID0, uUID0, (UUID) null);
      String string0 = financialInstitutionAccountDeleteQuery0.toString();
      assertEquals("FinancialInstitutionAccountDeleteQuery(financialInstitutionId=00000000-0100-4000-8200-000003000000, financialInstitutionUserId=00000000-0100-4000-8200-000003000000, financialInstitutionAccountId=null)", string0);
  }
}
