/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:05:56 GMT 2022
 */

package com.ibanity.apis.client.products.isabel_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.isabel_connect.models.read.AccountReportReadQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountReportReadQuery_ESTest extends AccountReportReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder1 = accountReportReadQuery_AccountReportReadQueryBuilder0.accountReportId("");
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder1.build();
      boolean boolean0 = accountReportReadQuery0.equals(accountReportReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccountReportReadQuery accountReportReadQuery0 = new AccountReportReadQuery("|x -pW[A=", "", (Map<String, String>) null);
      accountReportReadQuery0.getAdditionalHeaders();
      assertEquals("|x -pW[A=", accountReportReadQuery0.getAccessToken());
      assertEquals("", accountReportReadQuery0.getAccountReportId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "Pt9~-*i?Ur");
      AccountReportReadQuery accountReportReadQuery0 = new AccountReportReadQuery((String) null, "$Q=q\"jU1xq", hashMap0);
      Map<String, String> map0 = accountReportReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReportReadQuery accountReportReadQuery0 = new AccountReportReadQuery("AccountReportReadQuery.AccountReportReadQueryBuilder(accessToken=null, accountReportId=null, additionalHeaders$value=null)", "", hashMap0);
      assertEquals("", accountReportReadQuery0.getAccountReportId());
      
      accountReportReadQuery0.setAccountReportId("AccountReportReadQuery.AccountReportReadQueryBuilder(accessToken=null, accountReportId=null, additionalHeaders$value=null)");
      accountReportReadQuery0.getAccountReportId();
      assertEquals("AccountReportReadQuery.AccountReportReadQueryBuilder(accessToken=null, accountReportId=null, additionalHeaders$value=null)", accountReportReadQuery0.getAccessToken());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      accountReportReadQuery_AccountReportReadQueryBuilder0.accountReportId("");
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.getAccountReportId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      accountReportReadQuery_AccountReportReadQueryBuilder0.accessToken("/J");
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.getAccessToken();
      assertEquals("/J", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      accountReportReadQuery_AccountReportReadQueryBuilder0.accessToken("");
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery0.canEqual(accountReportReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.getAccountReportId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      assertTrue(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      
      accountReportReadQuery0.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = accountReportReadQuery1.equals(accountReportReadQuery0);
      assertFalse(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      assertTrue(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      
      accountReportReadQuery1.setAdditionalHeaders((Map<String, String>) null);
      boolean boolean0 = accountReportReadQuery1.equals(accountReportReadQuery0);
      assertFalse(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      assertTrue(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      
      accountReportReadQuery1.setAccountReportId("");
      boolean boolean0 = accountReportReadQuery1.equals(accountReportReadQuery0);
      assertFalse(accountReportReadQuery1.equals((Object)accountReportReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      accountReportReadQuery0.setAccessToken("AccountReportReadQuery.AccountReportReadQueryBuilder(accessToken=");
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery1.equals(accountReportReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery0.equals(accountReportReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      accountReportReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountReportReadQuery accountReportReadQuery0 = new AccountReportReadQuery("|x -pW[A=", "", (Map<String, String>) null);
      accountReportReadQuery0.hashCode();
      assertEquals("|x -pW[A=", accountReportReadQuery0.getAccessToken());
      assertEquals("", accountReportReadQuery0.getAccountReportId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      accountReportReadQuery0.setAccessToken("");
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery0.equals(accountReportReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = AccountReportReadQuery.builder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      accountReportReadQuery0.setAccountReportId("]h%h");
      AccountReportReadQuery accountReportReadQuery1 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      boolean boolean0 = accountReportReadQuery1.equals(accountReportReadQuery0);
      assertFalse(boolean0);
      assertFalse(accountReportReadQuery0.equals((Object)accountReportReadQuery1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder0.build();
      String string0 = accountReportReadQuery0.toString();
      assertEquals("AccountReportReadQuery(accessToken=null, accountReportId=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountReportReadQuery accountReportReadQuery0 = new AccountReportReadQuery("", "", (Map<String, String>) null);
      AccountReportReadQuery accountReportReadQuery1 = new AccountReportReadQuery("", "", (Map<String, String>) null);
      boolean boolean0 = accountReportReadQuery0.equals(accountReportReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder1 = accountReportReadQuery_AccountReportReadQueryBuilder0.additionalHeaders(hashMap0);
      AccountReportReadQuery accountReportReadQuery0 = accountReportReadQuery_AccountReportReadQueryBuilder1.build();
      Map<String, String> map0 = accountReportReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountReportReadQuery.AccountReportReadQueryBuilder accountReportReadQuery_AccountReportReadQueryBuilder0 = new AccountReportReadQuery.AccountReportReadQueryBuilder();
      String string0 = accountReportReadQuery_AccountReportReadQueryBuilder0.toString();
      assertEquals("AccountReportReadQuery.AccountReportReadQueryBuilder(accessToken=null, accountReportId=null, additionalHeaders$value=null)", string0);
  }
}
