/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:28:27 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.SynchronizationReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SynchronizationReadQuery_ESTest extends SynchronizationReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.isCustomerOnline();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(2491);
      UUID uUID0 = MockUUID.fromString("U9t6yx!l");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("iz5)tE", "U9t6yx!l", "", true, uUID0, "U9t6yx!l", hashMap0);
      synchronizationReadQuery0.getSynchronizationId();
      assertEquals("U9t6yx!l", synchronizationReadQuery0.getCustomerAccessToken());
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
      assertEquals("iz5)tE", synchronizationReadQuery0.getSubtype());
      assertEquals("", synchronizationReadQuery0.getResourceType());
      assertEquals("U9t6yx!l", synchronizationReadQuery0.getResourceId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("U9t6yx!l");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("iz5)tE", "U9t6yx!l", "", true, uUID0, "U9t6yx!l", hashMap0);
      synchronizationReadQuery0.getSynchronizationId();
      assertEquals("iz5)tE", synchronizationReadQuery0.getSubtype());
      assertEquals("", synchronizationReadQuery0.getResourceType());
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
      assertEquals("U9t6yx!l", synchronizationReadQuery0.getResourceId());
      assertEquals("U9t6yx!l", synchronizationReadQuery0.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.subtype("~");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      String string0 = synchronizationReadQuery0.getSubtype();
      assertNotNull(string0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.subtype("");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      String string0 = synchronizationReadQuery0.getSubtype();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceType("com.ibanity.apis.client.products.xs2a.models.read.SynchronizationReadQuery");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      String string0 = synchronizationReadQuery0.getResourceType();
      assertNotNull(string0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.fromString("");
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery(", resourceType=", ", resourceType=", "", true, uUID0, ", resourceType=", hashMap0);
      String string0 = synchronizationReadQuery0.getResourceType();
      assertEquals(", resourceType=", synchronizationReadQuery0.getCustomerAccessToken());
      assertEquals(", resourceType=", synchronizationReadQuery0.getResourceId());
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
      assertEquals(", resourceType=", synchronizationReadQuery0.getSubtype());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.getResourceId();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceId(", synchronizationId=");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      String string0 = synchronizationReadQuery0.getResourceId();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("xOP9cx.6V*", "", "", false, uUID0, "k|N1FSaa]1[J", hashMap0);
      String string0 = synchronizationReadQuery0.getCustomerAccessToken();
      assertEquals("k|N1FSaa]1[J", string0);
      assertEquals("", synchronizationReadQuery0.getResourceId());
      assertEquals("", synchronizationReadQuery0.getResourceType());
      assertEquals("xOP9cx.6V*", synchronizationReadQuery0.getSubtype());
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("$#YuEA {pJ", "", "", false, uUID0, "", hashMap0);
      String string0 = synchronizationReadQuery0.getCustomerAccessToken();
      assertEquals("$#YuEA {pJ", synchronizationReadQuery0.getSubtype());
      assertEquals("", synchronizationReadQuery0.getResourceType());
      assertEquals("", synchronizationReadQuery0.getResourceId());
      assertEquals("", string0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      Map<String, String> map0 = synchronizationReadQuery0.getAdditionalHeaders();
      assertNull(map0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("", "", "", true, uUID0, "", hashMap0);
      synchronizationReadQuery0.getAdditionalHeaders();
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("", "", "", true, uUID0, "", hashMap0);
      hashMap0.put("4,\"->}R.5", "");
      synchronizationReadQuery0.getAdditionalHeaders();
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.canEqual(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.canEqual(synchronizationReadQuery_SynchronizationReadQueryBuilder0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("", "", "", true, uUID0, "", hashMap0);
      boolean boolean0 = synchronizationReadQuery0.isCustomerOnline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("", "", "37^c\"s)V$#?gHTJ7", false, uUID0, "37^c\"s)V$#?gHTJ7", hashMap0);
      String string0 = synchronizationReadQuery0.getResourceId();
      assertEquals("37^c\"s)V$#?gHTJ7", synchronizationReadQuery0.getResourceType());
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
      assertEquals("", string0);
      assertEquals("37^c\"s)V$#?gHTJ7", synchronizationReadQuery0.getCustomerAccessToken());
      assertEquals("", synchronizationReadQuery0.getSubtype());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.getCustomerAccessToken();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.getSynchronizationId();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.getResourceType();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.getSubtype();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.customerAccessToken(", resourceId=");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.customerAccessToken(".|i");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.customerAccessToken("");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertTrue(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(synchronizationReadQuery1.equals((Object)synchronizationReadQuery0));
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.synchronizationId(uUID0);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceType(", resoureId=");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertTrue(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceType("W[\"x");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.equals((Object)synchronizationReadQuery0));
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceType("#dH[U_");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceId(", resourceId=");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceId("l&hP%I(qlXizK");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(synchronizationReadQuery1.equals((Object)synchronizationReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.resourceId(", additionalHeaders$value=");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.subtype(", synchronizationId=");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.subtype("srj+");
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(synchronizationReadQuery1.equals((Object)synchronizationReadQuery0));
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.subtype(", resourceId=");
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertTrue(boolean0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.customerOnline(true);
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery1);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = synchronizationReadQuery0.equals(hashMap0);
      assertFalse(boolean0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      boolean boolean0 = synchronizationReadQuery0.equals(synchronizationReadQuery0);
      assertTrue(boolean0);
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      synchronizationReadQuery0.hashCode();
      assertFalse(synchronizationReadQuery0.isCustomerOnline());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      UUID uUID0 = MockUUID.randomUUID();
      SynchronizationReadQuery synchronizationReadQuery0 = new SynchronizationReadQuery("", "SynchronizationReadQuery(subtype=", "", true, uUID0, "0o,", hashMap0);
      synchronizationReadQuery0.hashCode();
      assertEquals("SynchronizationReadQuery(subtype=", synchronizationReadQuery0.getResourceId());
      assertEquals("", synchronizationReadQuery0.getResourceType());
      assertEquals("", synchronizationReadQuery0.getSubtype());
      assertTrue(synchronizationReadQuery0.isCustomerOnline());
      assertEquals("0o,", synchronizationReadQuery0.getCustomerAccessToken());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      String string0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.toString();
      assertEquals("SynchronizationReadQuery.SynchronizationReadQueryBuilder(subtype=null, resourceId=null, resourceType=null, customerOnline=false, synchronizationId=null, customerAccessToken=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = SynchronizationReadQuery.builder();
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder1 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      SynchronizationReadQuery synchronizationReadQuery1 = synchronizationReadQuery_SynchronizationReadQueryBuilder1.build();
      boolean boolean0 = synchronizationReadQuery1.equals(synchronizationReadQuery0);
      assertFalse(synchronizationReadQuery1.isCustomerOnline());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SynchronizationReadQuery.SynchronizationReadQueryBuilder synchronizationReadQuery_SynchronizationReadQueryBuilder0 = new SynchronizationReadQuery.SynchronizationReadQueryBuilder();
      SynchronizationReadQuery synchronizationReadQuery0 = synchronizationReadQuery_SynchronizationReadQueryBuilder0.build();
      String string0 = synchronizationReadQuery0.toString();
      assertEquals("SynchronizationReadQuery(subtype=null, resourceId=null, resourceType=null, customerOnline=false, synchronizationId=null, customerAccessToken=null, additionalHeaders={})", string0);
  }
}
