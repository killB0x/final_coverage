/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:35:32 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.read.AccountReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccountReadQuery_ESTest extends AccountReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("66NXQ2Ks");
      UUID uUID1 = MockUUID.fromString("66NXQ2Ks");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("66NXQ2Ks", uUID0, uUID1, hashMap0);
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder1 = accountReadQuery_AccountReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder1.build();
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder1 = accountReadQuery_AccountReadQueryBuilder0.accountId(uUID0);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder1.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery1.equals(accountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      Random.setNextRandom((-401));
      UUID uUID0 = MockUUID.fromString(")");
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      AccountReadQuery accountReadQuery1 = new AccountReadQuery((String) null, uUID0, uUID0, map0);
      UUID uUID1 = accountReadQuery1.getFinancialInstitutionId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder1 = accountReadQuery_AccountReadQueryBuilder0.financialInstitutionId(uUID0);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder1.build();
      UUID uUID1 = accountReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery(";I", uUID0, uUID0, hashMap0);
      String string0 = accountReadQuery0.getCustomerAccessToken();
      assertEquals(";I", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      accountReadQuery_AccountReadQueryBuilder0.customerAccessToken("");
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("q", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("66NXQ2Ks");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("66NXQ2Ks", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("AccountReadQuery.AccountReadQueryBuilder(customerAccessToken=", (String) null);
      AccountReadQuery accountReadQuery0 = new AccountReadQuery((String) null, uUID0, uUID0, hashMap0);
      Map<String, String> map0 = accountReadQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-736));
      UUID uUID0 = MockUUID.fromString("");
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", uUID0, uUID0, (Map<String, String>) null);
      UUID uUID1 = accountReadQuery0.getAccountId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery(";I", uUID0, uUID0, hashMap0);
      UUID uUID1 = accountReadQuery0.getAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      UUID uUID0 = accountReadQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      UUID uUID0 = accountReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      String string0 = accountReadQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("&LFH59v\"n", "AccountReadQuery.AccountReadQueryBuilder(customerAccessToken=");
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery_AccountReadQueryBuilder0.additionalHeaders(hashMap0);
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder1 = accountReadQuery_AccountReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder1.build();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder2 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder2.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      accountReadQuery_AccountReadQueryBuilder0.accountId(uUID0);
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery1.equals(accountReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = new AccountReadQuery.AccountReadQueryBuilder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("AccountReadQuery(customerAccessToken=");
      accountReadQuery_AccountReadQueryBuilder0.accountId(uUID0);
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      UUID uUID1 = MockUUID.fromString("$r:");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery(";I", uUID0, uUID1, hashMap0);
      AccountReadQuery accountReadQuery1 = new AccountReadQuery(";I", uUID1, uUID0, hashMap0);
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      UUID uUID0 = MockUUID.fromString((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = new AccountReadQuery((String) null, uUID0, uUID0, hashMap0);
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery(";I", uUID0, uUID0, hashMap0);
      AccountReadQuery accountReadQuery1 = new AccountReadQuery(";I", uUID0, uUID0, hashMap0);
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery_AccountReadQueryBuilder0.customerAccessToken("=pb'(|5Fpa");
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertFalse(boolean0);
      assertFalse(accountReadQuery1.equals((Object)accountReadQuery0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = new AccountReadQuery(";I", uUID0, uUID0, hashMap0);
      boolean boolean0 = accountReadQuery1.equals(accountReadQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = accountReadQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("", uUID0, uUID0, (Map<String, String>) null);
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      accountReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("#3.VhlGa-!WFuf");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccountReadQuery accountReadQuery0 = new AccountReadQuery("#3.VhlGa-!WFuf", uUID0, uUID0, hashMap0);
      String string0 = accountReadQuery0.toString();
      assertEquals("AccountReadQuery(customerAccessToken=#3.VhlGa-!WFuf, financialInstitutionId=00000000-0100-4000-8200-000003000000, accountId=00000000-0100-4000-8200-000003000000, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      accountReadQuery_AccountReadQueryBuilder0.additionalHeaders((Map<String, String>) null);
      AccountReadQuery accountReadQuery0 = accountReadQuery_AccountReadQueryBuilder0.build();
      AccountReadQuery accountReadQuery1 = accountReadQuery_AccountReadQueryBuilder0.build();
      boolean boolean0 = accountReadQuery0.equals(accountReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AccountReadQuery.AccountReadQueryBuilder accountReadQuery_AccountReadQueryBuilder0 = AccountReadQuery.builder();
      String string0 = accountReadQuery_AccountReadQueryBuilder0.toString();
      assertEquals("AccountReadQuery.AccountReadQueryBuilder(customerAccessToken=null, financialInstitutionId=null, accountId=null, additionalHeaders$value=null)", string0);
  }
}
