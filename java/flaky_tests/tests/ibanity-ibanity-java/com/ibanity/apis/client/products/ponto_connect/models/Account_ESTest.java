/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 07:50:36 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Account;
import com.ibanity.apis.client.products.ponto_connect.models.Synchronization;
import java.math.BigDecimal;
import java.time.Instant;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Account account0 = new Account();
      account0.setDeprecated(true);
      account0.isDeprecated();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond((-4522L));
      account0.setSynchronizedAt(instant0);
      account0.getSynchronizedAt();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account0.setSubtype("~F;/qI__Xu*2");
      account0.getSubtype();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("");
      account0.getSubtype();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.selfLink("N\"$A?");
      Account account0 = account_AccountBuilder0.build();
      account0.getSelfLink();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.selfLink("");
      Account account0 = account_AccountBuilder1.build();
      account0.getSelfLink();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.requestId(", latestSynchronization=");
      Account account0 = account_AccountBuilder1.build();
      account0.getRequestId();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.requestId("");
      Account account0 = account_AccountBuilder0.build();
      account0.getRequestId();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.referenceType("giZFz-{R'X{(tH!zP");
      Account account0 = account_AccountBuilder1.build();
      account0.getReferenceType();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.referenceType("");
      Account account0 = account_AccountBuilder1.build();
      account0.getReferenceType();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.reference("{synchronizationId}");
      Account account0 = account_AccountBuilder0.build();
      account0.getReference();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.reference("");
      Account account0 = account_AccountBuilder0.build();
      account0.getReference();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("j7w?#>JWL<^k-");
      account0.getProduct();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Account account0 = new Account();
      account0.setProduct("");
      account0.getProduct();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Synchronization synchronization0 = new Synchronization();
      account_AccountBuilder0.latestSynchronization(synchronization0);
      Account account0 = account_AccountBuilder0.build();
      account0.getLatestSynchronization();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.internalReference("account");
      Account account0 = account_AccountBuilder1.build();
      account0.getInternalReference();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.internalReference("");
      Account account0 = account_AccountBuilder0.build();
      account0.getInternalReference();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Random.setNextRandom((-1972));
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setId(uUID0);
      account0.getId();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Account account0 = new Account();
      account0.setHolderName("U?-_^PtuU)c!&GS");
      account0.getHolderName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.holderName("");
      Account account0 = account_AccountBuilder0.build();
      account0.getHolderName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Random.setNextRandom(698);
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.financialInstitutionId(uUID0);
      Account account0 = account_AccountBuilder1.build();
      account0.getFinancialInstitutionId();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      account_AccountBuilder0.financialInstitutionId(uUID0);
      Account account0 = account_AccountBuilder0.build();
      account0.getFinancialInstitutionId();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.description(" ^:ab(IzMsJ*ZWR,");
      Account account0 = account_AccountBuilder1.build();
      account0.getDescription();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.description("");
      Account account0 = account_AccountBuilder1.build();
      account0.getDescription();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      account0.setCurrentBalanceVariationObservedAt(instant0);
      account0.getCurrentBalanceVariationObservedAt();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(2476L);
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.currentBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder1.build();
      account0.getCurrentBalanceReferenceDate();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.currentBalanceChangedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.getCurrentBalanceChangedAt();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account_AccountBuilder0.currentBalance(bigDecimal0);
      Account account0 = account_AccountBuilder0.build();
      account0.getCurrentBalance();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Account account0 = new Account();
      BigDecimal bigDecimal0 = new BigDecimal(828.56165924);
      account0.setCurrentBalance(bigDecimal0);
      account0.getCurrentBalance();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      BigDecimal bigDecimal0 = new BigDecimal((-1028L));
      account_AccountBuilder0.currentBalance(bigDecimal0);
      Account account0 = account_AccountBuilder0.build();
      account0.getCurrentBalance();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.currency("xVY");
      Account account0 = account_AccountBuilder0.build();
      account0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Account account0 = new Account();
      account0.setCurrency("");
      account0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli((-1L));
      account_AccountBuilder0.availableBalanceVariationObservedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.getAvailableBalanceVariationObservedAt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.availableBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.getAvailableBalanceReferenceDate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      account0.setAvailableBalanceChangedAt(instant0);
      account0.getAvailableBalanceChangedAt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account0.setAvailableBalance(bigDecimal0);
      account0.getAvailableBalance();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      BigDecimal bigDecimal0 = new BigDecimal(79);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account0 = account_AccountBuilder1.build();
      account0.getAvailableBalance();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = new BigDecimal((-893));
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account0 = account_AccountBuilder1.build();
      account0.getAvailableBalance();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(2476L);
      account0.setAuthorizedAt(instant0);
      account0.getAuthorizedAt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.authorizationExpirationExpectedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.getAuthorizationExpirationExpectedAt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Account account0 = new Account();
      account0.canEqual(account0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Account account0 = new Account();
      account0.canEqual((Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Account account0 = new Account();
      account0.getAvailableBalanceChangedAt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account0.getInternalReference();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Account account0 = new Account();
      account0.getAvailableBalanceVariationObservedAt();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Account account0 = new Account();
      account0.getReferenceType();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Account account0 = new Account();
      account0.getId();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Account account0 = new Account();
      account0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Account account0 = new Account();
      account0.getAuthorizationExpirationExpectedAt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Account account0 = new Account();
      account0.getAvailableBalanceReferenceDate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Account account0 = new Account();
      account0.getSynchronizedAt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Account account0 = new Account();
      account0.getDescription();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Account account0 = new Account();
      account0.getReference();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Account account0 = new Account();
      account0.getAuthorizedAt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Account account0 = new Account();
      account0.getRequestId();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account0.getCurrentBalance();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Account account0 = new Account();
      account0.getSubtype();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Account account0 = new Account();
      account0.getProduct();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Account account0 = new Account();
      account0.getCurrentBalanceChangedAt();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Account account0 = new Account();
      account0.getFinancialInstitutionId();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Account account0 = new Account();
      account0.getCurrentBalanceReferenceDate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Account account0 = new Account();
      account0.getSelfLink();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Account account0 = new Account();
      account0.getAvailableBalance();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Account account0 = new Account();
      account0.getCurrentBalanceVariationObservedAt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Account account0 = new Account();
      account0.isDeprecated();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Account account0 = new Account();
      account0.getLatestSynchronization();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Account account0 = new Account();
      account0.getHolderName();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      Account account0 = account_AccountBuilder0.build();
      account_AccountBuilder0.availableBalanceVariationObservedAt(instant0);
      account0.setAvailableBalanceVariationObservedAt(instant0);
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.setAvailableBalanceVariationObservedAt(instant0);
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      Instant instant0 = MockInstant.now();
      account1.setAvailableBalanceReferenceDate(instant0);
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.availableBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.now();
      account_AccountBuilder0.availableBalanceChangedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.availableBalanceChangedAt(instant0);
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      account_AccountBuilder0.availableBalanceChangedAt(instant0);
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.now();
      account_AccountBuilder0.currentBalanceVariationObservedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      account_AccountBuilder0.currentBalanceVariationObservedAt(instant0);
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.now();
      account_AccountBuilder0.currentBalanceVariationObservedAt(instant0);
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.currentBalanceReferenceDate(instant0);
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.currentBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(2255L);
      account0.setCurrentBalanceChangedAt(instant0);
      Account account1 = new Account();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      account_AccountBuilder0.currentBalanceChangedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setHolderName("{accountId}");
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setHolderName("{accountId}");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.holderName("");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.product("account");
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setProduct("{accountId}");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.product("account");
      Account account1 = account_AccountBuilder1.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setInternalReference("account");
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.setInternalReference("");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.internalReference("synchronization");
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.authorizationExpirationExpectedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = new Account();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAuthorizationExpirationExpectedAt(instant0);
      Account account1 = new Account();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.authorizationExpirationExpectedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(1L, 1L);
      account0.setAuthorizedAt(instant0);
      Account account1 = new Account();
      account1.setAuthorizedAt(instant0);
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      Instant instant0 = MockInstant.now();
      account1.setAuthorizedAt(instant0);
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(2476L);
      account0.setAuthorizedAt(instant0);
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account1.setLatestSynchronization(synchronization0);
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Synchronization synchronization0 = new Synchronization();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.latestSynchronization(synchronization0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account account0 = account_AccountBuilder0.build();
      account_AccountBuilder0.synchronizedAt(instant0);
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.synchronizedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account account0 = account_AccountBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account1 = account_AccountBuilder1.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account_AccountBuilder0.currentBalance(bigDecimal0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      account1.setCurrentBalance(bigDecimal0);
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      account_AccountBuilder0.currentBalance(bigDecimal0);
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setReferenceType("account");
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setReferenceType("{accountId}");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.referenceType(":2KMP^5l;PicZfQG{");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.reference("");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder1.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setReference("{accountId}");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.reference("");
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.setDescription("d7");
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.setDescription("account");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.description("{");
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder1.build();
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.currency("{accountId}");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      account1.setCurrency("{accountId}");
      account0.equals(account1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.currency("{accountId}");
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account0.setSubtype("7Gyfut=EOg#?faV6CU`");
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.subtype("");
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder0.build();
      account1.equals(account0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.selfLink("Account.AccountBuilder(id=null, financialInstitutionId=null, requestId=null, selfLink=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, deprecated=false, synchronizedAt=null, latestSynchronization=null, authorizedAt=null, authorizationExpirationExpectedAt=1970-01-01T00:00:00.020Z, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=1970-01-01T00:00:00.020Z, availableBalanceChangedAt=null, availableBalanceReferenceDate=1970-01-01T00:00:00.020Z, availableBalanceVariationObservedAt=null)");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
      assertEquals("Account.AccountBuilder(id=null, financialInstitutionId=null, requestId=null, selfLink=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, deprecated=false, synchronizedAt=null, latestSynchronization=null, authorizedAt=null, authorizationExpirationExpectedAt=1970-01-01T00:00:00.020Z, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=1970-01-01T00:00:00.020Z, availableBalanceChangedAt=null, availableBalanceReferenceDate=1970-01-01T00:00:00.020Z, availableBalanceVariationObservedAt=null)", account1.getSelfLink());
      assertFalse(account1.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account0.setSelfLink("synchronization");
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account1.equals(account0);
      assertFalse(account0.equals((Object)account1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account_AccountBuilder0.selfLink("Account.AccountBuilder(id=null, financialInstitutionId=null, requestId=null, selfLink=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, deprecated=false, synchronizedAt=null, latestSynchronization=null, authorizedAt=null, authorizationExpirationExpectedAt=1970-01-01T00:00:00.020Z, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=1970-01-01T00:00:00.020Z, availableBalanceChangedAt=null, availableBalanceReferenceDate=1970-01-01T00:00:00.020Z, availableBalanceVariationObservedAt=null)");
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.requestId(", latestSynchronization=");
      Account account0 = account_AccountBuilder1.build();
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
      assertEquals(", latestSynchronization=", account0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.requestId(", latestSynchronization=");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(account0.equals((Object)account1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.requestId(", latestSynchronization=");
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder1.build();
      boolean boolean0 = account0.equals(account1);
      assertFalse(account1.isDeprecated());
      assertTrue(boolean0);
      assertEquals(", latestSynchronization=", account1.getRequestId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      UUID uUID0 = MockUUID.randomUUID();
      account1.setFinancialInstitutionId(uUID0);
      boolean boolean0 = account1.equals(account0);
      assertFalse(account1.equals((Object)account0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setFinancialInstitutionId(uUID0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      UUID uUID0 = MockUUID.fromString("2|'%fcDweaT&=4'");
      account_AccountBuilder0.financialInstitutionId(uUID0);
      Account account0 = account_AccountBuilder0.build();
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account1.equals(account0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Account account0 = new Account();
      Account account1 = new Account();
      assertTrue(account1.equals((Object)account0));
      
      UUID uUID0 = MockUUID.randomUUID();
      account1.setId(uUID0);
      boolean boolean0 = account0.equals(account1);
      assertFalse(account1.equals((Object)account0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Account account0 = new Account();
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      account_AccountBuilder0.id(uUID0);
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account1.equals(account0);
      assertFalse(account1.isDeprecated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.deprecated(true);
      Account account1 = account_AccountBuilder1.build();
      boolean boolean0 = account1.equals(account0);
      assertTrue(account1.isDeprecated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = account0.equals(object0);
      assertFalse(account0.isDeprecated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account0.equals(account0);
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Instant instant0 = MockInstant.ofEpochMilli((-550L));
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.availableBalanceVariationObservedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.availableBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      account_AccountBuilder0.availableBalanceChangedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.now();
      account_AccountBuilder0.currentBalanceVariationObservedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.holderName("");
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertEquals("", account0.getHolderName());
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.internalReference("synchronization");
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
      assertEquals("synchronization", account0.getInternalReference());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.authorizationExpirationExpectedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.ofEpochSecond(2476L);
      account0.setAuthorizedAt(instant0);
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      Synchronization synchronization0 = new Synchronization();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.latestSynchronization(synchronization0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.synchronizedAt(instant0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = new BigDecimal((-1621.5742267));
      account_AccountBuilder0.availableBalance(bigDecimal0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      BigDecimal bigDecimal0 = new BigDecimal((-1621.5742267));
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.currentBalance(bigDecimal0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.referenceType("{synchronizationId}");
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.reference("");
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
      assertEquals("", account0.getReference());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Account account0 = new Account();
      account0.setDescription(", authorizationExpirationExpectedAt=");
      account0.hashCode();
      assertEquals(", authorizationExpirationExpectedAt=", account0.getDescription());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.currency("{accountId}");
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.subtype("");
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
      assertEquals("", account0.getSubtype());
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account account0 = account_AccountBuilder0.build();
      account0.setSelfLink("I}Dz<S");
      account0.hashCode();
      assertEquals("I}Dz<S", account0.getSelfLink());
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      UUID uUID0 = MockUUID.fromString("account");
      account_AccountBuilder0.id(uUID0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      account_AccountBuilder0.requestId(", latestSynchronization=");
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertEquals(", latestSynchronization=", account0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.currentBalanceReferenceDate(instant0);
      Account account0 = account_AccountBuilder1.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      String string0 = account_AccountBuilder0.toString();
      assertEquals("Account.AccountBuilder(id=null, financialInstitutionId=null, requestId=null, selfLink=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, deprecated=false, synchronizedAt=null, latestSynchronization=null, authorizedAt=null, authorizationExpirationExpectedAt=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null)", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      account_AccountBuilder0.product("account");
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertEquals("account", account0.getProduct());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.authorizedAt((Instant) null);
      assertSame(account_AccountBuilder1, account_AccountBuilder0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = new Account.AccountBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      Account.AccountBuilder account_AccountBuilder1 = account_AccountBuilder0.id(uUID0);
      Account account0 = account_AccountBuilder1.build();
      Account account1 = account_AccountBuilder0.build();
      boolean boolean0 = account1.equals(account0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      UUID uUID0 = MockUUID.fromString("2|'%fcDweaT&=4'");
      account_AccountBuilder0.financialInstitutionId(uUID0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Account.AccountBuilder account_AccountBuilder0 = Account.builder();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      account_AccountBuilder0.currentBalanceChangedAt(instant0);
      Account account0 = account_AccountBuilder0.build();
      account0.hashCode();
      assertFalse(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceReferenceDate(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Account account0 = new Account();
      String string0 = account0.toString();
      assertEquals("Account(id=null, financialInstitutionId=null, requestId=null, selfLink=null, subtype=null, currency=null, description=null, reference=null, referenceType=null, currentBalance=null, availableBalance=null, deprecated=false, synchronizedAt=null, latestSynchronization=null, authorizedAt=null, authorizationExpirationExpectedAt=null, internalReference=null, product=null, holderName=null, currentBalanceChangedAt=null, currentBalanceReferenceDate=null, currentBalanceVariationObservedAt=null, availableBalanceChangedAt=null, availableBalanceReferenceDate=null, availableBalanceVariationObservedAt=null)", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Account account0 = new Account();
      UUID uUID0 = MockUUID.randomUUID();
      account0.setId(uUID0);
      UUID uUID1 = account0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceReferenceDate(instant0);
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Account account0 = new Account();
      account0.setDeprecated(true);
      account0.hashCode();
      assertTrue(account0.isDeprecated());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Account account0 = new Account();
      Synchronization synchronization0 = new Synchronization();
      account0.setLatestSynchronization(synchronization0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Account account0 = new Account();
      account0.setRequestId("/,rKIfhO");
      assertEquals("/,rKIfhO", account0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Account account0 = new Account();
      account0.setSubtype("{accountId}");
      Account account1 = new Account();
      boolean boolean0 = account0.equals(account1);
      assertEquals("{accountId}", account0.getSubtype());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setSynchronizedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setCurrentBalanceChangedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Account account0 = new Account();
      Instant instant0 = MockInstant.now();
      account0.setAvailableBalanceVariationObservedAt(instant0);
      Account account1 = new Account();
      boolean boolean0 = account1.equals(account0);
      assertFalse(boolean0);
  }
}
