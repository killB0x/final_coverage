/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:24:48 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.Payment;
import java.math.BigDecimal;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Payment_ESTest extends Payment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.status("Id");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertEquals("Id", payment0.getStatus());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getStatus();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertEquals("Id", payment0.getStatus());
      assertNull(payment0.getSelfLink());
      assertEquals("Id", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      payment0.setStatus("");
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("", payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      
      String string0 = payment0.getStatus();
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("", payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.selfLink("wluj~'0w");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getCreditorAgentType());
      assertEquals("wluj~'0w", payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      String string0 = payment0.getSelfLink();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getCreditorAgentType());
      assertEquals("wluj~'0w", payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertEquals("wluj~'0w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.selfLink("");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("", payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      String string0 = payment0.getSelfLink();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("", payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Clock clock0 = MockClock.systemUTC();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.requestedExecutionDate(localDate0);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNotNull(payment0);
      
      LocalDate localDate1 = payment0.getRequestedExecutionDate();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(localDate0, localDate1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertSame(localDate1, localDate0);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNotNull(localDate1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNotNull(payment0);
      
      payment0.setRequestId("J2\"~n^+z*K'|D^");
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("J2\"~n^+z*K'|D^", payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      
      String string0 = payment0.getRequestId();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("J2\"~n^+z*K'|D^", payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertEquals("J2\"~n^+z*K'|D^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNotNull(payment0);
      
      payment0.setRequestId("");
      assertEquals("", payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      
      String string0 = payment0.getRequestId();
      assertEquals("", payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNotNull(payment0);
      
      payment0.setRemittanceInformationType("Payment(id=");
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("Payment(id=", payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      
      String string0 = payment0.getRemittanceInformationType();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("Payment(id=", payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertEquals("Payment(id=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.remittanceInformationType("");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertEquals("", payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getRemittanceInformationType();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertEquals("", payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.remittanceInformation("x?");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertEquals("x?", payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNotNull(payment0);
      
      String string0 = payment0.getRemittanceInformation();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertEquals("x?", payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("x?", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      payment0.setRemittanceInformation("");
      assertNull(payment0.getRequestId());
      assertEquals("", payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      
      String string0 = payment0.getRemittanceInformation();
      assertNull(payment0.getRequestId());
      assertEquals("", payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.redirectLink("j1wP5WC@");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCurrency());
      assertEquals("j1wP5WC@", payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      String string0 = payment0.getRedirectLink();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCurrency());
      assertEquals("j1wP5WC@", payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertEquals("j1wP5WC@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      payment0.setRedirectLink("");
      assertNull(payment0.getRemittanceInformationType());
      assertEquals("", payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      
      String string0 = payment0.getRedirectLink();
      assertNull(payment0.getRemittanceInformationType());
      assertEquals("", payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Random.setNextRandom((-185));
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      UUID uUID0 = MockUUID.fromString("tz@7|KPu`CDBRN-0/");
      assertEquals("b9000000-ba00-4000-bb00-0000bc000000", uUID0.toString());
      assertEquals((-4971973985462910976L), uUID0.getLeastSignificantBits());
      assertEquals((-5116089173572304896L), uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      payment0.setId(uUID0);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("b9000000-ba00-4000-bb00-0000bc000000", uUID0.toString());
      assertEquals((-4971973985462910976L), uUID0.getLeastSignificantBits());
      assertEquals((-5116089173572304896L), uUID0.getMostSignificantBits());
      
      UUID uUID1 = payment0.getId();
      assertSame(uUID1, uUID0);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("b9000000-ba00-4000-bb00-0000bc000000", uUID1.toString());
      assertEquals((-4971973985462910976L), uUID1.getLeastSignificantBits());
      assertEquals((-5116089173572304896L), uUID1.getMostSignificantBits());
      assertNotNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNotNull(payment0);
      
      payment0.setCurrency("+jVFoYSg{");
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("+jVFoYSg{", payment0.getCurrency());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      
      String string0 = payment0.getCurrency();
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("+jVFoYSg{", payment0.getCurrency());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("+jVFoYSg{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.currency("");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertEquals("", payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNotNull(payment0);
      
      String string0 = payment0.getCurrency();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertEquals("", payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorName("[q7'yp;yF&/P");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertEquals("[q7'yp;yF&/P", payment0.getCreditorName());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorName();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertEquals("[q7'yp;yF&/P", payment0.getCreditorName());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertEquals("[q7'yp;yF&/P", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertNotNull(payment0);
      
      payment0.setCreditorName("");
      assertEquals("", payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      
      String string0 = payment0.getCreditorName();
      assertEquals("", payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNotNull(payment0);
      
      payment0.setCreditorAgentType("wluj~'0w");
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertEquals("wluj~'0w", payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      
      String string0 = payment0.getCreditorAgentType();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertEquals("wluj~'0w", payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertEquals("wluj~'0w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorAgent("D");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertEquals("D", payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAgent();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertEquals("D", payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertEquals("D", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorAgent("");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertEquals("", payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAgent();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertEquals("", payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorAccountReferenceType("artyhwE6 Ms");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertEquals("artyhwE6 Ms", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAccountReferenceType();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertEquals("artyhwE6 Ms", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("artyhwE6 Ms", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorAccountReferenceType("");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAccountReferenceType();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertEquals("", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      payment0.setCreditorAccountReference("wluj~'0w");
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      
      String string0 = payment0.getCreditorAccountReference();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertEquals("wluj~'0w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      payment0.setCreditorAccountReference("");
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertEquals("", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      
      String string0 = payment0.getCreditorAccountReference();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertEquals("", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.amount(bigDecimal0);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      BigDecimal bigDecimal1 = payment0.getAmount();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.amount(bigDecimal0);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      BigDecimal bigDecimal1 = payment0.getAmount();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-531.0));
      assertEquals((short) (-531), bigDecimal0.shortValue());
      assertEquals((byte) (-19), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.amount(bigDecimal0);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((short) (-531), bigDecimal0.shortValue());
      assertEquals((byte) (-19), bigDecimal0.byteValue());
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment0 = payment_PaymentBuilder1.build();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertEquals((short) (-531), bigDecimal0.shortValue());
      assertEquals((byte) (-19), bigDecimal0.byteValue());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      BigDecimal bigDecimal1 = payment0.getAmount();
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short) (-531), bigDecimal0.shortValue());
      assertEquals((byte) (-19), bigDecimal0.byteValue());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertEquals((byte) (-19), bigDecimal1.byteValue());
      assertEquals((short) (-531), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNotNull(payment0);
      
      boolean boolean0 = payment0.canEqual(payment0);
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNotNull(payment0);
      
      boolean boolean0 = payment0.canEqual(payment_PaymentBuilder0);
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      BigDecimal bigDecimal0 = payment0.getAmount();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      String string0 = payment0.getStatus();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getRedirectLink();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      UUID uUID0 = payment0.getId();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      String string0 = payment0.getSelfLink();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment0 = payment_PaymentBuilder0.build();
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAccountReferenceType();
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAccountReference();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      LocalDate localDate0 = payment0.getRequestedExecutionDate();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNotNull(payment0);
      
      String string0 = payment0.getRemittanceInformation();
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformation());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorName();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      String string0 = payment0.getRemittanceInformationType();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAgentType();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getRequestId());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCreditorAgent();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      String string0 = payment0.getCurrency();
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.redirectLink("wluj~'0w");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment1 = payment_PaymentBuilder1.build();
      assertFalse(payment1.equals((Object)payment0));
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotSame(payment1, payment0);
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("wluj~'0w", payment1.getRedirectLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAgent());
      assertNotNull(payment1);
      
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("wluj~'0w", payment1.getRedirectLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAgent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNotNull(payment0);
      
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.redirectLink("{paymentId}");
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotNull(payment_PaymentBuilder1);
      
      Payment payment1 = payment_PaymentBuilder1.build();
      assertFalse(payment1.equals((Object)payment0));
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("{paymentId}", payment1.getRedirectLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNotNull(payment1);
      
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertSame(payment_PaymentBuilder0, payment_PaymentBuilder1);
      assertSame(payment_PaymentBuilder1, payment_PaymentBuilder0);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("{paymentId}", payment1.getRedirectLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNotNull(payment0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      payment0.setAmount(bigDecimal0);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformation());
      assertNotNull(payment1);
      
      payment1.setAmount(bigDecimal0);
      assertTrue(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformation());
      
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment0.equals((Object)payment1));
      assertTrue(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformation());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNotNull(payment1);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      payment1.setAmount(bigDecimal0);
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorName());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getSelfLink());
      assertNotNull(payment0);
      
      payment0.setCreditorAccountReference("wluj~'0w");
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getSelfLink());
      
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment1 = payment_PaymentBuilder0.build();
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorAgentType());
      assertNotNull(payment1);
      
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getSelfLink());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorAgentType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNotNull(payment0);
      
      payment0.setCreditorAccountReference("wluj~'0w");
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRequestId());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment1 = payment_PaymentBuilder0.build();
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNotNull(payment1);
      
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getRequestId());
      assertEquals("wluj~'0w", payment0.getCreditorAccountReference());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRedirectLink());
      assertNotNull(payment1);
      
      payment0.setCreditorAccountReferenceType("payment");
      assertFalse(payment0.equals((Object)payment1));
      assertNotSame(payment0, payment1);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("payment", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      
      payment1.setCreditorAccountReferenceType("payment");
      assertTrue(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCurrency());
      assertEquals("payment", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment0.equals((Object)payment1));
      assertTrue(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertEquals("payment", payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCurrency());
      assertEquals("payment", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNotNull(payment0);
      
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNotNull(payment1);
      
      payment1.setCreditorAccountReferenceType("payment");
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertEquals("payment", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertEquals("payment", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNotNull(payment1);
      
      payment1.setCreditorAccountReferenceType("{paymentId}");
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertEquals("{paymentId}", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertEquals("{paymentId}", payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNotNull(payment0);
      
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNotNull(payment1);
      
      payment1.setCreditorAgent("payment");
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("payment", payment1.getCreditorAgent());
      
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getCurrency());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertEquals("payment", payment1.getCreditorAgent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNotNull(payment0);
      
      payment0.setCreditorAgent(", creditorAgent=");
      assertEquals(", creditorAgent=", payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      assertNotNull(payment_PaymentBuilder0);
      
      Payment payment1 = payment_PaymentBuilder0.build();
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment1, payment0);
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNotNull(payment1);
      
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertEquals(", creditorAgent=", payment0.getCreditorAgent());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getCreditorAgentType());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorName());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Payment payment0 = new Payment();
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment0.getCreditorAgentType());
      assertNotNull(payment0);
      
      payment0.setCreditorAgentType("{paymentId}");
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertEquals("{paymentId}", payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorName());
      assertNotNull(payment1);
      
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment0.equals((Object)payment1));
      assertFalse(payment1.equals((Object)payment0));
      assertNotSame(payment0, payment1);
      assertNotSame(payment1, payment0);
      assertNull(payment0.getRemittanceInformationType());
      assertNull(payment0.getCreditorName());
      assertNull(payment0.getStatus());
      assertNull(payment0.getCreditorAccountReference());
      assertNull(payment0.getCurrency());
      assertNull(payment0.getRedirectLink());
      assertNull(payment0.getCreditorAccountReferenceType());
      assertEquals("{paymentId}", payment0.getCreditorAgentType());
      assertNull(payment0.getRequestId());
      assertNull(payment0.getRemittanceInformation());
      assertNull(payment0.getSelfLink());
      assertNull(payment0.getCreditorAgent());
      assertNull(payment1.getRemittanceInformationType());
      assertNull(payment1.getRedirectLink());
      assertNull(payment1.getCurrency());
      assertNull(payment1.getRequestId());
      assertNull(payment1.getRemittanceInformation());
      assertNull(payment1.getSelfLink());
      assertNull(payment1.getCreditorAccountReferenceType());
      assertNull(payment1.getStatus());
      assertNull(payment1.getCreditorAccountReference());
      assertNull(payment1.getCreditorAgent());
      assertNull(payment1.getCreditorAgentType());
      assertNull(payment1.getCreditorName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCreditorAgentType("wluj~'0w");
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertEquals("wluj~'0w", payment0.getCreditorAgentType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setCreditorName("{paymentId}");
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment payment1 = payment_PaymentBuilder0.build();
      assertTrue(payment1.equals((Object)payment0));
      
      payment0.setCreditorName("wluj~'0w");
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCurrency("com.ibanity.apis.client.products.ponto_connect.models.Payment$PaymentBuilder");
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      
      payment1.setCurrency("com.ibanity.apis.client.products.ponto_connect.models.Payment$PaymentBuilder");
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.currency("");
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertEquals("", payment1.getCurrency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment0.setCurrency("");
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertEquals("", payment0.getCurrency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment payment1 = payment_PaymentBuilder0.build();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setRemittanceInformation("payment");
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      payment_PaymentBuilder0.remittanceInformation("{paymentId}");
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      payment1.setRemittanceInformationType("{paymentId}");
      assertFalse(payment1.equals((Object)payment0));
      
      payment0.setRemittanceInformationType("{paymentId}");
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setRemittanceInformationType("payment");
      Payment payment1 = new Payment();
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(boolean0);
      assertEquals("payment", payment0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setSelfLink("");
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      payment0.setRemittanceInformationType("");
      Payment payment1 = payment_PaymentBuilder0.build();
      payment1.setSelfLink("");
      payment0.equals(payment1);
      assertEquals("", payment1.getSelfLink());
      assertEquals("", payment0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      Payment payment1 = payment_PaymentBuilder0.build();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      payment1.setRequestedExecutionDate(localDate0);
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      LocalDate localDate0 = MockLocalDate.now();
      payment1.setRequestedExecutionDate(localDate0);
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setStatus("I.R-(*yIWzdtv`z");
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      
      payment1.setStatus("I.R-(*yIWzdtv`z");
      boolean boolean0 = payment1.equals(payment0);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.status("payment");
      Payment payment1 = payment_PaymentBuilder1.build();
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(boolean0);
      assertFalse(payment1.equals((Object)payment0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setStatus("payment");
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setRequestId("payment");
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setRequestId("payment");
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setSelfLink("payment");
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      payment1.setSelfLink("K,");
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      UUID uUID0 = MockUUID.randomUUID();
      payment1.setId(uUID0);
      assertFalse(payment1.equals((Object)payment0));
      
      payment0.setId(uUID0);
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      UUID uUID0 = MockUUID.randomUUID();
      payment0.setId(uUID0);
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment payment1 = new Payment();
      assertTrue(payment1.equals((Object)payment0));
      
      UUID uUID0 = MockUUID.randomUUID();
      payment0.setId(uUID0);
      boolean boolean0 = payment0.equals(payment1);
      assertFalse(payment1.equals((Object)payment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Payment payment0 = new Payment();
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      boolean boolean0 = payment0.equals(payment_PaymentBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Payment payment0 = new Payment();
      boolean boolean0 = payment0.equals(payment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.redirectLink("{w1>DpiSiWzz");
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
      assertEquals("{w1>DpiSiWzz", payment0.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      payment_PaymentBuilder0.amount(bigDecimal0);
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCreditorAccountReference("{paymentId}");
      payment0.hashCode();
      assertEquals("{paymentId}", payment0.getCreditorAccountReference());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCreditorAccountReferenceType("payment");
      payment0.hashCode();
      assertEquals("payment", payment0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.creditorAgent("#L0#;^y!GbH7[ylG<");
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
      assertEquals("#L0#;^y!GbH7[ylG<", payment0.getCreditorAgent());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCreditorAgentType("wluj~'0w");
      payment0.hashCode();
      assertEquals("wluj~'0w", payment0.getCreditorAgentType());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.creditorName("S");
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
      assertEquals("S", payment0.getCreditorName());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setRemittanceInformation(", remittanceInformation=");
      payment0.hashCode();
      assertEquals(", remittanceInformation=", payment0.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Payment payment0 = new Payment();
      Period period0 = Period.ofYears(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      payment0.setRequestedExecutionDate(localDate0);
      payment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.status("~G3)=a8'D(,4sm~~");
      Payment payment0 = payment_PaymentBuilder1.build();
      payment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.requestId("{paymentId}");
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
      assertEquals("{paymentId}", payment0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.selfLink("{paymentId}");
      Payment payment0 = payment_PaymentBuilder1.build();
      payment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      UUID uUID0 = MockUUID.fromString("V:uSV6hAfQ]{=@t");
      payment_PaymentBuilder0.id(uUID0);
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      String string0 = payment_PaymentBuilder0.toString();
      assertEquals("Payment.PaymentBuilder(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, remittanceInformationType=null, remittanceInformation=null, currency=null, creditorName=null, creditorAgentType=null, creditorAgent=null, creditorAccountReferenceType=null, creditorAccountReference=null, amount=null, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.creditorAccountReference("payment");
      Payment payment0 = payment_PaymentBuilder0.build();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(boolean0);
      assertEquals("payment", payment1.getCreditorAccountReference());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment payment0 = payment_PaymentBuilder0.build();
      String string0 = payment0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.remittanceInformation("{paymentId}");
      Payment payment0 = payment_PaymentBuilder1.build();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment1.equals(payment0);
      assertTrue(boolean0);
      assertEquals("{paymentId}", payment1.getRemittanceInformation());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.requestId("payment");
      Payment payment0 = payment_PaymentBuilder1.build();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment1.equals(payment0);
      assertEquals("payment", payment1.getRequestId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorName("payment");
      Payment payment0 = payment_PaymentBuilder1.build();
      Payment payment1 = payment_PaymentBuilder1.build();
      boolean boolean0 = payment1.equals(payment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.redirectLink("payment");
      Payment payment0 = payment_PaymentBuilder1.build();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(boolean0);
      assertEquals("payment", payment1.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.creditorAgentType("");
      Payment payment0 = payment_PaymentBuilder0.build();
      String string0 = payment0.getCreditorAgentType();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.creditorAgent("{paymentId}");
      Payment payment0 = payment_PaymentBuilder1.build();
      Payment payment1 = payment_PaymentBuilder0.build();
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(boolean0);
      assertEquals("{paymentId}", payment1.getCreditorAgent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      Payment.PaymentBuilder payment_PaymentBuilder1 = payment_PaymentBuilder0.currency("");
      Payment payment0 = payment_PaymentBuilder1.build();
      payment0.hashCode();
      assertEquals("", payment0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = new Payment.PaymentBuilder();
      payment_PaymentBuilder0.remittanceInformationType("payment");
      Payment payment0 = payment_PaymentBuilder0.build();
      payment0.hashCode();
      assertEquals("payment", payment0.getRemittanceInformationType());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Payment payment0 = new Payment();
      LocalDate localDate0 = MockLocalDate.now();
      payment0.setRequestedExecutionDate(localDate0);
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      
      payment1.setRequestedExecutionDate(localDate0);
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Payment payment0 = new Payment();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      payment0.setAmount(bigDecimal0);
      Payment payment1 = new Payment();
      boolean boolean0 = payment1.equals(payment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Payment payment0 = new Payment();
      payment0.setCreditorAgentType(", creditorAccountReference=");
      Payment payment1 = new Payment();
      assertFalse(payment1.equals((Object)payment0));
      
      payment1.setCreditorAgentType(", creditorAccountReference=");
      boolean boolean0 = payment0.equals(payment1);
      assertTrue(payment1.equals((Object)payment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Payment payment0 = new Payment();
      String string0 = payment0.toString();
      assertEquals("Payment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, remittanceInformationType=null, remittanceInformation=null, currency=null, creditorName=null, creditorAgentType=null, creditorAgent=null, creditorAccountReferenceType=null, creditorAccountReference=null, amount=null, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Payment.PaymentBuilder payment_PaymentBuilder0 = Payment.builder();
      UUID uUID0 = MockUUID.randomUUID();
      payment_PaymentBuilder0.id(uUID0);
      Payment payment0 = payment_PaymentBuilder0.build();
      UUID uUID1 = payment0.getId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }
}
