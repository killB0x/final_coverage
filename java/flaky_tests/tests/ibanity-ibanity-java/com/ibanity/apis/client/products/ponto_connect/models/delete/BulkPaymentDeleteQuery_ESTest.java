/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:26:02 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.delete.BulkPaymentDeleteQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BulkPaymentDeleteQuery_ESTest extends BulkPaymentDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      bulkPaymentDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accountId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      bulkPaymentDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-3517));
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = new BulkPaymentDeleteQuery("bqQ')_~", uUID0, uUID0, map0);
      UUID uUID1 = bulkPaymentDeleteQuery1.getBulkPaymentId();
      assertSame(uUID0, uUID1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dHzjHwGI`rI;7f");
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = new BulkPaymentDeleteQuery("dHzjHwGI`rI;7f", uUID0, uUID0, hashMap0);
      UUID uUID1 = bulkPaymentDeleteQuery1.getBulkPaymentId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = new BulkPaymentDeleteQuery("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)", uUID0, uUID0, (Map<String, String>) null);
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = new BulkPaymentDeleteQuery("", uUID0, uUID0, hashMap0);
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = new BulkPaymentDeleteQuery("@U8", uUID0, uUID0, hashMap0);
      hashMap0.put("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=00000000-0100-4000-8200-000003000000, bulkPaymentId=null, additionalHeaders$value=null)", "com.ibanity.apis.client.products.ponto_connect.models.delete.BulkPaymentDeleteQuery$BulkPaymentDeleteQueryBuilder");
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Random.setNextRandom((-3517));
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = new BulkPaymentDeleteQuery("bqQ')_~", uUID0, uUID0, map0);
      UUID uUID1 = bulkPaymentDeleteQuery1.getAccountId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dHzjHwGI`rI;7f");
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      Map<String, String> map0 = bulkPaymentDeleteQuery0.getAdditionalHeaders();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = new BulkPaymentDeleteQuery("dHzjHwGI`rI;7f", uUID0, uUID0, hashMap0);
      UUID uUID1 = bulkPaymentDeleteQuery1.getAccountId();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accessToken("{L4iq;");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      String string0 = bulkPaymentDeleteQuery0.getAccessToken();
      assertEquals("{L4iq;", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accessToken("");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      String string0 = bulkPaymentDeleteQuery0.getAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.canEqual(bulkPaymentDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.canEqual(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = bulkPaymentDeleteQuery0.getAccountId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = bulkPaymentDeleteQuery0.getBulkPaymentId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      String string0 = bulkPaymentDeleteQuery0.getAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.additionalHeaders(hashMap0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentDeleteQuery1.equals((Object)bulkPaymentDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.fromString("");
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertFalse(bulkPaymentDeleteQuery1.equals((Object)bulkPaymentDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("sEbP=");
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.bulkPaymentId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accountId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = new BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accountId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentDeleteQuery1.equals((Object)bulkPaymentDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      UUID uUID0 = MockUUID.fromString("");
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accountId(uUID0);
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accessToken("S3Q");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accessToken("com.ibanity.apis.client.products.ponto_connect.models.delete.BulkPaymentDeleteQuery$BulkPaymentDeleteQueryBuilder");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(bulkPaymentDeleteQuery1.equals((Object)bulkPaymentDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.accessToken("");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder1.build();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery1 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery1.equals(bulkPaymentDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      boolean boolean0 = bulkPaymentDeleteQuery0.equals(bulkPaymentDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)");
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = new BulkPaymentDeleteQuery("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)", uUID0, uUID0, (Map<String, String>) null);
      bulkPaymentDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      String string0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.toString();
      assertEquals("BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BulkPaymentDeleteQuery.BulkPaymentDeleteQueryBuilder bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0 = BulkPaymentDeleteQuery.builder();
      BulkPaymentDeleteQuery bulkPaymentDeleteQuery0 = bulkPaymentDeleteQuery_BulkPaymentDeleteQueryBuilder0.build();
      String string0 = bulkPaymentDeleteQuery0.toString();
      assertEquals("BulkPaymentDeleteQuery(accessToken=null, accountId=null, bulkPaymentId=null, additionalHeaders={})", string0);
  }
}
