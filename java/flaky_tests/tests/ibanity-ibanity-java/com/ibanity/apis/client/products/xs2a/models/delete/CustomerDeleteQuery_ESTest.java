/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:14:45 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models.delete;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.delete.CustomerDeleteQuery;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CustomerDeleteQuery_ESTest extends CustomerDeleteQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.customerAccessToken("4gN-Q3VzjVC2P}");
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder1.build();
      String string0 = customerDeleteQuery0.getCustomerAccessToken();
      assertEquals("4gN-Q3VzjVC2P}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("", hashMap0);
      String string0 = customerDeleteQuery0.getCustomerAccessToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      Map<String, String> map0 = customerDeleteQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("", hashMap0);
      Map<String, String> map0 = customerDeleteQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      customerDeleteQuery_CustomerDeleteQueryBuilder0.additionalHeaders(hashMap0);
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      hashMap0.put((String) null, "=T4`Gxt?*;3Zs]D");
      Map<String, String> map0 = customerDeleteQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("", (Map<String, String>) null);
      boolean boolean0 = customerDeleteQuery0.canEqual(customerDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("", hashMap0);
      Object object0 = new Object();
      boolean boolean0 = customerDeleteQuery0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      String string0 = customerDeleteQuery0.getCustomerAccessToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("com.ibanity.apis.client.products.xs2a.models.delete.CustomerDeleteQuery", "4gN-Q3VzjVC2P}");
      CustomerDeleteQuery customerDeleteQuery1 = new CustomerDeleteQuery((String) null, hashMap0);
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      customerDeleteQuery_CustomerDeleteQueryBuilder0.additionalHeaders((Map<String, String>) null);
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertFalse(boolean0);
      assertFalse(customerDeleteQuery1.equals((Object)customerDeleteQuery0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("", hashMap0);
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = new CustomerDeleteQuery.CustomerDeleteQueryBuilder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      customerDeleteQuery_CustomerDeleteQueryBuilder0.customerAccessToken("!vzVzb|t!g");
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertFalse(customerDeleteQuery1.equals((Object)customerDeleteQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      boolean boolean0 = customerDeleteQuery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      customerDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      customerDeleteQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery("?ruhiK*eB%#*mX97", hashMap0);
      boolean boolean0 = hashMap0.remove((Object) customerDeleteQuery0, (Object) "?ruhiK*eB%#*mX97");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CustomerDeleteQuery customerDeleteQuery0 = new CustomerDeleteQuery((String) null, (Map<String, String>) null);
      String string0 = customerDeleteQuery0.toString();
      assertEquals("CustomerDeleteQuery(customerAccessToken=null, additionalHeaders=null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery1.equals(customerDeleteQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = new CustomerDeleteQuery.CustomerDeleteQueryBuilder();
      customerDeleteQuery_CustomerDeleteQueryBuilder0.customerAccessToken("IQ");
      CustomerDeleteQuery customerDeleteQuery0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      CustomerDeleteQuery customerDeleteQuery1 = customerDeleteQuery_CustomerDeleteQueryBuilder0.build();
      boolean boolean0 = customerDeleteQuery0.equals(customerDeleteQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CustomerDeleteQuery.CustomerDeleteQueryBuilder customerDeleteQuery_CustomerDeleteQueryBuilder0 = CustomerDeleteQuery.builder();
      String string0 = customerDeleteQuery_CustomerDeleteQueryBuilder0.toString();
      assertEquals("CustomerDeleteQuery.CustomerDeleteQueryBuilder(customerAccessToken=null, additionalHeaders$value=null)", string0);
  }
}
