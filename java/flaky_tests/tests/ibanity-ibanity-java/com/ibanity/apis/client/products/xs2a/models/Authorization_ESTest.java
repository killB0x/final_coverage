/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 10:11:26 GMT 2022
 */

package com.ibanity.apis.client.products.xs2a.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.xs2a.models.Authorization;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Authorization_ESTest extends Authorization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      authorization0.setStatus("l>9oEyX8=ya'gN)0");
      authorization0.getStatus();
      assertEquals("l>9oEyX8=ya'gN)0", authorization0.getStatus());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      authorization_AuthorizationBuilder0.selfLink("(U");
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      String string0 = authorization0.getSelfLink();
      assertEquals("(U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.selfLink("");
      Authorization authorization0 = authorization_AuthorizationBuilder1.build();
      String string0 = authorization0.getSelfLink();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      authorization0.setRequestId("Y`Q3n2X/Ve$Km=YE");
      String string0 = authorization0.getRequestId();
      assertEquals("Y`Q3n2X/Ve$Km=YE", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.requestId("");
      Authorization authorization0 = authorization_AuthorizationBuilder1.build();
      String string0 = authorization0.getRequestId();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom((-4313));
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      UUID uUID0 = MockUUID.fromString(",zqG^{cWO;as%*");
      authorization0.setId(uUID0);
      UUID uUID1 = authorization0.getId();
      assertEquals((-2805742564193320960L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      UUID uUID0 = MockUUID.fromString(".wR7s$+0-KK");
      authorization0.setId(uUID0);
      UUID uUID1 = authorization0.getId();
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      boolean boolean0 = authorization0.canEqual(authorization0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = Authorization.builder();
      boolean boolean0 = authorization0.canEqual(authorization_AuthorizationBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      UUID uUID0 = authorization0.getId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      String string0 = authorization0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      String string0 = authorization0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      String string0 = authorization0.getStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      authorization0.setStatus("authorization");
      assertFalse(authorization0.equals((Object)authorization1));
      
      authorization1.setStatus("authorization");
      boolean boolean0 = authorization0.equals(authorization1);
      assertTrue(authorization0.equals((Object)authorization1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.status("");
      Authorization authorization1 = authorization_AuthorizationBuilder1.build();
      boolean boolean0 = authorization0.equals(authorization1);
      assertEquals("", authorization1.getStatus());
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      assertTrue(authorization1.equals((Object)authorization0));
      
      authorization0.setStatus("authorization");
      boolean boolean0 = authorization0.equals(authorization1);
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      authorization0.setRequestId("{authorizationId}");
      assertFalse(authorization0.equals((Object)authorization1));
      
      authorization1.setRequestId("{authorizationId}");
      boolean boolean0 = authorization0.equals(authorization1);
      assertTrue(authorization1.equals((Object)authorization0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      assertTrue(authorization1.equals((Object)authorization0));
      
      authorization1.setRequestId("{authorizationId}");
      boolean boolean0 = authorization0.equals(authorization1);
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      assertTrue(authorization1.equals((Object)authorization0));
      
      authorization1.setRequestId("{authorizationId}");
      boolean boolean0 = authorization1.equals(authorization0);
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      assertTrue(authorization1.equals((Object)authorization0));
      
      authorization1.setSelfLink("{authorizationId}");
      boolean boolean0 = authorization1.equals(authorization0);
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      assertTrue(authorization1.equals((Object)authorization0));
      
      authorization1.setSelfLink("authorization");
      boolean boolean0 = authorization0.equals(authorization1);
      assertFalse(authorization1.equals((Object)authorization0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.selfLink("wxI#3)");
      Authorization authorization0 = authorization_AuthorizationBuilder1.build();
      Authorization authorization1 = authorization_AuthorizationBuilder0.build();
      boolean boolean0 = authorization0.equals(authorization1);
      assertEquals("wxI#3)", authorization1.getSelfLink());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      Authorization authorization1 = new Authorization();
      UUID uUID0 = MockUUID.randomUUID();
      authorization0.setId(uUID0);
      assertFalse(authorization0.equals((Object)authorization1));
      
      authorization1.setId(uUID0);
      boolean boolean0 = authorization0.equals(authorization1);
      assertTrue(authorization0.equals((Object)authorization1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      UUID uUID0 = MockUUID.randomUUID();
      authorization0.setId(uUID0);
      Authorization authorization1 = new Authorization();
      boolean boolean0 = authorization1.equals(authorization0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      Object object0 = new Object();
      boolean boolean0 = authorization0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      boolean boolean0 = authorization0.equals(authorization0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      authorization0.setStatus("{authorizationId}");
      authorization0.hashCode();
      assertEquals("{authorizationId}", authorization0.getStatus());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      authorization0.setRequestId("Y`Q3n2X/Ve$Km=YE");
      authorization0.hashCode();
      assertEquals("Y`Q3n2X/Ve$Km=YE", authorization0.getRequestId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      authorization0.setSelfLink("WF7_");
      authorization0.hashCode();
      assertEquals("WF7_", authorization0.getSelfLink());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Authorization authorization0 = new Authorization();
      UUID uUID0 = MockUUID.fromString("{authorizationId}");
      authorization0.setId(uUID0);
      authorization0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.status("");
      Authorization authorization0 = authorization_AuthorizationBuilder1.build();
      String string0 = authorization0.getStatus();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      UUID uUID0 = MockUUID.randomUUID();
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder1 = authorization_AuthorizationBuilder0.id(uUID0);
      assertSame(authorization_AuthorizationBuilder0, authorization_AuthorizationBuilder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      String string0 = authorization_AuthorizationBuilder0.toString();
      assertEquals("Authorization.AuthorizationBuilder(id=null, selfLink=null, requestId=null, status=null)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      UUID uUID0 = MockUUID.fromString(",zqG^{cWO;as%*");
      authorization0.setId(uUID0);
      Authorization authorization1 = authorization_AuthorizationBuilder0.build();
      boolean boolean0 = authorization0.equals(authorization1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Authorization.AuthorizationBuilder authorization_AuthorizationBuilder0 = new Authorization.AuthorizationBuilder();
      Authorization authorization0 = authorization_AuthorizationBuilder0.build();
      String string0 = authorization0.toString();
      assertEquals("Authorization(id=null, selfLink=null, requestId=null, status=null)", string0);
  }
}
