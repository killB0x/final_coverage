/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:57:00 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibanity.apis.client.products.ponto_connect.models.Filter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter("", "oo}@4{FLIl", "O,tTTb)C(X*|1llKjF", ")");
      filter0.hashCode();
      assertEquals("", filter0.getField());
      assertEquals("O,tTTb)C(X*|1llKjF", filter0.getEq());
      assertEquals("oo}@4{FLIl", filter0.getContains());
      assertEquals(")", filter0.getIn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      Filter filter1 = new Filter("", "", "", "AqVhMoN4");
      boolean boolean0 = filter1.equals(filter0);
      assertEquals("", filter1.getField());
      assertFalse(boolean0);
      assertFalse(filter0.equals((Object)filter1));
      assertEquals("", filter1.getEq());
      assertEquals("", filter1.getContains());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.eq("");
      filter_FilterBuilder1.field("$]1Y_>ypN");
      Filter filter0 = filter_FilterBuilder0.build();
      Filter filter1 = filter_FilterBuilder1.build();
      boolean boolean0 = filter0.equals(filter1);
      assertTrue(boolean0);
      assertEquals("$]1Y_>ypN", filter1.getField());
      assertEquals("", filter1.getEq());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.contains("field is marked non-null but is null");
      filter_FilterBuilder1.field("$]1Y_>ypN");
      Filter filter0 = filter_FilterBuilder0.build();
      Filter filter1 = filter_FilterBuilder1.build();
      boolean boolean0 = filter0.equals(filter1);
      assertTrue(boolean0);
      assertEquals("$]1Y_>ypN", filter1.getField());
      assertEquals("field is marked non-null but is null", filter1.getContains());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = new Filter.FilterBuilder();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter("e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3");
      String string0 = filter0.getIn();
      assertEquals("e1)`<F$wXcn}2!y<3", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      String string0 = filter0.getIn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field("");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getField();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.field("6f");
      Filter filter0 = filter_FilterBuilder1.build();
      String string0 = filter0.getEq();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", ">qJt+-rG");
      String string0 = filter0.getEq();
      assertEquals("", string0);
      assertEquals("", filter0.getField());
      assertEquals(">qJt+-rG", filter0.getIn());
      assertEquals("", filter0.getContains());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter("p)w", "x3S}ZOv._z,uiV?wu", "p)w", "x3S}ZOv._z,uiV?wu");
      String string0 = filter0.getContains();
      assertEquals("p)w", filter0.getEq());
      assertEquals("p)w", filter0.getField());
      assertEquals("x3S}ZOv._z,uiV?wu", string0);
      assertEquals("x3S}ZOv._z,uiV?wu", filter0.getIn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.contains("");
      filter_FilterBuilder0.field(".ey(8}'s4_r[");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getContains();
      assertNotNull(string0);
      assertEquals(".ey(8}'s4_r[", filter0.getField());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      boolean boolean0 = filter0.canEqual(filter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter("e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3");
      boolean boolean0 = filter0.canEqual("e1)`<F$wXcn}2!y<3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = null;
      try {
        filter0 = new Filter((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is marked non-null but is null
         //
         verifyException("com.ibanity.apis.client.products.ponto_connect.models.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter("e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3", "e1)`<F$wXcn}2!y<3");
      String string0 = filter0.getEq();
      assertEquals("e1)`<F$wXcn}2!y<3", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field(".ey(8}'s4_r[");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getContains();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field(".ey(8}'s4_r[");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getField();
      assertEquals(".ey(8}'s4_r[", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field(".ey(8}'s4_r[");
      Filter filter0 = filter_FilterBuilder0.build();
      String string0 = filter0.getIn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      Filter filter1 = new Filter("", "", "", "");
      boolean boolean0 = filter0.equals(filter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      Filter filter1 = new Filter("", "", "", ",%2H@r1");
      boolean boolean0 = filter0.equals(filter1);
      assertEquals("", filter1.getEq());
      assertFalse(boolean0);
      assertEquals("", filter1.getField());
      assertFalse(filter1.equals((Object)filter0));
      assertEquals("", filter1.getContains());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      Filter filter1 = new Filter("", "", "<-A,<c!]>qSKnpgJ)", "<-A,<c!]>qSKnpgJ)");
      boolean boolean0 = filter0.equals(filter1);
      assertEquals("", filter1.getField());
      assertEquals("<-A,<c!]>qSKnpgJ)", filter1.getEq());
      assertFalse(boolean0);
      assertEquals("", filter1.getContains());
      assertEquals("<-A,<c!]>qSKnpgJ)", filter1.getIn());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter("4\"|YK-b", "4\"|YK-b", (String) null, (String) null);
      Filter filter1 = new Filter("4\"|YK-b", "4\"|YK-b", "4\"|YK-b", "4\"|YK-b");
      boolean boolean0 = filter0.equals(filter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter("L", "L", "L", "L");
      Filter filter1 = new Filter("L", (String) null, "L", "L");
      boolean boolean0 = filter1.equals(filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter("%xuO{R&cEK0", "%xuO{R&cEK0", "%xuO{R&cEK0", "%xuO{R&cEK0");
      boolean boolean0 = filter0.equals(filter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.eq("");
      filter_FilterBuilder1.field("$]1Y_>ypN");
      Filter filter0 = filter_FilterBuilder0.build();
      filter0.hashCode();
      assertEquals("", filter0.getEq());
      assertEquals("$]1Y_>ypN", filter0.getField());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter("B?_0l;0;pT(uI", (String) null, (String) null, (String) null);
      filter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      // Undeclared exception!
      try { 
        filter_FilterBuilder0.field((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // field is marked non-null but is null
         //
         verifyException("com.ibanity.apis.client.products.ponto_connect.models.Filter$FilterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      filter_FilterBuilder0.field("");
      Filter filter0 = filter_FilterBuilder0.build();
      boolean boolean0 = filter0.equals(filter_FilterBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      Filter.FilterBuilder filter_FilterBuilder1 = filter_FilterBuilder0.in("");
      assertSame(filter_FilterBuilder1, filter_FilterBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter.FilterBuilder filter_FilterBuilder0 = Filter.builder();
      String string0 = filter_FilterBuilder0.toString();
      assertEquals("Filter.FilterBuilder(field=null, contains=null, eq=null, in=null)", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter("", "", "", "");
      String string0 = filter0.toString();
      assertEquals("Filter(field=, contains=, eq=, in=)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter("i4>:bO:Y", "i4>:bO:Y", "i4>:bO:Y", "i4>:bO:Y");
      Filter filter1 = new Filter("i4>:bO:Y", "i4>:bO:Y", "i4>:bO:Y", (String) null);
      boolean boolean0 = filter1.equals(filter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter("EO2r$_.s%8h:\u0007", "EO2r$_.s%8h:\u0007", "EO2r$_.s%8h:\u0007", "EO2r$_.s%8h:\u0007");
      Filter filter1 = new Filter("EO2r$_.s%8h:\u0007", "Xa{W$vjQ3+8L$L", "Xa{W$vjQ3+8L$L", "Xa{W$vjQ3+8L$L");
      boolean boolean0 = filter0.equals(filter1);
      assertEquals("EO2r$_.s%8h:\u0007", filter1.getField());
      assertEquals("Xa{W$vjQ3+8L$L", filter1.getEq());
      assertFalse(boolean0);
      assertEquals("Xa{W$vjQ3+8L$L", filter1.getContains());
      assertEquals("Xa{W$vjQ3+8L$L", filter1.getIn());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter("/}k~'LEu0m=iD&ACS", "/}k~'LEu0m=iD&ACS", "/}k~'LEu0m=iD&ACS", "/}k~'LEu0m=iD&ACS");
      Filter filter1 = new Filter("", "", "/}k~'LEu0m=iD&ACS", "");
      boolean boolean0 = filter0.equals(filter1);
      assertFalse(boolean0);
      assertEquals("", filter1.getField());
      assertEquals("", filter1.getIn());
      assertEquals("/}k~'LEu0m=iD&ACS", filter1.getEq());
      assertEquals("", filter1.getContains());
  }
}
