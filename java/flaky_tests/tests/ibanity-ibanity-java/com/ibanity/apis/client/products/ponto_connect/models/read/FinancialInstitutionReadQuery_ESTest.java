/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 11:20:02 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ibanity.apis.client.products.ponto_connect.models.read.FinancialInstitutionReadQuery;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinancialInstitutionReadQuery_ESTest extends FinancialInstitutionReadQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      UUID uUID0 = financialInstitutionReadQuery0.getFinancialInstitutionId();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      Random.setNextRandom((-2264));
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      Map<String, String> map0 = financialInstitutionReadQuery0.getAdditionalHeaders();
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery(uUID0, map0);
      UUID uUID1 = financialInstitutionReadQuery1.getFinancialInstitutionId();
      assertEquals((-2880051958062235648L), uUID1.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      Map<String, String> map0 = financialInstitutionReadQuery0.getAdditionalHeaders();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, hashMap0);
      Map<String, String> map0 = financialInstitutionReadQuery0.getAdditionalHeaders();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("", "}O$aQI@=IuA*R?Q@!", biFunction0);
      Map<String, String> map0 = financialInstitutionReadQuery0.getAdditionalHeaders();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, hashMap0);
      boolean boolean0 = financialInstitutionReadQuery0.canEqual(financialInstitutionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, hashMap0);
      boolean boolean0 = financialInstitutionReadQuery0.canEqual(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, hashMap0);
      UUID uUID1 = financialInstitutionReadQuery0.getFinancialInstitutionId();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = new FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1 = FinancialInstitutionReadQuery.builder();
      financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1.additionalHeaders(hashMap0);
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      hashMap0.put("", "");
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      Map<String, String> map0 = financialInstitutionReadQuery0.getAdditionalHeaders();
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery(uUID0, map0);
      FinancialInstitutionReadQuery financialInstitutionReadQuery2 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      boolean boolean0 = financialInstitutionReadQuery2.equals(financialInstitutionReadQuery1);
      assertFalse(boolean0);
      assertFalse(financialInstitutionReadQuery1.equals((Object)financialInstitutionReadQuery0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = new FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      financialInstitutionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = new FinancialInstitutionReadQuery(uUID0, (Map<String, String>) null);
      financialInstitutionReadQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.financialInstitutionId(uUID0);
      assertSame(financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0, financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      String string0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.toString();
      assertEquals("FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder(financialInstitutionId=null, additionalHeaders$value=null)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      String string0 = financialInstitutionReadQuery0.toString();
      assertEquals("FinancialInstitutionReadQuery(financialInstitutionId=null, additionalHeaders={})", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FinancialInstitutionReadQuery.FinancialInstitutionReadQueryBuilder financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0 = FinancialInstitutionReadQuery.builder();
      FinancialInstitutionReadQuery financialInstitutionReadQuery0 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      FinancialInstitutionReadQuery financialInstitutionReadQuery1 = financialInstitutionReadQuery_FinancialInstitutionReadQueryBuilder0.build();
      boolean boolean0 = financialInstitutionReadQuery0.equals(financialInstitutionReadQuery1);
      assertTrue(boolean0);
  }
}
