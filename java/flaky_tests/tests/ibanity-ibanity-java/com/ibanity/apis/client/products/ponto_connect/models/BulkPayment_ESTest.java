/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 09:15:24 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.BulkPayment;
import java.time.LocalDate;
import java.time.chrono.MinguoDate;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BulkPayment_ESTest extends BulkPayment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      bulkPayment_BulkPaymentBuilder0.batchBookingPreferred(true);
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      boolean boolean0 = bulkPayment0.isBatchBookingPreferred();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      bulkPayment0.setStatus("L3uU}TP");
      bulkPayment0.getStatus();
      assertEquals("L3uU}TP", bulkPayment0.getStatus());
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      bulkPayment0.setStatus("");
      bulkPayment0.getStatus();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
      assertEquals("", bulkPayment0.getStatus());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setSelfLink("BulkPayment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)");
      String string0 = bulkPayment0.getSelfLink();
      assertEquals("BulkPayment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.selfLink("");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder1.build();
      String string0 = bulkPayment0.getSelfLink();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      LocalDate localDate0 = MockLocalDate.now();
      bulkPayment0.setRequestedExecutionDate(localDate0);
      LocalDate localDate1 = bulkPayment0.getRequestedExecutionDate();
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setRequestId("BulkPayment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)");
      String string0 = bulkPayment0.getRequestId();
      assertEquals("BulkPayment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      bulkPayment_BulkPaymentBuilder0.requestId("");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      String string0 = bulkPayment0.getRequestId();
      assertEquals("", string0);
      assertFalse(bulkPayment0.isBatchBookingPreferred());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.reference("K");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder1.build();
      String string0 = bulkPayment0.getReference();
      assertEquals("K", string0);
      assertNotNull(string0);
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      bulkPayment_BulkPaymentBuilder0.reference("");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      String string0 = bulkPayment0.getReference();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setRedirectLink("@^@+q");
      String string0 = bulkPayment0.getRedirectLink();
      assertEquals("@^@+q", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      bulkPayment_BulkPaymentBuilder0.redirectLink("");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      String string0 = bulkPayment0.getRedirectLink();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Random.setNextRandom((-1509));
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPayment0.setId(uUID0);
      bulkPayment0.getId();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPayment0.setId(uUID0);
      bulkPayment0.getId();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      boolean boolean0 = bulkPayment0.canEqual(bulkPayment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      Object object0 = new Object();
      boolean boolean0 = bulkPayment0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      String string0 = bulkPayment0.getReference();
      assertNull(string0);
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      String string0 = bulkPayment0.getRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      boolean boolean0 = bulkPayment0.isBatchBookingPreferred();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      String string0 = bulkPayment0.getRedirectLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      String string0 = bulkPayment0.getStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      bulkPayment0.getId();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      String string0 = bulkPayment0.getSelfLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      LocalDate localDate0 = bulkPayment0.getRequestedExecutionDate();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      bulkPayment1.setRedirectLink("bulkPayment");
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment0.setRedirectLink("bulkPayment");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment0.setRedirectLink("bulkPayment");
      boolean boolean0 = bulkPayment1.equals(bulkPayment0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment0.setRedirectLink("bulkPayment");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setReference(";/ehh8:3@@WH-HiW-b&");
      BulkPayment bulkPayment1 = new BulkPayment();
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setReference(";/ehh8:3@@WH-HiW-b&");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setSelfLink("{bulkPaymentId}");
      BulkPayment bulkPayment1 = new BulkPayment();
      bulkPayment1.setSelfLink("{bulkPaymentId}");
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setReference("{bulkPaymentId}");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      MinguoDate minguoDate0 = MockMinguoDate.now();
      LocalDate localDate0 = MockLocalDate.from(minguoDate0);
      bulkPayment0.setRequestedExecutionDate(localDate0);
      assertFalse(bulkPayment0.equals((Object)bulkPayment1));
      
      bulkPayment1.setRequestedExecutionDate(localDate0);
      boolean boolean0 = bulkPayment1.equals(bulkPayment0);
      assertTrue(bulkPayment0.equals((Object)bulkPayment1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      LocalDate localDate0 = MockLocalDate.now();
      bulkPayment1.setRequestedExecutionDate(localDate0);
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      LocalDate localDate0 = MockLocalDate.now();
      bulkPayment0.setRequestedExecutionDate(localDate0);
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      bulkPayment0.setStatus("{bulkPaymentId}");
      assertFalse(bulkPayment0.equals((Object)bulkPayment1));
      
      bulkPayment1.setStatus("{bulkPaymentId}");
      boolean boolean0 = bulkPayment1.equals(bulkPayment0);
      assertTrue(bulkPayment0.equals((Object)bulkPayment1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setStatus("bulkPayment");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setStatus("{bulkPaymentId}");
      boolean boolean0 = bulkPayment1.equals(bulkPayment0);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setRequestId("bulkPayment");
      BulkPayment bulkPayment1 = new BulkPayment();
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setRequestId("bulkPayment");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setRequestId("bulkPayment");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment1.setSelfLink("{bulkPaymentId}");
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPayment1.setId(uUID0);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      
      bulkPayment0.setId(uUID0);
      boolean boolean0 = bulkPayment1.equals(bulkPayment0);
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      BulkPayment bulkPayment1 = new BulkPayment();
      assertTrue(bulkPayment1.equals((Object)bulkPayment0));
      
      UUID uUID0 = MockUUID.randomUUID();
      bulkPayment1.setId(uUID0);
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(bulkPayment1.equals((Object)bulkPayment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      UUID uUID0 = MockUUID.randomUUID();
      boolean boolean0 = bulkPayment0.equals(uUID0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setRedirectLink("@^@+q");
      bulkPayment0.hashCode();
      assertEquals("@^@+q", bulkPayment0.getRedirectLink());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setReference("$d");
      bulkPayment0.hashCode();
      assertEquals("$d", bulkPayment0.getReference());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.requestId("Id");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder1.build();
      bulkPayment0.hashCode();
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      bulkPayment_BulkPaymentBuilder0.selfLink("");
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      bulkPayment0.hashCode();
      assertEquals("", bulkPayment0.getSelfLink());
      assertFalse(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      UUID uUID0 = MockUUID.randomUUID();
      bulkPayment0.setId(uUID0);
      bulkPayment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      String string0 = bulkPayment_BulkPaymentBuilder0.toString();
      assertEquals("BulkPayment.BulkPaymentBuilder(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      bulkPayment_BulkPaymentBuilder0.batchBookingPreferred(true);
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      bulkPayment0.hashCode();
      assertTrue(bulkPayment0.isBatchBookingPreferred());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = new BulkPayment.BulkPaymentBuilder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.id(uUID0);
      assertSame(bulkPayment_BulkPaymentBuilder0, bulkPayment_BulkPaymentBuilder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.requestedExecutionDate((LocalDate) null);
      assertSame(bulkPayment_BulkPaymentBuilder1, bulkPayment_BulkPaymentBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder1 = bulkPayment_BulkPaymentBuilder0.status(", reference=");
      assertSame(bulkPayment_BulkPaymentBuilder0, bulkPayment_BulkPaymentBuilder1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setStatus("@^@+q");
      bulkPayment0.hashCode();
      assertEquals("@^@+q", bulkPayment0.getStatus());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      UUID uUID0 = MockUUID.fromString("{bulkPaymentId}");
      bulkPayment0.setId(uUID0);
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setSelfLink("{bulkPaymentId}");
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertEquals("{bulkPaymentId}", bulkPayment0.getSelfLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      LocalDate localDate0 = MockLocalDate.now();
      bulkPayment0.setRequestedExecutionDate(localDate0);
      bulkPayment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setBatchBookingPreferred(true);
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertTrue(bulkPayment0.isBatchBookingPreferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BulkPayment.BulkPaymentBuilder bulkPayment_BulkPaymentBuilder0 = BulkPayment.builder();
      BulkPayment bulkPayment0 = bulkPayment_BulkPaymentBuilder0.build();
      String string0 = bulkPayment0.toString();
      assertEquals("BulkPayment(id=null, selfLink=null, requestId=null, status=null, requestedExecutionDate=null, reference=null, batchBookingPreferred=false, redirectLink=null)", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setReference(";/ehh8:3@@WH-HiW-b&");
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertFalse(boolean0);
      assertEquals(";/ehh8:3@@WH-HiW-b&", bulkPayment0.getReference());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BulkPayment bulkPayment0 = new BulkPayment();
      bulkPayment0.setRequestId("bulkPayment");
      BulkPayment bulkPayment1 = new BulkPayment();
      boolean boolean0 = bulkPayment0.equals(bulkPayment1);
      assertEquals("bulkPayment", bulkPayment0.getRequestId());
      assertFalse(boolean0);
  }
}
