/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 08:30:15 GMT 2022
 */

package com.ibanity.apis.client.products.ponto_connect.models.create;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibanity.apis.client.products.ponto_connect.models.create.PaymentCreateQuery;
import java.math.BigDecimal;
import java.math.MathContext;
import java.time.Clock;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentCreateQuery_ESTest extends PaymentCreateQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNotNull(paymentCreateQuery0);
      
      LocalDate localDate0 = paymentCreateQuery0.getRequestedExecutionDate();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformationType();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformationType("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformationType();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformation();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(26L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformation();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.redirectUri("EM3HA");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertEquals("EM3HA", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRedirectUri();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertEquals("EM3HA", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertEquals("EM3HA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1124L));
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, ", additionalHeaders$value=", "", "", bigDecimal0, ", creditorAgentType=", "J.F", "", (String) null, "", "");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(", creditorAgentType=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals(", additionalHeaders$value=", paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRedirectUri();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(", creditorAgentType=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals(", additionalHeaders$value=", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.currency("+)[L/ELi*");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("+)[L/ELi*", paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCurrency();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("+)[L/ELi*", paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertEquals("+)[L/ELi*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.currency("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCurrency();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1124L));
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, "", "", "", bigDecimal0, ", requestedExecutionDate=", "", "", "", "J.F", "");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals(", requestedExecutionDate=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorName();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals(", requestedExecutionDate=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals(", requestedExecutionDate=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString((String) null);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery((String) null, uUID0, (Map<String, String>) null, (LocalDate) null, "(9w@vS", "", (String) null, bigDecimal0, "", "", "1k", "1k", "", "");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(paymentCreateQuery0.getCurrency());
      assertEquals("1k", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("(9w@vS", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("1k", paymentCreateQuery0.getCreditorAgent());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorName();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(paymentCreateQuery0.getCurrency());
      assertEquals("1k", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("(9w@vS", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("1k", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgentType(", amount=");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgentType();
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertEquals(", amount=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgentType("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgentType();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgent();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("hog\"H;CD^[ywf\"Va$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1124L));
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, "", "", "", bigDecimal0, ", requestedExecutionDate=", "", "", "", "J.F", "");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(", requestedExecutionDate=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgent();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("J.F", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(", requestedExecutionDate=", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReferenceType();
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReferenceType();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("hog\"H;CD^[ywf\"Va$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReference(";_");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertEquals(";_", paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReference();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertEquals(";_", paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertEquals(";_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReference();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_e]w6N+79");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2833L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, hashMap0, localDate0, "", "", "", bigDecimal0, "", "", "sR<", "", "\"", "\"");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("sR<", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("\"", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("\"", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertNotNull(paymentCreateQuery0);
      
      BigDecimal bigDecimal1 = paymentCreateQuery0.getAmount();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("sR<", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("\"", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("\"", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1933L));
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, "", "", "", bigDecimal0, (String) null, "[goCzBAH<`ZHXz(", "", "C`tBP)S", "", ",WsWyevaR^gL");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertEquals("[goCzBAH<`ZHXz(", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(",WsWyevaR^gL", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("C`tBP)S", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNotNull(paymentCreateQuery0);
      
      BigDecimal bigDecimal1 = paymentCreateQuery0.getAmount();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertEquals("[goCzBAH<`ZHXz(", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals(",WsWyevaR^gL", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals("C`tBP)S", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString("BVH~z\"Y/$_707\"Vo{");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      Map<String, String> map0 = paymentCreateQuery0.getAdditionalHeaders();
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery1 = new PaymentCreateQuery("BVH~z\"Y/$_707\"Vo{", uUID0, map0, (LocalDate) null, "BVH~z\"Y/$_707\"Vo{", "BVH~z\"Y/$_707\"Vo{", (String) null, bigDecimal0, (String) null, (String) null, (String) null, "l#E)", (String) null, (String) null);
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNull(paymentCreateQuery1.getCurrency());
      assertEquals("l#E)", paymentCreateQuery1.getCreditorAccountReferenceType());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getAccessToken());
      assertNotNull(paymentCreateQuery1);
      
      BigDecimal bigDecimal1 = paymentCreateQuery1.getAmount();
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNull(paymentCreateQuery1.getCurrency());
      assertEquals("l#E)", paymentCreateQuery1.getCreditorAccountReferenceType());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertEquals("BVH~z\"Y/$_707\"Vo{", paymentCreateQuery1.getAccessToken());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery0);
      
      Map<String, String> map0 = paymentCreateQuery0.getAdditionalHeaders();
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery((String) null, uUID0, hashMap0, localDate0, ")1v9^i", "", ")1v9^i", bigDecimal0, ", remittanceInformation=", "", (String) null, "m}c}BL{k]ph+KU@N", "", "m}c}BL{k]ph+KU@N");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("m}c}BL{k]ph+KU@N", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("m}c}BL{k]ph+KU@N", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals(", remittanceInformation=", paymentCreateQuery0.getCreditorName());
      assertEquals(")1v9^i", paymentCreateQuery0.getCurrency());
      assertEquals(")1v9^i", paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNotNull(paymentCreateQuery0);
      
      Map<String, String> map0 = paymentCreateQuery0.getAdditionalHeaders();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("m}c}BL{k]ph+KU@N", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("m}c}BL{k]ph+KU@N", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals(", remittanceInformation=", paymentCreateQuery0.getCreditorName());
      assertEquals(")1v9^i", paymentCreateQuery0.getCurrency());
      assertEquals(")1v9^i", paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.additionalHeaders(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      String string0 = hashMap0.put("~J", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery0);
      
      Map<String, String> map0 = paymentCreateQuery0.getAdditionalHeaders();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom(2470);
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      UUID uUID0 = MockUUID.fromString(":2uu%l{i=m$'L\"=Vct");
      assertEquals((-6482650185820717056L), uUID0.getMostSignificantBits());
      assertEquals("a6090000-a709-4000-a809-0000a9090000", uUID0.toString());
      assertEquals((-6338534997711323136L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.accountId(uUID0);
      assertEquals((-6482650185820717056L), uUID0.getMostSignificantBits());
      assertEquals("a6090000-a709-4000-a809-0000a9090000", uUID0.toString());
      assertEquals((-6338534997711323136L), uUID0.getLeastSignificantBits());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      UUID uUID1 = paymentCreateQuery0.getAccountId();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertEquals((-6338534997711323136L), uUID1.getLeastSignificantBits());
      assertEquals("a6090000-a709-4000-a809-0000a9090000", uUID1.toString());
      assertEquals((-6482650185820717056L), uUID1.getMostSignificantBits());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(uUID1, uUID0);
      assertNotNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_e]w6N79");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2831L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("_e]w6N79", uUID0, hashMap0, localDate0, "", "_e]w6N79", "_e]w6N79", bigDecimal0, "", "_e]w6N79", "", "y", ", creditorAccountReferenceType=", "y");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("_e]w6N79", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("y", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("_e]w6N79", paymentCreateQuery0.getAccessToken());
      assertEquals("y", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("_e]w6N79", paymentCreateQuery0.getRemittanceInformation());
      assertEquals(", creditorAccountReferenceType=", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("_e]w6N79", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertNotNull(paymentCreateQuery0);
      
      UUID uUID1 = paymentCreateQuery0.getAccountId();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("_e]w6N79", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("y", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("_e]w6N79", paymentCreateQuery0.getAccessToken());
      assertEquals("y", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("_e]w6N79", paymentCreateQuery0.getRemittanceInformation());
      assertEquals(", creditorAccountReferenceType=", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("_e]w6N79", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getCreditorAgent());
      assertEquals(16793600L, uUID1.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID1.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID1.toString());
      assertSame(uUID0, uUID1);
      assertSame(uUID1, uUID0);
      assertNotNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getAccessToken();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("dLn,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UUID uUID0 = MockUUID.randomUUID();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertNotNull(uUID0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      MathContext mathContext0 = MathContext.DECIMAL64;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(1.0, mathContext0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, (Map<String, String>) null, localDate0, "", "", "", bigDecimal0, "", "", (String) null, ", remittanceInformationType=", (String) null, "");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals(", remittanceInformationType=", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getAccessToken();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals(", remittanceInformationType=", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      boolean boolean0 = paymentCreateQuery0.canEqual(paymentCreateQuery0);
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNotNull(paymentCreateQuery0);
      
      boolean boolean0 = paymentCreateQuery0.canEqual((Object) null);
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformationType();
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertEquals("dLn,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgentType();
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorName();
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAgent();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCurrency();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNotNull(paymentCreateQuery0);
      
      BigDecimal bigDecimal0 = paymentCreateQuery0.getAmount();
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getAccessToken();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNotNull(paymentCreateQuery0);
      
      UUID uUID0 = paymentCreateQuery0.getAccountId();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRedirectUri();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1124L));
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, "", "", "", bigDecimal0, "", "", ", amount=", "", "", "");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getRemittanceInformation();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("dLn,", uUID0, hashMap0, localDate0, "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", bigDecimal0, "hog\"H;CD^[ywf\"Va$", "dLn,", "hog\"H;CD^[ywf\"Va$", "hog\"H;CD^[ywf\"Va$", "", "dLn,");
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      LocalDate localDate1 = paymentCreateQuery0.getRequestedExecutionDate();
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("dLn,", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorName());
      assertEquals("dLn,", paymentCreateQuery0.getAccessToken());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCreditorAgent());
      assertEquals("hog\"H;CD^[ywf\"Va$", paymentCreateQuery0.getCurrency());
      assertEquals("dLn,", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("dLn,", paymentCreateQuery0.getRedirectUri());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
      assertNotNull(localDate1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReference();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_e]w6N79");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2833L);
      assertNotNull(localDate0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, hashMap0, localDate0, "", "", "", bigDecimal0, "", "", "sR<", "", "\"", "\"");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("sR<", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("\"", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("\"", paymentCreateQuery0.getRedirectUri());
      assertNotNull(paymentCreateQuery0);
      
      String string0 = paymentCreateQuery0.getCreditorAccountReferenceType();
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals("sR<", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("\"", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("\"", paymentCreateQuery0.getRedirectUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.redirectUri("Z8&L4yv");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertEquals("Z8&L4yv", paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertEquals("Z8&L4yv", paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.redirectUri("3|Bg!x ");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertEquals("3|Bg!x ", paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCurrency());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertEquals("3|Bg!x ", paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCurrency());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.redirectUri("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertTrue(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertEquals("", paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertTrue(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertEquals("", paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReference("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReference("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReference("");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertTrue(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertTrue(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getCurrency());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertEquals("", paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder0);
      
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNotNull(paymentCreateQuery0);
      
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReferenceType("/`{bHqs!\"x");
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder1, paymentCreateQuery_PaymentCreateQueryBuilder0);
      assertNotNull(paymentCreateQuery_PaymentCreateQueryBuilder1);
      
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertEquals("/`{bHqs!\"x", paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertNotNull(paymentCreateQuery1);
      
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertNull(paymentCreateQuery0.getCreditorAgent());
      assertNull(paymentCreateQuery0.getRemittanceInformation());
      assertNull(paymentCreateQuery0.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery0.getAccessToken());
      assertNull(paymentCreateQuery0.getRemittanceInformationType());
      assertNull(paymentCreateQuery0.getCreditorAgentType());
      assertNull(paymentCreateQuery0.getCreditorName());
      assertNull(paymentCreateQuery0.getRedirectUri());
      assertNull(paymentCreateQuery0.getCurrency());
      assertNull(paymentCreateQuery0.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getAccessToken());
      assertNull(paymentCreateQuery1.getCreditorName());
      assertNull(paymentCreateQuery1.getRedirectUri());
      assertNull(paymentCreateQuery1.getCreditorAgentType());
      assertEquals("/`{bHqs!\"x", paymentCreateQuery1.getCreditorAccountReferenceType());
      assertNull(paymentCreateQuery1.getCreditorAgent());
      assertNull(paymentCreateQuery1.getRemittanceInformationType());
      assertNull(paymentCreateQuery1.getRemittanceInformation());
      assertNull(paymentCreateQuery1.getCreditorAccountReference());
      assertNull(paymentCreateQuery1.getCurrency());
      assertSame(paymentCreateQuery_PaymentCreateQueryBuilder0, paymentCreateQuery_PaymentCreateQueryBuilder1);
      assertNotSame(paymentCreateQuery0, paymentCreateQuery1);
      assertNotSame(paymentCreateQuery1, paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReferenceType("com.ibanity.apis.client.products.ponto_connect.models.create.PaymentCreateQuery$PaymentCreateQueryBuilder");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAccountReferenceType("");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgent("");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgent(", redirectUri=");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgent(", creditorName=");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgentType("o&c0Oa");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgentType("zhp^V 3,FRF[L>MlH");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorAgentType("PaymentCreateQuery(accessToken=null, accountId=null, additionalHeaders={}, requestedExecutionDate=null, remittanceInformationType=null, remittanceInformation=null, currency=null, amount=null, creditorName=null, creditorAgentType=null, creditorAgent=null, creditorAccountReferenceType=null, creditorAccountReference=null, redirectUri=null)");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorName("34TaNev$");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.creditorName("9B8?~?j");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.creditorName("");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      paymentCreateQuery_PaymentCreateQueryBuilder0.amount(bigDecimal0);
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      paymentCreateQuery_PaymentCreateQueryBuilder0.amount(bigDecimal0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      paymentCreateQuery_PaymentCreateQueryBuilder0.amount(bigDecimal0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.currency("");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.currency("*QV>gz-");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.currency(" #SbSjr4K&D$(");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformation(", creditorName=");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformation("");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformation("Linf:");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformationType("vk");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformationType("PaymentCreateQuery(accessToken=");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.remittanceInformationType("(7kof%S8b0H4SPK");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      LocalDate localDate0 = MockLocalDate.now();
      paymentCreateQuery_PaymentCreateQueryBuilder0.requestedExecutionDate(localDate0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      paymentCreateQuery_PaymentCreateQueryBuilder0.requestedExecutionDate(localDate0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder1 = paymentCreateQuery_PaymentCreateQueryBuilder0.additionalHeaders(map0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder1.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.additionalHeaders((Map<String, String>) null);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(paymentCreateQuery0.equals((Object)paymentCreateQuery1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accountId(uUID0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      UUID uUID0 = MockUUID.randomUUID();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accountId(uUID0);
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(boolean0);
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accessToken("");
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accessToken(">q8r?PX_=ksO");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertFalse(paymentCreateQuery1.equals((Object)paymentCreateQuery0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accessToken("");
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals("PaymentCreateQuery.PaymentCreateQueryBuilder(accessToken=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("_e]w6N79");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2696L));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, (Map<String, String>) null, localDate0, "", (String) null, (String) null, bigDecimal0, ", creditorAgentType=", "", ", amount=", "", "\"", "");
      paymentCreateQuery0.hashCode();
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgent());
      assertEquals(", creditorAgentType=", paymentCreateQuery0.getCreditorName());
      assertEquals("\"", paymentCreateQuery0.getCreditorAccountReference());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      paymentCreateQuery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UUID uUID0 = MockUUID.fromString("");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1124L));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      PaymentCreateQuery paymentCreateQuery0 = new PaymentCreateQuery("", uUID0, map0, localDate0, "", "", "", bigDecimal0, "", "", ", amount=", "", "", "");
      paymentCreateQuery0.hashCode();
      assertEquals("", paymentCreateQuery0.getRemittanceInformationType());
      assertEquals("", paymentCreateQuery0.getCurrency());
      assertEquals(", amount=", paymentCreateQuery0.getCreditorAgent());
      assertEquals("", paymentCreateQuery0.getCreditorName());
      assertEquals("", paymentCreateQuery0.getRedirectUri());
      assertEquals("", paymentCreateQuery0.getRemittanceInformation());
      assertEquals("", paymentCreateQuery0.getCreditorAgentType());
      assertEquals("", paymentCreateQuery0.getAccessToken());
      assertEquals("", paymentCreateQuery0.getCreditorAccountReferenceType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      String string0 = paymentCreateQuery_PaymentCreateQueryBuilder0.toString();
      assertEquals("PaymentCreateQuery.PaymentCreateQueryBuilder(accessToken=null, accountId=null, additionalHeaders$value=null, requestedExecutionDate=null, remittanceInformationType=null, remittanceInformation=null, currency=null, amount=null, creditorName=null, creditorAgentType=null, creditorAgent=null, creditorAccountReferenceType=null, creditorAccountReference=null, redirectUri=null)", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      UUID uUID0 = MockUUID.randomUUID();
      paymentCreateQuery_PaymentCreateQueryBuilder0.accountId(uUID0);
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery1.equals(paymentCreateQuery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = PaymentCreateQuery.builder();
      LocalDate localDate0 = MockLocalDate.now();
      paymentCreateQuery_PaymentCreateQueryBuilder0.requestedExecutionDate(localDate0);
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      PaymentCreateQuery paymentCreateQuery1 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      boolean boolean0 = paymentCreateQuery0.equals(paymentCreateQuery1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PaymentCreateQuery.PaymentCreateQueryBuilder paymentCreateQuery_PaymentCreateQueryBuilder0 = new PaymentCreateQuery.PaymentCreateQueryBuilder();
      PaymentCreateQuery paymentCreateQuery0 = paymentCreateQuery_PaymentCreateQueryBuilder0.build();
      String string0 = paymentCreateQuery0.toString();
      assertEquals("PaymentCreateQuery(accessToken=null, accountId=null, additionalHeaders={}, requestedExecutionDate=null, remittanceInformationType=null, remittanceInformation=null, currency=null, amount=null, creditorName=null, creditorAgentType=null, creditorAgent=null, creditorAccountReferenceType=null, creditorAccountReference=null, redirectUri=null)", string0);
  }
}
