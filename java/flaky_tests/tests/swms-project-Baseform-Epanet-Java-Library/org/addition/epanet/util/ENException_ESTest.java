/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:45:20 GMT 2022
 */

package org.addition.epanet.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.MissingResourceException;
import org.addition.epanet.util.ENException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ENException_ESTest extends ENException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ENException eNException0 = new ENException(0, objectArray0);
      int int0 = eNException0.getCodeID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ENException eNException0 = new ENException((-700));
      int int0 = eNException0.getCodeID();
      assertEquals((-700), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ENException eNException0 = new ENException(159, objectArray0);
      Object[] objectArray1 = eNException0.getArguments();
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ENException eNException0 = new ENException((-1), objectArray0);
      Object[] objectArray1 = new Object[0];
      ENException eNException1 = new ENException(eNException0, objectArray1);
      eNException1.getArguments();
      assertEquals((-1), eNException1.getCodeID());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ENException eNException0 = new ENException(2062);
      // Undeclared exception!
      try { 
        eNException0.toString();
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle java.util.PropertyResourceBundle, key ERR2062
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ENException eNException0 = null;
      try {
        eNException0 = new ENException((ENException) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.util.ENException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ENException eNException0 = new ENException(2062);
      int int0 = eNException0.getCodeID();
      assertEquals(2062, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ENException eNException0 = new ENException(107);
      String string0 = eNException0.toString();
      assertEquals("System Error 107: hydraulics supplied from external file.", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ENException eNException0 = new ENException(2062);
      Object[] objectArray0 = eNException0.getArguments();
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ENException eNException0 = new ENException(107);
      Object[] objectArray0 = new Object[0];
      ENException eNException1 = new ENException(eNException0, objectArray0);
      String string0 = eNException1.toString();
      assertEquals("System Error 107: hydraulics supplied from external file.", string0);
  }
}
