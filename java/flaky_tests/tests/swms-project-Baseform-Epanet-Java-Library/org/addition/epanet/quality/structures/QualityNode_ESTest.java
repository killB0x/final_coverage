/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:43:41 GMT 2022
 */

package org.addition.epanet.quality.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.network.structures.Node;
import org.addition.epanet.network.structures.Source;
import org.addition.epanet.network.structures.Tank;
import org.addition.epanet.quality.structures.QualityNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QualityNode_ESTest extends QualityNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tank tank0 = new Tank();
      QualityNode qualityNode0 = new QualityNode(tank0);
      qualityNode0.setVolumeIn(359.9578142973292);
      double double0 = qualityNode0.getVolumeIn();
      assertEquals(359.9578142973292, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setVolumeIn((-1.0));
      double double0 = qualityNode0.getVolumeIn();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      qualityNode0.setSourceContribution(439.47691043823073);
      double double0 = qualityNode0.getSourceContribution();
      assertEquals(439.47691043823073, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      qualityNode0.setSourceContribution((-1086.3702015880203));
      double double0 = qualityNode0.getSourceContribution();
      assertEquals((-1086.3702015880203), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      qualityNode0.setQuality(1130.32);
      double double0 = qualityNode0.getQuality();
      assertEquals(1130.32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      qualityNode0.setQuality((-604.6161705728596));
      double double0 = qualityNode0.getQuality();
      assertEquals((-604.6161705728596), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      node0.setReportFlag(true);
      Node node1 = qualityNode0.getNode();
      assertNull(node1.getId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      node0.setKe(2738.0);
      Node node1 = qualityNode0.getNode();
      assertEquals(0.0, node1.getElevation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      node0.setKe((-1086.3702015880203));
      Node node1 = qualityNode0.getNode();
      assertEquals(0.0, node1.getElevation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node();
      node0.setInitDemand(1745.726);
      QualityNode qualityNode0 = QualityNode.create(node0);
      Node node1 = qualityNode0.getNode();
      assertEquals("", node1.getComment());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      node0.setInitDemand((-585.2202532));
      Node node1 = qualityNode0.getNode();
      assertNull(node1.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node();
      node0.setElevation(2.9876035);
      QualityNode qualityNode0 = QualityNode.create(node0);
      Node node1 = qualityNode0.getNode();
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      node0.setElevation((-1.0));
      Node node1 = qualityNode0.getNode();
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setMassRate(12.0);
      double double0 = qualityNode0.getMassRate();
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setMassRate((-1768.48849174));
      double double0 = qualityNode0.getMassRate();
      assertEquals((-1768.48849174), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setMassIn((-1768.48849174));
      double double0 = qualityNode0.getMassIn();
      assertEquals((-1768.48849174), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      qualityNode0.setDemand(1010.7597);
      double double0 = qualityNode0.getDemand();
      assertEquals(1010.7597, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setDemand((-1.0));
      double double0 = qualityNode0.getDemand();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tank tank0 = new Tank();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3970.64366905;
      tank0.setC0(doubleArray0);
      QualityNode qualityNode0 = QualityNode.create(tank0);
      assertEquals(0.0, qualityNode0.getSourceContribution(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-496.5489);
      node0.setC0(doubleArray0);
      QualityNode qualityNode0 = QualityNode.create(node0);
      assertEquals(0.0, qualityNode0.getDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        QualityNode.create((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.quality.structures.QualityNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = new Node();
      double[] doubleArray0 = new double[0];
      node0.setC0(doubleArray0);
      // Undeclared exception!
      try { 
        QualityNode.create(node0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.addition.epanet.quality.structures.QualityNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QualityNode qualityNode0 = null;
      try {
        qualityNode0 = new QualityNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.quality.structures.QualityNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tank tank0 = new Tank();
      double[] doubleArray0 = new double[0];
      tank0.setC0(doubleArray0);
      QualityNode qualityNode0 = null;
      try {
        qualityNode0 = new QualityNode(tank0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.addition.epanet.quality.structures.QualityNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = new Node();
      Source source0 = new Source();
      node0.setSource(source0);
      QualityNode qualityNode0 = QualityNode.create(node0);
      assertEquals(0.0, qualityNode0.getMassRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      qualityNode0.setMassIn(2646.1846850906);
      double double0 = qualityNode0.getMassIn();
      assertEquals(2646.1846850906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      double double0 = qualityNode0.getMassIn();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      double double0 = qualityNode0.getQuality();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      double double0 = qualityNode0.getDemand();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = QualityNode.create(node0);
      double double0 = qualityNode0.getVolumeIn();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      double double0 = qualityNode0.getMassRate();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = new Node();
      QualityNode qualityNode0 = new QualityNode(node0);
      double double0 = qualityNode0.getSourceContribution();
      assertEquals(0.0, double0, 0.01);
  }
}
