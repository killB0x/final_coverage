/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:03:12 GMT 2022
 */

package org.addition.epanet.msx.Structures;

import org.junit.Test;
import static org.junit.Assert.*;
import org.addition.epanet.msx.EnumTypes;
import org.addition.epanet.msx.Structures.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Source_ESTest extends Source_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Source source0 = new Source();
      source0.setSpecies(777);
      int int0 = source0.getSpecies();
      assertEquals(777, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Source source0 = new Source();
      source0.setSpecies((-70));
      int int0 = source0.getSpecies();
      assertEquals((-70), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Source source0 = new Source();
      source0.setPattern(777);
      int int0 = source0.getPattern();
      assertEquals(777, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Source source0 = new Source();
      source0.setPattern((-2707));
      int int0 = source0.getPattern();
      assertEquals((-2707), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Source source0 = new Source();
      source0.setMassRate(2467.185);
      double double0 = source0.getMassRate();
      assertEquals(2467.185, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Source source0 = new Source();
      source0.setMassRate((-3890.94645613202));
      double double0 = source0.getMassRate();
      assertEquals((-3890.94645613202), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Source source0 = new Source();
      source0.setC0(3975.890804);
      double double0 = source0.getC0();
      assertEquals(3975.890804, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Source source0 = new Source();
      source0.setC0((-1490.6360056225449));
      double double0 = source0.getC0();
      assertEquals((-1490.6360056225449), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Source source0 = new Source();
      int int0 = source0.getPattern();
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0, source0.getSpecies());
      assertEquals(0, int0);
      assertEquals(0.0, source0.getMassRate(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Source source0 = new Source();
      double double0 = source0.getC0();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Source source0 = new Source();
      source0.getType();
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0, source0.getPattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Source source0 = new Source();
      EnumTypes.SourceType enumTypes_SourceType0 = EnumTypes.SourceType.CONCEN;
      source0.setType(enumTypes_SourceType0);
      assertEquals(0, source0.getPattern());
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Source source0 = new Source();
      int int0 = source0.getSpecies();
      assertEquals(0, int0);
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0, source0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Source source0 = new Source();
      double double0 = source0.getMassRate();
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0, source0.getPattern());
  }
}
