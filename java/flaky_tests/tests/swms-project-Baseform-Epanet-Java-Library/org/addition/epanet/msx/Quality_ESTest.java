/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:56:57 GMT 2022
 */

package org.addition.epanet.msx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.addition.epanet.msx.ENToolkit2;
import org.addition.epanet.msx.EnumTypes;
import org.addition.epanet.msx.EpanetMSX;
import org.addition.epanet.msx.Quality;
import org.addition.epanet.msx.Structures.Pipe;
import org.addition.epanet.msx.Structures.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quality_ESTest extends Quality_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      Source source0 = new Source();
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getPattern());
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0, source0.getSpecies());
      assertNotNull(source0);
      
      source0.setC0((-840.51884574));
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals((-840.51884574), source0.getC0(), 0.01);
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getPattern());
      assertEquals(0, source0.getSpecies());
      
      quality0.addSource(3, source0, 8, (-902L));
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals((-840.51884574), source0.getC0(), 0.01);
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getPattern());
      assertEquals(0, source0.getSpecies());
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      int int0 = quality0.transport((-1696L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(quality0);
      
      char[] charArray0 = new char[18];
      charArray0[0] = ',';
      quality0.FlowDir = charArray0;
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      
      // Undeclared exception!
      try { 
        quality0.DOWN_NODE(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      assertNotNull(quality0);
      
      char[] charArray0 = new char[18];
      charArray0[0] = ',';
      quality0.FlowDir = charArray0;
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      
      // Undeclared exception!
      try { 
        quality0.UP_NODE(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(quality0);
      
      quality0.updateNodes(0);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      quality0.sourceInput(9);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(quality0);
      
      int int0 = quality0.MSXqual_open();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0, int0);
      
      quality0.getIncidentConcen();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertNotNull(epanetMSX0);
      
      epanetMSX0.mQuality.advectSegs(16);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(quality0);
      
      int int0 = quality0.MSXqual_open();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, int0);
      
      quality0.accumulate(0);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      Pipe pipe0 = quality0.createSeg(0, (double[]) null);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0.0, pipe0.getV(), 0.01);
      assertEquals(0.0, pipe0.getHstep(), 0.01);
      assertNotNull(pipe0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertNotNull(epanetMSX0);
      
      quality0.loadDependencies(epanetMSX0);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      
      double[] doubleArray0 = new double[0];
      Pipe pipe0 = quality0.createSeg((-1505.03904), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1505.03904), pipe0.getV(), 0.01);
      assertEquals(0.0, pipe0.getHstep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(pipe0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.updateNodes(1000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.sourceInput((-2649L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.shiftSegWallQual(643, 643);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.reorientSegs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.loadDependencies((EpanetMSX) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.initSegs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.getIncidentConcen();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.getHydVars();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        quality0.createSeg(724, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.advectSegs(1120L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.accumulate(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertNotNull(quality0);
      
      int int0 = quality0.MSXqual_open();
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0, int0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      
      // Undeclared exception!
      try { 
        quality0.UP_NODE(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.MSXqual_open();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.MSXqual_isSame((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.MSXqual_init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.MSXqual_getNodeQual(3003, 3003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      int int0 = quality0.MSXqual_open();
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        quality0.MSXqual_getLinkQual((-2143664890), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2143664890 out of bounds for length 1
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      // Undeclared exception!
      try { 
        quality0.LINKVOL(2144768705);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertNotNull(epanetMSX0);
      
      File file0 = MockFile.createTempFile("K$4D7", "", (File) null);
      assertEquals("K$4D70", file0.getName());
      assertEquals("/tmp/K$4D70", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      int int0 = epanetMSX0.load(file0);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals("K$4D70", file0.getName());
      assertEquals("/tmp/K$4D70", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0, int0);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      
      // Undeclared exception!
      try { 
        epanetMSX0.mQuality.LINKVOL(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 1
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.getQuality();
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertNotNull(quality0);
      
      int int0 = quality0.MSXqual_open();
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        quality0.DOWN_NODE(564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 564 out of bounds for length 1
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      double[] doubleArray0 = new double[7];
      Pipe pipe0 = quality0.createSeg(1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(1.0, pipe0.getV(), 0.01);
      assertEquals(0.0, pipe0.getHstep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertNotNull(pipe0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Quality quality0 = new Quality();
      assertNotNull(quality0);
      
      Source source0 = new Source();
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals(0, source0.getPattern());
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getSpecies());
      assertNotNull(source0);
      
      source0.setC0(900);
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals(0, source0.getPattern());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0, source0.getSpecies());
      assertEquals(900.0, source0.getC0(), 0.01);
      
      // Undeclared exception!
      try { 
        quality0.addSource(900, source0, 900, 900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertNotNull(eNToolkit2_0);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertNotNull(epanetMSX0);
      
      Quality quality0 = epanetMSX0.mQuality;
      assertNotNull(quality0);
      
      Source source0 = new Source();
      assertEquals(0, source0.getPattern());
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertNotNull(source0);
      
      quality0.addSource(3, source0, 8, (-902L));
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, source0.getPattern());
      assertEquals(0, source0.getSpecies());
      assertEquals(0.0, source0.getMassRate(), 0.01);
      assertEquals(0.0, source0.getC0(), 0.01);
      assertEquals(EnumTypes.SourceType.CONCEN, source0.getType());
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      quality0.MSXqual_open();
      // Undeclared exception!
      quality0.transport(1L);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Quality quality0 = new Quality();
      quality0.getNewSegWallQual(1590, (-2649L), (Pipe) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.mQuality;
      quality0.reorientSegs();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.mQuality;
      quality0.initSegs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      int int0 = quality0.transport(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      // Undeclared exception!
      try { 
        quality0.transport(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.mQuality;
      boolean boolean0 = quality0.MSXqual_isSame((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      quality0.MSXqual_open();
      // Undeclared exception!
      try { 
        quality0.MSXqual_getLinkQual(0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.mQuality;
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        quality0.MSXqual_step(longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      int int0 = quality0.MSXqual_init();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      quality0.MSXqual_open();
      // Undeclared exception!
      try { 
        quality0.DOWN_NODE(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      quality0.MSXqual_open();
      // Undeclared exception!
      try { 
        quality0.UP_NODE(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Quality quality0 = new Quality();
      Pipe pipe0 = new Pipe();
      // Undeclared exception!
      try { 
        quality0.getNewSegWallQual(1572, 1572, pipe0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Quality", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Quality quality0 = epanetMSX0.getQuality();
      int int0 = quality0.MSXqual_close();
      assertEquals(0, int0);
  }
}
