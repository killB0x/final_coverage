/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:15:37 GMT 2022
 */

package org.addition.epanet.msx;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.RandomAccessFile;
import org.addition.epanet.msx.ENToolkit2;
import org.addition.epanet.msx.EnumTypes;
import org.addition.epanet.msx.EpanetMSX;
import org.addition.epanet.msx.Report;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Report_ESTest extends Report_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertNotNull(eNToolkit2_0);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertNotNull(epanetMSX0);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      
      Report report0 = epanetMSX0.getReport();
      assertNotNull(report0);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
      
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      report0.getHrsMins(0, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getQTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertNotNull(eNToolkit2_0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertNotNull(epanetMSX0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      
      Report report0 = epanetMSX0.mReport;
      assertNotNull(report0);
      
      int[] intArray0 = new int[3];
      MockFile mockFile0 = new MockFile("^_FaS[/'Zb{}", "hr:min ");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("hr:min ", "^_FaS[/'Zb{}", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hr:min ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/^_FaS[/'Zb{}", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min ", mockFile0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min /hr:min 0^_FaS[", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("'Zb{}", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min /hr:min 0^_FaS[/'Zb{}", file0.toString());
      
      int int0 = epanetMSX0.load(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertEquals(0, int0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("hr:min ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/user/^_FaS[/'Zb{}", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min ", mockFile0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min /hr:min 0^_FaS[", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("'Zb{}", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/user/^_FaS[/'Zb{}/hr:min /hr:min 0^_FaS[/'Zb{}", file0.toString());
      
      report0.getHrsMins(2, intArray0, intArray0);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      assertNotNull(epanetMSX0);
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
      
      Report report0 = epanetMSX0.mReport;
      assertNotNull(report0);
      
      report0.writeTableHdr();
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0, epanetMSX0.getNPeriods());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertNotNull(eNToolkit2_0);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertNotNull(epanetMSX0);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      
      Report report0 = epanetMSX0.mReport;
      assertNotNull(report0);
      
      report0.loadDependencies(epanetMSX0);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.writeTableHdr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.writeNodeTable((RandomAccessFile) null, (-1441), (-1441));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.writeLinkTable((RandomAccessFile) null, 1836, 1836);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.writeLine("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.newPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.loadDependencies((EpanetMSX) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        report0.getHrsMins((-956), intArray0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertNotNull(eNToolkit2_0);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertNotNull(epanetMSX0);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      
      Report report0 = epanetMSX0.getReport();
      assertNotNull(report0);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(0, epanetMSX0.getNPeriods());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0L, epanetMSX0.getQTime());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        report0.getHrsMins(1, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.createStatsTables((RandomAccessFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.createSeriesTables((RandomAccessFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Report report0 = new Report();
      assertNotNull(report0);
      
      // Undeclared exception!
      try { 
        report0.MSXrpt_write((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      assertNotNull(network0);
      
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      assertNotNull(eNToolkit2_0);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      assertNotNull(epanetMSX0);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      
      Report report0 = epanetMSX0.getReport();
      assertNotNull(report0);
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
      
      report0.writeLine("N");
      assertEquals(9, ENToolkit2.EN_PERIODS);
      assertEquals(16, ENToolkit2.EN_MIXZONEVOL);
      assertEquals(0, ENToolkit2.EN_DURATION);
      assertEquals(4, ENToolkit2.EN_PATTERNSTART);
      assertEquals(3, ENToolkit2.EN_PATCOUNT);
      assertEquals(2, ENToolkit2.EN_QUALSTEP);
      assertEquals(14, ENToolkit2.EN_INITVOLUME);
      assertEquals(0, ENToolkit2.EN_DIAMETER);
      assertEquals(3, ENToolkit2.EN_PATTERNSTEP);
      assertEquals(2, ENToolkit2.EN_ROUGHNESS);
      assertEquals(2, ENToolkit2.EN_LINKCOUNT);
      assertEquals(1, ENToolkit2.EN_HYDSTEP);
      assertEquals(15, ENToolkit2.EN_MIXMODEL);
      assertEquals(4, ENToolkit2.EN_CURVECOUNT);
      assertEquals(6, ENToolkit2.EN_REPORTSTART);
      assertEquals(8, ENToolkit2.EN_STATISTIC);
      assertEquals(0, ENToolkit2.EN_JUNCTION);
      assertEquals(5, ENToolkit2.EN_CONTROLCOUNT);
      assertEquals(0, ENToolkit2.EN_NODECOUNT);
      assertEquals(1, ENToolkit2.EN_RESERVOIR);
      assertEquals(5, ENToolkit2.EN_REPORTSTEP);
      assertEquals(1, ENToolkit2.EN_TANKCOUNT);
      assertEquals(2, ENToolkit2.EN_TANK);
      assertEquals(1, ENToolkit2.EN_LENGTH);
      assertEquals(0L, epanetMSX0.getQTime());
      assertEquals(0L, epanetMSX0.getResultsOffset());
      assertEquals(0, epanetMSX0.getNPeriods());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Report report0 = epanetMSX0.mReport;
      EnumTypes.ObjectTypes enumTypes_ObjectTypes0 = EnumTypes.ObjectTypes.CONSTANT;
      report0.createTableHdr(enumTypes_ObjectTypes0, (-2146));
      report0.newPage();
      report0.newPage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      Report report0 = epanetMSX0.getReport();
      report0.writeLinkTable((RandomAccessFile) null, 4, 5);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      Report report0 = epanetMSX0.getReport();
      report0.writeNodeTable((RandomAccessFile) null, 16, 3850);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      Report report0 = epanetMSX0.getReport();
      EnumTypes.ObjectTypes enumTypes_ObjectTypes0 = EnumTypes.ObjectTypes.NODE;
      report0.createTableHdr(enumTypes_ObjectTypes0, 1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Report report0 = new Report();
      EnumTypes.ObjectTypes enumTypes_ObjectTypes0 = EnumTypes.ObjectTypes.SPECIES;
      // Undeclared exception!
      try { 
        report0.createTableHdr(enumTypes_ObjectTypes0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Report report0 = new Report();
      EnumTypes.ObjectTypes enumTypes_ObjectTypes0 = EnumTypes.ObjectTypes.NODE;
      // Undeclared exception!
      try { 
        report0.createTableHdr(enumTypes_ObjectTypes0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Report report0 = new Report();
      EnumTypes.ObjectTypes enumTypes_ObjectTypes0 = EnumTypes.ObjectTypes.MAX_OBJECTS;
      // Undeclared exception!
      try { 
        report0.createTableHdr(enumTypes_ObjectTypes0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Report", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      Report report0 = epanetMSX0.getReport();
      report0.createSeriesTables((RandomAccessFile) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      org.addition.epanet.network.Network network0 = new org.addition.epanet.network.Network();
      ENToolkit2 eNToolkit2_0 = new ENToolkit2(network0);
      EpanetMSX epanetMSX0 = new EpanetMSX(eNToolkit2_0);
      Report report0 = epanetMSX0.mReport;
      MockFile mockFile0 = new MockFile("^_FaS[/'Zb{}", "hr:min ");
      int int0 = report0.MSXrpt_write(mockFile0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EpanetMSX epanetMSX0 = new EpanetMSX((ENToolkit2) null);
      Report report0 = epanetMSX0.mReport;
      report0.createStatsTables((RandomAccessFile) null);
  }
}
