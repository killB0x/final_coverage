/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:37:03 GMT 2022
 */

package org.addition.epanet.msx.Solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.msx.Chemical;
import org.addition.epanet.msx.Solvers.JacobianInterface;
import org.addition.epanet.msx.Solvers.Newton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Newton_ESTest extends Newton_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Newton newton0 = new Newton();
      newton0.newton_open(1229);
      double[] doubleArray0 = new double[7];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      int int0 = newton0.newton_solve(doubleArray0, 0, 4884, 1229, chemical0, jacobianInterface_Operation0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Newton newton0 = new Newton();
      Chemical chemical0 = new Chemical();
      double[] doubleArray0 = new double[0];
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_DC_DT_CONCENTRATIONS;
      int int0 = newton0.newton_solve(doubleArray0, (-1), 510, 510, chemical0, jacobianInterface_Operation0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Newton newton0 = new Newton();
      Chemical chemical0 = new Chemical();
      newton0.Nmax = 12;
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      // Undeclared exception!
      try { 
        newton0.newton_solve((double[]) null, 12, 1671, 12, chemical0, jacobianInterface_Operation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Utilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Newton newton0 = new Newton();
      newton0.newton_open(1232);
      Chemical chemical0 = new Chemical();
      double[] doubleArray0 = new double[0];
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      // Undeclared exception!
      try { 
        newton0.newton_solve(doubleArray0, 1232, 1232, 1232, chemical0, jacobianInterface_Operation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Newton newton0 = new Newton();
      // Undeclared exception!
      try { 
        newton0.newton_open((-1073741824));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1073741823
         //
         verifyException("org.addition.epanet.msx.Solvers.Newton", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Newton newton0 = new Newton();
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      int int0 = newton0.newton_solve((double[]) null, 1485, 1485, 1485, chemical0, jacobianInterface_Operation0);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Newton newton0 = new Newton();
      double[] doubleArray0 = new double[7];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      int int0 = newton0.newton_solve(doubleArray0, 0, 1, 1, chemical0, jacobianInterface_Operation0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Newton newton0 = new Newton();
      newton0.newton_open(1229);
      double[] doubleArray0 = new double[7];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      int int0 = newton0.newton_solve(doubleArray0, 1, (-1586), 763, chemical0, jacobianInterface_Operation0);
      assertEquals((-2), int0);
  }
}
