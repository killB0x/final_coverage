/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:01:28 GMT 2022
 */

package org.addition.epanet.msx.Structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.msx.Structures.Link;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Link_ESTest extends Link_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Link link0 = new Link(4758, 4758);
      link0.setN1((-1));
      assertEquals((-1), link0.getN1());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Link link0 = new Link(0, 0);
      link0.rpt = true;
      boolean boolean0 = link0.getRpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Link link0 = new Link(463, 463);
      link0.setRoughness(463);
      double double0 = link0.getRoughness();
      assertEquals(463.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Link link0 = new Link(0, 1380);
      link0.roughness = (-1.0);
      double double0 = link0.getRoughness();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Link link0 = new Link(0, 0);
      link0.setParam((double[]) null);
      double[] doubleArray0 = link0.getParam();
      assertNull(doubleArray0);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Link link0 = new Link(0, 0);
      double[] doubleArray0 = new double[9];
      link0.param = doubleArray0;
      double[] doubleArray1 = link0.getParam();
      assertEquals(9, doubleArray1.length);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Link link0 = new Link(8, 0);
      link0.setN2(8);
      int int0 = link0.getN2();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Link link0 = new Link(88, 1);
      link0.setN2((-1));
      int int0 = link0.getN2();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Link link0 = new Link(313, 313);
      link0.n1 = 313;
      int int0 = link0.getN1();
      assertEquals(313, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Link link0 = new Link(0, 0);
      link0.n1 = (-5259);
      int int0 = link0.getN1();
      assertEquals((-5259), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Link link0 = new Link(0, 0);
      link0.setLen(1.0);
      double double0 = link0.getLen();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Link link0 = new Link(0, 0);
      link0.setDiam(540.567842812009);
      double double0 = link0.getDiam();
      assertEquals(540.567842812009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Link link0 = new Link(632, 632);
      link0.diam = (-886.671115);
      double double0 = link0.getDiam();
      assertEquals((-886.671115), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Link link0 = new Link(4522, 4522);
      double[] doubleArray0 = new double[5];
      link0.c0 = doubleArray0;
      link0.c0 = null;
      double[] doubleArray1 = link0.getC0();
      assertNull(doubleArray1);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Link link0 = new Link(0, 0);
      double[] doubleArray0 = new double[9];
      link0.c0 = doubleArray0;
      double[] doubleArray1 = link0.getC0();
      assertEquals(9, doubleArray1.length);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Link link0 = null;
      try {
        link0 = new Link((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.addition.epanet.msx.Structures.Link", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Link link0 = new Link(0, 0);
      double[] doubleArray0 = link0.getParam();
      assertFalse(link0.getRpt());
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Link link0 = new Link(0, 0);
      double double0 = link0.getRoughness();
      assertEquals(0.0, double0, 0.01);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Link link0 = new Link(88, 1);
      int int0 = link0.getN2();
      assertEquals(0, int0);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Link link0 = new Link(1, 1);
      double double0 = link0.getDiam();
      assertEquals(0.0, double0, 0.01);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Link link0 = new Link(88, 1);
      assertFalse(link0.getRpt());
      
      link0.setRpt(true);
      assertTrue(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Link link0 = new Link(0, 0);
      double[] doubleArray0 = link0.getC0();
      assertFalse(link0.getRpt());
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Link link0 = new Link(88, 1);
      link0.setLen((-1383.9));
      double double0 = link0.getLen();
      assertEquals((-1383.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Link link0 = new Link(823, 74);
      link0.setC0(doubleArray0);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Link link0 = new Link(0, 0);
      boolean boolean0 = link0.getRpt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Link link0 = new Link(88, 1);
      double double0 = link0.getLen();
      assertEquals(0.0, double0, 0.01);
      assertFalse(link0.getRpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Link link0 = new Link(0, 0);
      int int0 = link0.getN1();
      assertEquals(0, int0);
      assertFalse(link0.getRpt());
  }
}
