/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:32:38 GMT 2022
 */

package org.addition.epanet.msx.Solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.msx.Chemical;
import org.addition.epanet.msx.Solvers.JacobianInterface;
import org.addition.epanet.msx.Solvers.ros2;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ros2_ESTest extends ros2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Chemical chemical0 = new Chemical();
      assertNotNull(chemical0);
      
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_DC_DT_CONCENTRATIONS;
      // Undeclared exception!
      try { 
        ros2_0.ros2_integrate(doubleArray0, 0, 0, (-604.1905546768), doubleArray0, doubleArray1, doubleArray1, chemical0, jacobianInterface_Operation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Chemical", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      double[] doubleArray0 = new double[2];
      Chemical chemical0 = new Chemical();
      assertNotNull(chemical0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      // Undeclared exception!
      try { 
        ros2_0.ros2_integrate(doubleArray0, (-7276704), (-7276704), 78.97, doubleArray1, doubleArray0, doubleArray1, chemical0, jacobianInterface_Operation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.msx.Chemical", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      Chemical chemical0 = new Chemical();
      assertNotNull(chemical0);
      
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      double[] doubleArray0 = new double[2];
      int int0 = ros2_0.ros2_integrate(doubleArray0, (-606), Double.NaN, (-1831.128), doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      Chemical chemical0 = new Chemical();
      assertNotNull(chemical0);
      
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      double[] doubleArray0 = new double[2];
      ros2_0.ros2_open(0, 1921432737);
      int int0 = ros2_0.ros2_integrate(doubleArray0, 0, 9.2E-16, 1468.9673, doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      ros2_0.ros2_open(509, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      Chemical chemical0 = new Chemical();
      assertNotNull(chemical0);
      
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_DC_DT_CONCENTRATIONS;
      int int0 = ros2_0.ros2_integrate(doubleArray0, 0, 1.5, 0, doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      assertNotNull(ros2_0);
      
      // Undeclared exception!
      try { 
        ros2_0.ros2_open((-1545), (-1545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1544
         //
         verifyException("org.addition.epanet.msx.Solvers.ros2", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2738.367604699967);
      // Undeclared exception!
      ros2_0.ros2_integrate(doubleArray0, (-3721), (-3721), 6.298245490809924E-13, doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      double[] doubleArray0 = new double[0];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      // Undeclared exception!
      try { 
        ros2_0.ros2_integrate(doubleArray0, (-2146060871), (-2146060871), (-2146060871), doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.addition.epanet.msx.Solvers.ros2", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      double[] doubleArray0 = new double[4];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.PIPES_EQUIL;
      int int0 = ros2_0.ros2_integrate(doubleArray0, (-2147139567), (-2147139567), (-3019.758), doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
      assertArrayEquals(new double[] {2.147136547242E9, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(688165, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ros2 ros2_0 = new ros2();
      double[] doubleArray0 = new double[4];
      Chemical chemical0 = new Chemical();
      JacobianInterface.Operation jacobianInterface_Operation0 = JacobianInterface.Operation.TANKS_EQUIL;
      JacobianInterface.Operation jacobianInterface_Operation1 = JacobianInterface.Operation.PIPES_EQUIL;
      int int0 = ros2_0.ros2_integrate(doubleArray0, (-450), (-2126.54), 0, doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation1);
      assertEquals((-897), int0);
      
      ros2_0.ros2_integrate(doubleArray0, (-450), (-1.0E20), 2.8120656752312137E-13, doubleArray0, doubleArray0, doubleArray0, chemical0, jacobianInterface_Operation0);
      assertArrayEquals(new double[] {2126.54, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
