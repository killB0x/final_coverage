/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:57:06 GMT 2022
 */

package org.addition.epanet.msx.Structures;

import org.junit.Test;
import static org.junit.Assert.*;
import org.addition.epanet.msx.Structures.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pattern_ESTest extends Pattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setInterval(602L);
      long long0 = pattern0.getInterval();
      assertEquals(602L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setInterval((-1551L));
      long long0 = pattern0.getInterval();
      assertEquals((-1551L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setId((String) null);
      pattern0.getId();
      assertEquals(0L, pattern0.getInterval());
      assertEquals(0, pattern0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setId("org.addition.epanet.msx.Structures.Pattern");
      pattern0.getId();
      assertEquals(0L, pattern0.getInterval());
      assertEquals(0, pattern0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setCurrent(1759);
      int int0 = pattern0.getCurrent();
      assertEquals(1759, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setCurrent((-3785));
      int int0 = pattern0.getCurrent();
      assertEquals((-3785), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setInterval(180);
      pattern0.clone();
      assertEquals(180L, pattern0.getInterval());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setInterval((-1551L));
      pattern0.clone();
      assertEquals((-1551L), pattern0.getInterval());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setCurrent((-1));
      pattern0.clone();
      assertEquals((-1), pattern0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setCurrent(2067);
      pattern0.clone();
      assertEquals(2067, pattern0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      long long0 = pattern0.getInterval();
      assertEquals(0, pattern0.getCurrent());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.getId();
      assertEquals(0, pattern0.getCurrent());
      assertEquals(0L, pattern0.getInterval());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.getLength();
      assertEquals(0, pattern0.getCurrent());
      assertEquals(0L, pattern0.getInterval());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      int int0 = pattern0.getCurrent();
      assertEquals(0L, pattern0.getInterval());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.getMultipliers();
      assertEquals(0, pattern0.getCurrent());
      assertEquals(0L, pattern0.getInterval());
  }
}
