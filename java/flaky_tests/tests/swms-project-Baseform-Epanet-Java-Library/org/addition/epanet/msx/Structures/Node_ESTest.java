/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:03:53 GMT 2022
 */

package org.addition.epanet.msx.Structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.msx.Structures.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node(2123);
      node0.setTank(2123);
      int int0 = node0.getTank();
      assertEquals(2123, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node(0);
      node0.setTank((-775));
      int int0 = node0.getTank();
      assertEquals((-775), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node(1867);
      assertFalse(node0.getRpt());
      
      node0.setRpt(true);
      boolean boolean0 = node0.getRpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node(0);
      double[] doubleArray0 = node0.getC0();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, node0.getTank());
      assertFalse(node0.getRpt());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node(1);
      node0.setC((double[]) null);
      node0.getC();
      assertEquals(0, node0.getTank());
      assertFalse(node0.getRpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(0);
      double[] doubleArray0 = node0.getC();
      assertEquals(0, doubleArray0.length);
      assertFalse(node0.getRpt());
      assertEquals(0, node0.getTank());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = null;
      try {
        node0 = new Node((-18));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -18
         //
         verifyException("org.addition.epanet.msx.Structures.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node(1);
      double[] doubleArray0 = node0.getC0();
      assertEquals(1, doubleArray0.length);
      assertEquals(0, node0.getTank());
      assertFalse(node0.getRpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node(0);
      boolean boolean0 = node0.getRpt();
      assertFalse(boolean0);
      assertEquals(0, node0.getTank());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node(1);
      double[] doubleArray0 = node0.getC();
      assertEquals(1, doubleArray0.length);
      assertFalse(node0.getRpt());
      assertEquals(0, node0.getTank());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node(1);
      node0.setC0((double[]) null);
      node0.getC0();
      assertFalse(node0.getRpt());
      assertEquals(0, node0.getTank());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node(2123);
      int int0 = node0.getTank();
      assertFalse(node0.getRpt());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(1);
      node0.getSources();
      assertFalse(node0.getRpt());
      assertEquals(0, node0.getTank());
  }
}
