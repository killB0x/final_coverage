/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:39:11 GMT 2022
 */

package org.addition.epanet.hydraulic.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.addition.epanet.hydraulic.models.DwModelCalculator;
import org.addition.epanet.hydraulic.models.PipeHeadModel;
import org.addition.epanet.hydraulic.structures.SimulationLink;
import org.addition.epanet.hydraulic.structures.SimulationNode;
import org.addition.epanet.network.Network;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Link;
import org.addition.epanet.network.structures.Valve;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DwModelCalculator_ESTest extends DwModelCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      Network network0 = new Network();
      PropertiesMap propertiesMap0 = network0.getPropertiesMap();
      LinkedList<SimulationNode> linkedList0 = new LinkedList<SimulationNode>();
      Link link0 = new Link();
      SimulationLink simulationLink0 = new SimulationLink(linkedList0, link0, (-1852628642));
      link0.setRoughness(1.0E-7);
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(1.0E7, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
      assertEquals(Double.NaN, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      LinkedList<SimulationNode> linkedList0 = new LinkedList<SimulationNode>();
      Link link0 = new Link();
      Link.LinkType link_LinkType0 = Link.LinkType.PIPE;
      link0.setType(link_LinkType0);
      SimulationLink simulationLink0 = SimulationLink.createIndexedLink((List<SimulationNode>) linkedList0, link0, 1294);
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(1.0E7, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
      assertEquals(Double.NaN, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setHexp((Double) dwModelCalculator0.A1);
      HashMap<String, SimulationNode> hashMap0 = new HashMap<String, SimulationNode>();
      Valve valve0 = new Valve();
      SimulationLink simulationLink0 = SimulationLink.createIndexedLink((Map<String, SimulationNode>) hashMap0, (Link) valve0, 0);
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(0.0, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
      assertEquals(1.0E7, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      LinkedHashSet<SimulationNode> linkedHashSet0 = new LinkedHashSet<SimulationNode>();
      Valve valve0 = new Valve();
      SimulationLink simulationLink0 = new SimulationLink(linkedHashSet0, valve0, 4242);
      simulationLink0.setSimFlow((-0.8685889638));
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(1.0E7, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      LinkedList<SimulationNode> linkedList0 = new LinkedList<SimulationNode>();
      Link link0 = new Link();
      SimulationLink simulationLink0 = new SimulationLink(linkedList0, link0, (-1852628642));
      // Undeclared exception!
      try { 
        dwModelCalculator0.compute((PropertiesMap) null, simulationLink0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.hydraulic.models.DwModelCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      Network network0 = new Network();
      PropertiesMap propertiesMap0 = network0.getPropertiesMap();
      LinkedList<SimulationNode> linkedList0 = new LinkedList<SimulationNode>();
      Link link0 = new Link();
      SimulationLink simulationLink0 = new SimulationLink(linkedList0, link0, (-1852628642));
      link0.setDiameterAndUpdate((-0.8685889638), network0);
      simulationLink0.setSimFlow((-1852628642));
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(Double.NaN, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      Network network0 = new Network();
      PropertiesMap propertiesMap0 = network0.getPropertiesMap();
      LinkedList<SimulationNode> linkedList0 = new LinkedList<SimulationNode>();
      Link link0 = new Link();
      SimulationLink simulationLink0 = new SimulationLink(linkedList0, link0, (-1852628642));
      link0.setDiameterAndUpdate((-0.8685889638), network0);
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(Double.NaN, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DwModelCalculator dwModelCalculator0 = new DwModelCalculator();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      LinkedHashSet<SimulationNode> linkedHashSet0 = new LinkedHashSet<SimulationNode>();
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.PRV;
      valve0.setType(link_LinkType0);
      SimulationLink simulationLink0 = new SimulationLink(linkedHashSet0, valve0, 4242);
      PipeHeadModel.LinkCoeffs pipeHeadModel_LinkCoeffs0 = dwModelCalculator0.compute(propertiesMap0, simulationLink0);
      assertEquals(1.0E7, pipeHeadModel_LinkCoeffs0.getInvHeadLoss(), 0.01);
      assertEquals(Double.NaN, pipeHeadModel_LinkCoeffs0.getFlowCorrection(), 0.01);
  }
}
