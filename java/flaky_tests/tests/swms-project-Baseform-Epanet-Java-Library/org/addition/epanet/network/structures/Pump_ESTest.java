/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:54:25 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Curve;
import org.addition.epanet.network.structures.Link;
import org.addition.epanet.network.structures.Pattern;
import org.addition.epanet.network.structures.Pump;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pump_ESTest extends Pump_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.CMH;
      pump0.setNUMaxFlow(propertiesMap_FlowUnitsType0, (-51.9338));
      double double0 = pump0.getQmax();
      assertEquals((-0.5094545811261526), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setQ0(1829.758046);
      double double0 = pump0.getQ0();
      assertEquals(1829.758046, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.MLD;
      pump0.setNUInitialFlow(propertiesMap_FlowUnitsType0, (-43.3));
      double double0 = pump0.getQ0();
      assertEquals((-17.698029919071363), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setHmax(2673.326329132625);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = pump0.getNUShutoffHead(propertiesMap_UnitsType0);
      assertEquals(2673.326329132625, pump0.getHmax(), 0.01);
      assertEquals(814.8298651196241, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setHmax((-1090.0313885572157));
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = pump0.getNUShutoffHead(propertiesMap_UnitsType0);
      assertEquals((-1090.0313885572157), pump0.getHmax(), 0.01);
      assertEquals((-1090.0313885572157), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setHmax(1.0);
      double double0 = pump0.getNUMaxHead(propertiesMap_UnitsType0);
      assertEquals(1.0, pump0.getHmax(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setHmax((-2480.377));
      double double0 = pump0.getNUMaxHead(propertiesMap_UnitsType0);
      assertEquals((-2480.377), pump0.getHmax(), 0.01);
      assertEquals((-2480.377), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      pump0.setNUMaxFlow(propertiesMap_FlowUnitsType0, 1.0E-6);
      double double0 = pump0.getNUMaxFlow(propertiesMap_FlowUnitsType0);
      assertEquals(2.228010097341761E-9, pump0.getQmax(), 0.01);
      assertEquals(1.0E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.CFS;
      pump0.setNUMaxFlow(propertiesMap_FlowUnitsType0, (-534.7328596));
      double double0 = pump0.getNUMaxFlow(propertiesMap_FlowUnitsType0);
      assertEquals((-18.883810417770242), pump0.getQmax(), 0.01);
      assertEquals((-534.7328596), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setQ0(2159.38);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.LPM;
      double double0 = pump0.getNUInitialFlow(propertiesMap_FlowUnitsType0);
      assertEquals(2159.38, pump0.getQ0(), 0.01);
      assertEquals(3668786.62, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      pump0.setQ0((-1852.8));
      double double0 = pump0.getNUInitialFlow(propertiesMap_FlowUnitsType0);
      assertEquals((-1852.8), pump0.getQ0(), 0.01);
      assertEquals((-831594.0768), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setNUFlowCoefficient(propertiesMap_UnitsType0, 3345.399);
      double double0 = pump0.getNUFlowCoefficient(propertiesMap_UnitsType0);
      assertEquals(3345.399, pump0.getFlowCoefficient(), 0.01);
      assertEquals(3345.399, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      pump0.setFlowCoefficient((-1.0));
      double double0 = pump0.getNUFlowCoefficient(propertiesMap_UnitsType0);
      assertEquals((-1.0), pump0.getFlowCoefficient(), 0.01);
      assertEquals((-0.7457), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setN(1.0);
      double double0 = pump0.getN();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setN((-407.4574908198878));
      double double0 = pump0.getN();
      assertEquals((-407.4574908198878), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setHmax(998.646995589);
      double double0 = pump0.getHmax();
      assertEquals(998.646995589, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setHmax((-1090.0313885572157));
      double double0 = pump0.getHmax();
      assertEquals((-1090.0313885572157), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setH0(1123.96);
      double double0 = pump0.getH0();
      assertEquals(1123.96, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getEnergy(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setEcost(1.0);
      double double0 = pump0.getEcost();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Pump pump0 = new Pump();
      // Undeclared exception!
      try { 
        pump0.setEnergy((-331), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -331 out of bounds for length 6
         //
         verifyException("org.addition.epanet.network.structures.Pump", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setNUShutoffHead(propertiesMap_UnitsType0, (-1687.802987165179));
      double double0 = pump0.getH0();
      assertEquals((-1687.802987165179), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pump pump0 = new Pump();
      // Undeclared exception!
      try { 
        pump0.getEnergy(211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 211 out of bounds for length 6
         //
         verifyException("org.addition.epanet.network.structures.Pump", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Pump pump0 = new Pump();
      Curve curve0 = new Curve();
      pump0.setHcurve(curve0);
      Curve curve1 = pump0.getHcurve();
      assertSame(curve1, curve0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getHmax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setEnergy(1, (-43.3));
      assertEquals(Link.StatType.XHEAD, pump0.getStat());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getFlowCoefficient();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.getPtype();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setEcost((-2538.0));
      double double0 = pump0.getEcost();
      assertEquals((-2538.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = pump0.getNUFlowCoefficient(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      double double0 = pump0.getNUMaxFlow(propertiesMap_FlowUnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Pump pump0 = new Pump();
      Curve curve0 = pump0.getHcurve();
      assertNull(curve0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = pump0.getNUShutoffHead(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Pump pump0 = new Pump();
      Pump.Type pump_Type0 = Pump.Type.POWER_FUNC;
      pump0.setPtype(pump_Type0);
      Pump.Type pump_Type1 = pump0.getPtype();
      assertEquals(Pump.Type.POWER_FUNC, pump_Type1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pump pump0 = new Pump();
      Curve curve0 = new Curve();
      pump0.setEcurve(curve0);
      Curve curve1 = pump0.getEcurve();
      assertSame(curve1, curve0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setNUMaxHead(propertiesMap_UnitsType0, (-933.9255871903));
      assertEquals((-933.9255871903), pump0.getHmax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getH0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getQ0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getQmax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pump pump0 = new Pump();
      Curve curve0 = pump0.getEcurve();
      assertNull(curve0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getN();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setNUFlowCoefficient(propertiesMap_UnitsType0, (-504.99520767148));
      double double0 = pump0.getFlowCoefficient();
      assertEquals((-504.99520767148), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.LPM;
      double double0 = pump0.getNUInitialFlow(propertiesMap_FlowUnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = pump0.getNUMaxHead(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Pump pump0 = new Pump();
      Pattern pattern0 = pump0.getEpat();
      assertNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getEcost();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pump pump0 = new Pump();
      Pattern pattern0 = new Pattern();
      pump0.setUpat(pattern0);
      Pattern pattern1 = pump0.getUpat();
      assertSame(pattern1, pattern0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setFlowCoefficient(3680.169105164906);
      double double0 = pump0.getFlowCoefficient();
      assertEquals(3680.169105164906, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Pump pump0 = new Pump();
      Pattern pattern0 = pump0.getUpat();
      assertNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Pump pump0 = new Pump();
      Pattern pattern0 = new Pattern();
      pump0.setEpat(pattern0);
      Pattern pattern1 = pump0.getEpat();
      assertSame(pattern1, pattern0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setQmax(698.34);
      double double0 = pump0.getQmax();
      assertEquals(698.34, double0, 0.01);
  }
}
