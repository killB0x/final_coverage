/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:47:27 GMT 2022
 */

package org.addition.epanet.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.io.Keywords;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertiesMap_ESTest extends PropertiesMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PropertiesMap.PressUnitsType.values();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRstep();
      Double double0 = new Double(0.0);
      propertiesMap0.setDcost(double0);
      propertiesMap0.getEpatId();
      propertiesMap0.getMaxIter();
      propertiesMap0.getTstart();
      Double double1 = propertiesMap0.getDcost();
      propertiesMap0.setDmult(double1);
      Double double2 = propertiesMap0.getQtol();
      propertiesMap0.setDcost(double2);
      propertiesMap0.getDmult();
      propertiesMap0.getEpatId();
      propertiesMap0.getDuration();
      propertiesMap0.getCheckFreq();
      Keywords.w_GPM = null;
      propertiesMap0.getHydflag();
      propertiesMap0.getHtol();
      propertiesMap0.getTankOrder();
      // Undeclared exception!
      try { 
        PropertiesMap.ReportFlag.valueOf("Qstep");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.ReportFlag.Qstep
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals("1", propertiesMap0.getDefPatId());
      
      PropertiesMap.Hydtype propertiesMap_Hydtype0 = PropertiesMap.Hydtype.SCRATCH;
      propertiesMap0.setHydflag(propertiesMap_Hydtype0);
      Double double0 = propertiesMap0.getDiffus();
      propertiesMap0.setHtol(double0);
      Keywords.w_AFD = "[BACKDROP]";
      Keywords.w_CMH = "";
      propertiesMap0.getEnergyflag();
      Keywords.w_FULL = "RQtol";
      Double double1 = propertiesMap0.getWallOrder();
      propertiesMap0.setCtol(double1);
      propertiesMap0.getHtol();
      propertiesMap0.getCheckFreq();
      propertiesMap0.setEpatID("[BACKDROP]");
      PropertiesMap.PressUnitsType.values();
      PropertiesMap.ReportFlag.values();
      propertiesMap0.setPstart(3600L);
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.SOME;
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      propertiesMap0.getFlowflag();
      propertiesMap0.getEpatId();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double((-1445.127723277513));
      propertiesMap0.setEpump(double0);
      propertiesMap0.getEpump();
      propertiesMap0.getPstart();
      PropertiesMap.StatFlag.values();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_TRACE = "ez@?+";
      Double double0 = new Double(0.0);
      propertiesMap0.setEcost(double0);
      Double double1 = new Double(2518.48712916352);
      propertiesMap0.setQtol(double1);
      Double double2 = propertiesMap0.getQexp();
      Keywords.w_MLD = null;
      Keywords.w_HW = "Viscos";
      Keywords.w_PSI = "org.addition.epanet.network.PropertiesMap$QualType";
      Keywords.w_GPM = "";
      propertiesMap0.setChemUnits("Flowflag");
      propertiesMap0.setDuration((-1558L));
      propertiesMap0.setEnergyflag(false);
      propertiesMap0.setKwall(double2);
      propertiesMap0.getDuration();
      Double double3 = propertiesMap0.getEpump();
      propertiesMap0.setClimit(double3);
      propertiesMap0.getKwall();
      propertiesMap0.getDefPatId();
      propertiesMap0.getMapFname();
      propertiesMap0.getQtol();
      propertiesMap0.getRstep();
      propertiesMap0.getChemName();
      propertiesMap0.getQstep();
      propertiesMap0.getRulestep();
      propertiesMap0.getKwall();
      propertiesMap0.getHydflag();
      propertiesMap0.getChemUnits();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PropertiesMap.StatFlag.values();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(1201.36427);
      propertiesMap0.setDuration(0L);
      propertiesMap0.setMessageflag(false);
      propertiesMap0.setCtol(double0);
      Keywords.w_FULL = "Formflag";
      Keywords.w_TRACE = "Statflag";
      propertiesMap0.setDampLimit((Double) null);
      propertiesMap0.setHacc(double0);
      propertiesMap0.getPressflag();
      propertiesMap0.setPageSize((-4142));
      Double double1 = new Double(1201.36427);
      propertiesMap0.setCtol(double1);
      propertiesMap0.setClimit(double0);
      propertiesMap0.setDmult(double0);
      propertiesMap0.setDuration(1L);
      propertiesMap0.getCtol();
      Keywords.w_IMGD = "Diffus";
      propertiesMap0.setChemUnits("a");
      propertiesMap0.getMessageflag();
      propertiesMap0.getTraceNode();
      propertiesMap0.getChemUnits();
      propertiesMap0.getTankOrder();
      propertiesMap0.getTraceNode();
      propertiesMap0.getMaxCheck();
      // Undeclared exception!
      try { 
        PropertiesMap.TstatType.valueOf("MASS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.TstatType.MASS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_NO = "Statflag";
      propertiesMap0.setMaxCheck((-1848));
      propertiesMap0.setSummaryflag(true);
      propertiesMap0.setPstart(1994L);
      Keywords.w_MLD = "B.]e/.BHeI@iMBJ";
      propertiesMap0.getMaxCheck();
      propertiesMap0.getMapFname();
      propertiesMap0.getDefPatId();
      // Undeclared exception!
      try { 
        PropertiesMap.QualType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.QualType.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getQexp();
      propertiesMap0.getPstart();
      propertiesMap0.setChemUnits("");
      propertiesMap0.getChemUnits();
      propertiesMap0.getFormflag();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setMessageflag(true);
      propertiesMap0.setHydFname("'@:6jD");
      Double double0 = propertiesMap0.getKwall();
      propertiesMap0.setClimit(double0);
      Keywords.w_AVG = "Qtol";
      Keywords.w_AGE = "Formflag";
      Double double1 = new Double((-586.63454));
      propertiesMap0.setEpump(double1);
      propertiesMap0.setMapFname("Qtol");
      propertiesMap0.setHstep(4392L);
      Keywords.w_MIN = "MLD";
      propertiesMap0.getPressflag();
      propertiesMap0.getMapFname();
      PropertiesMap.Hydtype.values();
      propertiesMap0.getEcost();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.StatFlag.parse("Nodeflag");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.StatFlag.parse("Flowflag");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.StatFlag.parse("RQtol");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap.QualType.parse("");
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_FULL = "HydFname";
      Double double0 = new Double(770.3987730826326);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      propertiesMap0.setFormflag(propertiesMap_FormType0);
      propertiesMap0.setRulestep(4988L);
      PropertiesMap propertiesMap1 = new PropertiesMap();
      propertiesMap1.setDur(4988L);
      propertiesMap0.getRfactor();
      propertiesMap1.setDampLimit(double0);
      PropertiesMap.FlowUnitsType.parse("Hexp");
      propertiesMap1.getPressflag();
      propertiesMap1.getStatflag();
      propertiesMap1.setKbulk(double0);
      PropertiesMap.TstatType.values();
      PropertiesMap propertiesMap2 = new PropertiesMap();
      propertiesMap2.setBulkOrder((Double) null);
      propertiesMap2.getPressflag();
      propertiesMap2.getQexp();
      PropertiesMap.Hydtype.values();
      propertiesMap1.getDuration();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getQstep();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setEnergyflag(false);
      Double double0 = propertiesMap0.getKbulk();
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.TRACE;
      propertiesMap0.setQualflag(propertiesMap_QualType0);
      Keywords.w_AVG = "Epump";
      propertiesMap0.setSpGrav(double0);
      propertiesMap0.setEpatID(">TTdC<");
      propertiesMap0.getHydflag();
      propertiesMap0.setMapFname(">TTdC<");
      Keywords.w_NONE = "";
      propertiesMap0.setExtraIter(10);
      propertiesMap0.getPressflag();
      Keywords.w_MLD = "Qtol";
      propertiesMap0.setTstart(0L);
      Keywords.w_AGE = "Summaryflag";
      PropertiesMap.QualType.values();
      PropertiesMap.FormType.values();
      propertiesMap0.getRulestep();
      PropertiesMap.Hydtype.values();
      Double double1 = new Double(0L);
      propertiesMap0.setQtol(double1);
      Double double2 = propertiesMap0.getHacc();
      propertiesMap0.setHexp(double2);
      propertiesMap0.getCheckFreq();
      propertiesMap0.getDuration();
      Keywords.w_CM = "Epump";
      propertiesMap0.getQstep();
      propertiesMap0.getEmax();
      propertiesMap0.getBulkOrder();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRfactor();
      propertiesMap0.setAltReport("aRSBwwUrMgRwM>Z");
      PropertiesMap.FlowUnitsType.parse("");
      PropertiesMap.Hydtype.values();
      propertiesMap0.getLinkflag();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getLinkflag();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getChemUnits();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getAltReport();
      Double double0 = new Double(0.0);
      propertiesMap0.setHexp(double0);
      propertiesMap0.getFlowflag();
      propertiesMap0.getTstart();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getTstart();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getTraceNode();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PropertiesMap.Hydtype.values();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getTraceNode();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap.QualType.parse("");
      PropertiesMap propertiesMap0 = new PropertiesMap();
      String string0 = null;
      Keywords.t_CHEMICAL = null;
      PropertiesMap propertiesMap1 = null;
      try {
        propertiesMap1 = new PropertiesMap();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRstep();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setHydFname("");
      Keywords.w_FULL = "Tstatflag";
      Double double0 = new Double((-2316.2451795));
      propertiesMap0.setCheckFreq((-2301));
      propertiesMap0.setRfactor(double0);
      Keywords.w_AGE = "Ecost";
      propertiesMap0.setHydFname("Tstatflag");
      Keywords.w_CM = "";
      Keywords.w_PSI = null;
      propertiesMap0.setRulestep((-48L));
      Keywords.w_KPA = "";
      Keywords.w_KPA = "";
      propertiesMap0.setDur((-48L));
      propertiesMap0.getViscos();
      propertiesMap0.getRstep();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap.QualType.parse("");
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_FULL = "HydFname";
      Double double0 = new Double(770.3987730826326);
      Keywords.w_YES = "Pressflag";
      propertiesMap0.setRfactor(double0);
      propertiesMap0.getTstatflag();
      propertiesMap0.getUnitsflag();
      propertiesMap0.setRfactor(double0);
      propertiesMap0.getDuration();
      Double double1 = new Double(1.0E-4);
      Double double2 = propertiesMap0.getBulkOrder();
      propertiesMap0.setDcost(double2);
      propertiesMap0.getBulkOrder();
      Double double3 = new Double(1.0E-4);
      propertiesMap0.setSpGrav(double3);
      propertiesMap0.getPageSize();
      propertiesMap0.getTankOrder();
      Double double4 = new Double((-3893.14813));
      propertiesMap0.setDmult(double4);
      PropertiesMap propertiesMap1 = new PropertiesMap();
      PropertiesMap propertiesMap2 = new PropertiesMap();
      Double double5 = propertiesMap2.getHacc();
      Keywords.w_RANGE = "PRICE";
      propertiesMap0.setBulkOrder(double5);
      propertiesMap2.getHydflag();
      propertiesMap1.get("Nodeflag");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap.QualType.parse("");
      Double double0 = new Double(0.0);
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setCheckFreq(3);
      PropertiesMap propertiesMap1 = new PropertiesMap();
      propertiesMap1.setRfactor(double0);
      PropertiesMap propertiesMap2 = new PropertiesMap();
      propertiesMap2.setHydFname("");
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      propertiesMap0.setFormflag(propertiesMap_FormType0);
      propertiesMap1.setRulestep((-2301));
      propertiesMap2.setDur((-48L));
      propertiesMap1.getRfactor();
      PropertiesMap.FlowUnitsType.parse("BulkOrder");
      propertiesMap2.getPressflag();
      propertiesMap1.getStatflag();
      Double double1 = new Double(3);
      propertiesMap0.setKbulk(double1);
      PropertiesMap.TstatType.values();
      propertiesMap0.getPressflag();
      propertiesMap2.getQexp();
      // Undeclared exception!
      try { 
        PropertiesMap.PressUnitsType.valueOf("EpatID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.PressUnitsType.EpatID
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getEcost();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setHydFname("");
      Keywords.w_FULL = "Tstatflag";
      Double double0 = new Double((-2316.2451795));
      propertiesMap0.setCheckFreq((-2301));
      propertiesMap0.setRfactor(double0);
      Keywords.w_AGE = "Ecost";
      propertiesMap0.setHydFname("Tstatflag");
      Keywords.w_CM = "";
      Keywords.w_PSI = null;
      propertiesMap0.setRulestep((-48L));
      propertiesMap0.getBulkOrder();
      propertiesMap0.getCheckFreq();
      PropertiesMap.StatFlag.values();
      propertiesMap0.getEcost();
      Double double1 = propertiesMap0.getDiffus();
      propertiesMap0.setKbulk(double1);
      propertiesMap0.getBulkOrder();
      // Undeclared exception!
      try { 
        PropertiesMap.Hydtype.valueOf("Qstep");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.Hydtype.Qstep
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getMaxCheck();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getUnitsflag();
      propertiesMap0.setTstart(1175L);
      propertiesMap0.getQexp();
      PropertiesMap.QualType.values();
      propertiesMap0.getQualflag();
      propertiesMap0.getMaxCheck();
      propertiesMap0.getHydflag();
      PropertiesMap.FlowUnitsType.values();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = propertiesMap0.getSpGrav();
      propertiesMap0.setClimit(double0);
      propertiesMap0.setSummaryflag(false);
      propertiesMap0.setTankOrder(double0);
      Double double1 = new Double((-3436.87930874));
      propertiesMap0.put("Epump", double0);
      propertiesMap0.setRfactor(double1);
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.FULL;
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.getRfactor();
      propertiesMap0.setQexp(double0);
      Keywords.w_NONE = "Rfactor";
      propertiesMap0.setRulestep(0L);
      // Undeclared exception!
      try { 
        PropertiesMap.TstatType.valueOf("SpGrav");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.TstatType.SpGrav
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setHydFname("");
      Keywords.w_FULL = "Tstatflag";
      Double double0 = new Double((-2316.2451795));
      propertiesMap0.setCheckFreq((-2301));
      propertiesMap0.setRfactor(double0);
      Keywords.w_AGE = "Ecost";
      propertiesMap0.setHydFname("Tstatflag");
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      propertiesMap0.setFormflag(propertiesMap_FormType0);
      Keywords.w_CM = "";
      Keywords.w_PSI = null;
      propertiesMap0.setRulestep((-48L));
      Keywords.w_KPA = "";
      propertiesMap0.setDur((-48L));
      Double double1 = propertiesMap0.getRfactor();
      PropertiesMap.FlowUnitsType.parse("Summaryflag");
      propertiesMap0.getPressflag();
      propertiesMap0.getStatflag();
      propertiesMap0.setKbulk(double1);
      PropertiesMap.TstatType.values();
      propertiesMap0.getPressflag();
      propertiesMap0.getQexp();
      // Undeclared exception!
      try { 
        PropertiesMap.PressUnitsType.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(0.0);
      propertiesMap0.setCtol(double0);
      propertiesMap0.setViscos(double0);
      propertiesMap0.setDampLimit(double0);
      propertiesMap0.setDefPatID("QA");
      propertiesMap0.setSummaryflag(true);
      propertiesMap0.getKwall();
      propertiesMap0.getPstep();
      propertiesMap0.getHydflag();
      propertiesMap0.getDuration();
      propertiesMap0.getViscos();
      // Undeclared exception!
      try { 
        PropertiesMap.StatFlag.valueOf("*<;4n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.StatFlag.*<;4n
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setDur((-1877L));
      propertiesMap0.setSummaryflag(true);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      propertiesMap0.setUnitsflag(propertiesMap_UnitsType0);
      propertiesMap0.setCheckFreq(0);
      propertiesMap0.setTraceNode("");
      Double double0 = propertiesMap0.getDiffus();
      propertiesMap0.setRQtol(double0);
      propertiesMap0.getEmax();
      boolean boolean0 = true;
      propertiesMap0.getObjectsNames(true);
      Double double1 = new Double(0);
      propertiesMap0.setViscos(double1);
      propertiesMap0.getDefPatId();
      propertiesMap0.getDuration();
      // Undeclared exception!
      try { 
        PropertiesMap.QualType.valueOf("org.addition.epanet.network.io.Keywords");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.QualType.org.addition.epanet.network.io.Keywords
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getEmax();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = propertiesMap0.getHacc();
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.FALSE;
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      propertiesMap0.setUnitsflag(propertiesMap_UnitsType0);
      propertiesMap0.setViscos(double0);
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.setSpGrav(double0);
      Double double1 = new Double(1.0E-7);
      propertiesMap0.setEmax(double1);
      Keywords.w_CHEM = null;
      Double double2 = new Double(0.001);
      propertiesMap0.setRQtol(double2);
      Keywords.w_METERS = "V";
      propertiesMap0.getEpatId();
      propertiesMap0.setEmax(double0);
      PropertiesMap propertiesMap1 = new PropertiesMap();
      Double double3 = propertiesMap1.getBulkOrder();
      propertiesMap0.setEpump(double3);
      propertiesMap0.getEmax();
      propertiesMap0.setDuration(1L);
      propertiesMap1.getMapFname();
      propertiesMap0.getRstart();
      Double double4 = propertiesMap0.getHexp();
      propertiesMap1.setDmult(double4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.QualType.parse("ChemName");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.QualType.parse("MaxIter");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap.QualType.parse("");
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_FULL = "";
      Double double0 = new Double(770.3987730826326);
      Keywords.w_YES = "BulkOrder";
      propertiesMap0.setRfactor(double0);
      propertiesMap0.getTstatflag();
      propertiesMap0.getUnitsflag();
      String string0 = "LBD";
      // Undeclared exception!
      try { 
        PropertiesMap.UnitsType.valueOf("WallOrder");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.UnitsType.WallOrder
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getUnitsflag();
      Keywords.w_CM = "Hydflag";
      propertiesMap0.setDefPatID("Hydflag");
      propertiesMap0.setMapFname("Lk");
      Keywords.w_NO = "Pstart";
      propertiesMap0.setRstep((-2410L));
      propertiesMap0.setAltReport("org.addition.epanet.network.PropertiesMap$FormType");
      propertiesMap0.setMaxCheck(798);
      PropertiesMap.QualType.values();
      Keywords.w_CHEM = "";
      propertiesMap0.setChemUnits("eI{S.2_?Mft");
      propertiesMap0.getKbulk();
      Double double0 = propertiesMap0.getHacc();
      propertiesMap0.setKbulk(double0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.get("ehDHZb1\"|;i6\n>7");
      // Undeclared exception!
      try { 
        propertiesMap0.put("", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double((-3400.7623093));
      propertiesMap0.setBulkOrder(double0);
      propertiesMap0.get("2_d1\"(;X");
      // Undeclared exception!
      try { 
        propertiesMap0.put("2_d1\"(;X", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertNotNull(propertiesMap0);
      
      Double double0 = propertiesMap0.getBulkOrder();
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      propertiesMap0.setMapFname("BulkOrder");
      propertiesMap0.setDampLimit(double0);
      propertiesMap0.getDcost();
      PropertiesMap.QualType.values();
      propertiesMap0.getDcost();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getDcost();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.AGE;
      propertiesMap0.setQualflag(propertiesMap_QualType0);
      propertiesMap0.getQualflag();
      propertiesMap0.getMapFname();
      Double double0 = new Double((-485.1));
      propertiesMap0.setRfactor(double0);
      Double double1 = propertiesMap0.getTankOrder();
      Keywords.w_AGE = "SpGrav";
      propertiesMap0.setKbulk(double1);
      propertiesMap0.setRfactor(double1);
      propertiesMap0.getDuration();
      Double double2 = new Double((-485.1));
      propertiesMap0.setDcost(double2);
      Keywords.w_METERS = null;
      Double double3 = propertiesMap0.getBulkOrder();
      propertiesMap0.setSpGrav(double3);
      propertiesMap0.getPageSize();
      Double double4 = new Double((-485.1));
      propertiesMap0.setDmult(double4);
      propertiesMap0.getAltReport();
      Double double5 = propertiesMap0.getHacc();
      Keywords.w_MGD = ";B6~";
      propertiesMap0.setBulkOrder(double5);
      propertiesMap0.setHexp(double4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRQtol();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertNotNull(propertiesMap0);
      
      String string0 = propertiesMap0.getDefPatId();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertNotNull(string0);
      assertEquals("1", string0);
      
      Keywords.w_CHEM = "Statflag";
      Double double0 = new Double((-965.652964970874));
      propertiesMap0.setDmult(double0);
      Double double1 = propertiesMap0.getRQtol();
      propertiesMap0.getTstatflag();
      propertiesMap0.setQtol(double1);
      Keywords.w_KPA = "";
      // Undeclared exception!
      try { 
        PropertiesMap.TstatType.valueOf("<d#u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.TstatType.<d#u
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.Hydtype propertiesMap_Hydtype0 = PropertiesMap.Hydtype.USE;
      propertiesMap0.setHydflag(propertiesMap_Hydtype0);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      propertiesMap0.setFormflag(propertiesMap_FormType0);
      propertiesMap0.setRstep(1856L);
      Keywords.w_FULL = "3Xwb;oj";
      Double double0 = new Double(0.0);
      propertiesMap0.setQtol(double0);
      propertiesMap0.getRfactor();
      propertiesMap0.setMaxCheck(2200);
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.FALSE;
      propertiesMap0.setNodeflag(propertiesMap_ReportFlag0);
      Keywords.w_METERS = "{8J@f<v{K\"EfS9rc#E";
      propertiesMap0.setMapFname("JU2>T FGR<");
      // Undeclared exception!
      try { 
        PropertiesMap.FlowUnitsType.valueOf("AVERAGE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.FlowUnitsType.AVERAGE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getTstatflag();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.MGD;
      Keywords.w_METERS = "HW";
      Keywords.w_MAX = "ChemUnits";
      propertiesMap0.setSummaryflag(false);
      Keywords.w_LPS = "MAXCHECK";
      propertiesMap0.setPstep(0L);
      propertiesMap0.setFlowflag(propertiesMap_FlowUnitsType0);
      Double double0 = propertiesMap0.getKbulk();
      PropertiesMap.QualType.values();
      PropertiesMap.PressUnitsType.values();
      propertiesMap0.setCtol(double0);
      propertiesMap0.getTstatflag();
      propertiesMap0.getTstatflag();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getHstep();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      Keywords.w_KPA = "STOP";
      propertiesMap0.setUnitsflag(propertiesMap_UnitsType0);
      PropertiesMap.Hydtype propertiesMap_Hydtype0 = PropertiesMap.Hydtype.SCRATCH;
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.FALSE;
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      propertiesMap0.setHydflag(propertiesMap_Hydtype0);
      Double double0 = new Double((-919.07));
      propertiesMap0.setPstart(0L);
      propertiesMap0.setQexp(double0);
      Keywords.w_CM = "Energyflag";
      propertiesMap0.setPstart(0L);
      Double double1 = propertiesMap0.getSpGrav();
      propertiesMap0.setSpGrav(double1);
      propertiesMap0.setSpGrav(double1);
      propertiesMap0.getPstart();
      propertiesMap0.getHydFname();
      propertiesMap0.setDuration(0L);
      propertiesMap0.setQtol(double0);
      propertiesMap0.setQexp(double0);
      propertiesMap0.getPstep();
      PropertiesMap.FlowUnitsType.values();
      Double double2 = new Double((-2904.701700311704));
      propertiesMap0.setQtol(double2);
      propertiesMap0.getHtol();
      propertiesMap0.getQualflag();
      Keywords.w_TRACE = "Tstart";
      propertiesMap0.getChemName();
      propertiesMap0.getEpatId();
      propertiesMap0.setDampLimit(double0);
      propertiesMap0.getTankOrder();
      propertiesMap0.getHstep();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRulestep();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = propertiesMap0.getBulkOrder();
      propertiesMap0.setHtol(double0);
      Keywords.w_AVG = "*M,RJ2OkbkY]elUr)L}";
      propertiesMap0.setRstart(714L);
      Keywords.w_NONE = "Emax";
      Keywords.w_LPS = "MaxIter";
      Keywords.w_NO = "Qualflag";
      propertiesMap0.setDefPatID("");
      Keywords.w_MLD = null;
      propertiesMap0.setQstep(0L);
      propertiesMap0.getNodeflag();
      propertiesMap0.getRulestep();
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.FALSE;
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.getPstart();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.t_CHEMICAL = "Emax";
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.AFD;
      propertiesMap0.setFlowflag(propertiesMap_FlowUnitsType0);
      propertiesMap0.setMaxCheck(0);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.METERS;
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      propertiesMap0.setUnitsflag(propertiesMap_UnitsType0);
      propertiesMap0.setMaxIter((-2297));
      Keywords.w_MIN = "Qexp";
      Keywords.w_FULL = "N<+7TXa~>bK#O`@|";
      propertiesMap0.setHstep(1L);
      propertiesMap0.getMapFname();
      propertiesMap0.setQstep(2149L);
      propertiesMap0.setExtraIter(49);
      Keywords.w_HW = "";
      Double double0 = new Double(49);
      propertiesMap0.setDmult(double0);
      // Undeclared exception!
      try { 
        PropertiesMap.FormType.valueOf("cG*Wio-?PS19Ni={`/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.FormType.cG*Wio-?PS19Ni={`/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getMapFname();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getNodeflag();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getTankOrder();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.LPS;
      propertiesMap0.setFlowflag(propertiesMap_FlowUnitsType0);
      propertiesMap0.setEpatID("MaxCheck");
      Double double0 = propertiesMap0.getSpGrav();
      Double double1 = propertiesMap0.getRfactor();
      Double double2 = propertiesMap0.getTankOrder();
      propertiesMap0.setClimit(double2);
      Double double3 = new Double((-1.0));
      propertiesMap0.setQtol(double3);
      Double double4 = Double.valueOf(1.0);
      propertiesMap0.setTankOrder(double4);
      Keywords.w_NO = "Rstart";
      propertiesMap0.setTstart(0L);
      propertiesMap0.setHexp(double0);
      propertiesMap0.setEpatID("s;,cD:1S_?4");
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.PSI;
      propertiesMap0.setHtol(double0);
      propertiesMap0.setDuration((-1L));
      propertiesMap0.setRQtol(double1);
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.NONE;
      propertiesMap0.setQualflag(propertiesMap_QualType0);
      propertiesMap0.setKwall(double0);
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      propertiesMap0.setDcost(double1);
      Double double5 = propertiesMap0.getSpGrav();
      propertiesMap0.getNodeflag();
      propertiesMap0.setTankOrder(double5);
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.SOME;
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      propertiesMap0.setRstep(0L);
      propertiesMap0.setSummaryflag(true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getMaxIter();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getDmult();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getMessageflag();
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.PSI;
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      Keywords.w_YES = "org.addition.epanet.network.PropertiesMap$PressUnitsType";
      propertiesMap0.getFormflag();
      propertiesMap0.getPstart();
      propertiesMap0.getSummaryflag();
      propertiesMap0.getDmult();
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.NONE;
      propertiesMap0.setQualflag(propertiesMap_QualType0);
      Keywords.w_NO = "M;_dSh";
      propertiesMap0.getMaxIter();
      propertiesMap0.setPstep(744L);
      propertiesMap0.getHexp();
      propertiesMap0.getRfactor();
      propertiesMap0.getRfactor();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getFormflag();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getHexp();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getDuration();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_MGD = "open";
      propertiesMap0.setDur((-1788L));
      Keywords.w_AVG = "LeGd&c9GWdp+";
      boolean boolean0 = true;
      propertiesMap0.setSummaryflag(true);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      propertiesMap0.setUnitsflag(propertiesMap_UnitsType0);
      propertiesMap0.setCheckFreq(0);
      propertiesMap0.setTraceNode("");
      Keywords.w_CFS = "Qexp";
      Keywords.w_NO = "T@h*(j:&fc}qL_~";
      Double double0 = propertiesMap0.getDiffus();
      propertiesMap0.setRQtol(double0);
      Double double1 = propertiesMap0.getRfactor();
      propertiesMap0.getObjectsNames(true);
      propertiesMap0.setViscos(double1);
      propertiesMap0.getDefPatId();
      propertiesMap0.getDuration();
      propertiesMap0.setAltReport("&SMle9!r");
      // Undeclared exception!
      try { 
        PropertiesMap.QualType.valueOf("[CURVES]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.QualType.[CURVES]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_KPA = "Dcost";
      propertiesMap0.setChemName("Dcost");
      propertiesMap0.setEpatID("hFH");
      Keywords.w_HW = "hFH";
      Keywords.u_MGperL = "CheckFreq";
      Double double0 = new Double((-1980.460022038989));
      propertiesMap0.setRQtol(double0);
      propertiesMap0.getFlowflag();
      propertiesMap0.setHstep(1L);
      propertiesMap0.setRQtol(double0);
      propertiesMap0.setWallOrder(double0);
      Double double1 = new Double(999.862783);
      propertiesMap0.setTankOrder(double1);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.AFD;
      propertiesMap0.setFlowflag(propertiesMap_FlowUnitsType0);
      propertiesMap0.setEpump(double1);
      // Undeclared exception!
      try { 
        PropertiesMap.QualType.valueOf("T2[h5?eD(jOJaF1vG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.QualType.T2[h5?eD(jOJaF1vG
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getEpatId();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      propertiesMap0.setFormflag(propertiesMap_FormType0);
      propertiesMap0.setDur((-149L));
      propertiesMap0.setPageSize((-2282));
      propertiesMap0.setPstart(0L);
      propertiesMap0.setMapFname((String) null);
      propertiesMap0.getHydflag();
      Double double0 = propertiesMap0.getSpGrav();
      propertiesMap0.setEmax(double0);
      // Undeclared exception!
      try { 
        PropertiesMap.TstatType.valueOf(")CNZ8W/)-i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.TstatType.)CNZ8W/)-i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setPageSize((-2365));
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.SOME;
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.FlowUnitsType.parse("cfs");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getStatflag();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      PropertiesMap.FlowUnitsType.parse("CheckFreq");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getPressflag();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setHydFname("");
      Keywords.w_FULL = "Tstatflag";
      Double double0 = new Double((-2316.2451795));
      propertiesMap0.setCheckFreq((-2301));
      propertiesMap0.setRfactor(double0);
      Keywords.w_AGE = "Ecost";
      propertiesMap0.setHydFname("Tstatflag");
      Keywords.w_CM = "";
      Keywords.w_PSI = null;
      propertiesMap0.setRulestep((-48L));
      Keywords.w_KPA = "";
      propertiesMap0.setDur((-48L));
      Double double1 = propertiesMap0.getRfactor();
      PropertiesMap.FlowUnitsType.parse("Summaryflag");
      propertiesMap0.getPressflag();
      propertiesMap0.getStatflag();
      propertiesMap0.setKbulk(double1);
      PropertiesMap.TstatType.values();
      propertiesMap0.getPressflag();
      propertiesMap0.getCtol();
      // Undeclared exception!
      try { 
        PropertiesMap.PressUnitsType.valueOf("Rfactor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.PressUnitsType.Rfactor
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setExtraIter(0);
      Keywords.w_MGD = "";
      Double double0 = propertiesMap0.getHtol();
      propertiesMap0.setWallOrder(double0);
      Double double1 = new Double(0);
      propertiesMap0.setCtol(double1);
      PropertiesMap.TstatType propertiesMap_TstatType0 = PropertiesMap.TstatType.AVG;
      propertiesMap0.setTstatflag(propertiesMap_TstatType0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(0.0);
      propertiesMap0.setHacc(double0);
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      Double double1 = new Double(0.0);
      propertiesMap0.setViscos(double1);
      Keywords.w_HW = "Dmult";
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      propertiesMap0.setEnergyflag(true);
      Keywords.w_YES = "BulkOrder";
      propertiesMap0.setRQtol(double0);
      Double double2 = propertiesMap0.getHacc();
      propertiesMap0.setTankOrder(double2);
      Keywords.w_DW = "8";
      Double double3 = new Double(138.5745428571908);
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.FALSE;
      Double double4 = new Double(2035.0);
      propertiesMap0.setDmult(double4);
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.setKbulk(double3);
      propertiesMap0.setDuration((-2823L));
      propertiesMap0.getKbulk();
      propertiesMap0.setDur((-2823L));
      Double double5 = propertiesMap0.getKbulk();
      propertiesMap0.setDcost(double5);
      propertiesMap0.getPageSize();
      propertiesMap0.getChemName();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getHydFname();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getPageSize();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setMessageflag(false);
      propertiesMap0.setTraceNode("g!i0(I5.CY");
      propertiesMap0.getHydFname();
      propertiesMap0.getPageSize();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_PSI = "Viscos";
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      propertiesMap0.setRulestep(0L);
      propertiesMap0.setPressflag(propertiesMap_PressUnitsType0);
      // Undeclared exception!
      try { 
        propertiesMap0.put("N+F]S", "Kwall");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchFieldException: TYPE
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getQualflag();
      propertiesMap0.getHydflag();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getPstep();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(0.0);
      propertiesMap0.setCtol(double0);
      propertiesMap0.setDampLimit(double0);
      propertiesMap0.setDefPatID("QA");
      propertiesMap0.setSummaryflag(true);
      propertiesMap0.getKwall();
      propertiesMap0.getPstep();
      propertiesMap0.getHydflag();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getViscos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = propertiesMap0.getCtol();
      propertiesMap0.setQexp(double0);
      propertiesMap0.setRstart(0L);
      propertiesMap0.setEpatID("7@hJ:-Qj");
      PropertiesMap.TstatType propertiesMap_TstatType0 = PropertiesMap.TstatType.AVG;
      propertiesMap0.setTstatflag(propertiesMap_TstatType0);
      propertiesMap0.setHydFname("");
      propertiesMap0.setAltReport("r=$s6?:");
      propertiesMap0.setHexp(double0);
      propertiesMap0.setMaxCheck(23);
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.FALSE;
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.setWallOrder(double0);
      Double double1 = propertiesMap0.getViscos();
      Keywords.w_CM = "MapFname";
      propertiesMap0.setKwall(double1);
      propertiesMap0.getQualflag();
      Double double2 = new Double((-2864.682832822005));
      propertiesMap0.setEcost(double2);
      propertiesMap0.getDiffus();
      propertiesMap0.getHacc();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(0.0);
      propertiesMap0.setHacc(double0);
      propertiesMap0.setPstep((-3165L));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getObjectsNames(false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getKbulk();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getChemName();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PropertiesMap.TstatType.values();
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double((-542.0));
      PropertiesMap.StatFlag propertiesMap_StatFlag0 = PropertiesMap.StatFlag.TRUE;
      propertiesMap0.setStatflag(propertiesMap_StatFlag0);
      propertiesMap0.setChemUnits("f");
      propertiesMap0.setBulkOrder(double0);
      propertiesMap0.setQexp(double0);
      Double double1 = new Double((-542.0));
      propertiesMap0.setEnergyflag(false);
      propertiesMap0.setEmax(double1);
      propertiesMap0.setQstep(3600L);
      propertiesMap0.getChemName();
      propertiesMap0.setAltReport("Chemical");
      // Undeclared exception!
      try { 
        PropertiesMap.PressUnitsType.valueOf("Kwall");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.PressUnitsType.Kwall
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Double double0 = new Double(2273.95708786);
      propertiesMap0.getObjectsNames(false);
      Double double1 = new Double(0.0);
      propertiesMap0.setDmult(double1);
      propertiesMap0.setDur(0L);
      propertiesMap0.setHstep(0L);
      propertiesMap0.setQexp(double0);
      propertiesMap0.setChemUnits("9");
      propertiesMap0.getExtraIter();
      propertiesMap0.getKbulk();
      propertiesMap0.getDiffus();
      PropertiesMap.PressUnitsType.values();
      propertiesMap0.setTraceNode("9");
      PropertiesMap.UnitsType.values();
      propertiesMap0.getSummaryflag();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getObjectsNames(true);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      Keywords.w_IMGD = null;
      Double double0 = new Double((-4433.0));
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.NONE;
      propertiesMap0.setQualflag(propertiesMap_QualType0);
      propertiesMap0.setQexp(double0);
      Keywords.u_MGperL = "";
      propertiesMap0.getObjectsNames(true);
      propertiesMap0.setTraceNode("S");
      Double double1 = new Double(1.0E-4);
      propertiesMap0.setCtol(double1);
      propertiesMap0.getSpGrav();
      // Undeclared exception!
      try { 
        PropertiesMap.UnitsType.valueOf("Kbulk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.UnitsType.Kbulk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.setTstart((-1L));
      Double double0 = propertiesMap0.getDampLimit();
      propertiesMap0.setQexp(double0);
      // Undeclared exception!
      try { 
        PropertiesMap.FlowUnitsType.valueOf("Qtol");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.addition.epanet.network.PropertiesMap.FlowUnitsType.Qtol
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getDiffus();
      propertiesMap0.getDampLimit();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getSummaryflag();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getPstart();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getRstart();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getQtol();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getFlowflag();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      propertiesMap0.getEpump();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotNull(propertiesMap0);
      
      Keywords.w_GPM = "/*{[f6!\" Oq&s\"";
      propertiesMap0.setRstep(1959L);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      
      propertiesMap0.setDur((-2569L));
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      
      Keywords.w_NO = null;
      PropertiesMap propertiesMap1 = new PropertiesMap();
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertEquals(200, (int)propertiesMap1.getMaxIter());
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap1.getDmult(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals("", propertiesMap1.getMapFname());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertNotNull(propertiesMap1);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      propertiesMap0.setMaxIter((-918));
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      
      Keywords.w_MIN = "Pstart";
      Double double0 = propertiesMap1.getDampLimit();
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertEquals(200, (int)propertiesMap1.getMaxIter());
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap1.getDmult(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals("", propertiesMap1.getMapFname());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertNotNull(double0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      assertEquals(0.0, (double)double0, 0.01);
      
      propertiesMap0.setKwall(double0);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertEquals(200, (int)propertiesMap1.getMaxIter());
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap1.getDmult(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals("", propertiesMap1.getMapFname());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      Double double1 = propertiesMap0.getDiffus();
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotNull(double1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0E10), (double)double1, 0.01);
      
      Keywords.u_MGperL = "";
      PropertiesMap propertiesMap2 = new PropertiesMap();
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotNull(propertiesMap2);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      
      Double double2 = propertiesMap2.getEpump();
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotNull(double2);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(75.0, (double)double2, 0.01);
      
      propertiesMap0.setViscos(double2);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap0, propertiesMap2);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap2));
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Keywords.w_CM = "Diffus";
      propertiesMap0.setQstep((-2569L));
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getQstep());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap2);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap2));
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      
      Long long0 = propertiesMap0.getRstart();
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getQstep());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap2);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotNull(long0);
      assertFalse(propertiesMap0.equals((Object)propertiesMap2));
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertEquals(0L, (long)long0);
      
      Keywords.u_MGperL = "Linkflag";
      propertiesMap0.setBulkOrder((Double) null);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertNull(propertiesMap0.getBulkOrder());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getQstep());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap2);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap2));
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      
      Boolean boolean0 = propertiesMap0.getSummaryflag();
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getDuration());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertNull(propertiesMap0.getBulkOrder());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(1959L, (long)propertiesMap0.getRstep());
      assertEquals((-918), (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals((-2569L), (long)propertiesMap0.getQstep());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertNotSame(propertiesMap0, propertiesMap2);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotNull(boolean0);
      assertFalse(propertiesMap0.equals((Object)propertiesMap2));
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertTrue(boolean0);
      
      propertiesMap2.setEnergyflag(false);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = propertiesMap2.getFlowflag();
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap_FlowUnitsType0);
      
      Double double3 = propertiesMap2.getQtol();
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertEquals(1.0E-4, (double)double3, 0.01);
      
      Long long1 = propertiesMap2.getPstart();
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals("", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals("", propertiesMap2.getHydFname());
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotNull(long1);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertNotNull(propertiesMap0);
      
      Double double0 = propertiesMap0.getClimit();
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertNotNull(propertiesMap0);
      
      Integer integer0 = propertiesMap0.getExtraIter();
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertNotNull(propertiesMap0);
      
      Double double0 = propertiesMap0.getKwall();
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertNotNull(propertiesMap0);
      
      Keywords.w_FULL = "z>";
      propertiesMap0.setMapFname("/4CbJb3r#)KXf");
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      
      Keywords.w_FULL = "EpatID";
      propertiesMap0.setRulestep(3600L);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(3600L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      
      String string0 = propertiesMap0.getDefPatId();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(3600L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertNotNull(string0);
      assertEquals("1", string0);
      
      PropertiesMap propertiesMap1 = new PropertiesMap();
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(200, (int)propertiesMap1.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(1.0, propertiesMap1.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotNull(propertiesMap1);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      Keywords.w_METERS = "Ecost";
      Double double0 = new Double((-1648.59507582307));
      assertNotNull(double0);
      assertEquals((-1648.59507582307), (double)double0, 0.01);
      
      propertiesMap1.setDmult(double0);
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(200, (int)propertiesMap1.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      propertiesMap1.setMaxIter(1);
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals("1", propertiesMap1.getDefPatId());
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      Keywords.w_YES = "Rfactor";
      propertiesMap0.setTraceNode((String) null);
      assertNull(propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(3600L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertNotSame(propertiesMap0, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      
      propertiesMap1.setDefPatID("DefPatID");
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(1.0E-4, propertiesMap1.getQtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      propertiesMap1.setQtol((Double) null);
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertNull(propertiesMap1.getQtol());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      propertiesMap0.setKbulk((Double) null);
      assertNull(propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(3600L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertNull(propertiesMap0.getKbulk());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertNotSame(propertiesMap0, propertiesMap1);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      
      Double double1 = propertiesMap1.getKwall();
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertNull(propertiesMap1.getQtol());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      assertEquals(0.0, (double)double1, 0.01);
      
      propertiesMap0.setTankOrder(double1);
      assertNull(propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("/4CbJb3r#)KXf", propertiesMap0.getMapFname());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(3600L, (long)propertiesMap0.getRulestep());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(0.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertNull(propertiesMap0.getKbulk());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertNull(propertiesMap1.getQtol());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap0, propertiesMap1);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(propertiesMap0.equals((Object)propertiesMap1));
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      
      Integer integer0 = propertiesMap1.getExtraIter();
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1.0E10), propertiesMap1.getDiffus(), 0.01);
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertNull(propertiesMap1.getQtol());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertNotNull(integer0);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      assertEquals((-1), (int)integer0);
      
      PropertiesMap propertiesMap2 = new PropertiesMap();
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap2.getHydflag());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertNotNull(propertiesMap2);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      
      PropertiesMap.Hydtype propertiesMap_Hydtype0 = PropertiesMap.Hydtype.SAVE;
      propertiesMap2.setHydflag(propertiesMap_Hydtype0);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SAVE, propertiesMap2.getHydflag());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      
      Double double2 = propertiesMap2.getClimit();
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SAVE, propertiesMap2.getHydflag());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotNull(double2);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      propertiesMap1.setDiffus(double2);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SAVE, propertiesMap2.getHydflag());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertEquals(0.0, propertiesMap1.getEcost(), 0.01);
      assertEquals(75.0, propertiesMap1.getEpump(), 0.01);
      assertEquals("", propertiesMap1.getTraceNode());
      assertEquals(5.0E-4, propertiesMap1.getHtol(), 0.01);
      assertEquals(10, (int)propertiesMap1.getMaxCheck());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap1.getHydflag());
      assertFalse(propertiesMap1.getEnergyflag());
      assertEquals(0.0, propertiesMap1.getDiffus(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap1.getUnitsflag());
      assertEquals(0, (int)propertiesMap1.getPageSize());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap1.getFormflag());
      assertEquals(0L, (long)propertiesMap1.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getNodeflag());
      assertTrue(propertiesMap1.getSummaryflag());
      assertEquals(0L, (long)propertiesMap1.getPstart());
      assertEquals(0.0, propertiesMap1.getHexp(), 0.01);
      assertEquals("", propertiesMap1.getAltReport());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap1.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap1.getStatflag());
      assertEquals((-1), (int)propertiesMap1.getExtraIter());
      assertNull(propertiesMap1.getQtol());
      assertEquals(0.0, propertiesMap1.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getEmax(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap1.getPressflag());
      assertEquals(1.0, propertiesMap1.getTankOrder(), 0.01);
      assertEquals((-1648.59507582307), propertiesMap1.getDmult(), 0.01);
      assertEquals("", propertiesMap1.getEpatId());
      assertEquals(0L, (long)propertiesMap1.getTstart());
      assertEquals(0L, (long)propertiesMap1.getRstart());
      assertEquals(2, (int)propertiesMap1.getCheckFreq());
      assertEquals(2.0, propertiesMap1.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap1.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap1.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getRstep());
      assertEquals(0.0, propertiesMap1.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap1.getChemUnits());
      assertEquals("DefPatID", propertiesMap1.getDefPatId());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap1.getFlowflag());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap1.getQualflag());
      assertEquals(0L, (long)propertiesMap1.getQstep());
      assertEquals(3600L, (long)propertiesMap1.getPstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap1.getTstatflag());
      assertEquals(0.0, propertiesMap1.getKwall(), 0.01);
      assertEquals(3600L, (long)propertiesMap1.getHstep());
      assertEquals(0.001, propertiesMap1.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap1.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap1.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap1.getChemName());
      assertEquals(1.0, propertiesMap1.getBulkOrder(), 0.01);
      assertEquals(1, (int)propertiesMap1.getMaxIter());
      assertEquals("", propertiesMap1.getHydFname());
      assertEquals("", propertiesMap1.getMapFname());
      assertTrue(propertiesMap1.getMessageflag());
      assertEquals(0.0, propertiesMap1.getKbulk(), 0.01);
      assertEquals(0L, (long)propertiesMap1.getDuration());
      assertEquals(1.0, propertiesMap1.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap1.getViscos(), 0.01);
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotSame(propertiesMap1, propertiesMap0);
      assertNotSame(propertiesMap1, propertiesMap2);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(propertiesMap1.equals((Object)propertiesMap0));
      assertFalse(propertiesMap1.equals((Object)propertiesMap2));
      
      Double double3 = propertiesMap2.getBulkOrder();
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals(1.0, propertiesMap2.getWallOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SAVE, propertiesMap2.getHydflag());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertNotNull(double3);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1.0, (double)double3, 0.01);
      
      Keywords.w_IMGD = "MaxIter";
      propertiesMap2.setWallOrder((Double) null);
      assertEquals("", propertiesMap2.getMapFname());
      assertEquals(0.0, propertiesMap2.getEcost(), 0.01);
      assertEquals("", propertiesMap2.getTraceNode());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap2.getUnitsflag());
      assertEquals(5.0E-4, propertiesMap2.getHtol(), 0.01);
      assertEquals("", propertiesMap2.getAltReport());
      assertEquals(1.0, propertiesMap2.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getLinkflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap2.getStatflag());
      assertEquals((-1), (int)propertiesMap2.getExtraIter());
      assertEquals(75.0, propertiesMap2.getEpump(), 0.01);
      assertEquals(3600L, (long)propertiesMap2.getHstep());
      assertEquals("1", propertiesMap2.getDefPatId());
      assertEquals((-1.0E10), propertiesMap2.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap2.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap2.getDcost(), 0.01);
      assertEquals((-1.0E10), propertiesMap2.getCtol(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap2.getTstatflag());
      assertNull(propertiesMap2.getWallOrder());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap2.getFormflag());
      assertEquals("mg/L", propertiesMap2.getChemUnits());
      assertEquals(3600L, (long)propertiesMap2.getPstep());
      assertEquals(2.0, propertiesMap2.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap2.getEmax(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getDuration());
      assertEquals(0L, (long)propertiesMap2.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap2.getPressflag());
      assertEquals("", propertiesMap2.getEpatId());
      assertEquals(0L, (long)propertiesMap2.getTstart());
      assertEquals(3600L, (long)propertiesMap2.getRstep());
      assertEquals(0.0, propertiesMap2.getClimit(), 0.01);
      assertEquals(1.0E-7, propertiesMap2.getRQtol(), 0.01);
      assertEquals(1.0, propertiesMap2.getTankOrder(), 0.01);
      assertEquals(2, (int)propertiesMap2.getCheckFreq());
      assertEquals((-1.0E10), propertiesMap2.getDiffus(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SAVE, propertiesMap2.getHydflag());
      assertEquals(1.0, propertiesMap2.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap2.getChemName());
      assertTrue(propertiesMap2.getMessageflag());
      assertEquals("", propertiesMap2.getHydFname());
      assertTrue(propertiesMap2.getSummaryflag());
      assertEquals(0L, (long)propertiesMap2.getPstart());
      assertEquals(0.0, propertiesMap2.getHexp(), 0.01);
      assertEquals(0.001, propertiesMap2.getHacc(), 0.01);
      assertEquals(10, (int)propertiesMap2.getMaxCheck());
      assertEquals(0.0, propertiesMap2.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap2.getSpGrav(), 0.01);
      assertEquals(1.0, propertiesMap2.getDmult(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap2.getFlowflag());
      assertEquals(0.0, propertiesMap2.getDampLimit(), 0.01);
      assertEquals(0, (int)propertiesMap2.getPageSize());
      assertFalse(propertiesMap2.getEnergyflag());
      assertEquals(200, (int)propertiesMap2.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap2.getNodeflag());
      assertEquals(0L, (long)propertiesMap2.getRulestep());
      assertEquals(1.0E-4, propertiesMap2.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap2.getQstep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap2.getQualflag());
      assertNotSame(propertiesMap2, propertiesMap0);
      assertNotSame(propertiesMap2, propertiesMap1);
      assertFalse(propertiesMap2.equals((Object)propertiesMap0));
      assertFalse(propertiesMap2.equals((Object)propertiesMap1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("", propertiesMap0.getTraceNode());
      assertNotNull(propertiesMap0);
      
      Double double0 = propertiesMap0.getHtol();
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("", propertiesMap0.getTraceNode());
      assertNotNull(double0);
      assertEquals(5.0E-4, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertNotNull(propertiesMap0);
      
      Double double0 = propertiesMap0.getWallOrder();
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertNotNull(propertiesMap0);
      
      Boolean boolean0 = propertiesMap0.getEnergyflag();
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertNotNull(propertiesMap0);
      
      Integer integer0 = propertiesMap0.getCheckFreq();
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(propertiesMap0);
      
      PropertiesMap.Hydtype propertiesMap_Hydtype0 = PropertiesMap.Hydtype.SCRATCH;
      propertiesMap0.setHydflag(propertiesMap_Hydtype0);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      
      Double double0 = propertiesMap0.getWallOrder();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(5.0E-4, propertiesMap0.getHtol(), 0.01);
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      propertiesMap0.setHtol(double0);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      
      Keywords.w_AFD = "[BACKDROP]";
      Keywords.w_CMH = "";
      Boolean boolean0 = propertiesMap0.getEnergyflag();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Keywords.w_FULL = "RQtol";
      Double double1 = propertiesMap0.getWallOrder();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getCtol(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      propertiesMap0.setCtol(double1);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      
      Double double2 = propertiesMap0.getHtol();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(double2);
      assertEquals(1.0, (double)double2, 0.01);
      
      Integer integer0 = propertiesMap0.getCheckFreq();
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals("", propertiesMap0.getEpatId());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      propertiesMap0.setEpatID("[BACKDROP]");
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("[BACKDROP]", propertiesMap0.getEpatId());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0L, (long)propertiesMap0.getPstart());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      
      PropertiesMap.PressUnitsType[] propertiesMap_PressUnitsTypeArray0 = PropertiesMap.PressUnitsType.values();
      assertNotNull(propertiesMap_PressUnitsTypeArray0);
      assertEquals(3, propertiesMap_PressUnitsTypeArray0.length);
      
      PropertiesMap.ReportFlag[] propertiesMap_ReportFlagArray0 = PropertiesMap.ReportFlag.values();
      assertNotNull(propertiesMap_ReportFlagArray0);
      assertEquals(3, propertiesMap_ReportFlagArray0.length);
      
      propertiesMap0.setPstart(3600L);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstart());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("[BACKDROP]", propertiesMap0.getEpatId());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getLinkflag());
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
      
      PropertiesMap.ReportFlag propertiesMap_ReportFlag0 = PropertiesMap.ReportFlag.SOME;
      propertiesMap0.setLinkflag(propertiesMap_ReportFlag0);
      assertEquals(1.0E-7, propertiesMap0.getRQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getDuration());
      assertEquals("", propertiesMap0.getHydFname());
      assertEquals(0.0, propertiesMap0.getEmax(), 0.01);
      assertEquals(2.0, propertiesMap0.getQexp(), 0.01);
      assertEquals(0.0, propertiesMap0.getDampLimit(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getPstart());
      assertEquals(1.0, propertiesMap0.getDmult(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getRstart());
      assertEquals(PropertiesMap.PressUnitsType.PSI, propertiesMap0.getPressflag());
      assertEquals(1.0, propertiesMap0.getRfactor(), 0.01);
      assertEquals("mg/L", propertiesMap0.getChemUnits());
      assertEquals("[BACKDROP]", propertiesMap0.getEpatId());
      assertTrue(propertiesMap0.getMessageflag());
      assertEquals(2, (int)propertiesMap0.getCheckFreq());
      assertEquals(0.0, propertiesMap0.getClimit(), 0.01);
      assertEquals(1.0, propertiesMap0.getTankOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getDcost(), 0.01);
      assertEquals(PropertiesMap.Hydtype.SCRATCH, propertiesMap0.getHydflag());
      assertEquals(1.0, propertiesMap0.getCtol(), 0.01);
      assertEquals(PropertiesMap.FormType.HW, propertiesMap0.getFormflag());
      assertEquals(0.0, propertiesMap0.getKbulk(), 0.01);
      assertEquals("Chemical", propertiesMap0.getChemName());
      assertEquals(PropertiesMap.TstatType.SERIES, propertiesMap0.getTstatflag());
      assertEquals(0L, (long)propertiesMap0.getTstart());
      assertEquals(3600L, (long)propertiesMap0.getRstep());
      assertEquals(3600L, (long)propertiesMap0.getPstep());
      assertEquals(1.0, propertiesMap0.getHtol(), 0.01);
      assertEquals(PropertiesMap.UnitsType.US, propertiesMap0.getUnitsflag());
      assertEquals(0L, (long)propertiesMap0.getRulestep());
      assertEquals("", propertiesMap0.getTraceNode());
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
      assertEquals(0.0, propertiesMap0.getEcost(), 0.01);
      assertEquals(3600L, (long)propertiesMap0.getHstep());
      assertEquals(0.001, propertiesMap0.getHacc(), 0.01);
      assertEquals(0.0, propertiesMap0.getKwall(), 0.01);
      assertEquals((-1.0E10), propertiesMap0.getViscos(), 0.01);
      assertEquals("", propertiesMap0.getAltReport());
      assertEquals(1.0, propertiesMap0.getBulkOrder(), 0.01);
      assertEquals("", propertiesMap0.getMapFname());
      assertEquals(PropertiesMap.StatFlag.FALSE, propertiesMap0.getStatflag());
      assertEquals((-1), (int)propertiesMap0.getExtraIter());
      assertEquals(75.0, propertiesMap0.getEpump(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.FALSE, propertiesMap0.getNodeflag());
      assertEquals(200, (int)propertiesMap0.getMaxIter());
      assertEquals("1", propertiesMap0.getDefPatId());
      assertEquals(1.0, propertiesMap0.getSpGrav(), 0.01);
      assertEquals(PropertiesMap.QualType.NONE, propertiesMap0.getQualflag());
      assertTrue(propertiesMap0.getSummaryflag());
      assertEquals((-1.0E10), propertiesMap0.getDiffus(), 0.01);
      assertEquals(PropertiesMap.ReportFlag.SOME, propertiesMap0.getLinkflag());
      assertEquals(1.0E-4, propertiesMap0.getQtol(), 0.01);
      assertEquals(0L, (long)propertiesMap0.getQstep());
      assertEquals(PropertiesMap.FlowUnitsType.GPM, propertiesMap0.getFlowflag());
      assertEquals(0, (int)propertiesMap0.getPageSize());
      assertFalse(propertiesMap0.getEnergyflag());
      assertEquals(10, (int)propertiesMap0.getMaxCheck());
      assertEquals(0.0, propertiesMap0.getHexp(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      // Undeclared exception!
      try { 
        propertiesMap0.put("pTg", "pTg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchFieldException: TYPE
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PropertiesMap propertiesMap0 = new PropertiesMap();
      // Undeclared exception!
      try { 
        propertiesMap0.put("o|FHQ.UM8T?E", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchFieldException: TYPE
         //
         verifyException("org.addition.epanet.network.PropertiesMap", e);
      }
  }
}
