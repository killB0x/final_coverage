/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:25:14 GMT 2022
 */

package org.addition.epanet.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.addition.epanet.network.FieldsMap;
import org.addition.epanet.network.Network;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Control;
import org.addition.epanet.network.structures.Curve;
import org.addition.epanet.network.structures.Label;
import org.addition.epanet.network.structures.Link;
import org.addition.epanet.network.structures.Node;
import org.addition.epanet.network.structures.Pattern;
import org.addition.epanet.network.structures.Pump;
import org.addition.epanet.network.structures.Rule;
import org.addition.epanet.network.structures.Tank;
import org.addition.epanet.network.structures.Valve;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Network_ESTest extends Network_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Network.SectType network_SectType0 = Network.SectType.parse("[DEMANDS]");
      assertEquals(Network.SectType.DEMANDS, network_SectType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Network network0 = new Network();
      Pattern pattern0 = new Pattern();
      network0.addPattern("yh.{QOY8+\"r'", pattern0);
      assertEquals("yh.{QOY8+\"r'", pattern0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      tank0.setReportFlag(true);
      network0.addTank("{[BR/0(n3pVQZZa]=Z", tank0);
      Tank tank1 = (Tank)network0.getNode("{[BR/0(n3pVQZZa]=Z");
      assertEquals(0.0, tank1.getHmax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      tank0.setInitDemand((-2506.0682162411));
      network0.addTank("", tank0);
      Node node0 = network0.getNode("");
      assertEquals((-2506.0682162411), node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPipe("", pump0);
      pump0.setReportFlag(true);
      Pump pump1 = (Pump)network0.getLink("");
      assertEquals(0.0, pump1.getEcost(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      pump0.setLenght((-1.0));
      network0.addPipe("BACKDROP", pump0);
      Link link0 = network0.getLink("BACKDROP");
      assertEquals(0.0, link0.getKb(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      pump0.setKw(304.8);
      network0.addPipe("", pump0);
      Pump pump1 = (Pump)network0.getLink("");
      assertEquals(0.0, pump1.getFlowCoefficient(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      pump0.setKw((-2139.363174484));
      network0.addPipe("", pump0);
      Pump pump1 = (Pump)network0.getLink("");
      assertEquals(0.0, pump1.getHmax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      valve0.setKm(151.549810862);
      network0.addValve("", valve0);
      Link link0 = network0.getLink("");
      assertEquals(Link.LinkType.CV, link0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      pump0.setKb(60.0);
      network0.addPipe("", pump0);
      Link link0 = network0.getLink("");
      assertEquals(Link.StatType.XHEAD, link0.getStat());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      double[] doubleArray0 = new double[5];
      valve0.initResistance(propertiesMap_FormType0, (Double) doubleArray0[3]);
      network0.addValve("", valve0);
      Link link0 = network0.getLink("");
      assertEquals(0.0, link0.getRoughness(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      valve0.setNUDiameter(propertiesMap_UnitsType0, 722.6866283491858);
      network0.addValve("org.addition.epanet.network.FieldsMap", valve0);
      Link link0 = network0.getLink("org.addition.epanet.network.FieldsMap");
      assertEquals(Link.StatType.XHEAD, link0.getStat());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      pump0.setNUDiameter(propertiesMap_UnitsType0, (-1692.31));
      network0.addPipe("BACKDROP", pump0);
      Link link0 = network0.getLink("BACKDROP");
      assertSame(link0, pump0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addValve("yrU%y*Uur ", (Valve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addTank("", (Tank) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addRule((Rule) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addPump("", (Pump) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addPipe((String) null, (Link) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addJunction("xqC>EHdlK", (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addCurve("", (Curve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        network0.addPattern("O", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.Network", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Network network0 = new Network();
      PropertiesMap propertiesMap0 = network0.getPropertiesMap();
      assertEquals(1.0, propertiesMap0.getWallOrder(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      network0.addValve("", valve0);
      String string0 = network0.toString();
      assertEquals(" Network\n  Nodes : 0\n  Links : 1\n  Pattern : 1\n  Curves : 0\n  Controls : 0\n  Labels : 0\n  Rules : 0\n  Valves : 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPump("", pump0);
      String string0 = network0.toString();
      assertEquals(" Network\n  Nodes : 0\n  Links : 1\n  Pattern : 1\n  Curves : 0\n  Controls : 0\n  Labels : 0\n  Rules : 0\n  Pumps : 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      network0.addTank("!l", tank0);
      String string0 = network0.toString();
      assertEquals(" Network\n  Nodes : 1\n  Links : 0\n  Pattern : 1\n  Curves : 0\n  Controls : 0\n  Labels : 0\n  Rules : 0\n  Tanks : 1\n", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPipe("org.addition.epanet.network.FieldsMap$Type", pump0);
      Collection<Valve> collection0 = network0.getValves();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      network0.addPipe("=]>'f|+u;", valve0);
      network0.getValves();
      Collection<Valve> collection0 = network0.getValves();
      assertTrue(collection0.contains(valve0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Network network0 = new Network();
      Node node0 = new Node();
      network0.addJunction("Energyflag", node0);
      Collection<Tank> collection0 = network0.getTanks();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      network0.addTank("!l", tank0);
      Collection<Tank> collection0 = network0.getTanks();
      assertTrue(collection0.contains(tank0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Network network0 = new Network();
      Rule rule0 = network0.getRule("F?'9R;");
      assertNull(rule0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPipe("0@6", pump0);
      Collection<Pump> collection0 = network0.getPumps();
      assertTrue(collection0.contains(pump0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Network network0 = new Network();
      Collection<Pump> collection0 = network0.getPumps();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPump("org.addition.epanet.network.FieldsMap$Type", pump0);
      Collection<Pump> collection0 = network0.getPumps();
      assertTrue(collection0.contains(pump0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Network network0 = new Network();
      Pattern pattern0 = network0.getPattern("O");
      assertNull(pattern0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Network network0 = new Network();
      Pattern pattern0 = network0.getPattern("");
      assertEquals("", pattern0.getId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Network network0 = new Network();
      Node node0 = network0.getNode("=]>'f|+u;");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Network network0 = new Network();
      Link link0 = network0.getLink("MB");
      assertNull(link0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      network0.addTank("", tank0);
      Collection<Node> collection0 = network0.getJunctions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Network network0 = new Network();
      Node node0 = new Node();
      network0.addJunction("", node0);
      network0.getJunctions();
      Collection<Node> collection0 = network0.getJunctions();
      assertTrue(collection0.contains(node0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Network network0 = new Network();
      Curve curve0 = network0.getCurve("(wK(6qE%uK0]ShGTdj");
      assertNull(curve0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      network0.addValve("RULES", valve0);
      network0.addValve("0?wA@{~/;N", valve0);
      assertEquals(0.0, valve0.getKw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      network0.addTank("", tank0);
      network0.addTank("", tank0);
      assertNull(tank0.getMixModel());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPump("", pump0);
      network0.addPump("", pump0);
      assertEquals(0.0, pump0.getKb(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Network.SectType network_SectType0 = Network.SectType.parse("[VALVES]");
      assertEquals(Network.SectType.VALVES, network_SectType0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Network.SectType.parse("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Network network0 = new Network();
      Collection<Link> collection0 = network0.getLinks();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Network network0 = new Network();
      List<Label> list0 = network0.getLabels();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Network network0 = new Network();
      Collection<Curve> collection0 = network0.getCurves();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Network network0 = new Network();
      network0.updatedUnitsProperty();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Network network0 = new Network();
      Network network1 = network0.clone();
      assertNotSame(network1, network0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Network network0 = new Network();
      network0.resetRules();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Network network0 = new Network();
      Valve valve0 = new Valve();
      network0.addPipe("=]>'f|+u;", valve0);
      Collection<Pump> collection0 = network0.getPumps();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Network network0 = new Network();
      Tank tank0 = new Tank();
      network0.addJunction("PageSize", tank0);
      Collection<Tank> collection0 = network0.getTanks();
      assertTrue(collection0.contains(tank0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Network network0 = new Network();
      Curve curve0 = new Curve();
      network0.addCurve(" Network\n  Nodes : 0\n  Links : 0\n  Pattern : 1\n  Curves : 0\n  Controls : 0\n  Labels : 0\n  Rules : 0\n", curve0);
      Curve curve1 = network0.getCurve(" Network\n  Nodes : 0\n  Links : 0\n  Pattern : 1\n  Curves : 0\n  Controls : 0\n  Labels : 0\n  Rules : 0\n");
      assertSame(curve1, curve0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Network network0 = new Network();
      Control control0 = new Control();
      network0.addControl(control0);
      Control[] controlArray0 = network0.getControls();
      assertEquals(1, controlArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Network network0 = new Network();
      List<String> list0 = network0.getTitleText();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Network network0 = new Network();
      Rule rule0 = new Rule();
      network0.addRule(rule0);
      Rule rule1 = network0.getRule("");
      assertSame(rule1, rule0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Network network0 = new Network();
      network0.resetControls();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Network network0 = new Network();
      Collection<Rule> collection0 = network0.getRules();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Network network0 = new Network();
      FieldsMap fieldsMap0 = network0.getFieldsMap();
      assertNotNull(fieldsMap0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Network network0 = new Network();
      Control[] controlArray0 = network0.getControls();
      assertEquals(0, controlArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Network network0 = new Network();
      Collection<Pattern> collection0 = network0.getPatterns();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Network network0 = new Network();
      Collection<Node> collection0 = network0.getNodes();
      assertNotNull(collection0);
  }
}
