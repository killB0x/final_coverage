/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:48:17 GMT 2022
 */

package org.addition.epanet.network.io.input;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.converters.MarshallingContext;
import com.thoughtworks.xstream.converters.UnmarshallingContext;
import com.thoughtworks.xstream.io.HierarchicalStreamReader;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import java.io.File;
import java.util.logging.Logger;
import org.addition.epanet.network.Network;
import org.addition.epanet.network.io.input.XMLParser;
import org.addition.epanet.util.DblList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XMLParser_ESTest extends XMLParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XMLParser.DoubleListConverter xMLParser_DoubleListConverter0 = new XMLParser.DoubleListConverter();
      HierarchicalStreamReader hierarchicalStreamReader0 = mock(HierarchicalStreamReader.class, new ViolatedAssumptionAnswer());
      doReturn(",9").when(hierarchicalStreamReader0).getValue();
      UnmarshallingContext unmarshallingContext0 = mock(UnmarshallingContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        xMLParser_DoubleListConverter0.unmarshal(hierarchicalStreamReader0, unmarshallingContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      XMLParser xMLParser0 = new XMLParser(logger0, true);
      Network network0 = new Network();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("?hj").when(file0).getAbsolutePath();
      try { 
        xMLParser0.parse(network0, file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.io.input.XMLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser((Logger) null, false);
      Network network0 = new Network();
      // Undeclared exception!
      try { 
        xMLParser0.parse(network0, (File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XMLParser.DoubleListConverter xMLParser_DoubleListConverter0 = new XMLParser.DoubleListConverter();
      HierarchicalStreamReader hierarchicalStreamReader0 = mock(HierarchicalStreamReader.class, new ViolatedAssumptionAnswer());
      doReturn("").when(hierarchicalStreamReader0).getValue();
      UnmarshallingContext unmarshallingContext0 = mock(UnmarshallingContext.class, new ViolatedAssumptionAnswer());
      DblList dblList0 = (DblList)xMLParser_DoubleListConverter0.unmarshal(hierarchicalStreamReader0, unmarshallingContext0);
      HierarchicalStreamWriter hierarchicalStreamWriter0 = mock(HierarchicalStreamWriter.class, new ViolatedAssumptionAnswer());
      MarshallingContext marshallingContext0 = mock(MarshallingContext.class, new ViolatedAssumptionAnswer());
      xMLParser_DoubleListConverter0.marshal(dblList0, hierarchicalStreamWriter0, marshallingContext0);
      assertTrue(dblList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HierarchicalStreamReader hierarchicalStreamReader0 = mock(HierarchicalStreamReader.class, new ViolatedAssumptionAnswer());
      doReturn("4").when(hierarchicalStreamReader0).getValue();
      UnmarshallingContext unmarshallingContext0 = mock(UnmarshallingContext.class, new ViolatedAssumptionAnswer());
      XMLParser.DoubleListConverter xMLParser_DoubleListConverter0 = new XMLParser.DoubleListConverter();
      DblList dblList0 = (DblList)xMLParser_DoubleListConverter0.unmarshal(hierarchicalStreamReader0, unmarshallingContext0);
      HierarchicalStreamWriter hierarchicalStreamWriter0 = mock(HierarchicalStreamWriter.class, new ViolatedAssumptionAnswer());
      MarshallingContext marshallingContext0 = mock(MarshallingContext.class, new ViolatedAssumptionAnswer());
      xMLParser_DoubleListConverter0.marshal(dblList0, hierarchicalStreamWriter0, marshallingContext0);
      assertEquals(1, dblList0.size());
      assertFalse(dblList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      XMLParser xMLParser0 = new XMLParser(logger0, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4");
      Network network0 = new Network();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("4").when(file0).getAbsolutePath();
      // Undeclared exception!
      try { 
        xMLParser0.parse(network0, file0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XMLParser.DoubleListConverter xMLParser_DoubleListConverter0 = new XMLParser.DoubleListConverter();
      Class<Object> class0 = Object.class;
      boolean boolean0 = xMLParser_DoubleListConverter0.canConvert(class0);
      assertFalse(boolean0);
  }
}
