/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:55:08 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import org.addition.epanet.network.structures.Rule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rule_ESTest extends Rule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rule.Varwords rule_Varwords0 = Rule.Varwords.parse("HEADL");
      assertEquals(Rule.Varwords.r_HEAD, rule_Varwords0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rule.Values rule_Values0 = Rule.Values.parse("open but cannot deliver pressure");
      assertEquals(Rule.Values.IS_OPEN, rule_Values0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rule.Rulewords rule_Rulewords0 = Rule.Rulewords.parse("OR");
      assertEquals(Rule.Rulewords.r_OR, rule_Rulewords0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rule.Operators rule_Operators0 = Rule.Operators.parse(">=");
      assertEquals(Rule.Operators.GE, rule_Operators0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rule.Objects rule_Objects0 = Rule.Objects.parse("l");
      assertEquals(Rule.Objects.r_LINK, rule_Objects0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rule rule0 = new Rule();
      rule0.setLabel("k74aFg");
      String string0 = rule0.getLabel();
      assertEquals("k74aFg", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rule rule0 = new Rule();
      rule0.setCode("/");
      String string0 = rule0.getCode();
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rule.Varwords rule_Varwords0 = Rule.Varwords.parse("LE");
      assertEquals(Rule.Varwords.r_LEVEL, rule_Varwords0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rule.Varwords.parse("l2K4f");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rule.Values rule_Values0 = Rule.Values.parse("closed because cannot deliver head");
      assertEquals(Rule.Values.IS_CLOSED, rule_Values0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rule.Values.parse("=");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rule.Rulewords rule_Rulewords0 = Rule.Rulewords.parse("AND");
      assertEquals(Rule.Rulewords.r_AND, rule_Rulewords0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rule.Rulewords.parse("=");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rule.Operators rule_Operators0 = Rule.Operators.parse("=");
      assertEquals(Rule.Operators.EQ, rule_Operators0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rule.Operators.parse(",wHk");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rule.Objects rule_Objects0 = Rule.Objects.parse("Junction");
      assertEquals(Rule.Objects.r_JUNC, rule_Objects0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rule.Objects.parse(",wHk");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rule rule0 = new Rule();
      String string0 = rule0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rule rule0 = new Rule();
      String string0 = rule0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rule rule0 = new Rule();
      rule0.setLabel((String) null);
      String string0 = rule0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rule rule0 = new Rule();
      rule0.setCode((String) null);
      String string0 = rule0.getCode();
      assertNull(string0);
  }
}
