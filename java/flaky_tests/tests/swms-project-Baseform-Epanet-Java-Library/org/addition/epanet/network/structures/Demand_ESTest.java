/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:59:47 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Demand;
import org.addition.epanet.network.structures.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Demand_ESTest extends Demand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Demand demand0 = new Demand(56.97992262045, (Pattern) null);
      demand0.getPattern();
      assertEquals(56.97992262045, demand0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand(3419.7798829831, pattern0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.IMGD;
      demand0.setBaseNU(propertiesMap_FlowUnitsType0, 0.0);
      double double0 = demand0.getBaseNU(propertiesMap_FlowUnitsType0);
      assertEquals(0.0, demand0.getBase(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand(1699.0, pattern0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.AFD;
      double double0 = demand0.getBaseNU(propertiesMap_FlowUnitsType0);
      assertEquals(3370.3063, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand((-100.86452375492343), pattern0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.MLD;
      demand0.setBaseNU(propertiesMap_FlowUnitsType0, 0.0);
      double double0 = demand0.getBase();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand((-77.55), pattern0);
      double double0 = demand0.getBase();
      assertEquals((-77.55), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand((-1.0), pattern0);
      demand0.setPattern(pattern0);
      assertEquals((-1.0), demand0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand((-77.55), pattern0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.CMD;
      double double0 = demand0.getBaseNU(propertiesMap_FlowUnitsType0);
      assertEquals((-7905.446999999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Demand demand0 = new Demand(0.001, (Pattern) null);
      double double0 = demand0.getBase();
      assertEquals(0.001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand(0.5382, pattern0);
      demand0.getPattern();
      assertEquals(0.5382, demand0.getBase(), 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Demand demand0 = new Demand((-1128.215831331872), pattern0);
      demand0.setBase((-1128.215831331872));
      assertEquals((-1128.215831331872), demand0.getBase(), 0.01);
  }
}
