/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:51:10 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Curve;
import org.addition.epanet.network.structures.Pattern;
import org.addition.epanet.network.structures.Tank;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tank_ESTest extends Tank_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tank.MixType tank_MixType0 = Tank.MixType.parse("FIFO");
      assertEquals(Tank.MixType.FIFO, tank_MixType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUMinVolume(propertiesMap_UnitsType0, (-1021.872283562));
      double double0 = tank0.getVmin();
      assertEquals((-1021.872283562), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setVmax(1.0);
      double double0 = tank0.getVmax();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setVmax((-2845.92));
      double double0 = tank0.getVmax();
      assertEquals((-2845.92), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setV1max(2659.224073027537);
      double double0 = tank0.getV1max();
      assertEquals(2659.224073027537, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setV1max((-815.299698));
      double double0 = tank0.getV1max();
      assertEquals((-815.299698), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUInitVolume(propertiesMap_UnitsType0, 5060.296230140904);
      double double0 = tank0.getV0();
      assertEquals(178701.70675357222, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setV0((-2252.265657709666));
      double double0 = tank0.getV0();
      assertEquals((-2252.265657709666), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setV1max((-438.3));
      double double0 = tank0.getNUMixCompartimentSize(propertiesMap_UnitsType0);
      assertEquals((-12.4113411), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUMinimumHead(propertiesMap_UnitsType0, 2827.0);
      double double0 = tank0.getNUMinimumHead(propertiesMap_UnitsType0);
      assertEquals(9274.9343832021, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUMinimumHead(propertiesMap_UnitsType0, (-1033.541338721486));
      double double0 = tank0.getNUMinimumHead(propertiesMap_UnitsType0);
      assertEquals((-1033.541338721486), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setVmin((-3667.16875));
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = tank0.getNUMinVolume(propertiesMap_UnitsType0);
      assertEquals((-103.84321749374999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUMaximumHead(propertiesMap_UnitsType0, 2659.224073027537);
      double double0 = tank0.getNUMaximumHead(propertiesMap_UnitsType0);
      assertEquals(247.0500004254402, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setHmax((-1027.63759208));
      double double0 = tank0.getNUMaximumHead(propertiesMap_UnitsType0);
      assertEquals((-1027.63759208), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setVmax(5060.296230140904);
      double double0 = tank0.getNUMaxVolume(propertiesMap_UnitsType0);
      assertEquals(143.29240834889998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setVmax((-1236.9507));
      double double0 = tank0.getNUMaxVolume(propertiesMap_UnitsType0);
      assertEquals((-35.0267329719), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUInitVolume(propertiesMap_UnitsType0, 1243.935825424704);
      double double0 = tank0.getNUInitVolume(propertiesMap_UnitsType0);
      assertEquals(1243.935825424704, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUInitVolume(propertiesMap_UnitsType0, (-2319.0));
      double double0 = tank0.getNUInitVolume(propertiesMap_UnitsType0);
      assertEquals((-2319.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUInitHead(propertiesMap_UnitsType0, 687.967643);
      double double0 = tank0.getNUInitHead(propertiesMap_UnitsType0);
      assertEquals(63.914285456334724, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUInitHead(propertiesMap_UnitsType0, (-1.0));
      double double0 = tank0.getNUInitHead(propertiesMap_UnitsType0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setArea(1243.935825424704);
      double double0 = tank0.getNUArea(propertiesMap_UnitsType0);
      assertEquals(115.56541974686431, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setArea((-1021.872283562));
      double double0 = tank0.getNUArea(propertiesMap_UnitsType0);
      assertEquals((-1021.872283562), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tank tank0 = new Tank();
      Tank.MixType tank_MixType0 = Tank.MixType.FIFO;
      tank0.setMixModel(tank_MixType0);
      Tank.MixType tank_MixType1 = tank0.getMixModel();
      assertEquals(Tank.MixType.FIFO, tank_MixType1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setKb(2602.6301);
      double double0 = tank0.getKb();
      assertEquals(2602.6301, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUMinimumHead(propertiesMap_UnitsType0, 0.5382);
      double double0 = tank0.getHmin();
      assertEquals(5.793136586273172, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUMinimumHead(propertiesMap_UnitsType0, (-1033.541338721486));
      double double0 = tank0.getHmin();
      assertEquals((-1033.541338721486), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setHmax((-824.821532792536));
      double double0 = tank0.getHmax();
      assertEquals((-824.821532792536), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setH0(13.0);
      double double0 = tank0.getH0();
      assertEquals(13.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tank tank0 = new Tank();
      double[] doubleArray0 = new double[6];
      tank0.setConcentration(doubleArray0);
      double[] doubleArray1 = tank0.getConcentration();
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setArea(1.0E20);
      double double0 = tank0.getArea();
      assertEquals(1.0E20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUArea(propertiesMap_UnitsType0, (-2320.5336791456));
      double double0 = tank0.getArea();
      assertEquals((-24978.01664128106), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tank.MixType tank_MixType0 = Tank.MixType.parse("LIFO");
      assertEquals(Tank.MixType.LIFO, tank_MixType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tank.MixType.parse("");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getVmin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Tank tank0 = new Tank();
      Curve curve0 = tank0.getVcurve();
      assertNull(curve0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getV1max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUInitHead(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tank tank0 = new Tank();
      double[] doubleArray0 = new double[0];
      tank0.setConcentration(doubleArray0);
      double[] doubleArray1 = tank0.getConcentration();
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getH0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setHmax(2602.6301);
      double double0 = tank0.getHmax();
      assertEquals(2602.6301, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getVmax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = tank0.getNUMinVolume(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUMinVolume(propertiesMap_UnitsType0, 87.8);
      double double0 = tank0.getNUMinVolume(propertiesMap_UnitsType0);
      assertEquals(87.8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUMaximumHead(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUInitHead(propertiesMap_UnitsType0, (-1.0));
      double double0 = tank0.getH0();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUMixCompartimentSize(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getArea();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      tank0.setNUMixCompartimentSize(propertiesMap_UnitsType0, 1336.322261485377);
      double double0 = tank0.getNUMixCompartimentSize(propertiesMap_UnitsType0);
      assertEquals(1336.322261485377, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setVmin(12.0);
      double double0 = tank0.getVmin();
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setKb((-2319.0));
      double double0 = tank0.getKb();
      assertEquals((-2319.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUMinimumHead(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getHmin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Tank tank0 = new Tank();
      Curve curve0 = new Curve();
      tank0.setVcurve(curve0);
      Curve curve1 = tank0.getVcurve();
      assertNull(curve1.getType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = tank0.getNUMaxVolume(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUArea(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getHmax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tank tank0 = new Tank();
      Pattern pattern0 = new Pattern();
      tank0.setPattern(pattern0);
      Pattern pattern1 = tank0.getPattern();
      assertSame(pattern1, pattern0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getV0();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.getMixModel();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = tank0.getNUInitVolume(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Tank tank0 = new Tank();
      double double0 = tank0.getKb();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Tank tank0 = new Tank();
      tank0.setHmin(1029.1399444300819);
      assertEquals(1029.1399444300819, tank0.getHmin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Tank tank0 = new Tank();
      double[] doubleArray0 = tank0.getConcentration();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Tank tank0 = new Tank();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      tank0.setNUMaxVolume(propertiesMap_UnitsType0, 0.0);
      assertEquals(0.0, tank0.getVmax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Tank tank0 = new Tank();
      Pattern pattern0 = tank0.getPattern();
      assertNull(pattern0);
  }
}
