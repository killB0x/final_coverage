/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:46:27 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Node;
import org.addition.epanet.network.structures.Point;
import org.addition.epanet.network.structures.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node();
      Source source0 = new Source();
      source0.setC0(272.234253071274);
      node0.setSource(source0);
      node0.getSource();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node();
      Source source0 = new Source();
      source0.setC0((-1.0));
      node0.setSource(source0);
      node0.getSource();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = new Node();
      node0.setPosition((Point) null);
      node0.getPosition();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node();
      Point point0 = new Point(1555.54833, 1555.54833);
      node0.setPosition(point0);
      node0.getPosition();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node();
      Point point0 = new Point(1555.54833, 1555.54833);
      point0.setX((-1872.950189));
      node0.setPosition(point0);
      node0.getPosition();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      node0.setElevation((-1.0));
      double double0 = node0.getNUElevation(propertiesMap_UnitsType0);
      assertEquals((-1.0), node0.getElevation(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node();
      node0.setKe(961.875497725);
      double double0 = node0.getKe();
      assertEquals(961.875497725, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node();
      node0.setKe((-1844.65724));
      double double0 = node0.getKe();
      assertEquals((-1844.65724), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node();
      node0.setInitDemand((-239.0));
      double double0 = node0.getInitDemand();
      assertEquals((-239.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node();
      node0.setId("Point{x=287.8, y=0.0}");
      node0.getId();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = new Node();
      node0.setId("");
      node0.getId();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node();
      node0.setElevation(2614.76);
      double double0 = node0.getElevation();
      assertEquals(2614.76, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node();
      node0.setElevation((-1.0));
      double double0 = node0.getElevation();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = new Node();
      node0.setComment((String) null);
      node0.getComment();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = new Node();
      node0.setComment("R[\"6ilqs#T");
      node0.getComment();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node();
      node0.setC0((double[]) null);
      node0.getC0();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node();
      node0.setId("");
      node0.compareTo(node0);
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setId("1m&N1U+r^yLD>nu$9W");
      node1.setId("org.addition.epanet.network.structures.Node");
      int int0 = node1.compareTo(node0);
      assertEquals(62, int0);
      assertEquals(0.0, node1.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setId("1m&N1U+r^yLD>nu$9W");
      node1.setId("org.addition.epanet.network.structures.Node");
      int int0 = node0.compareTo(node1);
      assertEquals(0.0, node1.getInitDemand(), 0.01);
      assertEquals((-62), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node();
      node0.setId("+MjXm");
      node0.hashCode();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = new Node();
      node0.hashCode();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = new Node();
      node0.isRptFlag();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = new Node();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      node0.setNUElevation(propertiesMap_UnitsType0, 0.0);
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node();
      Point point0 = node0.getPosition();
      point0.setY((-1218.8278595364288));
      node0.getPosition();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = new Node();
      // Undeclared exception!
      try { 
        node0.compareTo(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = new Node();
      node0.setInitDemand(1.0E-7);
      double double0 = node0.getInitDemand();
      assertEquals(1.0E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = new Node();
      double[] doubleArray0 = new double[0];
      node0.setC0(doubleArray0);
      node0.getC0();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = new Node();
      double double0 = node0.getInitDemand();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = new Node();
      double double0 = node0.getElevation();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = new Node();
      node0.getId();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = new Node();
      double double0 = node0.getKe();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = new Node();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = node0.getNUElevation(propertiesMap_UnitsType0);
      assertEquals(0.0, node0.getInitDemand(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = new Node();
      node0.getSource();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = new Node();
      Source source0 = new Source();
      node0.setSource(source0);
      node0.getSource();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = new Node();
      double[] doubleArray0 = node0.getC0();
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = new Node();
      node0.setReportFlag(true);
      boolean boolean0 = node0.isRptFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = new Node();
      node0.setElevation(51.367859);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      double double0 = node0.getNUElevation(propertiesMap_UnitsType0);
      assertEquals(51.367859, node0.getElevation(), 0.01);
      assertEquals(51.367859, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = new Node();
      node0.getDemand();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = new Node();
      node0.getComment();
      assertEquals(0.0, node0.getInitDemand(), 0.01);
  }
}
