/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 17:02:21 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.addition.epanet.network.structures.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pattern_ESTest extends Pattern_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Double double0 = new Double((-735.6390316597));
      pattern0.add(double0);
      int int0 = pattern0.getLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setId((String) null);
      String string0 = pattern0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      pattern0.setId("!=&'!)=tXT|*{{IW");
      String string0 = pattern0.getId();
      assertEquals("!=&'!)=tXT|*{{IW", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      List<Double> list0 = pattern0.getFactorsList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      int int0 = pattern0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      String string0 = pattern0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Pattern pattern0 = new Pattern();
      Double double0 = new Double(0);
      pattern0.add(double0);
      List<Double> list0 = pattern0.getFactorsList();
      assertTrue(list0.contains(double0));
  }
}
