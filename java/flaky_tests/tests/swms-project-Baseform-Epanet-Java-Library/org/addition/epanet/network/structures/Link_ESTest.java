/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:33:52 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.addition.epanet.network.Network;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Link;
import org.addition.epanet.network.structures.Node;
import org.addition.epanet.network.structures.Point;
import org.addition.epanet.network.structures.Pump;
import org.addition.epanet.network.structures.Valve;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Link_ESTest extends Link_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Valve valve0 = new Valve();
      Network network0 = new Network();
      valve0.setDiameterAndUpdate(0.0, network0);
      valve0.setDiameterAndUpdate(Double.NaN, network0);
      assertEquals(Double.NaN, valve0.getFlowResistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      valve0.setNUDiameter(propertiesMap_UnitsType0, 0.4333);
      Network network0 = new Network();
      valve0.setDiameterAndUpdate(2394.0, network0);
      assertEquals(2394.0, valve0.getDiameter(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Link.LinkType link_LinkType0 = Link.LinkType.parse("TCV");
      assertEquals(Link.LinkType.TCV, link_LinkType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setLenght(1.0E-6);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.CM;
      Double double0 = new Double(0.0);
      pump0.initResistance(propertiesMap_FormType0, double0);
      assertEquals(Double.NaN, pump0.getFlowResistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      valve0.setNUDiameter(propertiesMap_UnitsType0, (-1.333));
      valve0.setRoughness(2.777777777777778E-4);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.CM;
      Double double0 = new Double(1419.5928911589706);
      valve0.initResistance(propertiesMap_FormType0, double0);
      assertEquals((-1.333), valve0.getDiameter(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      valve0.setDiameter((-1429.5182203));
      valve0.setLenght((-1429.5182203));
      valve0.initResistance(propertiesMap_FormType0, (Double) null);
      assertEquals((-1429.5182203), valve0.getLenght(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      valve0.setLenght((-1429.5182203));
      valve0.initResistance(propertiesMap_FormType0, (Double) null);
      assertEquals((-1429.5182203), valve0.getLenght(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Valve valve0 = new Valve();
      Double double0 = new Double(2101.83651402932);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      valve0.initResistance(propertiesMap_FormType0, double0);
      assertEquals(Double.NaN, valve0.getFlowResistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setLenght((-2372.645307927583));
      Double double0 = new Double(0.0);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      pump0.initResistance(propertiesMap_FormType0, double0);
      assertEquals((-2372.645307927583), pump0.getLenght(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setType((Link.LinkType) null);
      valve0.getType();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = new Node();
      node0.setReportFlag(true);
      valve0.setSecond(node0);
      Node node1 = valve0.getSecond();
      assertTrue(node1.isRptFlag());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = new Node();
      valve0.setSecond(node0);
      Node node1 = valve0.getSecond();
      assertFalse(node1.isRptFlag());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setRoughness(1537.94871611947);
      double double0 = valve0.getRoughness();
      assertEquals(1537.94871611947, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Link link0 = new Link();
      link0.setRoughness((-339.2924));
      double double0 = link0.getRoughness();
      assertEquals((-339.2924), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = new double[2];
      valve0.setParam(doubleArray0);
      double[] doubleArray1 = valve0.getParam();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = new double[0];
      valve0.setParam(doubleArray0);
      double[] doubleArray1 = valve0.getParam();
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.CMD;
      valve0.setRoughness(20.0);
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 20.0);
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setRoughness((-769.28542470426));
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.METERS;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 0.0);
      assertEquals((-769.28542470426), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setLenght(2101.83651402932);
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = pump0.getNULength(propertiesMap_UnitsType0);
      assertEquals(640.6397694761367, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setLenght((-3367.369173152253));
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = valve0.getNULength(propertiesMap_UnitsType0);
      assertEquals((-1026.3741239768067), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      valve0.setDiameter(143.087471);
      double double0 = valve0.getNUDiameter(propertiesMap_UnitsType0);
      assertEquals(43613.061160799996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      Network network0 = new Network();
      valve0.setDiameterAndUpdate((-2319.8), network0);
      double double0 = valve0.getNUDiameter(propertiesMap_UnitsType0);
      assertEquals((-2319.8), valve0.getDiameter(), 0.01);
      assertEquals((-707075.04), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setLenght(2101.83651402932);
      double double0 = pump0.getLenght();
      assertEquals(2101.83651402932, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setLenght((-290.787));
      double double0 = valve0.getLenght();
      assertEquals((-290.787), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Link link0 = new Link();
      link0.setKw(2528.780991988635);
      double double0 = link0.getKw();
      assertEquals(2528.780991988635, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setKw((-9.39905));
      double double0 = pump0.getKw();
      assertEquals((-9.39905), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setKm(2109.4956482795);
      double double0 = valve0.getKm();
      assertEquals(2109.4956482795, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setKm((-2485.7745));
      double double0 = valve0.getKm();
      assertEquals((-2485.7745), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setKb((-2372.645307927583));
      double double0 = pump0.getKb();
      assertEquals((-2372.645307927583), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Network network0 = new Network();
      Pump pump0 = new Pump();
      network0.addPump("biScwvA", pump0);
      String string0 = pump0.getId();
      assertEquals("biScwvA", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setId("");
      String string0 = valve0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.PRV;
      valve0.setType(link_LinkType0);
      Double double0 = new Double(0.028317);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      valve0.initResistance(propertiesMap_FormType0, double0);
      double double1 = valve0.getFlowResistance();
      assertEquals(1.0E-6, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setFlowResistance((-466.6504705));
      double double0 = valve0.getFlowResistance();
      assertEquals((-466.6504705), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = new Node();
      node0.setReportFlag(true);
      valve0.setFirst(node0);
      Node node1 = valve0.getFirst();
      assertEquals("", node1.getComment());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pump pump0 = new Pump();
      Node node0 = new Node();
      node0.setKe(37.46273730015809);
      pump0.setFirst(node0);
      Node node1 = pump0.getFirst();
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pump pump0 = new Pump();
      Node node0 = new Node();
      node0.setKe((-2372.645307927583));
      pump0.setFirst(node0);
      Node node1 = pump0.getFirst();
      assertEquals(0.0, node1.getInitDemand(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = new Node();
      node0.setElevation(2469.1249755);
      valve0.setFirst(node0);
      Node node1 = valve0.getFirst();
      assertSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setDiameter(1.0E-6);
      double double0 = pump0.getDiameter();
      assertEquals(1.0E-6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Link link0 = new Link();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      link0.setNUDiameter(propertiesMap_UnitsType0, (-503.1451));
      double double0 = link0.getDiameter();
      assertEquals((-1650.7385170603675), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setComment((String) null);
      String string0 = pump0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = new double[0];
      valve0.setC0(doubleArray0);
      double[] doubleArray1 = valve0.getC0();
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Link link0 = new Link();
      Network network0 = new Network();
      network0.addPipe("z?wf 1>O1N\"Xb", link0);
      Valve valve0 = new Valve();
      valve0.setId("Qc8@");
      int int0 = link0.compareTo((Link) valve0);
      assertEquals(41, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Link link0 = new Link();
      Network network0 = new Network();
      network0.addPipe("z?wf 1>O1N\"Xb", link0);
      Valve valve0 = new Valve();
      valve0.setId("Qc8@");
      int int0 = valve0.compareTo(link0);
      assertEquals((-41), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Valve valve0 = new Valve();
      // Undeclared exception!
      try { 
        valve0.setDiameterAndUpdate(2257.788, (Network) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Link", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      // Undeclared exception!
      try { 
        valve0.initResistance(propertiesMap_FormType0, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Link", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = valve0.getType();
      assertEquals(Link.LinkType.CV, link_LinkType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Pump pump0 = new Pump();
      double double0 = pump0.getLenght();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Link link0 = new Link();
      double double0 = link0.getRoughness();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Valve valve0 = new Valve();
      double double0 = valve0.getDiameter();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setId("pI42;%,'zBpR2E5");
      valve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      Link.LinkType link_LinkType0 = Link.LinkType.PBV;
      valve0.setType(link_LinkType0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.LPM;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.PSV;
      valve0.setType(link_LinkType0);
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.AFD;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.PRV;
      valve0.setType(link_LinkType0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.MLD;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.PSI;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 2199.577422);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.FCV;
      valve0.setType(link_LinkType0);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.METERS;
      double double0 = valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Link.LinkType link_LinkType0 = Link.LinkType.parse("PIPE");
      assertEquals(Link.LinkType.PIPE, link_LinkType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Link.LinkType.parse("El~Kb'1B3ZZS0l");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.LinkType link_LinkType0 = Link.LinkType.PUMP;
      valve0.setType(link_LinkType0);
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.HW;
      valve0.initResistance(propertiesMap_FormType0, (Double) null);
      assertEquals(1.0E8, valve0.getFlowResistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.FormType propertiesMap_FormType0 = PropertiesMap.FormType.DW;
      Link.LinkType link_LinkType0 = Link.LinkType.PIPE;
      valve0.setType(link_LinkType0);
      Double double0 = new Double((-313.1519315985086));
      valve0.initResistance(propertiesMap_FormType0, double0);
      assertEquals(Double.NaN, valve0.getFlowResistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = valve0.getParam();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = valve0.getSecond();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Pump pump0 = new Pump();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      pump0.setNULenght(propertiesMap_UnitsType0, 2133.396335);
      assertEquals(2133.396335, pump0.getLenght(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Valve valve0 = new Valve();
      String string0 = valve0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Valve valve0 = new Valve();
      Node node0 = valve0.getFirst();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = valve0.getC0();
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Valve valve0 = new Valve();
      // Undeclared exception!
      try { 
        valve0.compareTo((Link) valve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Link", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setType((Link.LinkType) null);
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.LPM;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.KPA;
      // Undeclared exception!
      try { 
        valve0.getNURoughness(propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, 1440.55599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Link", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Valve valve0 = new Valve();
      double double0 = valve0.getKm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setReportFlag(true);
      boolean boolean0 = valve0.isRptFlag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = valve0.getNULength(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Valve valve0 = new Valve();
      double[] doubleArray0 = new double[8];
      valve0.setC0(doubleArray0);
      double[] doubleArray1 = valve0.getC0();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Valve valve0 = new Valve();
      boolean boolean0 = valve0.isRptFlag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setId("s4>'ONy;UJj9Tq6");
      int int0 = valve0.compareTo((Link) valve0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.StatType link_StatType0 = valve0.getStat();
      assertEquals(Link.StatType.XHEAD, link_StatType0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Pump pump0 = new Pump();
      String string0 = pump0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Valve valve0 = new Valve();
      valve0.setComment("org.addition.epanet.network.structures.Tank$MixType");
      String string0 = valve0.getComment();
      assertEquals("org.addition.epanet.network.structures.Tank$MixType", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Valve valve0 = new Valve();
      List<Point> list0 = valve0.getVertices();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Valve valve0 = new Valve();
      double double0 = valve0.getKb();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Valve valve0 = new Valve();
      Link.StatType link_StatType0 = Link.StatType.EMPTYING;
      valve0.setStatus(link_StatType0);
      assertEquals(0.0, valve0.getKw(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Pump pump0 = new Pump();
      pump0.setKb(1007.9690783732387);
      double double0 = pump0.getKb();
      assertEquals(1007.9690783732387, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Link link0 = new Link();
      double double0 = link0.getKw();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Valve valve0 = new Valve();
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.SI;
      double double0 = valve0.getNUDiameter(propertiesMap_UnitsType0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Valve valve0 = new Valve();
      double double0 = valve0.getFlowResistance();
      assertEquals(0.0, double0, 0.01);
  }
}
