/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 16:42:52 GMT 2022
 */

package org.addition.epanet.network.structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.addition.epanet.network.FieldsMap;
import org.addition.epanet.network.PropertiesMap;
import org.addition.epanet.network.structures.Curve;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Curve_ESTest extends Curve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Curve curve0 = new Curve();
      FieldsMap fieldsMap0 = new FieldsMap();
      PropertiesMap.QualType propertiesMap_QualType0 = PropertiesMap.QualType.NONE;
      Double double0 = new Double(2487.1);
      Long long0 = new Long((-2105L));
      PropertiesMap.UnitsType propertiesMap_UnitsType0 = PropertiesMap.UnitsType.US;
      PropertiesMap.PressUnitsType propertiesMap_PressUnitsType0 = PropertiesMap.PressUnitsType.PSI;
      PropertiesMap.FlowUnitsType propertiesMap_FlowUnitsType0 = PropertiesMap.FlowUnitsType.GPM;
      fieldsMap0.prepare(propertiesMap_UnitsType0, propertiesMap_FlowUnitsType0, propertiesMap_PressUnitsType0, propertiesMap_QualType0, "", double0, long0);
      // Undeclared exception!
      try { 
        curve0.getCoeff(fieldsMap0, 2446.6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Curve.Coeffs curve_Coeffs0 = new Curve.Coeffs((-659.2566361523697), (-445.302986199175));
      assertEquals((-659.2566361523697), curve_Coeffs0.h0, 0.01);
      assertEquals((-445.302986199175), curve_Coeffs0.r, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Curve curve0 = new Curve();
      Curve.CurveType curve_CurveType0 = Curve.CurveType.H_CURVE;
      curve0.setType(curve_CurveType0);
      Curve.CurveType curve_CurveType1 = curve0.getType();
      assertSame(curve_CurveType1, curve_CurveType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Curve curve0 = new Curve();
      curve0.setId((String) null);
      String string0 = curve0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Curve curve0 = new Curve();
      FieldsMap fieldsMap0 = new FieldsMap();
      try { 
        curve0.getCoeff(fieldsMap0, 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.FieldsMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Curve curve0 = new Curve();
      // Undeclared exception!
      try { 
        curve0.getCoeff((FieldsMap) null, 0.016666666666666666);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.addition.epanet.network.structures.Curve", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Curve curve0 = new Curve();
      int int0 = curve0.getNpts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Curve curve0 = new Curve();
      curve0.getType();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Curve curve0 = new Curve();
      curve0.setId("\"{[gfZsj.9H!%.");
      String string0 = curve0.getId();
      assertEquals("\"{[gfZsj.9H!%.", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Curve curve0 = new Curve();
      List<Double> list0 = curve0.getX();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Curve curve0 = new Curve();
      String string0 = curve0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Curve curve0 = new Curve();
      List<Double> list0 = curve0.getY();
      assertTrue(list0.isEmpty());
  }
}
