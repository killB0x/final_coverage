/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 20:29:25 GMT 2022
 */

package info.michaelwittig.javaq.query;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.FlipFlipResult;
import kx.c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ATableResult_ESTest extends ATableResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[7];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult(stringArray0[5], c_Flip0, c_Flip0);
      String string0 = flipFlipResult0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[11];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult("info.michaelwittig.javaq.query.value.impl.TimeValue", c_Flip0, c_Flip0);
      String string0 = flipFlipResult0.getName();
      assertEquals("info.michaelwittig.javaq.query.value.impl.TimeValue", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) c_Dict0;
      c_Flip0.y = objectArray0;
      String[] stringArray0 = new String[11];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult("\"0Wb It", c_Flip0, c_Flip0);
      // Undeclared exception!
      try { 
        flipFlipResult0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[0];
      c_Flip0.x = stringArray0;
      c_Flip0.y = (Object[]) stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult("", c_Flip0, c_Flip0);
      // Undeclared exception!
      try { 
        flipFlipResult0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("info.michaelwittig.javaq.query.FlipFlipResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[11];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult("\"0Wb It", c_Flip0, c_Flip0);
      // Undeclared exception!
      try { 
        flipFlipResult0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.FlipFlipResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[7];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult("", c_Flip0, c_Flip0);
      String string0 = flipFlipResult0.getName();
      assertEquals("", string0);
  }
}
