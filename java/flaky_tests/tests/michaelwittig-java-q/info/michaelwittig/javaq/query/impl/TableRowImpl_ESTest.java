/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 20:46:50 GMT 2022
 */

package info.michaelwittig.javaq.query.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.FlipFlipResult;
import info.michaelwittig.javaq.query.TableResult;
import info.michaelwittig.javaq.query.column.Column;
import info.michaelwittig.javaq.query.impl.TableRowImpl;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.ValueFactory;
import info.michaelwittig.javaq.query.type.impl.TypeTimestamp;
import kx.c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TableRowImpl_ESTest extends TableRowImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[1];
      c_Flip0.y = (Object[]) stringArray0;
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult((String) null, c_Flip0, c_Flip0);
      TableRowImpl tableRowImpl0 = new TableRowImpl(flipFlipResult0, 0);
      Type<TypeTimestamp> type0 = (Type<TypeTimestamp>) mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn((ValueFactory) null).when(type0).geValueFactory();
      Column<Type<TypeTimestamp>> column0 = (Column<Type<TypeTimestamp>>) mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(column0).getName();
      doReturn(type0).when(column0).getType();
      // Undeclared exception!
      try { 
        tableRowImpl0.get(column0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class kx.c
         //
         verifyException("info.michaelwittig.javaq.query.FlipFlipResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      c.Dict c_Dict0 = new c.Dict((Object) null, (Object) null);
      c.Flip c_Flip0 = new c.Flip(c_Dict0);
      String[] stringArray0 = new String[1];
      c_Flip0.x = stringArray0;
      FlipFlipResult flipFlipResult0 = new FlipFlipResult((String) null, c_Flip0, c_Flip0);
      TableRowImpl tableRowImpl0 = new TableRowImpl(flipFlipResult0, 0);
      ValueFactory<TypeTimestamp, Type<TypeTimestamp>> valueFactory0 = (ValueFactory<TypeTimestamp, Type<TypeTimestamp>>) mock(ValueFactory.class, new ViolatedAssumptionAnswer());
      Type<TypeTimestamp> type0 = (Type<TypeTimestamp>) mock(Type.class, new ViolatedAssumptionAnswer());
      doReturn(valueFactory0).when(type0).geValueFactory();
      Column<Type<TypeTimestamp>> column0 = (Column<Type<TypeTimestamp>>) mock(Column.class, new ViolatedAssumptionAnswer());
      doReturn("j").when(column0).getName();
      doReturn(type0).when(column0).getType();
      // Undeclared exception!
      try { 
        tableRowImpl0.get(column0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Column j not found in keyed table
         //
         verifyException("info.michaelwittig.javaq.query.FlipFlipResult", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TableRowImpl tableRowImpl0 = new TableRowImpl((TableResult) null, 218);
      // Undeclared exception!
      try { 
        tableRowImpl0.get((Column<Type<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.impl.TableRowImpl", e);
      }
  }
}
