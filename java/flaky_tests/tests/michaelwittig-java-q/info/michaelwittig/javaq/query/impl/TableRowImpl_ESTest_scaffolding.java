/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Nov 03 20:46:50 GMT 2022
 */

package info.michaelwittig.javaq.query.impl;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class TableRowImpl_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "info.michaelwittig.javaq.query.impl.TableRowImpl"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TableRowImpl_ESTest_scaffolding.class.getClassLoader() ,
      "info.michaelwittig.javaq.query.type.Type",
      "info.michaelwittig.javaq.query.column.Column",
      "info.michaelwittig.javaq.query.Result",
      "kx.c$Dict",
      "info.michaelwittig.javaq.query.impl.TableRowImpl",
      "info.michaelwittig.javaq.query.type.ValueFactory",
      "info.michaelwittig.javaq.query.type.impl.TypeTimestamp",
      "info.michaelwittig.javaq.query.TableRow",
      "info.michaelwittig.javaq.Q",
      "kx.c",
      "info.michaelwittig.javaq.query.FlipFlipResult",
      "info.michaelwittig.javaq.query.type.NominalType",
      "info.michaelwittig.javaq.query.ATableResult",
      "info.michaelwittig.javaq.query.value.Value",
      "info.michaelwittig.javaq.query.TableResult",
      "info.michaelwittig.javaq.query.type.OrdinalType",
      "kx.c$Flip",
      "kx.c$KException"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("info.michaelwittig.javaq.query.column.Column", false, TableRowImpl_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("info.michaelwittig.javaq.query.type.Type", false, TableRowImpl_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("info.michaelwittig.javaq.query.type.ValueFactory", false, TableRowImpl_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TableRowImpl_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "info.michaelwittig.javaq.query.impl.TableRowImpl",
      "info.michaelwittig.javaq.query.type.impl.TypeTimestamp",
      "info.michaelwittig.javaq.query.type.impl.TypeTimestamp$1",
      "kx.c$Dict",
      "kx.c$Flip",
      "info.michaelwittig.javaq.query.type.impl.TypeInteger",
      "info.michaelwittig.javaq.query.ATableResult",
      "info.michaelwittig.javaq.query.FlipFlipResult",
      "info.michaelwittig.javaq.query.type.impl.TypeDateTime",
      "info.michaelwittig.javaq.query.type.impl.TypeSymbol",
      "info.michaelwittig.javaq.query.type.impl.TypeBoolean",
      "info.michaelwittig.javaq.query.FlipResult",
      "kx.c",
      "info.michaelwittig.javaq.query.type.impl.TypeFloat",
      "info.michaelwittig.javaq.query.column.impl.ASimpleNominalColumn",
      "info.michaelwittig.javaq.query.column.impl.ASimpleOrdinalColumn",
      "info.michaelwittig.javaq.query.column.impl.FloatColumn",
      "info.michaelwittig.javaq.query.column.impl.TimestampColumn",
      "info.michaelwittig.javaq.query.value.impl.AValue",
      "info.michaelwittig.javaq.query.value.impl.TimestampValue",
      "info.michaelwittig.javaq.query.filter.impl.FilterComparator",
      "info.michaelwittig.javaq.query.filter.impl.FilterImpl",
      "info.michaelwittig.javaq.query.type.impl.TypeLong",
      "info.michaelwittig.javaq.query.column.impl.LongColumn",
      "info.michaelwittig.javaq.query.type.impl.TypeTime",
      "info.michaelwittig.javaq.query.type.impl.TypeFloat$1",
      "info.michaelwittig.javaq.query.type.impl.TypeReal",
      "info.michaelwittig.javaq.query.column.impl.RealColumn",
      "info.michaelwittig.javaq.query.type.impl.TypeDateTime$1",
      "info.michaelwittig.javaq.query.column.impl.DateTimeColumn",
      "info.michaelwittig.javaq.query.column.impl.ASimpleNominalColumn$1",
      "info.michaelwittig.javaq.query.type.impl.TypeLong$1",
      "info.michaelwittig.javaq.query.column.Aggregation",
      "info.michaelwittig.javaq.query.column.impl.AggregateColumnImpl",
      "info.michaelwittig.javaq.query.value.impl.LongValue",
      "info.michaelwittig.javaq.query.group.impl.XbarGroupImpl",
      "info.michaelwittig.javaq.query.value.impl.ListValue",
      "info.michaelwittig.javaq.query.type.impl.TypeDate",
      "info.michaelwittig.javaq.query.type.impl.TypeList"
    );
  }
}
