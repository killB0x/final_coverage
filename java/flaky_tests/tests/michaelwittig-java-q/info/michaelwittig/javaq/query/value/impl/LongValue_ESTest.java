/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 20:39:22 GMT 2022
 */

package info.michaelwittig.javaq.query.value.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import info.michaelwittig.javaq.query.value.impl.ListValue;
import info.michaelwittig.javaq.query.value.impl.LongValue;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongValue_ESTest extends LongValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(4122L);
      List<Long> list0 = linkedList0.subList(0, 0);
      linkedList0.addLast(long0);
      // Undeclared exception!
      try { 
        LongValue.froms((Collection<Long>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongValue.froms((Collection<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.value.impl.LongValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-517L));
      longArray0[0] = long0;
      LongValue longValue0 = LongValue.from(longArray0[0]);
      String string0 = longValue0.toQ();
      assertEquals("-517j", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      ListValue<Long, TypeList<Long, Type<Long>>> listValue0 = LongValue.froms((Collection<Long>) linkedList0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      ListValue<Long, TypeList<Long, Type<Long>>> listValue0 = LongValue.froms(longArray0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LongValue longValue0 = LongValue.from((Long) null);
      String string0 = longValue0.toQ();
      assertEquals("0Nj", string0);
  }
}
