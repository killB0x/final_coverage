/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 20:38:30 GMT 2022
 */

package info.michaelwittig.javaq.query.value.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import info.michaelwittig.javaq.query.value.impl.ListValue;
import info.michaelwittig.javaq.query.value.impl.RealValue;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealValue_ESTest extends RealValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        RealValue.froms((Collection<BigDecimal>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("info.michaelwittig.javaq.query.value.impl.RealValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RealValue realValue0 = RealValue.from((BigDecimal) null);
      String string0 = realValue0.toQ();
      assertEquals("0Ne", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-1L));
      RealValue realValue0 = RealValue.from(bigDecimal0);
      String string0 = realValue0.toQ();
      assertEquals("-1e", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      ListValue<BigDecimal, TypeList<BigDecimal, Type<BigDecimal>>> listValue0 = RealValue.froms((Collection<BigDecimal>) linkedList0);
      assertNotNull(listValue0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      ListValue<BigDecimal, TypeList<BigDecimal, Type<BigDecimal>>> listValue0 = RealValue.froms(bigDecimalArray0);
      assertNotNull(listValue0);
  }
}
