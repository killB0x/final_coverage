/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 03 20:56:56 GMT 2022
 */

package info.michaelwittig.javaq.query.type.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import info.michaelwittig.javaq.query.type.Type;
import info.michaelwittig.javaq.query.type.ValueFactory;
import info.michaelwittig.javaq.query.type.impl.TypeList;
import java.math.BigDecimal;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeList_ESTest extends TypeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TypeList<Date, Type<Date>> typeList0 = TypeList.getDateTime();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TypeList<BigDecimal, Type<BigDecimal>> typeList0 = TypeList.getReal();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TypeList<java.sql.Date, Type<java.sql.Date>> typeList0 = TypeList.getDate();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TypeList<Timestamp, Type<Timestamp>> typeList0 = TypeList.getTimestamp();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TypeList<Boolean, Type<Boolean>> typeList0 = TypeList.getBoolean();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TypeList<Integer, Type<Integer>> typeList0 = TypeList.getInteger();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TypeList<Long, Type<Long>> typeList0 = TypeList.getLong();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TypeList<BigDecimal, Type<BigDecimal>> typeList0 = TypeList.getFloat();
      assertNotNull(typeList0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      TypeList<String, Type<String>> typeList0 = TypeList.getSymbol();
      ValueFactory<String[], Type<String[]>> valueFactory0 = typeList0.geValueFactory();
      assertNotNull(valueFactory0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TypeList<Time, Type<Time>> typeList0 = TypeList.getTime();
      assertNotNull(typeList0);
  }
}
