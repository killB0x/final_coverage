/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:27:19 GMT 2022
 */

package de.chrlembeck.util.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.io.ClassLoaderObjectInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.StreamCorruptedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassLoaderObjectInputStream_ESTest extends ClassLoaderObjectInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderObjectInputStream classLoaderObjectInputStream0 = null;
      try {
        classLoaderObjectInputStream0 = new ClassLoaderObjectInputStream((InputStream) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), 2514);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderObjectInputStream classLoaderObjectInputStream0 = null;
      try {
        classLoaderObjectInputStream0 = new ClassLoaderObjectInputStream(byteArrayInputStream0, classLoader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderObjectInputStream classLoaderObjectInputStream0 = null;
      try {
        classLoaderObjectInputStream0 = new ClassLoaderObjectInputStream(byteArrayInputStream0, classLoader0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1090), (-971));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ClassLoaderObjectInputStream classLoaderObjectInputStream0 = null;
      try {
        classLoaderObjectInputStream0 = new ClassLoaderObjectInputStream(dataInputStream0, (ClassLoader) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderObjectInputStream classLoaderObjectInputStream0 = null;
      try {
        classLoaderObjectInputStream0 = new ClassLoaderObjectInputStream(pushbackInputStream0, classLoader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }
}
