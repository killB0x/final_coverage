/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 17:51:29 GMT 2022
 */

package de.chrlembeck.util.console;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.console.ConsoleTable;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConsoleTable_ESTest extends ConsoleTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        consoleTable0.setColumnNames(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The table has 0 columns, but there are 3 column names: [null, null, null]
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "J'j]I";
      consoleTable0.setColumnNames(stringArray0);
      consoleTable0.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.CENTER;
      ConsoleTable.appendValue(stringBuilder0, "", 100, consoleTable_Alignment0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        consoleTable0.addRow(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The table has 0 columns, but the new row has 9 entries: [null, null, null, null, null, null, null, null, null]
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(11);
      StringBuffer stringBuffer0 = new StringBuffer("");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      consoleTable0.printHorizontalSeparator(stringBuilder0, '?', '7', 'X');
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.appendRightBorder(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(240);
      StringBuilder stringBuilder0 = new StringBuilder();
      consoleTable0.appendLeftBorder(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(956);
      consoleTable0.appendColumnSeparator(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable.append(stringBuilder0, 'r', (-248));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(360);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable0.setBorderConfiguration(consoleTable_BorderConfiguration0);
      consoleTable0.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      consoleTable0.setPrintTopBorder(false);
      consoleTable0.isPrintTopBorder();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setPrintRightBorder(false);
      consoleTable0.isPrintRightBorder();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(11);
      consoleTable0.setPrintLeftBorder(false);
      consoleTable0.isPrintLeftBorder();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(2098);
      consoleTable0.setPrintHeaderTableSeparator(false);
      consoleTable0.isPrintHeaderTableSeparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(51);
      consoleTable0.setPrintBottomBorder(false);
      consoleTable0.isPrintBottomBorder();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      ConsoleTable consoleTable0 = new ConsoleTable(807);
      consoleTable0.setBorderConfiguration(consoleTable_BorderConfiguration0);
      consoleTable0.getColumnSpacing();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      consoleTable0.getColumCount();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setBorderConfiguration((ConsoleTable.BorderConfiguration) null);
      consoleTable0.getBorderConfiguration();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setBorderConfiguration((ConsoleTable.BorderConfiguration) null);
      // Undeclared exception!
      try { 
        consoleTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      // Undeclared exception!
      try { 
        consoleTable0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9);
      consoleTable0.setBorderConfiguration((ConsoleTable.BorderConfiguration) null);
      // Undeclared exception!
      try { 
        consoleTable0.setPrintTopBorder(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setBorderConfiguration((ConsoleTable.BorderConfiguration) null);
      // Undeclared exception!
      try { 
        consoleTable0.setPrintLeftBorder(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      // Undeclared exception!
      try { 
        consoleTable0.setColumnNames((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9566);
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.LEFT;
      // Undeclared exception!
      try { 
        consoleTable0.setAlignment((-38), consoleTable_Alignment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -38 out of bounds for length 9566
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9577);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      consoleTable0.printHorizontalSeparator(stringBuilder0, 'u', 'u', 'u');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(10);
      // Undeclared exception!
      try { 
        consoleTable0.printHorizontalSeparator((StringBuilder) null, 'B', 'B', 'B');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        consoleTable0.printHorizontalSeparator(stringBuilder0, '4', '7', '7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(3);
      consoleTable0.setBorderConfiguration((ConsoleTable.BorderConfiguration) null);
      // Undeclared exception!
      try { 
        consoleTable0.isPrintLeftBorder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(937);
      consoleTable0.appendTo(stringBuilder0);
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.LEFT;
      // Undeclared exception!
      ConsoleTable.appendValue(stringBuilder0, "de.chrlembeck.util.lang.StringUtils", 937, consoleTable_Alignment0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.LEFT;
      // Undeclared exception!
      try { 
        ConsoleTable.appendValue((StringBuilder) null, "T{Cx3jUNm", 1, consoleTable_Alignment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      // Undeclared exception!
      try { 
        consoleTable0.appendTo(stringBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1623);
      // Undeclared exception!
      try { 
        consoleTable0.appendRightBorder((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(762);
      // Undeclared exception!
      try { 
        consoleTable0.appendLeftBorder((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(2458);
      consoleTable0.setColumnSpacing(9553);
      // Undeclared exception!
      consoleTable0.appendColumnSeparator(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1644);
      // Undeclared exception!
      try { 
        consoleTable0.appendColumnSeparator((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConsoleTable.append((StringBuilder) null, '1', 1897);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1623);
      // Undeclared exception!
      try { 
        consoleTable0.addRow((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConsoleTable consoleTable0 = null;
      try {
        consoleTable0 = new ConsoleTable((-2344));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2344
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setPrintBottomBorder(false);
      consoleTable0.appendTo(stringBuilder0);
      assertEquals("+--+--+--+--+\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[4];
      consoleTable0.addRow(stringArray0);
      consoleTable0.appendTo(stringBuilder0);
      assertEquals("+--+--+--+--+\n|  |  |  |  |\n+--+--+--+--+\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[4];
      consoleTable0.setPrintHeaderTableSeparator(false);
      consoleTable0.setColumnNames(stringArray0);
      consoleTable0.appendTo(stringBuilder0);
      assertFalse(consoleTable0.isPrintHeaderTableSeparator());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[4];
      consoleTable0.setColumnNames(stringArray0);
      consoleTable0.appendTo(stringBuilder0);
      assertEquals("+--+--+--+--+\n|  |  |  |  |\n+--+--+--+--+\n+--+--+--+--+\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(52);
      // Undeclared exception!
      try { 
        consoleTable0.appendTo((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ConsoleTable consoleTable0 = new ConsoleTable(9568);
      consoleTable0.setPrintTopBorder(false);
      // Undeclared exception!
      consoleTable0.appendTo(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setPrintColumnSeparators(false);
      assertFalse(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(false);
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintRightBorder();
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u250C', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('\u252C', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(boolean0);
      assertEquals('\u2510', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('\u2518', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('\u253C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertEquals('\u2514', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(53);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(true);
      consoleTable_BorderConfiguration0.setCrossSymbol('&');
      assertEquals('\u2570', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('\u252C', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u256D', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u256F', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('\u256E', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable0.isPrintRightBorder());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setBottomLeftCorner('1');
      assertEquals('1', consoleTable_BorderConfiguration0.getBottomLeftCorner());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9524);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      consoleTable_BorderConfiguration0.setPrintBottomBorder(true);
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      boolean boolean0 = consoleTable0.isPrintTopBorder();
      assertTrue(boolean0);
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      char char0 = consoleTable_BorderConfiguration0.getBottomRightCorner();
      assertEquals('\u2550', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('\u2563', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u256C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u2557', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('\u2554', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('\u2560', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2551', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('\u255A', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('\u2569', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u2566', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u255D', char0);
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(11);
      boolean boolean0 = consoleTable0.isPrintLeftBorder();
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(boolean0);
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintBottomBorder());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setTopRightCorner('-');
      assertEquals('-', consoleTable_BorderConfiguration0.getTopRightCorner());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      char char0 = consoleTable_BorderConfiguration0.getTopRightCorner();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(false);
      char char0 = consoleTable_BorderConfiguration0.getTopLeftCorner();
      assertEquals('\u2514', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('\u250C', char0);
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u252C', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertEquals('\u2518', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('\u2510', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('\u253C', consoleTable_BorderConfiguration0.getCrossSymbol());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setLeftConnector('!');
      assertEquals('!', consoleTable_BorderConfiguration0.getLeftConnector());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setHorizontalLine('[');
      assertEquals('[', consoleTable_BorderConfiguration0.getHorizontalLine());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(3);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      consoleTable_BorderConfiguration0.setVerticalLine('C');
      assertEquals('C', consoleTable_BorderConfiguration0.getVerticalLine());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setTopLeftCorner('e');
      assertEquals('e', consoleTable_BorderConfiguration0.getTopLeftCorner());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      char char0 = consoleTable_BorderConfiguration0.getLeftConnector();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      boolean boolean0 = consoleTable0.isPrintColumnSeparators();
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(boolean0);
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintBottomBorder());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable_BorderConfiguration0.setPrintTopBorder(true);
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(14);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(false);
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintBottomBorder();
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u252C', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(boolean0);
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('\u2510', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('\u250C', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertEquals('\u253C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('\u2514', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u2518', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable0.isPrintLeftBorder());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      consoleTable_BorderConfiguration0.setRightConnector('\u255A');
      assertEquals('\u255A', consoleTable_BorderConfiguration0.getRightConnector());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      consoleTable_BorderConfiguration0.setBottomConnector('\"');
      assertEquals('\"', consoleTable_BorderConfiguration0.getBottomConnector());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1648);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      char char0 = consoleTable_BorderConfiguration0.getBottomConnector();
      assertEquals('\u2554', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertEquals('\u2563', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u2569', char0);
      assertEquals('\u255A', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('\u2551', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('\u2557', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertEquals('\u2560', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertEquals('\u2566', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u256C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u2550', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u255D', consoleTable_BorderConfiguration0.getBottomRightCorner());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9562);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createDefaultBorderCofiguration();
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintLeftBorder();
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(boolean0);
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(807);
      int int0 = consoleTable0.getColumnSpacing();
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertEquals(1, int0);
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintBottomBorder());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(789);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintColumnSeparators();
      assertEquals('\u2563', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u2550', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('\u2554', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('\u256C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('\u255D', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(boolean0);
      assertEquals('\u2566', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertEquals('\u2560', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertEquals('\u2569', consoleTable_BorderConfiguration0.getBottomConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2551', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('\u2557', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('\u255A', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(true);
      char char0 = consoleTable_BorderConfiguration0.getCrossSymbol();
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('\u256D', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u2570', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('\u252C', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u256E', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u253C', char0);
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('\u256F', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9524);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      char char0 = consoleTable_BorderConfiguration0.getVerticalLine();
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('|', char0);
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      char char0 = consoleTable_BorderConfiguration0.getBottomLeftCorner();
      assertEquals('\u2569', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u2551', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2557', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('\u2560', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertEquals('\u2550', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('\u2554', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertEquals('\u255D', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertEquals('\u255A', char0);
      assertEquals('\u2566', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u256C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('\u2563', consoleTable_BorderConfiguration0.getRightConnector());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9562);
      boolean boolean0 = consoleTable0.isPrintBottomBorder();
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(boolean0);
      assertTrue(consoleTable0.isPrintTopBorder());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(937);
      consoleTable0.isPrintRightBorder();
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintColumnSeparators());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(3);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      
      consoleTable_BorderConfiguration0.setPrintHeaderTableSeparator(false);
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(false);
      consoleTable_BorderConfiguration0.setTopConnector(' ');
      assertEquals(' ', consoleTable_BorderConfiguration0.getTopConnector());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(26);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeBorderCofiguration(true);
      char char0 = consoleTable_BorderConfiguration0.getTopConnector();
      assertEquals('\u252C', char0);
      assertEquals('\u251C', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('\u256E', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u2502', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2570', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('\u253C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('\u2524', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u256D', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('\u2500', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('\u2534', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u256F', consoleTable_BorderConfiguration0.getBottomRightCorner());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(3);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      consoleTable_BorderConfiguration0.setPrintLeftBorder(true);
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9524);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintTopBorder();
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertTrue(boolean0);
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9562);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createDefaultBorderCofiguration();
      char char0 = consoleTable_BorderConfiguration0.getRightConnector();
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('+', char0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(3);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.getBorderConfiguration();
      char char0 = consoleTable_BorderConfiguration0.getHorizontalLine();
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals('-', char0);
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9562);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createDefaultBorderCofiguration();
      boolean boolean0 = consoleTable_BorderConfiguration0.isPrintHeaderTableSeparator();
      assertTrue(boolean0);
      assertTrue(consoleTable_BorderConfiguration0.isPrintBottomBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getRightConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertEquals('+', consoleTable_BorderConfiguration0.getBottomConnector());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('|', consoleTable_BorderConfiguration0.getVerticalLine());
      assertEquals('-', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('+', consoleTable_BorderConfiguration0.getLeftConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('+', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertTrue(consoleTable_BorderConfiguration0.isPrintRightBorder());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(0);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      consoleTable_BorderConfiguration0.setPrintRightBorder(true);
      assertEquals('\u255A', consoleTable_BorderConfiguration0.getBottomLeftCorner());
      assertEquals(1, consoleTable_BorderConfiguration0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertEquals('\u2569', consoleTable_BorderConfiguration0.getBottomConnector());
      assertEquals('\u2560', consoleTable_BorderConfiguration0.getLeftConnector());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable_BorderConfiguration0.isPrintLeftBorder());
      assertEquals('\u2550', consoleTable_BorderConfiguration0.getHorizontalLine());
      assertEquals('\u255D', consoleTable_BorderConfiguration0.getBottomRightCorner());
      assertEquals('\u256C', consoleTable_BorderConfiguration0.getCrossSymbol());
      assertTrue(consoleTable_BorderConfiguration0.isPrintTopBorder());
      assertEquals('\u2554', consoleTable_BorderConfiguration0.getTopLeftCorner());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertEquals('\u2563', consoleTable_BorderConfiguration0.getRightConnector());
      assertEquals('\u2566', consoleTable_BorderConfiguration0.getTopConnector());
      assertEquals('\u2557', consoleTable_BorderConfiguration0.getTopRightCorner());
      assertEquals('\u2551', consoleTable_BorderConfiguration0.getVerticalLine());
      assertTrue(consoleTable_BorderConfiguration0.isPrintColumnSeparators());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1648);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      consoleTable_BorderConfiguration0.setBottomRightCorner('N');
      assertEquals('N', consoleTable_BorderConfiguration0.getBottomRightCorner());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(2098);
      boolean boolean0 = consoleTable0.isPrintHeaderTableSeparator();
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertTrue(boolean0);
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintTopBorder());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      int int0 = consoleTable_BorderConfiguration0.getColumnSpacing();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ConsoleTable consoleTable0 = new ConsoleTable(36);
      // Undeclared exception!
      try { 
        consoleTable0.setColumnNames(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The table has 36 columns, but there are 0 column names: []
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.recalculateColumnWidths();
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertEquals(1, consoleTable0.getColumnSpacing());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(1660);
      consoleTable0.setPrintLeftBorder(false);
      // Undeclared exception!
      consoleTable0.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("0z8c%yc/;p[u!");
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.RIGHT;
      ConsoleTable.appendValue(stringBuilder0, "0z8c%yc/;p[u!", 9, consoleTable_Alignment0);
      assertEquals("0z8c%yc/;p[u!0z8c%yc/;p[u!", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      assertEquals(4, consoleTable0.getColumCount());
      
      String[] stringArray0 = new String[4];
      consoleTable0.setColumnNames(stringArray0);
      assertTrue(consoleTable0.isPrintRightBorder());
      
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable0.setBorderConfiguration(consoleTable_BorderConfiguration0);
      String string0 = consoleTable0.toString();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[4];
      consoleTable0.setPrintColumnSeparators(false);
      assertEquals(4, consoleTable0.getColumCount());
      
      consoleTable0.addRow(stringArray0);
      String string0 = consoleTable0.toString();
      assertEquals("+--+\n|     |\n+--+\n", string0);
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        consoleTable0.addRow(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The table has 4 columns, but the new row has 1 entries: [null]
         //
         verifyException("de.chrlembeck.util.console.ConsoleTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      assertEquals(4, consoleTable0.getColumCount());
      
      String[] stringArray0 = new String[4];
      consoleTable0.addRow(stringArray0);
      consoleTable0.setColumnNames(stringArray0);
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      assertTrue(consoleTable0.isPrintTopBorder());
      
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = new ConsoleTable.BorderConfiguration();
      consoleTable0.setBorderConfiguration(consoleTable_BorderConfiguration0);
      consoleTable0.getBorderConfiguration();
      assertEquals(4, consoleTable0.getColumCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(9562);
      ConsoleTable.Alignment consoleTable_Alignment0 = ConsoleTable.Alignment.LEFT;
      consoleTable0.setAlignment(0, consoleTable_Alignment0);
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintTopBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertEquals(9562, consoleTable0.getColumCount());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintBottomBorder());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      consoleTable0.setColumnSpacing((-1850));
      consoleTable0.getBorderConfiguration();
      assertEquals((-1850), consoleTable0.getColumnSpacing());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      assertTrue(consoleTable0.isPrintRightBorder());
      
      consoleTable0.setPrintRightBorder(false);
      consoleTable0.toString();
      assertFalse(consoleTable0.isPrintRightBorder());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      ConsoleTable.BorderConfiguration consoleTable_BorderConfiguration0 = consoleTable0.createUnicodeDoubleBorderCofiguration();
      consoleTable_BorderConfiguration0.setColumnSpacing((-1455));
      consoleTable0.setBorderConfiguration(consoleTable_BorderConfiguration0);
      int int0 = consoleTable0.getColumnSpacing();
      assertEquals((-1455), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      assertTrue(consoleTable0.isPrintColumnSeparators());
      
      consoleTable0.setPrintColumnSeparators(false);
      boolean boolean0 = consoleTable0.isPrintColumnSeparators();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ConsoleTable consoleTable0 = new ConsoleTable(4);
      int int0 = consoleTable0.getColumCount();
      assertTrue(consoleTable0.isPrintLeftBorder());
      assertEquals(4, int0);
      assertEquals(1, consoleTable0.getColumnSpacing());
      assertTrue(consoleTable0.isPrintRightBorder());
      assertTrue(consoleTable0.isPrintHeaderTableSeparator());
      assertTrue(consoleTable0.isPrintBottomBorder());
      assertTrue(consoleTable0.isPrintColumnSeparators());
      assertTrue(consoleTable0.isPrintTopBorder());
  }
}
