/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:19:28 GMT 2022
 */

package de.chrlembeck.util.swing.formatter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.swing.formatter.BackgroundModifier;
import java.awt.Color;
import java.awt.SystemColor;
import javax.swing.JComponent;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BackgroundModifier_ESTest extends BackgroundModifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier((Color) null);
      Color color0 = backgroundModifier0.getInvalidBackgroundColor();
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      Color color0 = backgroundModifier0.getInvalidBackgroundColor();
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowText;
      BackgroundModifier backgroundModifier0 = new BackgroundModifier(systemColor0);
      Color color0 = new Color(161, true);
      backgroundModifier0.setInvalidBackgroundColor(color0);
      Color color1 = backgroundModifier0.getInvalidBackgroundColor();
      assertSame(color1, color0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      Color color0 = new Color(0.0F, 0.0F, 0.0F, 0.0F);
      backgroundModifier0.setInvalidBackgroundColor(color0);
      Color color1 = backgroundModifier0.getInvalidBackgroundColor();
      assertEquals(0, color1.getGreen());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      // Undeclared exception!
      try { 
        backgroundModifier0.modifyComponent((JComponent) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.formatter.BackgroundModifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      JTree jTree0 = new JTree();
      backgroundModifier0.modifyComponent(jTree0, false);
      backgroundModifier0.modifyComponent(jTree0, false);
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      backgroundModifier0.modifyComponent(jPopupMenu_Separator0, true);
      assertTrue(jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BackgroundModifier backgroundModifier0 = new BackgroundModifier();
      JTree jTree0 = new JTree();
      backgroundModifier0.modifyComponent(jTree0, false);
      backgroundModifier0.modifyComponent(jTree0, true);
      assertFalse(jTree0.isFocusCycleRoot());
  }
}
