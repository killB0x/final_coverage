/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 17:54:48 GMT 2022
 */

package de.chrlembeck.util.swing.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.swing.components.ColorChooserPanel;
import de.chrlembeck.util.swing.components.ColorCircle;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import java.text.ParseException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColorChooserPanel_ESTest extends ColorChooserPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = new Color(1034);
      colorChooserPanel0.setSelectedColor(color0);
      assertEquals((-16776182), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = ColorCircle.getColorByHsv(16, 16, 16);
      Color color1 = color0.darker();
      colorChooserPanel0.setSelectedColor(color1);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = ColorCircle.getColorByHsv(15, 15, 15);
      Color color1 = color0.darker();
      colorChooserPanel0.setSelectedColor(color1);
      assertEquals(255, color1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter(3289);
      Integer integer0 = colorChooserPanel_NumberFormatter0.stringToValue("6");
      assertEquals(6, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter(5468);
      try { 
        colorChooserPanel_NumberFormatter0.stringToValue("ancestor");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // For input string: \"ancestor\"
         //
         verifyException("de.chrlembeck.util.swing.components.ColorChooserPanel$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = ColorCircle.getColorByHsv(15, 15, 15);
      colorChooserPanel0.setSelectedColor(color0);
      colorChooserPanel0.setSelectedColor(color0);
      assertFalse(colorChooserPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.TRANSPARENCY_SLIDER;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, (-168));
      int int0 = colorChooserPanel0.getTransparency();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.TRANSPARENCY_SLIDER;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 9);
      Color color0 = colorChooserPanel0.getSelectedColor();
      assertEquals(150994944, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.pink;
      colorChooserPanel0.setSelectedColor(color0);
      Color color1 = colorChooserPanel0.getSelectedColor();
      assertEquals(255, color1.getRed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.TRANSPARENCY_SLIDER;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, (-754));
      Color color0 = colorChooserPanel0.getSelectedColor();
      assertEquals(0, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.pink;
      colorChooserPanel0.setSelectedColor(color0);
      int int0 = colorChooserPanel0.getSaturation();
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.pink;
      colorChooserPanel0.setSelectedColor(color0);
      int int0 = colorChooserPanel0.getRed();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.desktop;
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      colorChooserPanel0.setSelectedColor(systemColor0);
      int int0 = colorChooserPanel0.getHue();
      assertEquals(180, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.pink;
      colorChooserPanel0.setSelectedColor(color0);
      int int0 = colorChooserPanel0.getGreen();
      assertEquals(175, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.darkGray;
      colorChooserPanel0.setSelectedColor(color0);
      int int0 = colorChooserPanel0.getBlue();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      // Undeclared exception!
      try { 
        colorChooserPanel0.setSelectedColor((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.components.ColorChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      // Undeclared exception!
      try { 
        colorChooserPanel0.fieldUpdated((ColorChooserPanel.Field) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.components.ColorChooserPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.GREEN;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 0);
      assertFalse(colorChooserPanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.BLUE;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 64);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.RED;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 18);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getHue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getBlue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getBlacknessValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getSaturation();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getGreen();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getRed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      int int0 = colorChooserPanel0.getTransparency();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(9, 9, 9);
      Graphics graphics0 = bufferedImage0.getGraphics();
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.ShowColorComponent colorChooserPanel_ShowColorComponent0 = colorChooserPanel0.new ShowColorComponent();
      colorChooserPanel_ShowColorComponent0.setBounds(248, 175, 14, 250);
      colorChooserPanel_ShowColorComponent0.paintComponent(graphics0);
      assertFalse(colorChooserPanel_ShowColorComponent0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(9, 9, 9);
      Graphics graphics0 = bufferedImage0.getGraphics();
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.ShowColorComponent colorChooserPanel_ShowColorComponent0 = colorChooserPanel0.new ShowColorComponent();
      colorChooserPanel_ShowColorComponent0.setBounds(1, (-10), 248, (-1998));
      colorChooserPanel_ShowColorComponent0.paintComponent(graphics0);
      assertFalse(colorChooserPanel_ShowColorComponent0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter((-663));
      try { 
        colorChooserPanel_NumberFormatter0.stringToValue("0");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // number to large 0 > -663.
         //
         verifyException("de.chrlembeck.util.swing.components.ColorChooserPanel$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter(1415);
      Integer integer0 = colorChooserPanel_NumberFormatter0.stringToValue((String) null);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter(0);
      Integer integer0 = colorChooserPanel_NumberFormatter0.stringToValue("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.darkGray;
      colorChooserPanel0.setSelectedColor(color0);
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.NAME;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, (-1));
      assertTrue(colorChooserPanel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.NAME;
      // Undeclared exception!
      try { 
        colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 15);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.CIRCLE_BLACKNESS_VALUE;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 31);
      assertTrue(colorChooserPanel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.CIRCLE_SATURATION;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 15);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.CIRCLE_HUE;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 16);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.TRANSPARENCY_TEXT;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, (-1609));
      assertFalse(colorChooserPanel0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      colorChooserPanel0.applyComponentOrientation(componentOrientation0);
      assertTrue(colorChooserPanel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.SATURATION;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 39);
      assertFalse(colorChooserPanel0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.BLACKNESS_VALUE;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 40);
      assertFalse(colorChooserPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = colorChooserPanel0.getSelectedColor();
      colorChooserPanel0.setSelectedColor(color0);
      int int0 = colorChooserPanel0.getBlacknessValue();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.HUE;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 15);
      assertFalse(colorChooserPanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = ColorCircle.getColorByHsv(15, 15, 15);
      colorChooserPanel0.setSelectedColor(color0);
      ColorChooserPanel.Field colorChooserPanel_Field0 = ColorChooserPanel.Field.NAME;
      colorChooserPanel0.fieldUpdated(colorChooserPanel_Field0, 15);
      assertTrue(colorChooserPanel0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      Color color0 = Color.getColor("de.chrlembeck.util.swing.components.ColorCircle$Hsv", 0);
      colorChooserPanel0.setReferenceColor(color0);
      assertFalse(colorChooserPanel0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColorChooserPanel colorChooserPanel0 = new ColorChooserPanel();
      ColorChooserPanel.NumberFormatter colorChooserPanel_NumberFormatter0 = new ColorChooserPanel.NumberFormatter(1415);
      Object object0 = colorChooserPanel0.getTreeLock();
      String string0 = colorChooserPanel_NumberFormatter0.valueToString(object0);
      assertNotNull(string0);
  }
}
