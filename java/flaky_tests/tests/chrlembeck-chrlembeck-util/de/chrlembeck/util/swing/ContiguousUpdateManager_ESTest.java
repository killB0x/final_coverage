/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:07:30 GMT 2022
 */

package de.chrlembeck.util.swing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.swing.ContiguousUpdateManager;
import javax.swing.JFormattedTextField;
import javax.swing.JPasswordField;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.UndoableEditEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.undo.UndoableEdit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ContiguousUpdateManager_ESTest extends ContiguousUpdateManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jPasswordField0);
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(contiguousUpdateManager0, contiguousUpdateManager0);
      contiguousUpdateManager0.setLimit(1);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
      // Undeclared exception!
      try { 
        contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jFormattedTextField0);
      // Undeclared exception!
      try { 
        contiguousUpdateManager0.undoableEditHappened((UndoableEditEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.ContiguousUpdateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ContiguousUpdateManager contiguousUpdateManager0 = null;
      try {
        contiguousUpdateManager0 = new ContiguousUpdateManager((JTextComponent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.ContiguousUpdateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringContent stringContent0 = new StringContent((-181));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextArea jTextArea0 = new JTextArea(defaultStyledDocument0, "P1Ayu<D3]F5Ux,B@", 0, 1);
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jTextArea0);
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(jTextArea0, contiguousUpdateManager0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
      stringContent0.insertString(0, "P1Ayu<D3]F5Ux,B@");
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JTextField jTextField0 = new JTextField();
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jTextField0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.CHANGE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = defaultStyledDocument0.new DefaultDocumentEvent(1992, 1992, documentEvent_EventType0);
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(abstractDocument_DefaultDocumentEvent0, abstractDocument_DefaultDocumentEvent0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      PlainDocument plainDocument0 = new PlainDocument();
      DocumentEvent.EventType documentEvent_EventType0 = DocumentEvent.EventType.REMOVE;
      AbstractDocument.DefaultDocumentEvent abstractDocument_DefaultDocumentEvent0 = plainDocument0.new DefaultDocumentEvent(0, 0, documentEvent_EventType0);
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(abstractDocument_DefaultDocumentEvent0, abstractDocument_DefaultDocumentEvent0);
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jFormattedTextField0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JTextField jTextField0 = new JTextField("+hcUH/a0", 0);
      ContiguousUpdateManager contiguousUpdateManager0 = new ContiguousUpdateManager(jTextField0);
      StringContent stringContent0 = new StringContent(0);
      UndoableEdit undoableEdit0 = stringContent0.remove(0, 0);
      UndoableEditEvent undoableEditEvent0 = new UndoableEditEvent(jTextField0, undoableEdit0);
      contiguousUpdateManager0.undoableEditHappened(undoableEditEvent0);
      String string0 = contiguousUpdateManager0.getUndoOrRedoPresentationName();
      assertEquals("Undo", string0);
  }
}
