/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:05:55 GMT 2022
 */

package de.chrlembeck.util.swing.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.swing.components.ColorCircle;
import de.chrlembeck.util.swing.components.plaf.DefaultColorCircleUI;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColorCircle_ESTest extends ColorCircle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getColorByHsv(120, (-748), (-748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getColorByHsv(60, 1146, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv((-1), (-926), 360);
      assertEquals(360, colorCircle_Hsv0.getBlacknessValue());
      assertEquals(283, colorCircle_Hsv0.getHue());
      assertEquals(910, colorCircle_Hsv0.getSaturation());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(243, 243, 1901);
      assertEquals(222, colorCircle_Hsv0.getSaturation());
      assertEquals(1901, colorCircle_Hsv0.getBlacknessValue());
      assertEquals(240, colorCircle_Hsv0.getHue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setSaturation(454);
      int int0 = colorCircle0.getSaturation();
      assertEquals(454, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setHue(240);
      int int0 = colorCircle0.getHue();
      assertEquals(240, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv((-2793), (-1408), (-1408));
      assertEquals((-1408), colorCircle_Hsv0.getBlacknessValue());
      assertEquals((-250), colorCircle_Hsv0.getSaturation());
      assertEquals(180, colorCircle_Hsv0.getHue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setBlacknessValue(214);
      colorCircle0.getColorByHsv();
      assertEquals(214, colorCircle0.getBlacknessValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = new ColorCircle.Hsv(0, 0, 0);
      Color color0 = colorCircle0.getColor(colorCircle_Hsv0);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setBlacknessValue((-284));
      int int0 = colorCircle0.getBlacknessValue();
      assertEquals((-284), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.addNotify();
      // Undeclared exception!
      try { 
        colorCircle0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getHsv(0, (-836), (-836));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("de.chrlembeck.util.swing.components.ColorCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setBlacknessValue((-701));
      // Undeclared exception!
      try { 
        colorCircle0.getColorByHsv();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      // Undeclared exception!
      try { 
        colorCircle0.getColor((ColorCircle.Hsv) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.swing.components.ColorCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getColorByHsv(1707, 1707, 1707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getColorByHsv(911, 911, 911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColorCircle.getColorByHsv(1401, 1401, 1401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = ColorCircle.getColorByHsv(0, 63, 0);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      String string0 = colorCircle0.getUIClassID();
      assertEquals("ColorCircleUI", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = new ColorCircle.Hsv(0, 0, 180);
      int int0 = colorCircle_Hsv0.getBlacknessValue();
      assertEquals(0, colorCircle_Hsv0.getHue());
      assertEquals(180, int0);
      assertEquals(0, colorCircle_Hsv0.getSaturation());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.updateUI();
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultColorCircleUI defaultColorCircleUI0 = new DefaultColorCircleUI();
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = defaultColorCircleUI0.getHsvFromcolorTriangle(colorCircle0, 0, (-1795));
      int int0 = colorCircle_Hsv0.getSaturation();
      assertEquals(0, int0);
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
      assertEquals(0, colorCircle_Hsv0.getHue());
      assertEquals(0, colorCircle_Hsv0.getBlacknessValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultColorCircleUI defaultColorCircleUI0 = new DefaultColorCircleUI();
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = defaultColorCircleUI0.getHsvFromcolorTriangle(colorCircle0, 0, (-70));
      int int0 = colorCircle_Hsv0.getHue();
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
      assertEquals(0, int0);
      assertEquals(0, colorCircle_Hsv0.getSaturation());
      assertEquals(0, colorCircle_Hsv0.getBlacknessValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(210, 200, 210);
      Color color0 = colorCircle0.getColor(colorCircle_Hsv0);
      assertEquals(12, colorCircle_Hsv0.getSaturation());
      assertEquals((-2963246), color0.getRGB());
      assertEquals(210, colorCircle_Hsv0.getBlacknessValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv((-59), 255, 255);
      // Undeclared exception!
      try { 
        colorCircle0.getColor(colorCircle_Hsv0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Color color0 = ColorCircle.getColorByHsv(127, 127, 127);
      assertEquals((-12615865), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(3630, 3630, (-59));
      assertEquals(3630, colorCircle_Hsv0.getBlacknessValue());
      assertEquals(60, colorCircle_Hsv0.getHue());
      assertEquals(259, colorCircle_Hsv0.getSaturation());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(0, 0, 0);
      assertEquals(0, colorCircle_Hsv0.getSaturation());
      assertEquals(0, colorCircle_Hsv0.getHue());
      assertEquals(0, colorCircle_Hsv0.getBlacknessValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(0, 0, 1114);
      String string0 = colorCircle_Hsv0.toString();
      assertEquals("HSV(240, 255, 1114)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      int int0 = colorCircle0.getBlacknessValue();
      assertEquals(0, int0);
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      Color color0 = colorCircle0.getColorByHsv();
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      // Undeclared exception!
      try { 
        colorCircle0.getUI();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class de.chrlembeck.util.swing.components.plaf.DefaultColorCircleUI cannot be cast to class de.chrlembeck.util.swing.components.plaf.AbstractColorCircleUI (de.chrlembeck.util.swing.components.plaf.DefaultColorCircleUI is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @6a205433; de.chrlembeck.util.swing.components.plaf.AbstractColorCircleUI is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @58187ee7)
         //
         verifyException("de.chrlembeck.util.swing.components.ColorCircle", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      int int0 = colorCircle0.getSaturation();
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setBlacknessValue(3630);
      int int0 = colorCircle0.getBlacknessValue();
      assertEquals(3630, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setSaturation((-1225));
      int int0 = colorCircle0.getSaturation();
      assertEquals((-1225), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      int int0 = colorCircle0.getHue();
      assertEquals("ColorCircleUI", colorCircle0.getUIClassID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      ColorCircle.Hsv colorCircle_Hsv0 = ColorCircle.getHsv(0, 0, 1114);
      // Undeclared exception!
      try { 
        colorCircle0.getColor(colorCircle_Hsv0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ColorCircle colorCircle0 = new ColorCircle();
      colorCircle0.setHue((-15));
      int int0 = colorCircle0.getHue();
      assertEquals((-15), int0);
  }
}
