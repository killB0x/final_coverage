/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:25:52 GMT 2022
 */

package de.chrlembeck.util.swing.icon;

import org.junit.Test;
import static org.junit.Assert.*;
import de.chrlembeck.util.swing.icon.BallIcon;
import de.chrlembeck.util.swing.icon.PaintedIconsHelper;
import java.awt.Color;
import java.awt.Paint;
import java.awt.SystemColor;
import javax.swing.Icon;
import javax.swing.JPasswordField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaintedIconsHelper_ESTest extends PaintedIconsHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = Color.gray;
      Icon icon0 = PaintedIconsHelper.createNavigateFastBackward((-1379), color0, (-4154.4707F), (Paint) null);
      assertEquals((-1379), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Color color0 = Color.gray;
      Icon icon0 = PaintedIconsHelper.createNavigateNextDouble((-5088), (Paint) null, 4316.0F, color0);
      assertEquals((-5088), icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      Color color1 = Color.green;
      Icon icon0 = PaintedIconsHelper.createNavigateDocumentEnd((-1529), color0, 183.89375F, color1);
      assertEquals((-1529), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.gray;
      Color color1 = Color.getColor((String) null, (-5088));
      Icon icon0 = PaintedIconsHelper.createNavigateDocumentStart((-5088), color0, (-2296.5F), color1);
      assertEquals((-5088), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      Color color1 = Color.green;
      Icon icon0 = PaintedIconsHelper.createNavigateBackward((-1529), color0, 0.0F, color1);
      assertEquals((-1529), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      Color color1 = Color.green;
      Icon icon0 = PaintedIconsHelper.createNavigateForward(0, color1, 183.89375F, color0);
      assertEquals(0, icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = Color.BLACK;
      Color color1 = Color.darkGray;
      Icon icon0 = PaintedIconsHelper.createNavigateSectionEnd(1802, color0, (-1.0F), color1);
      assertEquals(1802, icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlHighlight;
      Color color0 = Color.getColor("de.chrlembeck.util.swing.icon.ZoomIcon", 0);
      Icon icon0 = PaintedIconsHelper.createNavigateSectionStart((-4664), systemColor0, (-570.5893F), color0);
      assertEquals((-4664), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      Color color1 = Color.green;
      Icon icon0 = PaintedIconsHelper.createZoomOriginal((-100), color0, (-1529), color1, color0, (-88.1F));
      assertEquals((-100), icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      SystemColor systemColor1 = SystemColor.inactiveCaptionText;
      Icon icon0 = PaintedIconsHelper.createZoomOriginal(0, systemColor0, 0, systemColor1, systemColor1, 3.0F);
      assertEquals(0, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      Color color0 = jPasswordField0.getSelectionColor();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      Icon icon0 = PaintedIconsHelper.createZoomFit(0, systemColor0, (-2053.1946F), color0, color0, (-1078.362F));
      assertEquals(0, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Color color0 = Color.BLACK;
      SystemColor systemColor0 = SystemColor.scrollbar;
      Icon icon0 = PaintedIconsHelper.createZoomFit(7, color0, 2787.986F, color0, systemColor0, (-1));
      assertEquals(7, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JPasswordField jPasswordField0 = new JPasswordField();
      Color color0 = jPasswordField0.getSelectionColor();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      Icon icon0 = PaintedIconsHelper.createZoom(0, color0, 1.0F, systemColor0);
      assertEquals(0, icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = Color.lightGray;
      Icon icon0 = PaintedIconsHelper.createZoomMinus(1, (Paint) null, 0, color0, (Paint) null, (-1969.8134F));
      assertEquals(1, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.lightGray;
      Icon icon0 = PaintedIconsHelper.createZoomMinus(0, (Paint) null, 283.29F, color0, color0, 1.0F);
      assertEquals(0, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = Color.lightGray;
      Icon icon0 = PaintedIconsHelper.createZoomPlus(0, color0, (-1126.122F), (Paint) null, color0, 1.0F);
      assertEquals(0, icon0.getIconHeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Color color0 = Color.red;
      Icon icon0 = PaintedIconsHelper.createZoomPlus(968, color0, 0.0F, color0, (Paint) null, 0.0F);
      assertEquals(968, icon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlHighlight;
      BallIcon ballIcon0 = PaintedIconsHelper.createBall(0, systemColor0);
      assertEquals(0, ballIcon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Color color0 = new Color((-1), true);
      BallIcon ballIcon0 = PaintedIconsHelper.createBall((-1), color0);
      assertEquals((-1), ballIcon0.getIconWidth());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BallIcon ballIcon0 = PaintedIconsHelper.createBall(1, (Color) null);
      assertEquals(1, ballIcon0.getSize());
  }
}
