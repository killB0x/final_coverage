/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 16 18:08:59 GMT 2022
 */

package de.chrlembeck.util.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.chrlembeck.util.collections.BidirectionalGrowingArray;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.IntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BidirectionalGrowingArray_ESTest extends BidirectionalGrowingArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) integerArray0, (Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.put(0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer1 = bidirectionalGrowingArray0.put(0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0, 3469);
      Integer integer0 = bidirectionalGrowingArray0.put(3469, integerArray0[4]);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer0 = bidirectionalGrowingArray0.get(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer[] integerArray0 = new Integer[7];
      bidirectionalGrowingArray0.array = integerArray0;
      int int0 = bidirectionalGrowingArray0.size();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0, 1739);
      Iterator<Integer> iterator0 = bidirectionalGrowingArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.getRange();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.get(1538);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = null;
      try {
        bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>((IntFunction<Integer[]>) null, (-4205));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = null;
      try {
        bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>((IntFunction<Integer[]>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      try { 
        bidirectionalGrowingArray0.getRange();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      int[] intArray0 = bidirectionalGrowingArray0.getRange();
      assertArrayEquals(new int[] {0, 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-523));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4));
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2551));
      integerArray0[4] = integer4;
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) integerArray0, (Object) null).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer[] integerArray1 = new Integer[1];
      bidirectionalGrowingArray0.array = integerArray1;
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.put((-1), integer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer0 = new Integer(1);
      Integer integer1 = bidirectionalGrowingArray0.put(1, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer0 = bidirectionalGrowingArray0.get(1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0, 1739);
      Integer integer0 = bidirectionalGrowingArray0.get(1739);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      Integer integer0 = bidirectionalGrowingArray0.get((-382));
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0);
      int int0 = bidirectionalGrowingArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer[] integerArray1 = new Integer[9];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) integerArray0, (Object) integerArray1).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0, (-10));
      // Undeclared exception!
      try { 
        bidirectionalGrowingArray0.put((-1), integerArray1[8]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("de.chrlembeck.util.collections.BidirectionalGrowingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      IntFunction<Integer[]> intFunction0 = (IntFunction<Integer[]>) mock(IntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integerArray0).when(intFunction0).apply(anyInt());
      BidirectionalGrowingArray<Integer> bidirectionalGrowingArray0 = new BidirectionalGrowingArray<Integer>(intFunction0, (-10));
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      bidirectionalGrowingArray0.forEach(consumer0);
      assertEquals(6, bidirectionalGrowingArray0.size());
  }
}
