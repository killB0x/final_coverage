/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:44:07 GMT 2022
 */

package org.xson.tangyuan.xml.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.executor.ServiceContext;
import org.xson.tangyuan.sharding.ShardingArgVo;
import org.xson.tangyuan.sharding.ShardingResult;
import org.xson.tangyuan.xml.node.DynamicTextNode;
import org.xson.tangyuan.xml.node.StaticTextNode;
import org.xson.tangyuan.xml.node.TextNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode("Field does not exist: ");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      TextNode.ShardingCheckerTokenHandler textNode_ShardingCheckerTokenHandler0 = staticTextNode0.new ShardingCheckerTokenHandler(shardingArgVo_ShardingTemplate0);
      // Undeclared exception!
      try { 
        textNode_ShardingCheckerTokenHandler0.handleToken("Field does not exist: ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.xson.tangyuan.TangYuanContainer
         //
         verifyException("org.xson.tangyuan.xml.node.TextNode$ShardingCheckerTokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DynamicTextNode dynamicTextNode0 = new DynamicTextNode("org.xson.tangyuan.sharding.ShardingDefVo");
      TextNode.StaticCheckerTokenHandler textNode_StaticCheckerTokenHandler0 = dynamicTextNode0.new StaticCheckerTokenHandler();
      String string0 = textNode_StaticCheckerTokenHandler0.handleToken(" 47Ws*ZoWi6S`]");
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DynamicTextNode dynamicTextNode0 = new DynamicTextNode((String) null);
      dynamicTextNode0.pretreatment();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode("");
      LinkedList<ShardingArgVo> linkedList0 = new LinkedList<ShardingArgVo>();
      staticTextNode0.shardingArgList = (List<ShardingArgVo>) linkedList0;
      ShardingArgVo shardingArgVo0 = mock(ShardingArgVo.class, new ViolatedAssumptionAnswer());
      doReturn((ShardingResult) null).when(shardingArgVo0).getShardingResult(any());
      linkedList0.add(shardingArgVo0);
      Object object0 = new Object();
      TextNode.ShardingProcessTokenHandler textNode_ShardingProcessTokenHandler0 = staticTextNode0.new ShardingProcessTokenHandler((ServiceContext) null, object0);
      // Undeclared exception!
      try { 
        textNode_ShardingProcessTokenHandler0.handleToken("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.TextNode$ShardingProcessTokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode("");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.I;
      TextNode.ShardingCheckerTokenHandler textNode_ShardingCheckerTokenHandler0 = staticTextNode0.new ShardingCheckerTokenHandler(shardingArgVo_ShardingTemplate0);
      // Undeclared exception!
      try { 
        textNode_ShardingCheckerTokenHandler0.handleToken("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // sharding\u6807\u7B7E\u4E0D\u5408\u6CD5
         //
         verifyException("org.xson.tangyuan.xml.node.TextNode$ShardingCheckerTokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode("gJU-c`%");
      LinkedList<ShardingArgVo> linkedList0 = new LinkedList<ShardingArgVo>();
      staticTextNode0.shardingArgList = (List<ShardingArgVo>) linkedList0;
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      TextNode.ShardingCheckerTokenHandler textNode_ShardingCheckerTokenHandler0 = staticTextNode0.new ShardingCheckerTokenHandler(shardingArgVo_ShardingTemplate0);
      // Undeclared exception!
      try { 
        textNode_ShardingCheckerTokenHandler0.handleToken("gJU-c`%");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.xson.tangyuan.TangYuanContainer
         //
         verifyException("org.xson.tangyuan.xml.node.TextNode$ShardingCheckerTokenHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode(",6zwm-rsm#n");
      TextNode.StaticCheckerTokenHandler textNode_StaticCheckerTokenHandler0 = staticTextNode0.new StaticCheckerTokenHandler();
      String string0 = textNode_StaticCheckerTokenHandler0.handleToken((String) null);
      assertEquals("?", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StaticTextNode staticTextNode0 = new StaticTextNode("");
      TextNode.StaticCheckerTokenHandler textNode_StaticCheckerTokenHandler0 = staticTextNode0.new StaticCheckerTokenHandler();
      textNode_StaticCheckerTokenHandler0.handleToken("6C");
      String string0 = textNode_StaticCheckerTokenHandler0.handleToken("");
      assertEquals("?", string0);
  }
}
