/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon Nov 14 08:53:11 GMT 2022
 */

package org.xson.tangyuan.xml.node;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class InternalSelectVarNode_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.xson.tangyuan.xml.node.InternalSelectVarNode"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/user"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(InternalSelectVarNode_ESTest_scaffolding.class.getClassLoader() ,
      "org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl",
      "org.xson.tangyuan.cache.vo.CacheVo$CacheStrategyType",
      "org.xson.tangyuan.cache.LocalCache",
      "org.xson.tangyuan.cache.vo.CacheBase$CacheKey",
      "org.xson.tangyuan.xml.parsing.TokenParserUtil",
      "org.xson.tangyuan.xml.node.LogNode",
      "org.xson.tangyuan.cache.vo.CacheBase",
      "org.xson.tangyuan.cache.AbstractCache",
      "org.xson.tangyuan.logging.LogFactory",
      "org.xson.tangyuan.logging.LogFactory$1",
      "org.xson.tangyuan.logging.Log",
      "org.xson.tangyuan.xml.node.AbstractSqlNode",
      "org.xson.tangyuan.cache.LoggingCache",
      "org.xson.tangyuan.xml.node.SqlNode",
      "org.xson.tangyuan.cache.vo.CacheUseVo",
      "org.xson.tangyuan.logging.LogFactory$2",
      "org.xson.tangyuan.cache.RedisCache",
      "org.xson.tangyuan.cache.WeakCache",
      "org.xson.tangyuan.cache.ICache",
      "org.xson.tangyuan.xml.node.InternalSelectVarNode",
      "org.xson.tangyuan.TangYuanException",
      "org.xson.tangyuan.cache.vo.CacheVo",
      "org.xson.tangyuan.executor.ServiceContext",
      "org.xson.tangyuan.cache.CacheException",
      "org.xson.tangyuan.task.AsyncTask",
      "org.xson.tangyuan.cache.EhCacheCache",
      "org.xson.tangyuan.logging.LogException",
      "org.xson.tangyuan.cache.vo.CacheVo$CacheType",
      "org.xson.tangyuan.transaction.XTransactionDefinition"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(InternalSelectVarNode_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.xson.tangyuan.xml.node.AbstractSqlNode",
      "org.xson.tangyuan.logging.LogFactory$1",
      "org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl",
      "org.xson.tangyuan.logging.LogFactory$2",
      "org.xson.tangyuan.logging.LogFactory",
      "org.xson.tangyuan.xml.node.InternalSelectVarNode",
      "org.xson.tangyuan.cache.AbstractCache",
      "org.xson.tangyuan.cache.LRUCache",
      "org.xson.tangyuan.cache.LRUCache$1",
      "org.xson.tangyuan.mapping.DefaultMappingHandler",
      "org.xson.tangyuan.mapping.MappingVo",
      "org.xson.tangyuan.cache.vo.CacheVo",
      "org.xson.tangyuan.TangYuanException",
      "org.xson.tangyuan.xml.node.LogNode",
      "org.xson.tangyuan.xml.parsing.TokenParserUtil",
      "org.xson.tangyuan.cache.MemcachedCache",
      "org.xson.tangyuan.cache.vo.CacheBase",
      "org.xson.tangyuan.cache.vo.CacheUseVo",
      "org.xson.tangyuan.xml.node.TextNode",
      "org.xson.tangyuan.xml.node.DynamicTextNode",
      "org.xson.tangyuan.cache.vo.CacheBase$CacheKey",
      "org.xson.tangyuan.ognl.expr.ExprGroupVo",
      "org.xson.tangyuan.xml.node.ExceptionNode",
      "org.xson.tangyuan.cache.LocalCache",
      "org.xson.tangyuan.ognl.vars.VariableVo",
      "org.xson.tangyuan.xml.node.ReturnNode",
      "org.xson.tangyuan.TangYuanContainer",
      "org.xson.tangyuan.cache.RedisCache",
      "org.xson.tangyuan.cache.FIFOCache",
      "org.xson.tangyuan.xml.node.ReturnNode$ReturnItem",
      "org.xson.tangyuan.xml.node.ForEachNode",
      "org.xson.tangyuan.cache.ScheduledCache",
      "org.xson.tangyuan.cache.LoggingCache",
      "org.xson.tangyuan.cache.vo.CacheCleanVo",
      "org.xson.tangyuan.xml.node.DeleteNode",
      "org.xson.tangyuan.xml.node.ProcedureNode",
      "org.xson.tangyuan.cache.SoftCache",
      "org.xson.tangyuan.cache.EhCacheCache",
      "org.xson.tangyuan.xml.node.SetVarNode",
      "org.xson.tangyuan.cache.SynchronizedCache",
      "org.xson.tangyuan.transaction.XTransactionDefinition",
      "org.xson.tangyuan.xml.node.SelectSetNode",
      "org.xson.tangyuan.xml.node.StaticTextNode",
      "org.xson.tangyuan.xml.parsing.GenericTokenParser",
      "org.xson.tangyuan.xml.node.TextNode$StaticCheckerTokenHandler",
      "org.xson.tangyuan.xml.node.TextNode$ShardingCheckerTokenHandler",
      "org.xson.tangyuan.sharding.ShardingArgVo$ShardingTemplate",
      "org.xson.tangyuan.cache.WeakCache",
      "org.xson.tangyuan.xml.node.TransGroupNode",
      "org.xson.tangyuan.xml.node.InternalProcedureNode",
      "org.xson.tangyuan.xml.node.InternalDeleteNode",
      "org.xson.tangyuan.xml.node.IfNode",
      "org.xson.tangyuan.xml.node.ServiceNode",
      "org.xson.tangyuan.cache.CacheException",
      "org.xson.tangyuan.xml.node.MixedNode",
      "org.xson.tangyuan.xml.node.InternalUpdateNode",
      "org.xson.tangyuan.util.SerializeUtil",
      "org.xson.tangyuan.xml.node.InternalInsertNode",
      "org.xson.tangyuan.xml.node.SelectVarNode",
      "org.xson.tangyuan.util.ClassLoaderWrapper",
      "org.xson.tangyuan.util.Resources",
      "org.xson.tangyuan.xml.node.InsertNode",
      "org.xson.tangyuan.ognl.Ognl",
      "org.xson.tangyuan.xml.node.UpdateNode",
      "org.xson.tangyuan.xml.node.InternalSelectSetNode",
      "org.xson.tangyuan.ognl.vars.VariableParser",
      "org.xson.tangyuan.ognl.vars.VariableUnitVo",
      "org.xson.tangyuan.ognl.vars.VariableUnitVo$VariableUnitEnum",
      "org.xson.tangyuan.cache.SoftCache$SoftEntry",
      "org.xson.tangyuan.logging.log4j.Log4jImpl",
      "org.xson.tangyuan.xml.node.DynamicTextNode$DynamicCheckerTokenParser",
      "org.xson.tangyuan.cache.WeakCache$WeakEntry",
      "org.xson.tangyuan.util.NumberUtils",
      "org.xson.tangyuan.ognl.OgnlException",
      "org.xson.tangyuan.sharding.ShardingArgVo",
      "org.xson.tangyuan.xml.node.TextNode$ShardingProcessTokenHandler",
      "org.xson.tangyuan.xml.node.DynamicTextNode$DynamicTokenParser",
      "org.xson.tangyuan.xml.XmlParseException"
    );
  }
}
