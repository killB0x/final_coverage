/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:51:12 GMT 2022
 */

package org.xson.tangyuan.xml.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.xml.parsing.GenericTokenParser;
import org.xson.tangyuan.xml.parsing.TokenHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GenericTokenParser_ESTest extends GenericTokenParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("P", "|`Pq ", tokenHandler0);
      genericTokenParser0.parse("P");
      TokenHandler tokenHandler1 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tokenHandler1).handleToken(anyString());
      GenericTokenParser genericTokenParser1 = new GenericTokenParser("P", "}", tokenHandler1);
      genericTokenParser0.parse("P");
      genericTokenParser1.parse("=Pv)7Q_g5}");
      genericTokenParser1.parse("=null");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "=Pv)7Q_g5}", tokenHandler0);
      String string0 = "\\6Az*|FZHVR^C\\'\\";
      // Undeclared exception!
      genericTokenParser0.parse("\u0006Az*|FZHVR^C'");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      String string1 = "=Pv)7Q_g5}";
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "=Pv)7Q_g5}", tokenHandler0);
      // Undeclared exception!
      genericTokenParser0.parse("\u0006Az*|FZHVR^C'");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "{U3yvb^)8@^>1", tokenHandler0);
      String string1 = null;
      genericTokenParser0.parse((String) null);
      String string2 = "org.xson.tangyuan.xml.parsing.GenericTokenParser";
      // Undeclared exception!
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("`\"XgsJjH9G", "\u4E0D\u5B58\u5728\u7684sharding.table.keywords:", tokenHandler0);
      genericTokenParser0.parse("`\"XgsJjH9G");
      genericTokenParser0.parse("\u4E0D\u5B58\u5728\u7684sharding.table.keywords:");
      genericTokenParser0.parse((String) null);
      genericTokenParser0.parse("\u4E0D\u5B58\u5728\u7684sharding.table.keywords:");
      genericTokenParser0.parse("");
      genericTokenParser0.parse("\"n5*,B{G.c6.4B");
      genericTokenParser0.parse("f<RPu.&`{10Y#1g1");
      genericTokenParser0.parse("~sn)<h;Q#lX");
      genericTokenParser0.parse("\"n5*,B{G.c6.4B");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      GenericTokenParser genericTokenParser0 = new GenericTokenParser((String) null, "", (TokenHandler) null);
      genericTokenParser0.parse((String) null);
      String string1 = "org.xson.tangyuan.xml.parsing.GenericTokenParser";
      genericTokenParser0.parse("");
      genericTokenParser0.parse("");
      // Undeclared exception!
      try { 
        genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("org.xson.tangyuan.xml.parsing.GenericTokenParser", "sH4dd", tokenHandler0);
      genericTokenParser0.parse("sH4dd");
      genericTokenParser0.parse("sH4dd");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
      genericTokenParser0.parse("C#rMO,O?m02");
      genericTokenParser0.parse("");
      genericTokenParser0.parse("sH4dd");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
      genericTokenParser0.parse("C#rMO,O?m02");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "2|JyD:I)O?.OQ;X", (TokenHandler) null);
      genericTokenParser0.parse("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "BBZI~>Qnu-=%lC<Mt";
      String string1 = "M}zK>A";
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("wJVR}J#", "wJVR}J#", (TokenHandler) null);
      // Undeclared exception!
      try { 
        genericTokenParser0.parse("wJVR}J#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("L`", "L`", tokenHandler0);
      String string0 = "s)1Yr`$)ak?";
      // Undeclared exception!
      try { 
        genericTokenParser0.parse("L`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("TD)5Yd", "x|cK)NK!'", (TokenHandler) null);
      GenericTokenParser genericTokenParser1 = new GenericTokenParser("TD)5Yd", "YW(n+|9", (TokenHandler) null);
      genericTokenParser1.parse("x|cK)NK!'");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "", (TokenHandler) null);
      genericTokenParser0.parse("");
      // Undeclared exception!
      try { 
        genericTokenParser0.parse("wSp%7V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.parsing.GenericTokenParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "org.xson.tangyuan.xml.parsing.GenericTokenParser";
      String string1 = "\"j+I?1ZlP)ng.)!X";
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", "\"j+I?1ZlP)ng.)!X", (TokenHandler) null);
      // Undeclared exception!
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("/i+-F82", "org.xson.tangyuan.xml.parsing.GenericTokenParser", tokenHandler0);
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
      genericTokenParser0.parse("org.xson.tangyuan.xml.parsing.GenericTokenParser");
      genericTokenParser0.parse(",");
      genericTokenParser0.parse("/i+-F82");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("[2{n~q5[I[OTKRk", "[2{n~q5[I[OTKRk", (TokenHandler) null);
      GenericTokenParser genericTokenParser1 = new GenericTokenParser("UV\"tp(c3Iob+{ p='>", "F./YkAG(36ONhS", (TokenHandler) null);
      genericTokenParser1.parse("UV\"tp(c3Iob+{ p='>");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tokenHandler0).handleToken(anyString());
      GenericTokenParser genericTokenParser0 = new GenericTokenParser("", " Jz4(Mz|/X(.<\"", tokenHandler0);
      // Undeclared exception!
      genericTokenParser0.parse(" Jz4(Mz|/X(.<\"");
  }
}
