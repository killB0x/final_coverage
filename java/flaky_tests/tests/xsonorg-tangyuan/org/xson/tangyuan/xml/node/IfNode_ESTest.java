/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:48:47 GMT 2022
 */

package org.xson.tangyuan.xml.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.executor.ServiceContext;
import org.xson.tangyuan.ognl.expr.ExprGroupVo;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.xml.node.ForEachNode;
import org.xson.tangyuan.xml.node.IfNode;
import org.xson.tangyuan.xml.node.LogNode;
import org.xson.tangyuan.xml.node.MixedNode;
import org.xson.tangyuan.xml.node.ReturnNode;
import org.xson.tangyuan.xml.node.SetVarNode;
import org.xson.tangyuan.xml.node.SqlNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IfNode_ESTest extends IfNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      IfNode ifNode0 = new IfNode((SqlNode) null, exprGroupVo0);
      IfNode ifNode1 = new IfNode((SqlNode) null, exprGroupVo0);
      ifNode1.addElseNode(ifNode0);
      assertTrue(ifNode1.isHasElseNode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LogNode logNode0 = new LogNode(180000000, "l[,&HIX^Da");
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      IfNode ifNode0 = new IfNode(logNode0, exprGroupVo0);
      ifNode0.addElseNode(ifNode0);
      boolean boolean0 = ifNode0.isHasElseNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn("<~VJc%IqWD&3~Z$TBM6").when(variableVo0).getValue(any());
      ReturnNode.ReturnItem returnNode_ReturnItem0 = new ReturnNode.ReturnItem("<~VJc%IqWD&3~Z$TBM6", variableVo0);
      VariableVo variableVo1 = returnNode_ReturnItem0.value;
      ForEachNode forEachNode0 = new ForEachNode((SqlNode) null, variableVo1, "<~VJc%IqWD&3~Z$TBM6", "", "", "org.xson.tangyuan.xml.node.DynamicTextNode");
      IfNode ifNode0 = new IfNode(forEachNode0, (ExprGroupVo) null);
      try { 
        ifNode0.execute((ServiceContext) null, variableVo1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ForEachNode: \u83B7\u53D6\u5BF9\u8C61\u975E\u96C6\u5408\u83B7\u53D6\u96C6\u5408\u5143\u7D20\u4E3A\u7A7A
         //
         verifyException("org.xson.tangyuan.xml.node.ForEachNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<SqlNode> linkedList0 = new LinkedList<SqlNode>();
      MixedNode mixedNode0 = new MixedNode(linkedList0);
      linkedList0.add((SqlNode) mixedNode0);
      IfNode ifNode0 = new IfNode(mixedNode0, (ExprGroupVo) null);
      try { 
        ifNode0.execute((ServiceContext) null, (Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SetVarNode setVarNode0 = new SetVarNode("&lt;", "&lt;");
      IfNode ifNode0 = new IfNode(setVarNode0, (ExprGroupVo) null);
      try { 
        ifNode0.execute((ServiceContext) null, setVarNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/xson/common/object/XCO
         //
         verifyException("org.xson.tangyuan.ognl.Ognl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogNode logNode0 = new LogNode(2709, "k{{Or!o");
      IfNode ifNode0 = new IfNode(logNode0, (ExprGroupVo) null);
      ifNode0.addElseIfNode(ifNode0);
      ifNode0.addElseIfNode(ifNode0);
      assertFalse(ifNode0.isHasElseNode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      ReturnNode.ReturnItem returnNode_ReturnItem0 = new ReturnNode.ReturnItem("", variableVo0);
      VariableVo variableVo1 = returnNode_ReturnItem0.value;
      LinkedList<ReturnNode.ReturnItem> linkedList0 = new LinkedList<ReturnNode.ReturnItem>();
      Class<IfNode> class0 = IfNode.class;
      ReturnNode returnNode0 = new ReturnNode(variableVo1, linkedList0, class0);
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      IfNode ifNode0 = new IfNode(returnNode0, exprGroupVo0);
      try { 
        ifNode0.execute((ServiceContext) null, exprGroupVo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprGroupVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SetVarNode setVarNode0 = new SetVarNode("&lt;", "&lt;");
      IfNode ifNode0 = new IfNode(setVarNode0, (ExprGroupVo) null);
      boolean boolean0 = ifNode0.execute((ServiceContext) null, (Object) null);
      assertFalse(ifNode0.isHasElseNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      IfNode ifNode0 = new IfNode((SqlNode) null, exprGroupVo0);
      ifNode0.addElseNode(ifNode0);
      // Undeclared exception!
      try { 
        ifNode0.addElseIfNode(ifNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5F53\u524D\u8282\u70B9\u4E0D\u80FD\u518D\u52A0\u5165else if node
         //
         verifyException("org.xson.tangyuan.xml.node.IfNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      IfNode ifNode0 = new IfNode((SqlNode) null, exprGroupVo0);
      ifNode0.addElseNode(ifNode0);
      // Undeclared exception!
      try { 
        ifNode0.addElseNode(ifNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5F53\u524D\u8282\u70B9\u4E0D\u80FD\u518D\u52A0\u5165else node
         //
         verifyException("org.xson.tangyuan.xml.node.IfNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<SqlNode> linkedList0 = new LinkedList<SqlNode>();
      MixedNode mixedNode0 = new MixedNode(linkedList0);
      IfNode ifNode0 = new IfNode(mixedNode0, (ExprGroupVo) null);
      boolean boolean0 = ifNode0.isHasElseNode();
      assertFalse(boolean0);
  }
}
