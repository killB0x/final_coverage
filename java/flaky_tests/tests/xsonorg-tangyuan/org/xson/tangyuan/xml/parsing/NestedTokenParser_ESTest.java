/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:29:32 GMT 2022
 */

package org.xson.tangyuan.xml.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.xml.parsing.NestedTokenParser;
import org.xson.tangyuan.xml.parsing.TokenHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NestedTokenParser_ESTest extends NestedTokenParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("(end - start) < 3", "a", tokenHandler0);
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("(end - start) < 3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser(">", "zw}a9", tokenHandler0);
      nestedTokenParser0.parse(">");
      nestedTokenParser0.parse((String) null);
      nestedTokenParser0.parse("y1>h+tHa Z");
      nestedTokenParser0.parse("zw}a9");
      nestedTokenParser0.parse(">");
      TokenHandler tokenHandler1 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser1 = new NestedTokenParser(">", "y1>h+tHa Z", tokenHandler1);
      nestedTokenParser1.parse("");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("?", "?", tokenHandler0);
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("FgB MQ%@L  .]nb?~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("-_ev%", "org.xson.tangyuan.xml.node.DynamicTextNode$DynamicTokenParser", tokenHandler0);
      nestedTokenParser0.parse("{D:");
      nestedTokenParser0.parse("sb.length() > 0");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.parsing.NestedTokenParser");
      nestedTokenParser0.parse("-_ev%");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.node.DynamicTextNode$DynamicTokenParser");
      nestedTokenParser0.parse((String) null);
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "wh>}#", tokenHandler0);
      String string0 = "pd}Yxn";
      // Undeclared exception!
      nestedTokenParser0.parse("pd}Yxn");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "(end - start) < 3";
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("(end - start) < 3", "(end - start) < 3", tokenHandler0);
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("sharding\u6807\u7B7E\u4E0D\u5408\u6CD5");
      nestedTokenParser0.parse("sharding\u6807\u7B7E\u4E0D\u5408\u6CD5");
      nestedTokenParser0.parse((String) null);
      nestedTokenParser0.parse((String) null);
      nestedTokenParser0.parse("-D6]q_\">PBXZ)q");
      nestedTokenParser0.parse("WRE/>+");
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("(end - start) < 3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("sb.length() > 0", (String) null, (TokenHandler) null);
      nestedTokenParser0.parse((String) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "B\\xkI!tRCRNH<|)";
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("BxkI!tRCRNH<|)", "BxkI!tRCRNH<|)", tokenHandler0);
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("BxkI!tRCRNH<|)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser(",", "B", (TokenHandler) null);
      nestedTokenParser0.parse(",");
      nestedTokenParser0.parse("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "uIqnlGsE5+", tokenHandler0);
      String string0 = "P&[W-'?hYH,-;5";
      // Undeclared exception!
      nestedTokenParser0.parse("P&[W-'?hYH,-;5");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("M8p )H#|1H}", "M8p )H#|1H}", tokenHandler0);
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.node.TextNode");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.node.TextNode");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.node.TextNode");
      nestedTokenParser0.parse("xX[+VzBB3J X");
      nestedTokenParser0.parse("org.xson.tangyuan.xml.node.TextNode");
      nestedTokenParser0.parse("F3!]#h");
      nestedTokenParser0.parse("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("0|1woPx'e EUV", "?", (TokenHandler) null);
      nestedTokenParser0.parse("?");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "nBtQ@elT;9";
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "FWP:(i|rqe", (TokenHandler) null);
      // Undeclared exception!
      nestedTokenParser0.parse("nBtQ@elT;9");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      TokenHandler tokenHandler0 = mock(TokenHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(tokenHandler0).handleToken(anyString());
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "", tokenHandler0);
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("");
      nestedTokenParser0.parse("");
      String string1 = "c5Wd";
      // Undeclared exception!
      nestedTokenParser0.parse(">XC'F7`!?Z9m^C");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "", (TokenHandler) null);
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("\u4E0D\u5B58\u5728\u7684sharding.table:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "", (TokenHandler) null);
      String string0 = nestedTokenParser0.parse("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "";
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser("", "", (TokenHandler) null);
      nestedTokenParser0.parse("");
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("Q}a[8n13i kr.To;6B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser((String) null, "", (TokenHandler) null);
      nestedTokenParser0.parse("");
      String string1 = null;
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse("sb4k>vqz_iy$fUcR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NestedTokenParser nestedTokenParser0 = new NestedTokenParser(",", ",", (TokenHandler) null);
      // Undeclared exception!
      try { 
        nestedTokenParser0.parse(",");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
