/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:58:29 GMT 2022
 */

package org.xson.tangyuan.xml.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.cache.EhCacheCache;
import org.xson.tangyuan.cache.MemcachedCache;
import org.xson.tangyuan.cache.vo.CacheCleanVo;
import org.xson.tangyuan.cache.vo.CacheUseVo;
import org.xson.tangyuan.cache.vo.CacheVo;
import org.xson.tangyuan.executor.ServiceContext;
import org.xson.tangyuan.mapping.DefaultMappingHandler;
import org.xson.tangyuan.mapping.MappingVo;
import org.xson.tangyuan.ognl.expr.ExprGroupVo;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.transaction.XTransactionDefinition;
import org.xson.tangyuan.xml.node.DeleteNode;
import org.xson.tangyuan.xml.node.ExceptionNode;
import org.xson.tangyuan.xml.node.ForEachNode;
import org.xson.tangyuan.xml.node.InsertNode;
import org.xson.tangyuan.xml.node.InternalInsertNode;
import org.xson.tangyuan.xml.node.InternalUpdateNode;
import org.xson.tangyuan.xml.node.LogNode;
import org.xson.tangyuan.xml.node.MixedNode;
import org.xson.tangyuan.xml.node.ProcedureNode;
import org.xson.tangyuan.xml.node.ReturnNode;
import org.xson.tangyuan.xml.node.SelectSetNode;
import org.xson.tangyuan.xml.node.ServiceNode;
import org.xson.tangyuan.xml.node.SqlNode;
import org.xson.tangyuan.xml.node.UpdateNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractSqlNode_ESTest extends AbstractSqlNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409281140L);
      assertEquals("(1level slow sql service 180ms)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409281118L);
      assertEquals("(2level slow sql service 202ms)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409280835L);
      assertEquals("(3level slow sql service 485ms)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409280820L);
      assertEquals("(4level slow sql service 500ms)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(5000L);
      assertEquals("(5level slow sql service 1392409276320ms)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(707);
      Boolean boolean0 = Boolean.TRUE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("[!M6k.B78CL]BTS@", (String) null, integer0, integer0, integer0, boolean0);
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      ExceptionNode exceptionNode0 = new ExceptionNode(exprGroupVo0, 50, "5", (String) null);
      DeleteNode deleteNode0 = new DeleteNode("[!M6k.B78CL]BTS@", "", "[!M6k.B78CL]BTS@", "5", xTransactionDefinition0, exceptionNode0, (CacheCleanVo) null);
      UpdateNode updateNode0 = new UpdateNode("5", "UOEE60N|je", "org.xson.tangyuan.cache.LocalCache", "", xTransactionDefinition0, deleteNode0, (CacheCleanVo) null);
      boolean boolean1 = updateNode0.isSimple();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Boolean.valueOf(false);
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("ms)", "ms)", integer0, integer0, integer0, boolean0);
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      ReturnNode.ReturnItem returnNode_ReturnItem0 = new ReturnNode.ReturnItem("", variableVo0);
      VariableVo variableVo1 = returnNode_ReturnItem0.value;
      LinkedList<ReturnNode.ReturnItem> linkedList0 = new LinkedList<ReturnNode.ReturnItem>();
      Class<Object> class0 = Object.class;
      ReturnNode returnNode0 = new ReturnNode(variableVo1, linkedList0, class0);
      String[] stringArray0 = new String[7];
      CacheCleanVo cacheCleanVo0 = new CacheCleanVo((CacheVo) null, "ms)", stringArray0, "");
      UpdateNode updateNode0 = new UpdateNode("ms)", "ms)", "ms)", "ms)", xTransactionDefinition0, returnNode0, cacheCleanVo0);
      XTransactionDefinition xTransactionDefinition1 = updateNode0.getTxDef();
      assertEquals(0, xTransactionDefinition1.getIsolation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Integer integer0 = new Integer(1431655765);
      Boolean boolean0 = Boolean.FALSE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition(" }4", "initialConnections", integer0, integer0, integer0, boolean0);
      procedureNode0.txDef = xTransactionDefinition0;
      XTransactionDefinition xTransactionDefinition1 = procedureNode0.getTxDef();
      assertEquals(1, XTransactionDefinition.ISOLATION_READ_UNCOMMITTED);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Integer integer0 = new Integer((-2137008117));
      Boolean boolean0 = Boolean.TRUE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("", "", integer0, integer0, integer0, boolean0);
      procedureNode0.txDef = xTransactionDefinition0;
      XTransactionDefinition xTransactionDefinition1 = procedureNode0.getTxDef();
      assertFalse(xTransactionDefinition1.isNewTranscation());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition((String) null);
      UpdateNode updateNode0 = new UpdateNode("", "cM&{%DjY[HB7K@Y=IT", "", (String) null, xTransactionDefinition0, procedureNode0, (CacheCleanVo) null);
      assertEquals("", updateNode0.getServiceKey());
      
      updateNode0.serviceKey = "cM&{%DjY[HB7K@Y=IT";
      String string0 = updateNode0.getServiceKey();
      assertEquals("cM&{%DjY[HB7K@Y=IT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      procedureNode0.serviceKey = "";
      String string0 = procedureNode0.getServiceKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(65);
      Boolean boolean0 = Boolean.FALSE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("7nOB,f'%X|N/4p;", "org.xson.tangyuan.xml.node.ReturnNode", integer0, integer0, integer0, boolean0);
      LogNode logNode0 = new LogNode(2, "xx");
      String[] stringArray0 = new String[7];
      CacheCleanVo cacheCleanVo0 = new CacheCleanVo((CacheVo) null, "", stringArray0, "RWN*L");
      InsertNode insertNode0 = new InsertNode("", "", "", class0, "3DrDC-c8:{^bE TL=", xTransactionDefinition0, logNode0, cacheCleanVo0);
      Class<?> class1 = insertNode0.getResultType();
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getNs();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("");
      UpdateNode updateNode0 = new UpdateNode("3level slow sql service ", "", "3level slow sql service ", "", xTransactionDefinition0, (SqlNode) null, (CacheCleanVo) null);
      String string0 = updateNode0.getNs();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition((String) null);
      UpdateNode updateNode0 = new UpdateNode("", "cM&{%DjY[HB7K@Y=IT", "", (String) null, xTransactionDefinition0, procedureNode0, (CacheCleanVo) null);
      InternalInsertNode internalInsertNode0 = new InternalInsertNode("ms)", "m|1BBnL1a XmCs Ep_", "ms)", updateNode0, (CacheCleanVo) null);
      UpdateNode updateNode1 = new UpdateNode("startTime[", "cM&{%DjY[HB7K@Y=IT", "", "cM&{%DjY[HB7K@Y=IT", xTransactionDefinition0, internalInsertNode0, (CacheCleanVo) null);
      String string0 = updateNode1.getId();
      assertEquals("startTime[", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("1)b[nZH[");
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      EhCacheCache ehCacheCache0 = new EhCacheCache();
      CacheVo cacheVo0 = new CacheVo("", cacheVo_CacheType0, ehCacheCache0, true, "", (Map<String, String>) null);
      String[] stringArray0 = new String[0];
      CacheCleanVo cacheCleanVo0 = new CacheCleanVo(cacheVo0, "", stringArray0, "");
      Class<Object> class0 = Object.class;
      ServiceNode serviceNode0 = new ServiceNode("", "JXbpfq/;p55h(|vK:jI", "", "JXbpfq/;p55h(|vK:jI", xTransactionDefinition0, (SqlNode) null, (CacheUseVo) null, cacheCleanVo0, class0);
      String string0 = serviceNode0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = Integer.getInteger((String) null, (Integer) null);
      Boolean boolean0 = Boolean.TRUE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("D|B,.aW", "C-dwx SSw", (Integer) null, (Integer) null, integer0, boolean0);
      LinkedList<SqlNode> linkedList0 = new LinkedList<SqlNode>();
      MixedNode mixedNode0 = new MixedNode(linkedList0);
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      ReturnNode.ReturnItem returnNode_ReturnItem0 = new ReturnNode.ReturnItem("", variableVo0);
      VariableVo variableVo1 = returnNode_ReturnItem0.value;
      ForEachNode forEachNode0 = new ForEachNode(mixedNode0, variableVo1, "", "", "C-dwx SSw", "C-dwx SSw");
      InsertNode insertNode0 = new InsertNode((String) null, (String) null, "==", class0, "JK7HkF$=K5", xTransactionDefinition0, forEachNode0, (CacheCleanVo) null);
      String string0 = insertNode0.getDsKey();
      assertNotNull(string0);
      assertEquals("JK7HkF$=K5", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Boolean boolean0 = Boolean.TRUE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("5level slow sql service ", "5level slow sql service ", integer0, integer0, (Integer) null, boolean0);
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      MemcachedCache memcachedCache0 = new MemcachedCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("5level slow sql service ", cacheVo_CacheType0, memcachedCache0, false, "", hashMap0);
      CacheCleanVo cacheCleanVo0 = new CacheCleanVo(cacheVo0, "5level slow sql service ", (String[]) null, "5level slow sql service ");
      InternalUpdateNode internalUpdateNode0 = new InternalUpdateNode("5level slow sql service ", "", (SqlNode) null, cacheCleanVo0);
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "z4f3Sc-la%U\"HP%b", (Integer) null, (String[]) null, "1level slow sql service ");
      Class<Object> class0 = Object.class;
      ServiceNode serviceNode0 = new ServiceNode("5level slow sql service ", "5level slow sql service ", "5level slow sql service ", "", xTransactionDefinition0, internalUpdateNode0, cacheUseVo0, cacheCleanVo0, class0);
      String string0 = serviceNode0.getDsKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409282386L);
      assertEquals("(-1066ms)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409281120L);
      assertEquals("(2level slow sql service 200ms)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409281020L);
      assertEquals("(3level slow sql service 300ms)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409280804L);
      assertEquals("(4level slow sql service 516ms)", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409280320L);
      assertEquals("(5level slow sql service 1000ms)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getSlowServiceLog(1392409281220L);
      assertEquals("(1level slow sql service 100ms)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Class<?> class0 = procedureNode0.getResultType();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      // Undeclared exception!
      try { 
        procedureNode0.getResult((ServiceContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.AbstractSqlNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      String string0 = procedureNode0.getDsKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      boolean boolean0 = procedureNode0.isSimple();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      XTransactionDefinition xTransactionDefinition0 = procedureNode0.getTxDef();
      assertNull(xTransactionDefinition0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition((String) null);
      UpdateNode updateNode0 = new UpdateNode("", "cM&{%DjY[HB7K@Y=IT", "", (String) null, xTransactionDefinition0, procedureNode0, (CacheCleanVo) null);
      String string0 = updateNode0.getNs();
      assertEquals("cM&{%DjY[HB7K@Y=IT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(707);
      Boolean boolean0 = Boolean.TRUE;
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("[!M6k.B78CL]BTS@", (String) null, integer0, integer0, integer0, boolean0);
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      ExceptionNode exceptionNode0 = new ExceptionNode(exprGroupVo0, 50, "5", (String) null);
      DeleteNode deleteNode0 = new DeleteNode("[!M6k.B78CL]BTS@", "", "[!M6k.B78CL]BTS@", "5", xTransactionDefinition0, exceptionNode0, (CacheCleanVo) null);
      Class<Object> class0 = Object.class;
      DefaultMappingHandler defaultMappingHandler0 = new DefaultMappingHandler();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MappingVo mappingVo0 = new MappingVo("", (String) null, class0, defaultMappingHandler0, hashMap0);
      SelectSetNode selectSetNode0 = new SelectSetNode("[!M6k.B78CL]BTS@", "[!M6k.B78CL]BTS@", (String) null, class0, mappingVo0, "UOEE60N|je", (Integer) 2, xTransactionDefinition0, deleteNode0, (CacheUseVo) null);
      String string0 = selectSetNode0.getServiceKey();
      assertNull(string0);
      assertEquals("[!M6k.B78CL]BTS@", deleteNode0.getServiceKey());
  }
}
