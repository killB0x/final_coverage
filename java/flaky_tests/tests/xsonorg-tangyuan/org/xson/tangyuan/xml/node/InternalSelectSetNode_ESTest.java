/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:50:03 GMT 2022
 */

package org.xson.tangyuan.xml.node;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.cache.LocalCache;
import org.xson.tangyuan.cache.MemcachedCache;
import org.xson.tangyuan.cache.RedisCache;
import org.xson.tangyuan.cache.vo.CacheUseVo;
import org.xson.tangyuan.cache.vo.CacheVo;
import org.xson.tangyuan.executor.ServiceContext;
import org.xson.tangyuan.xml.node.DynamicTextNode;
import org.xson.tangyuan.xml.node.InternalSelectSetNode;
import org.xson.tangyuan.xml.node.ProcedureNode;
import org.xson.tangyuan.xml.node.SqlNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InternalSelectSetNode_ESTest extends InternalSelectSetNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DynamicTextNode dynamicTextNode0 = new DynamicTextNode("");
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      Integer integer0 = new Integer(0);
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("", "", dynamicTextNode0, class0, integer0, (CacheUseVo) null);
      internalSelectSetNode0.getFetchSize();
      assertFalse(internalSelectSetNode0.isSimple());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      Integer integer0 = new Integer(57);
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("a`+J~b^(m&", "a`+J~b^(m&", (SqlNode) null, class0, integer0, (CacheUseVo) null);
      internalSelectSetNode0.getFetchSize();
      assertFalse(internalSelectSetNode0.isSimple());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      Integer integer0 = new Integer((-308));
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.LOCAL;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("atTY'!tP;vw.n(g", cacheVo_CacheType0, redisCache0, false, "y4/9xIgE~", hashMap0);
      String[] stringArray0 = new String[6];
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "", integer0, stringArray0, "y4/9xIgE~");
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("atTY'!tP;vw.n(g", "atTY'!tP;vw.n(g", procedureNode0, class0, integer0, cacheUseVo0);
      internalSelectSetNode0.getFetchSize();
      assertFalse(internalSelectSetNode0.isSimple());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      Integer integer0 = new Integer(476);
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("Illegal logical expression operator in object comparison: ", cacheVo_CacheType0, redisCache0, true, "(!b", hashMap0);
      String[] stringArray0 = new String[0];
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "sql execution time: ", (Integer) null, stringArray0, "sql execution time: ");
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("Illegal logical expression operator in object comparison: ", "Illegal logical expression operator in object comparison: ", (SqlNode) null, class0, integer0, cacheUseVo0);
      Object object0 = new Object();
      try { 
        internalSelectSetNode0.execute((ServiceContext) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: org/xson/thirdparty/redis/JedisClient
         //
         verifyException("org.xson.tangyuan.cache.RedisCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      MemcachedCache memcachedCache0 = new MemcachedCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("Illegal logical expression operator in objec comparison: ", cacheVo_CacheType0, memcachedCache0, false, "Illegal logical expression operator in objec comparison: ", hashMap0);
      String[] stringArray0 = new String[0];
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "Illegal logical expression operator in objec comparison: ", (Integer) null, stringArray0, "Illegal logical expression operator in objec comparison: ");
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("Illegal logical expression operator in objec comparison: ", "Illegal logical expression operator in objec comparison: ", (SqlNode) null, class0, (Integer) null, cacheUseVo0);
      try { 
        internalSelectSetNode0.execute((ServiceContext) null, internalSelectSetNode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/whalin/MemCached/MemCachedClient
         //
         verifyException("org.xson.tangyuan.cache.MemcachedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Integer integer0 = new Integer(0);
      LocalCache localCache0 = new LocalCache("a`J~$vwm&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      CacheVo cacheVo0 = new CacheVo("a`J~$vwm&", cacheVo_CacheType0, localCache0, false, "a`J~$vwm&", hashMap0);
      String[] stringArray0 = new String[4];
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "a`J~$vwm&", integer0, stringArray0, "a`J~$vwm&");
      cacheVo0.putObject("a`J~$vwm&", cacheUseVo0, integer0, stringArray0, "a`J~$vwm&");
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("a`J~$vwm&", "a`J~$vwm&", procedureNode0, class0, integer0, cacheUseVo0);
      try { 
        internalSelectSetNode0.execute((ServiceContext) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.InternalSelectSetNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Integer integer0 = new Integer(0);
      LocalCache localCache0 = new LocalCache("a`J~$vwm&");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      CacheVo cacheVo0 = new CacheVo("a`J~$vwm&", cacheVo_CacheType0, localCache0, true, "a`J~$vwm&", hashMap0);
      String[] stringArray0 = new String[4];
      CacheUseVo cacheUseVo0 = new CacheUseVo(cacheVo0, "a`J~$vwm&", integer0, stringArray0, stringArray0[1]);
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode(stringArray0[1], "a`J~$vwm&", procedureNode0, class0, integer0, cacheUseVo0);
      try { 
        internalSelectSetNode0.execute((ServiceContext) null, "a`J~$vwm&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.InternalSelectSetNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<InternalSelectSetNode> class0 = InternalSelectSetNode.class;
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("Illegal logical expression operator in object comparison: ", "Illegal logical expression operator in object comparison: ", (SqlNode) null, class0, (Integer) null, (CacheUseVo) null);
      try { 
        internalSelectSetNode0.execute((ServiceContext) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.InternalSelectSetNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ProcedureNode procedureNode0 = new ProcedureNode();
      Class<String> class0 = String.class;
      InternalSelectSetNode internalSelectSetNode0 = new InternalSelectSetNode("", "", procedureNode0, class0, (Integer) null, (CacheUseVo) null);
      // Undeclared exception!
      try { 
        internalSelectSetNode0.getFetchSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.xml.node.InternalSelectSetNode", e);
      }
  }
}
