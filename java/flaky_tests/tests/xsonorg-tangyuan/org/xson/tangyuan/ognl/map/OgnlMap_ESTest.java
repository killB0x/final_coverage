/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 07:56:03 GMT 2022
 */

package org.xson.tangyuan.ognl.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.FieldVo;
import org.xson.tangyuan.ognl.map.OgnlMap;
import org.xson.tangyuan.ognl.vars.VariableUnitVo;
import org.xson.tangyuan.ognl.vars.VariableVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OgnlMap_ESTest extends OgnlMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.VAR;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo0).toString();
      doReturn((String) null).when(variableUnitVo0).getName();
      doReturn((VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("r", linkedList0);
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getValueFromMap error: {r=[null]}
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo0).getName();
      doReturn((VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getValueFromMap error: {}
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn("L").when(variableUnitVo0).getName();
      doReturn(variableUnitVo_VariableUnitEnum0, variableUnitVo_VariableUnitEnum0).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("L", object0);
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      Object object1 = OgnlMap.getValue(hashMap0, variableVo0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.INDEX;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo0).getName();
      doReturn((VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getValueFromMap error: {}
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      doReturn(false).when(variableVo0).isHasDefault();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum1 = VariableUnitVo.VariableUnitEnum.VAR;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn("L", (String) null).when(variableUnitVo0).getName();
      doReturn(variableUnitVo_VariableUnitEnum0, variableUnitVo_VariableUnitEnum1, variableUnitVo_VariableUnitEnum1, (VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      OgnlMap.getValue(hashMap0, variableVo0);
      VariableVo variableVo1 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo1).getVarUnit();
      doReturn(linkedList0).when(variableVo1).getVarUnitList();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getValueFromMap error: {}
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn("L").when(variableUnitVo0).getName();
      doReturn(variableUnitVo_VariableUnitEnum0, variableUnitVo_VariableUnitEnum0).when(variableUnitVo0).getType();
      linkedList0.addFirst((VariableUnitVo) null);
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableVo0).getOriginal();
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // get map value error: null
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo0).toString();
      doReturn("length").when(variableUnitVo0).getName();
      doReturn(variableUnitVo_VariableUnitEnum0, variableUnitVo_VariableUnitEnum0).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      linkedList0.add((VariableUnitVo) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("length", linkedList0);
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn("length").when(variableUnitVo0).getName();
      doReturn(variableUnitVo_VariableUnitEnum0, variableUnitVo_VariableUnitEnum0).when(variableUnitVo0).getType();
      linkedList0.offerFirst(variableUnitVo0);
      linkedList0.add((VariableUnitVo) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // get map value error: 0
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Map<String, Object> map0 = OgnlMap.beanToMap("");
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(variableUnitVo0, (VariableUnitVo) null).when(variableVo0).getVarUnit();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(map0, variableVo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      VariableUnitVo variableUnitVo1 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn("~fS)m+bMJwE{-").when(variableUnitVo1).getName();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(variableUnitVo0, variableUnitVo1).when(variableVo0).getVarUnit();
      Object object0 = new Object();
      hashMap0.put("~fS)m+bMJwE{-", object0);
      Object object1 = OgnlMap.getValue(hashMap0, variableVo0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Map<String, Object> map0 = OgnlMap.beanToMap("");
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      VariableUnitVo variableUnitVo1 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo1).getName();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(variableUnitVo0, variableUnitVo1).when(variableVo0).getVarUnit();
      doReturn(false).when(variableVo0).isHasDefault();
      Object object0 = OgnlMap.getValue(map0, variableVo0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      Map<String, Object> map0 = OgnlMap.beanToMap(variableUnitVo0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<String, Object> map0 = OgnlMap.beanToMap((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<VariableUnitVo> linkedList0 = new LinkedList<VariableUnitVo>();
      VariableUnitVo.VariableUnitEnum variableUnitVo_VariableUnitEnum0 = VariableUnitVo.VariableUnitEnum.PROPERTY;
      VariableUnitVo variableUnitVo0 = mock(VariableUnitVo.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(variableUnitVo0).getName();
      doReturn((VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null, (VariableUnitVo.VariableUnitEnum) null).when(variableUnitVo0).getType();
      linkedList0.addFirst((VariableUnitVo) null);
      linkedList0.offerFirst(variableUnitVo0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("L", variableUnitVo_VariableUnitEnum0);
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((VariableUnitVo) null).when(variableVo0).getVarUnit();
      doReturn(linkedList0).when(variableVo0).getVarUnitList();
      // Undeclared exception!
      try { 
        OgnlMap.getValue(hashMap0, variableVo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getValueFromMap error: {L=PROPERTY}
         //
         verifyException("org.xson.tangyuan.ognl.map.OgnlMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OgnlMap ognlMap0 = new OgnlMap();
      FieldVo.fieldVoWrapperCache = null;
      // Undeclared exception!
      try { 
        OgnlMap.beanToMap(ognlMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }
}
