/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:24:42 GMT 2022
 */

package org.xson.tangyuan.ognl.expr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.expr.ExprGroupVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExprGroupVo_ESTest extends ExprGroupVo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("or", false);
      // Undeclared exception!
      try { 
        exprGroupVo0.getResult("or");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprGroupVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      boolean boolean0 = exprGroupVo0.check();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit(">", true);
      exprGroupVo0.addOperators(">");
      exprGroupVo0.addUnit(">", true);
      // Undeclared exception!
      try { 
        exprGroupVo0.getResult(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 3
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit(".", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit \u4E0D\u5408\u6CD5\u7684\u5185\u5BB9:.
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      // Undeclared exception!
      try { 
        exprGroupVo0.addOperators("Ij)B(o@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:Ij)B(o@
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      boolean boolean0 = exprGroupVo0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      boolean boolean0 = exprGroupVo0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("HR+X%dFzhaLd5P*Opv", true);
      exprGroupVo0.addUnit("HR+X%dFzhaLd5P*Opv", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("illegal logical expression operator in object comparison: ", true);
      boolean boolean0 = exprGroupVo0.getResult((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", false);
      exprGroupVo0.addUnit("I=k+]QV2J", true);
      exprGroupVo0.addUnit("and", true);
      boolean boolean0 = exprGroupVo0.getResult("and");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", false);
      // Undeclared exception!
      try { 
        exprGroupVo0.getResult("and");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", true);
      boolean boolean0 = exprGroupVo0.getResult("and");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", false);
      boolean boolean0 = exprGroupVo0.getResult("and");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addOperators("and");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addOperators("and");
      exprGroupVo0.addUnit("and", true);
      exprGroupVo0.addUnit("and", true);
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit("and", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit error
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit("", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("or", false);
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit("and", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u591A\u6761\u4EF6\u5224\u65AD\u7684\u662F\u5426[and|or]\u53EA\u80FD\u9009\u5176\u4E00
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprGroupVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExprGroupVo exprGroupVo0 = new ExprGroupVo();
      exprGroupVo0.addUnit("and", false);
      // Undeclared exception!
      try { 
        exprGroupVo0.addUnit("or", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u591A\u6761\u4EF6\u5224\u65AD\u7684\u662F\u5426[and|or]\u53EA\u80FD\u9009\u5176\u4E00
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprGroupVo", e);
      }
  }
}
