/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:14:40 GMT 2022
 */

package org.xson.tangyuan.ognl.vars;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.vars.VariableParser;
import org.xson.tangyuan.ognl.vars.VariableVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VariableParser_ESTest extends VariableParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("DATE", true);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("[z-[')", false);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableParser.parse((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.vars.VariableParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableParser.parse("VUk.)J|FJy XmaT", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5C5E\u6027\u7684\u9ED8\u8BA4\u503C\u4E0D\u5408\u6CD5:VUk.)J|FJy XmaT
         //
         verifyException("org.xson.tangyuan.ognl.vars.VariableParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableParser.parse("v0p|'+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5C5E\u6027\u7684\u9ED8\u8BA4\u503C\u4E0D\u5408\u6CD5:v0p|'+
         //
         verifyException("org.xson.tangyuan.ognl.vars.VariableParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableParser.parse("Hi0Qn*7wRK%|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5C5E\u6027\u7684\u9ED8\u8BA4\u503C\u4E0D\u5408\u6CD5:Hi0Qn*7wRK%|
         //
         verifyException("org.xson.tangyuan.ognl.vars.VariableParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("?|8", true);
      assertTrue(variableVo0.isHasDefault());
      assertEquals("?|8", variableVo0.getOriginal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("kq{[c&BL[]eu=", false);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse(".", false);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        VariableParser.parse("j;Z~wb-+65K[+ [$Zd", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("[\"9O", false);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("['#}X8^ZpV|", false);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse(" M[_:pDLX", true);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("6zFG R}{]POq['94'", true);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("([~]", true);
      assertFalse(variableVo0.isHasDefault());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VariableParser variableParser0 = new VariableParser();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VariableVo variableVo0 = VariableParser.parse("?.|8", true);
      assertTrue(variableVo0.isHasDefault());
      assertEquals("?.|8", variableVo0.getOriginal());
  }
}
