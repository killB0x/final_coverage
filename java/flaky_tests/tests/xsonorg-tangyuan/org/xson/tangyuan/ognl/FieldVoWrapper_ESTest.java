/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:29:46 GMT 2022
 */

package org.xson.tangyuan.ognl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.FieldVo;
import org.xson.tangyuan.ognl.FieldVoWrapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FieldVoWrapper_ESTest extends FieldVoWrapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<FieldVo> linkedList0 = new LinkedList<FieldVo>();
      FieldVoWrapper fieldVoWrapper0 = new FieldVoWrapper(linkedList0);
      linkedList0.add((FieldVo) null);
      List<FieldVo> list0 = fieldVoWrapper0.getFieldList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<FieldVo> linkedList0 = new LinkedList<FieldVo>();
      linkedList0.add((FieldVo) null);
      FieldVoWrapper fieldVoWrapper0 = null;
      try {
        fieldVoWrapper0 = new FieldVoWrapper(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.FieldVoWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<FieldVo> linkedList0 = new LinkedList<FieldVo>();
      FieldVoWrapper fieldVoWrapper0 = new FieldVoWrapper(linkedList0);
      Map<String, FieldVo> map0 = fieldVoWrapper0.getFieldMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<FieldVo> linkedList0 = new LinkedList<FieldVo>();
      FieldVoWrapper fieldVoWrapper0 = new FieldVoWrapper(linkedList0);
      List<FieldVo> list0 = fieldVoWrapper0.getFieldList();
      assertTrue(list0.isEmpty());
  }
}
