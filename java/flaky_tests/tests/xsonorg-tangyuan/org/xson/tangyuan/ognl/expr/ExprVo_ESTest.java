/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 07:59:00 GMT 2022
 */

package org.xson.tangyuan.ognl.expr;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.expr.ExprVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExprVo_ESTest extends ExprVo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      exprVo0.addOperators("!=");
      ExprVo.exprOperators2 = 9;
      exprVo0.addUnit("true", false);
      // Undeclared exception!
      try { 
        exprVo0.getResult("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 2
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      ExprVo.exprOperators1 = 5;
      exprVo0.addOperators("!=");
      exprVo0.addUnit("true", false);
      boolean boolean0 = exprVo0.getResult("!=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("g>>lqwmg99{^", true);
      ExprVo.exprOperators2 = 3;
      // Undeclared exception!
      try { 
        exprVo0.getResult("g>>lqwmg99{^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 2
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("m}Y", true);
      exprVo0.exprOperators1 = 6;
      exprVo0.addOperators("&lt;");
      exprVo0.addUnit("&lt;", true);
      // Undeclared exception!
      try { 
        exprVo0.getResult((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 5
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("true", false);
      ExprVo.exprOperators2 = 2428;
      // Undeclared exception!
      try { 
        exprVo0.getResult("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in boolean comparison: 2
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      ExprVo.exprOperators1 = 6;
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("true", false);
      boolean boolean0 = exprVo0.getResult("true");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("null", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("null", true);
      boolean boolean0 = exprVo0.check();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      ExprVo.exprOperators6 = (-1114474772);
      exprVo0.addUnit("<GOTdK{V", true);
      exprVo0.addOperators("&lt;=");
      exprVo0.addOperators("&lt;=");
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      ExprVo.exprOperators2 = (-81);
      exprVo0.addOperators("!=");
      // Undeclared exception!
      try { 
        exprVo0.addUnit("g>=>lqwmg9{^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit error
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("0", false);
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.getResult(exprVo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addOperators("M!fe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:M!fe
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("&lt;=");
      exprVo0.addUnit("!=", true);
      // Undeclared exception!
      try { 
        exprVo0.getResult("!=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 6
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      ExprVo.exprOperators1 = 2;
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("true", true);
      boolean boolean0 = exprVo0.getResult("true");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("q&hz{-;bg#;u", true);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("!=", true);
      boolean boolean0 = exprVo0.getResult("!=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("&lt=;", true);
      exprVo0.addOperators("&gt;=");
      exprVo0.addUnit("&lt=;", true);
      // Undeclared exception!
      try { 
        exprVo0.getResult("&lt=;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in object comparison: 4
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("==", true);
      exprVo0.addOperators("==");
      exprVo0.addUnit("==", true);
      boolean boolean0 = exprVo0.getResult("==");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("&gt;");
      exprVo0.addUnit("true", false);
      // Undeclared exception!
      try { 
        exprVo0.getResult("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal logical expression operator in boolean comparison: 3
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      ExprVo.exprOperators1 = 2;
      exprVo0.addUnit("true", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("true", false);
      boolean boolean0 = exprVo0.getResult("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      exprVo0.addOperators("!=");
      exprVo0.addUnit((String) null, true);
      boolean boolean0 = exprVo0.getResult("!=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("null", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("null", true);
      boolean boolean0 = exprVo0.getResult("null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("==", true);
      exprVo0.addOperators("==");
      exprVo0.addUnit("==", true);
      boolean boolean0 = exprVo0.check();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      boolean boolean0 = exprVo0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("<GOTdK{V", true);
      // Undeclared exception!
      try { 
        exprVo0.addOperators("<GOTdK{V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:<GOTdK{V
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("or", true);
      exprVo0.addOperators("or");
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("and", true);
      exprVo0.addOperators("and");
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("<=", true);
      exprVo0.addOperators("<=");
      assertEquals(6, ExprVo.exprOperators6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("<", true);
      exprVo0.addOperators("<");
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit(">=", true);
      exprVo0.addOperators(">=");
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit(">", true);
      exprVo0.addOperators(">");
      assertEquals(6, ExprVo.exprOperators6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("&lt;=", true);
      exprVo0.addOperators("&lt;=");
      // Undeclared exception!
      try { 
        exprVo0.addOperators("&lt;=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:&lt;=
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("==", true);
      exprVo0.addOperators("==");
      exprVo0.addUnit("==", true);
      // Undeclared exception!
      try { 
        exprVo0.addUnit("==", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit error
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("Illegal logical expression operator in numeric comparison: ", true);
      // Undeclared exception!
      try { 
        exprVo0.addUnit("Illegal logical expression operator in numeric comparison: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit error
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("false", false);
      assertEquals(6, ExprVo.exprOperators6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("true", false);
      boolean boolean0 = exprVo0.check();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit("or", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:or
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit("and", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u4E0D\u5408\u7406\u7684\u8868\u8FBE\u5F0F\u64CD\u4F5C\u7B26:and
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("null", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("null", false);
      boolean boolean0 = exprVo0.getResult("!=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit("", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit(".2", false);
      exprVo0.addOperators("!=");
      exprVo0.addUnit(".2", false);
      boolean boolean0 = exprVo0.getResult(".2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit("{Zg{|c*8L!O+Vp,ox", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit \u4E0D\u5408\u6CD5\u7684\u5185\u5BB9:{Zg{|c*8L!O+Vp,ox
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      // Undeclared exception!
      try { 
        exprVo0.addUnit("CdB(CX^^zt0Eu'=x", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // addUnit \u4E0D\u5408\u6CD5\u7684\u5185\u5BB9:CdB(CX^^zt0Eu'=x
         //
         verifyException("org.xson.tangyuan.ognl.expr.ExprVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("{\"lt7=}", false);
      assertEquals(3, ExprVo.exprOperators3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ExprVo exprVo0 = new ExprVo();
      exprVo0.addUnit("!=", true);
      exprVo0.addOperators("!=");
      exprVo0.addUnit("!=", true);
      boolean boolean0 = exprVo0.getResult("!=");
      assertFalse(boolean0);
  }
}
