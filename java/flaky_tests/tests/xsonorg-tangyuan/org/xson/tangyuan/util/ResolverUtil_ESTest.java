/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:52:10 GMT 2022
 */

package org.xson.tangyuan.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.annotation.Annotation;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.util.ResolverUtil;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ResolverUtil_ESTest extends ResolverUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResolverUtil<Object> resolverUtil0 = new ResolverUtil<Object>();
      String string0 = resolverUtil0.getPackagePath("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      ResolverUtil.IsA resolverUtil_IsA0 = new ResolverUtil.IsA(class0);
      ResolverUtil<Integer> resolverUtil1 = resolverUtil0.find(resolverUtil_IsA0, "xy+3#Xj|");
      assertSame(resolverUtil1, resolverUtil0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResolverUtil<Object> resolverUtil0 = new ResolverUtil<Object>();
      String string0 = resolverUtil0.getPackagePath((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolverUtil<Annotation> resolverUtil0 = new ResolverUtil<Annotation>();
      String string0 = resolverUtil0.getPackagePath("is assignable to Object");
      assertEquals("is assignable to Object", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ResolverUtil<Class<Object>> resolverUtil0 = new ResolverUtil<Class<Object>>();
      ResolverUtil<Class<Object>> resolverUtil1 = resolverUtil0.findAnnotated(class0, (String[]) null);
      assertSame(resolverUtil0, resolverUtil1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      Class<Annotation> class0 = Annotation.class;
      String[] stringArray0 = new String[8];
      ResolverUtil<Integer> resolverUtil1 = resolverUtil0.findAnnotated(class0, stringArray0);
      assertSame(resolverUtil0, resolverUtil1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      ResolverUtil<Integer> resolverUtil1 = resolverUtil0.findImplementations(class0, (String[]) null);
      assertSame(resolverUtil1, resolverUtil0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      ClassLoader classLoader0 = resolverUtil0.getClassLoader();
      resolverUtil0.setClassLoader(classLoader0);
      ClassLoader classLoader1 = resolverUtil0.getClassLoader();
      assertSame(classLoader1, classLoader0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      Class<Annotation> class0 = Annotation.class;
      ResolverUtil.AnnotatedWith resolverUtil_AnnotatedWith0 = new ResolverUtil.AnnotatedWith(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      resolverUtil0.setClassLoader(classLoader0);
      resolverUtil0.addIfMatching(resolverUtil_AnnotatedWith0, "v:gB!$-EVX9H.T<YZyj");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      ResolverUtil.AnnotatedWith resolverUtil_AnnotatedWith0 = new ResolverUtil.AnnotatedWith(class1);
      boolean boolean0 = resolverUtil_AnnotatedWith0.matches(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ResolverUtil.AnnotatedWith resolverUtil_AnnotatedWith0 = new ResolverUtil.AnnotatedWith(class0);
      boolean boolean0 = resolverUtil_AnnotatedWith0.matches((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolverUtil.IsA resolverUtil_IsA0 = new ResolverUtil.IsA(class0);
      boolean boolean0 = resolverUtil_IsA0.matches(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Integer> class1 = Integer.class;
      ResolverUtil.IsA resolverUtil_IsA0 = new ResolverUtil.IsA(class1);
      boolean boolean0 = resolverUtil_IsA0.matches(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ResolverUtil.IsA resolverUtil_IsA0 = new ResolverUtil.IsA(class0);
      boolean boolean0 = resolverUtil_IsA0.matches((Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolverUtil.IsA resolverUtil_IsA0 = new ResolverUtil.IsA(class0);
      String string0 = resolverUtil_IsA0.toString();
      assertEquals("is assignable to Object", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolverUtil<Class<Annotation>> resolverUtil0 = new ResolverUtil<Class<Annotation>>();
      String[] stringArray0 = new String[8];
      ResolverUtil<Class<Annotation>> resolverUtil1 = resolverUtil0.findImplementations(class0, stringArray0);
      assertSame(resolverUtil1, resolverUtil0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResolverUtil<Integer> resolverUtil0 = new ResolverUtil<Integer>();
      Set<Class<? extends Integer>> set0 = resolverUtil0.getClasses();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ResolverUtil.AnnotatedWith resolverUtil_AnnotatedWith0 = new ResolverUtil.AnnotatedWith(class0);
      String string0 = resolverUtil_AnnotatedWith0.toString();
      assertEquals("annotated with @Annotation", string0);
  }
}
