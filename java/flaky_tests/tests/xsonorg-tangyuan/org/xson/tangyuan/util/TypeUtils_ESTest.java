/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:07:09 GMT 2022
 */

package org.xson.tangyuan.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.FieldVo;
import org.xson.tangyuan.ognl.FieldVoWrapper;
import org.xson.tangyuan.util.TypeUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TypeUtils.getLittleClassName(".}<~9MM9'%CwXdI7{@");
      assertEquals(".}<~9MM9'%CwXdI7{@", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = TypeUtils.toAsmClass("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = TypeUtils.getLittleClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<?> class0 = TypeUtils.findClass("[[[[[[[[[[[[[[[[[[[Lorg.xson.tangyuan.ognl.FieldVo;");
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toAsmClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isBeanType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getPrimitiveLetter((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getMethodMap((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getLittleClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getExceptionDesc((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getDesc((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getDesc((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getComponentType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      // Undeclared exception!
      TypeUtils.getComponentDesc(class0, 2147483645);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getBeanField((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<FieldVoWrapper> class0 = FieldVoWrapper.class;
      // Undeclared exception!
      TypeUtils.getArrayType(class0, 2147473654);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getArrayType((Class<?>) null, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getArrayDimensions((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.findClass("sun.org.xson.tangyuan.ognl.FieldVoWrapper");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: sun.org.xson.tangyuan.ognl.FieldVoWrapper
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      String string0 = TypeUtils.getComponentDesc(class0, 20);
      assertEquals("[[[[[[[[[[[[[[[[[[[Lorg.xson.tangyuan.ognl.FieldVo;", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getComponentDesc((Class<?>) null, 1970);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      String string0 = TypeUtils.getType(class0);
      assertEquals("org/xson/tangyuan/ognl/FieldVo", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Class<?> class1 = TypeUtils.getArrayType(class0, 32);
      String string0 = TypeUtils.getDesc(class1);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[Lorg/xson/tangyuan/ognl/FieldVo;", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Map<String, Method> map0 = TypeUtils.getMethodMap(class0);
      assertEquals(11, map0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      FieldVoWrapper fieldVoWrapper0 = TypeUtils.getBeanField(class0);
      assertNotNull(fieldVoWrapper0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = TypeUtils.isBeanType(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<FieldVo> linkedList0 = new LinkedList<FieldVo>();
      FieldVoWrapper fieldVoWrapper0 = new FieldVoWrapper(linkedList0);
      boolean boolean0 = TypeUtils.isBeanType(fieldVoWrapper0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Class<?> class1 = TypeUtils.getArrayType(class0, 26);
      TypeUtils.getComponentType(class1);
      assertEquals("class [[[[[[[[[[[[[[[[[[[[[[[[[Lorg.xson.tangyuan.ognl.FieldVo;", class1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<?> class0 = TypeUtils.findClass("org.xson.tangyuan.TangYuanException");
      Class<?> class1 = TypeUtils.getComponentType(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      // Undeclared exception!
      try { 
        TypeUtils.getArrayType(class0, (-423));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unlawful dimension\uFF1A-423
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Class<?> class1 = TypeUtils.getArrayType(class0, 1);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      // Undeclared exception!
      try { 
        TypeUtils.getPrimitiveLetter(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Type: org.xson.tangyuan.ognl.FieldVo is not a primitive type
         //
         verifyException("org.xson.tangyuan.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Class<?> class1 = TypeUtils.getArrayType(class0, 3);
      String string0 = TypeUtils.getType(class1);
      assertEquals("[[Lorg/xson/tangyuan/ognl/FieldVo;", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<FieldVoWrapper> class0 = FieldVoWrapper.class;
      String string0 = TypeUtils.getDesc(class0);
      assertEquals("Lorg/xson/tangyuan/ognl/FieldVoWrapper;", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<FieldVo> class0 = FieldVo.class;
      Class<?> class1 = TypeUtils.getArrayType(class0, 32);
      int int0 = TypeUtils.getArrayDimensions(class1);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<?> class0 = TypeUtils.findClass("org.xson.tangyuan.TangYuanException");
      int int0 = TypeUtils.getArrayDimensions(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = TypeUtils.getLittleClassName("org.xson.tangyuan.ognl.FieldVo");
      assertEquals("FieldVo", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertEquals('[', TypeUtils.ARRAY_MARK);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = TypeUtils.toAsmClass("org.xson.tangyuan.ognl.FieldVo");
      assertEquals("org/xson/tangyuan/ognl/FieldVo", string0);
  }
}
