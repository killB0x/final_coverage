/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:47:51 GMT 2022
 */

package org.xson.tangyuan.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.util.PropertyUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PropertyUtils_ESTest extends PropertyUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = PropertyUtils.getStringValue(hashMap0, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      long long0 = PropertyUtils.getLongValue(hashMap0, (String) null, 2820);
      assertEquals(2820L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      long long0 = PropertyUtils.getLongValue(hashMap0, "9|-!UU|U]v[GIVN", (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = PropertyUtils.getIntValue(hashMap0, "Z", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = PropertyUtils.getIntValue(hashMap0, "", (-1472));
      assertEquals((-1472), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = PropertyUtils.getBooleanValue(hashMap0, "^U!\"=$9volv<G5Y*ny", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyUtils.getStringValue((Map<String, String>) null, ";/M))5o1", ";/M))5o1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyUtils.getLongValue((Map<String, String>) null, (String) null, (-2786L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyUtils.getIntValue((Map<String, String>) null, (String) null, (-2820));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyUtils.getBooleanValue((Map<String, String>) null, "RZB,Icw>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      String string0 = PropertyUtils.getStringValue(hashMap0, "", "\"");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = PropertyUtils.getStringValue(hashMap0, "Z", "=jNd93$i {@pAr");
      assertNotNull(string0);
      assertEquals("=jNd93$i {@pAr", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.xson.tangyuan.util.PropertyUtils", "Z");
      boolean boolean0 = PropertyUtils.getBooleanValue(hashMap0, "org.xson.tangyuan.util.PropertyUtils", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ht", "ht");
      // Undeclared exception!
      try { 
        PropertyUtils.getLongValue(hashMap0, "ht", 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ht\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      long long0 = PropertyUtils.getLongValue(hashMap0, "=jNd93$i {@pAr", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      // Undeclared exception!
      try { 
        PropertyUtils.getIntValue(hashMap0, "", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = PropertyUtils.getIntValue(hashMap0, "", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyUtils propertyUtils0 = new PropertyUtils();
  }
}
