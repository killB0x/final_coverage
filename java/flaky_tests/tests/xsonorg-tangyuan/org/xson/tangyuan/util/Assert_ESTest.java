/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:26:01 GMT 2022
 */

package org.xson.tangyuan.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.util.Assert;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Assert_ESTest extends Assert_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Assert.notNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Assert.notEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add(object0);
      Assert.notEmpty((Collection<?>) linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Assert.isNull((Object) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Assert.isInstanceOf((Class<?>) class0, (Object) class0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Assert.hasLength("\"S\fa}JaxL$.`");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Assert.doesNotContain("ak.nBOlMYyoA", "");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.isTrue(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this expression must be true
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Assert.isAssignable(class0, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not assignable to class java.lang.Object
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.state(false, "B>nf&c;adK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // B>nf&c;adK
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Assert.state(true, "!}i__OK->~slJ\"!=wG");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Assert.isAssignable(class0, class0, "");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1617));
      hashMap0.put(integer0, "[Assertion failed] - this state invariant must be true");
      Assert.notEmpty((Map<?, ?>) hashMap0, (String) null);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        Assert.notEmpty((Map<?, ?>) hashMap0, "'map' must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'map' must not be null
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Assert.notEmpty((Collection<?>) linkedList0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        Assert.noNullElements(objectArray0, "zZS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zZS
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Assert.noNullElements(objectArray0, "wMgzg2TZmc'LMRa#)KF");
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Assert.noNullElements((Object[]) null, "");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Assert.notEmpty(objectArray0, "]nP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]nP
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.doesNotContain("}", "}", "}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.hasText("", "!}i__OK->~slJ\"!=wG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !}i__OK->~slJ\"!=wG
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Assert.hasText("G`UAx", "G`UAx");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.hasLength("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.notNull((Object) null, "wMgzg2TZmc'LMRa#)KF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wMgzg2TZmc'LMRa#)KF
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Assert.notNull(object0, "9+bHb");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Assert.isNull(object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Assert.isTrue(true, "q,zg<B");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Assert.state(true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        Assert.isAssignable(class0, class1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.Object is not assignable to class java.lang.Integer
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Assert.isAssignable(class0, (Class<?>) null, "A#AYBdGT]%rt(Jz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A#AYBdGT]%rt(Jznull is not assignable to class java.lang.Object
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Assert.isInstanceOf((Class<?>) class0, (Object) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object of class [null] must be an instance of class java.lang.Integer
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Assert.isInstanceOf((Class<?>) class0, (Object) class0, "6Y96s:<]`#:NLq[y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6Y96s:<]`#:NLq[y Object of class [java.lang.Class] must be an instance of class java.lang.Integer
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Assert.isInstanceOf((Class<?>) class0, (Object) class0, "QVtPH)5%S:0-~XOi");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      Assert.notEmpty((Map<?, ?>) hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(17);
      linkedList0.add(integer0);
      Assert.notEmpty((Collection<?>) linkedList0, "");
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      Assert.noNullElements(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        Assert.noNullElements(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this array must not contain any null elements
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Assert.notEmpty(objectArray0, "}S)WRU");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Assert.doesNotContain("}S)WRU", "'map' must not be null", "");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Assert.doesNotContain("RwmZP", (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Assert.doesNotContain((String) null, "o@q[", "o@q[");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.hasText("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have text; it must not be null, empty, or blank
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Assert.hasLength("}S)WRU", "");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Assert.isNull((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.isTrue(false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.state(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // [Assertion failed] - this state invariant must be true
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Assert.isAssignable(class0, class0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Assert assert0 = new Assert();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        Assert.notEmpty((Map<?, ?>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this map must not be empty; it must contain at least one entry
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.hasLength("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must have length; it must not be null or empty
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.doesNotContain("[Assertion failed] - the object argument must be null", "[Assertion failed] - the object argument must be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this String argument must not contain the substring [[Assertion failed] - the object argument must be null]
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        Assert.isInstanceOf((Class<?>) class0, (Object) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object of class [java.lang.Class] must be an instance of class java.lang.Integer
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        Assert.notEmpty((Collection<?>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this collection must not be empty: it must contain at least 1 element
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.notEmpty((Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this array must not be empty: it must contain at least 1 element
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        Assert.notNull((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - this argument is required; it must not be null
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Assert.isTrue(true);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Assert.hasText("RwmZP");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Assert.isNull(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Assertion failed] - the object argument must be null
         //
         verifyException("org.xson.tangyuan.util.Assert", e);
      }
  }
}
