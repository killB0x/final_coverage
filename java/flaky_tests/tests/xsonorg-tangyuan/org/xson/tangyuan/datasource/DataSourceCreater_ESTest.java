/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:43:50 GMT 2022
 */

package org.xson.tangyuan.datasource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.datasource.AbstractDataSource;
import org.xson.tangyuan.datasource.DataSourceCreater;
import org.xson.tangyuan.datasource.DataSourceGroupVo;
import org.xson.tangyuan.datasource.DataSourceVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataSourceCreater_ESTest extends DataSourceCreater_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        dataSourceCreater0.create((DataSourceVo) null, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.DataSourceCreater", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      try { 
        dataSourceCreater0.create((DataSourceGroupVo) null, (Map<String, AbstractDataSource>) hashMap0, (Map<String, String>) hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.DataSourceCreater", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.DBCP;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("&Ji>", dataSourceVo_ConnPoolType0, false, hashMap0, 2213, 2213);
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      // Undeclared exception!
      try { 
        dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) hashMap1, (Map<String, String>) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/dbcp/BasicDataSource
         //
         verifyException("org.xson.tangyuan.datasource.impl.DBCPDataSourceCreater", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo((String) null, (DataSourceVo.ConnPoolType) null, false, hashMap0, (-3467), (-3467));
      dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) null, (Map<String, String>) hashMap0);
      assertEquals((-3467), dataSourceGroupVo0.getStart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.DRUID;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("", dataSourceVo_ConnPoolType0, false, hashMap0, 108, 1);
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) hashMap1, (Map<String, String>) hashMap0);
      assertEquals(1, dataSourceGroupVo0.getEnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.PROXOOL;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("9}*>;!rdGu", dataSourceVo_ConnPoolType0, false, (Map<String, String>) null, 0, 211);
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) hashMap0, (Map<String, String>) null);
      assertEquals(0, dataSourceGroupVo0.getStart());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.C3P0;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo((String) null, dataSourceVo_ConnPoolType0, true, (Map<String, String>) null, 0, 0);
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) hashMap0, (Map<String, String>) null);
      assertEquals(1, dataSourceGroupVo0.getCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.JNDI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("", dataSourceVo_ConnPoolType0, false, hashMap0, 0, 1);
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      dataSourceCreater0.create(dataSourceGroupVo0, (Map<String, AbstractDataSource>) hashMap1, (Map<String, String>) hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceVo dataSourceVo0 = new DataSourceVo("", (DataSourceVo.ConnPoolType) null, false, hashMap0);
      AbstractDataSource abstractDataSource0 = dataSourceCreater0.create(dataSourceVo0, (Map<String, String>) hashMap0);
      assertNull(abstractDataSource0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.JNDI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("", dataSourceVo_ConnPoolType0, false, hashMap0, 0, 1);
      AbstractDataSource abstractDataSource0 = dataSourceCreater0.create((DataSourceVo) dataSourceGroupVo0, (Map<String, String>) hashMap0);
      assertNull(abstractDataSource0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.PROXOOL;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("9}*>;!rdGu", dataSourceVo_ConnPoolType0, false, (Map<String, String>) null, 0, 211);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractDataSource abstractDataSource0 = dataSourceCreater0.create((DataSourceVo) dataSourceGroupVo0, (Map<String, String>) hashMap0);
      assertNull(abstractDataSource0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.DBCP;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("org.xson.tangyuan.datasource.DataSourceCreater", dataSourceVo_ConnPoolType0, true, hashMap0, 414, 0);
      // Undeclared exception!
      try { 
        dataSourceCreater0.create((DataSourceVo) dataSourceGroupVo0, (Map<String, String>) hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/dbcp/BasicDataSource
         //
         verifyException("org.xson.tangyuan.datasource.impl.DBCPDataSourceCreater", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.C3P0;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo((String) null, dataSourceVo_ConnPoolType0, true, (Map<String, String>) null, 0, 0);
      AbstractDataSource abstractDataSource0 = dataSourceCreater0.create((DataSourceVo) dataSourceGroupVo0, (Map<String, String>) null);
      assertNull(abstractDataSource0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataSourceCreater dataSourceCreater0 = new DataSourceCreater();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.DRUID;
      DataSourceGroupVo dataSourceGroupVo0 = new DataSourceGroupVo("", dataSourceVo_ConnPoolType0, false, (Map<String, String>) null, (-1), (-2889));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractDataSource abstractDataSource0 = dataSourceCreater0.create((DataSourceVo) dataSourceGroupVo0, (Map<String, String>) hashMap0);
      assertNull(abstractDataSource0);
  }
}
