/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:44:46 GMT 2022
 */

package org.xson.tangyuan.datasource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.datasource.AbstractDataSource;
import org.xson.tangyuan.datasource.SimpleDataSourceManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleDataSourceManager_ESTest extends SimpleDataSourceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(abstractDataSource0).getConnection();
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "");
      Connection connection0 = simpleDataSourceManager0.getConnection("");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "], hashCode[");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.recycleConnection("], hashCode[", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "GWsc}$K@`> !w-`{Oj");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.getConnection("GWsc}$K@`> !w-`{Oj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "]");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, (String) null);
      simpleDataSourceManager0.close();
      assertNull(simpleDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(abstractDataSource0).getConnection();
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, (String) null);
      Connection connection1 = simpleDataSourceManager0.getConnection("s^Y#t/K6q[9Uo");
      simpleDataSourceManager0.recycleConnection("s^Y#t/K6q[9Uo", connection1);
      assertSame(connection1, connection0);
  }
}
