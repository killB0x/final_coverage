/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:54:23 GMT 2022
 */

package org.xson.tangyuan.datasource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.datasource.AbstractDataSource;
import org.xson.tangyuan.datasource.DataSourceVo;
import org.xson.tangyuan.datasource.MuiltDataSourceManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MuiltDataSourceManager_ESTest extends MuiltDataSourceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager((Map<String, DataSourceVo>) null, hashMap0, (String) null);
      hashMap0.put("q_FEJ8LLcQM@)go", (AbstractDataSource) null);
      muiltDataSourceManager0.close();
      assertNull(muiltDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, ".");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(abstractDataSource0).getConnection();
      hashMap1.put(".", abstractDataSource0);
      Connection connection1 = muiltDataSourceManager0.getConnection(".");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, (Map<String, AbstractDataSource>) null, "{|>'( \"CojS^2BW!Mlf");
      // Undeclared exception!
      try { 
        muiltDataSourceManager0.recycleConnection((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager((Map<String, DataSourceVo>) null, hashMap0, (String) null);
      // Undeclared exception!
      try { 
        muiltDataSourceManager0.isValidDsKey("$VALUES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager((Map<String, DataSourceVo>) null, (Map<String, AbstractDataSource>) null, "]");
      // Undeclared exception!
      try { 
        muiltDataSourceManager0.getConnection("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, (Map<String, AbstractDataSource>) null, "{|>'( \"CojS^2BW!Mlf");
      // Undeclared exception!
      try { 
        muiltDataSourceManager0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      hashMap1.put("org.xson.tangyuan.TangYuanException", abstractDataSource0);
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      muiltDataSourceManager0.close();
      assertEquals("", muiltDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      try { 
        muiltDataSourceManager0.recycleConnection("", (Connection) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // recycleConnection\u4E0D\u5B58\u5728\u7684DataSource:
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      hashMap1.put("MNNgWKLto[a%!GS", abstractDataSource0);
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      muiltDataSourceManager0.recycleConnection("MNNgWKLto[a%!GS", (Connection) null);
      assertEquals("", muiltDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      try { 
        muiltDataSourceManager0.getConnection("");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // \u4E0D\u5B58\u5728\u7684DataSource: 
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(abstractDataSource0).getConnection();
      hashMap1.put("P:j_Qig\"u*Er\"Tzyr^", abstractDataSource0);
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "P:j_Qig\"u*Er\"Tzyr^");
      Connection connection0 = muiltDataSourceManager0.getConnection("P:j_Qig\"u*Er\"Tzyr^");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      hashMap1.put("org.xson.tangyuan.TangYuanException", abstractDataSource0);
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      boolean boolean0 = muiltDataSourceManager0.isValidDsKey("org.xson.tangyuan.TangYuanException");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      DataSourceVo.ConnPoolType dataSourceVo_ConnPoolType0 = DataSourceVo.ConnPoolType.C3P0;
      DataSourceVo dataSourceVo0 = new DataSourceVo("", dataSourceVo_ConnPoolType0, true, (Map<String, String>) null);
      hashMap0.put("", dataSourceVo0);
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      boolean boolean0 = muiltDataSourceManager0.isValidDsKey("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "Sv@{'|K");
      boolean boolean0 = muiltDataSourceManager0.isValidDsKey(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      boolean boolean0 = muiltDataSourceManager0.isValidDsKey("");
      assertFalse(boolean0);
  }
}
