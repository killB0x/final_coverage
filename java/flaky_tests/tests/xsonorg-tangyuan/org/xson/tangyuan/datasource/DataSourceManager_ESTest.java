/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:46:31 GMT 2022
 */

package org.xson.tangyuan.datasource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.datasource.AbstractDataSource;
import org.xson.tangyuan.datasource.DataSourceVo;
import org.xson.tangyuan.datasource.MuiltDataSourceManager;
import org.xson.tangyuan.datasource.SimpleDataSourceManager;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataSourceManager_ESTest extends DataSourceManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "");
      simpleDataSourceManager0.recycleConnection("", (Connection) null);
      assertEquals("", simpleDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "org.xson.tangyuan.datasource.DataSourceManager");
      simpleDataSourceManager0.close();
      assertEquals("org.xson.tangyuan.datasource.DataSourceManager", simpleDataSourceManager0.getDefaultDsKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      AbstractDataSource abstractDataSource1 = hashMap0.put("", abstractDataSource0);
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource1, "");
      boolean boolean0 = simpleDataSourceManager0.isValidDsKey("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, (String) null);
      boolean boolean0 = simpleDataSourceManager0.isValidDsKey("J8]2[[^oPUdP-9R|<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "org.xson.tangyuan.datasource.DataSourceManager");
      String string0 = simpleDataSourceManager0.getDefaultDsKey();
      assertEquals("org.xson.tangyuan.datasource.DataSourceManager", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "");
      String string0 = muiltDataSourceManager0.getDefaultDsKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(abstractDataSource0).getConnection();
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "");
      Connection connection0 = simpleDataSourceManager0.getConnection("");
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(abstractDataSource0).getConnection();
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "");
      Connection connection1 = simpleDataSourceManager0.getConnection("");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "Y{`3j%OD@Rv!");
      try { 
        muiltDataSourceManager0.recycleConnection("Y{`3j%OD@Rv!", (Connection) null);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // recycleConnection\u4E0D\u5B58\u5728\u7684DataSource:Y{`3j%OD@Rv!
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.recycleConnection("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, AbstractDataSource> hashMap0 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager((Map<String, DataSourceVo>) null, hashMap0, "org.xson.tangyuan.TangYuanException");
      try { 
        muiltDataSourceManager0.getConnection("org.xson.tangyuan.TangYuanException");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // \u4E0D\u5B58\u5728\u7684DataSource: org.xson.tangyuan.TangYuanException
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.getConnection("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, "");
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.datasource.SimpleDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager((AbstractDataSource) null, (String) null);
      // Undeclared exception!
      try { 
        simpleDataSourceManager0.isValidDsKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, (String) null);
      String string0 = simpleDataSourceManager0.getDefaultDsKey();
      assertNull(string0);
  }
}
