/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:38:13 GMT 2022
 */

package org.xson.tangyuan.sharding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.sharding.HashShardingHandler;
import org.xson.tangyuan.sharding.ModShardingHandler;
import org.xson.tangyuan.sharding.RandomShardingHandler;
import org.xson.tangyuan.sharding.RangeShardingHandler;
import org.xson.tangyuan.sharding.ShardingArgVo;
import org.xson.tangyuan.sharding.ShardingDefVo;
import org.xson.tangyuan.sharding.ShardingHandler;
import org.xson.tangyuan.sharding.ShardingResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShardingDefVo_ESTest extends ShardingDefVo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[5];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("\u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u975E\u6CD5: ", "", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, false, randomShardingHandler0, 0, false, false, "");
      boolean boolean0 = shardingDefVo0.isTableNameIndexIncrement();
      assertFalse(boolean0);
      assertEquals(0, shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("kmzbO8zTW2K6xy", "kmzbO8zTW2K6xy", shardingDefVo_ShardingMode0, 1, 1, 1, variableVoArray0, true, randomShardingHandler0, 1, true, true, "kmzbO8zTW2K6xy");
      boolean boolean0 = shardingDefVo0.isRequireKeyword();
      assertEquals(1, shardingDefVo0.getTableCapacity());
      assertTrue(boolean0);
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(1, shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals(1, shardingDefVo0.getTableCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, "org.xson.tangyuan.ognl.vars.VariableUnitVo", shardingDefVo_ShardingMode0, (-1877), 0, 0, variableVoArray0, true, randomShardingHandler0, (-1877), true, false, (String) null);
      boolean boolean0 = shardingDefVo0.isDataSourceGroup();
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertEquals(0, shardingDefVo0.getTableCount());
      assertTrue(boolean0);
      assertEquals((-1877), shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[5];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("\u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u975E\u6CD5: ", "", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, false, randomShardingHandler0, 0, false, false, "");
      boolean boolean0 = shardingDefVo0.isDataSourceGroup();
      assertEquals(0, shardingDefVo0.getTableCount());
      assertFalse(boolean0);
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(0, shardingDefVo0.getTableCapacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("U.jwz.+n<8y4", (String) null, shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, false, rangeShardingHandler0, 0, false, false, (String) null);
      int int0 = shardingDefVo0.getTableCount();
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(0, int0);
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(0, shardingDefVo0.getTableCapacity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[9];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 1, (-2332), 1, variableVoArray0, false, (ShardingHandler) null, 0, true, true, "");
      int int0 = shardingDefVo0.getTableCount();
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertEquals((-2332), int0);
      assertEquals(1, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[9];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("$ZonjOvkP5j,3", "{", shardingDefVo_ShardingMode0, (-2332), (-861), 0, variableVoArray0, false, hashShardingHandler0, 351, false, false, "mDI7UHJ");
      int int0 = shardingDefVo0.getTableCapacity();
      assertEquals(0, int0);
      assertEquals((-861), shardingDefVo0.getTableCount());
      assertEquals(351, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals("mDI7UHJ", shardingDefVo0.getDefaultDataSource());
      assertFalse(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[9];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("dz2", "eFLZ{=:", shardingDefVo_ShardingMode0, (-560), (-4724), (-4724), variableVoArray0, true, rangeShardingHandler0, 0, true, true, "");
      int int0 = shardingDefVo0.getTableCapacity();
      assertEquals((-4724), int0);
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals((-4724), shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo(";*", ";*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, false, false, ";*");
      shardingDefVo0.getTable();
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(4, shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
      assertEquals(4, shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[7];
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "org.xson.tangyuan.sharding.ShardingArgVo$ShardingTemplate", shardingDefVo_ShardingMode0, (-2867), 387, 518, variableVoArray0, false, modShardingHandler0, 387, false, true, "org.xson.tangyuan.sharding.ModShardingHandler");
      String string0 = shardingDefVo0.getTable();
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(518, shardingDefVo0.getTableCapacity());
      assertEquals(387, shardingDefVo0.getDataSourceCount());
      assertEquals("", string0);
      assertEquals(387, shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertEquals("org.xson.tangyuan.sharding.ModShardingHandler", shardingDefVo0.getDefaultDataSource());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[9];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("dz2", "eFLZ{=:", shardingDefVo_ShardingMode0, (-560), (-4724), (-4724), variableVoArray0, true, rangeShardingHandler0, 0, true, true, "");
      shardingDefVo0.getKeywords();
      assertEquals((-4724), shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertEquals((-4724), shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5j*", "5j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, false, false, "mDI7UHJ");
      shardingDefVo0.getKeywords();
      assertEquals("mDI7UHJ", shardingDefVo0.getDefaultDataSource());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
      assertEquals(4, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(4, shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertFalse(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "haJLL4Y+w", shardingDefVo_ShardingMode0, 0, (-184), (-184), variableVoArray0, false, (ShardingHandler) null, 1552, false, true, "3!X1*");
      shardingDefVo0.getHandler();
      assertEquals((-184), shardingDefVo0.getTableCount());
      assertEquals((-184), shardingDefVo0.getTableCapacity());
      assertEquals("3!X1*", shardingDefVo0.getDefaultDataSource());
      assertEquals(1552, shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, "org.xson.tangyuan.ognl.vars.VariableUnitVo", shardingDefVo_ShardingMode0, (-1877), 0, 0, variableVoArray0, true, randomShardingHandler0, (-1877), true, false, (String) null);
      String string0 = shardingDefVo0.getDefaultDataSource();
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertNull(string0);
      assertEquals(0, shardingDefVo0.getTableCount());
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertEquals((-1877), shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertTrue(shardingDefVo0.isDataSourceGroup());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[7];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 991, 991, (-395), variableVoArray0, true, rangeShardingHandler0, 991, false, false, "");
      shardingDefVo0.getDefaultDataSource();
      assertEquals(991, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals((-395), shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(991, shardingDefVo0.getTableCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[3];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("@5y.hwx", "M;r{Cb)#DIErqQM", shardingDefVo_ShardingMode0, 0, (-625), 1, variableVoArray0, false, hashShardingHandler0, 2, false, false, "");
      int int0 = shardingDefVo0.getDbCount();
      assertEquals((-625), shardingDefVo0.getTableCount());
      assertEquals(1, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
      assertEquals(0, int0);
      assertEquals(2, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isDataSourceGroup());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5j*", "5j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, false, false, "mDI7UHJ");
      int int0 = shardingDefVo0.getDbCount();
      assertEquals(4, shardingDefVo0.getTableCount());
      assertEquals(4, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(4, int0);
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals("mDI7UHJ", shardingDefVo0.getDefaultDataSource());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("mDI7UHJ", "", shardingDefVo_ShardingMode0, (-1990), 2, (-420), variableVoArray0, true, hashShardingHandler0, 0, true, false, "");
      int int0 = shardingDefVo0.getDbCount();
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals(2, shardingDefVo0.getTableCount());
      assertEquals((-420), shardingDefVo0.getTableCapacity());
      assertEquals("", shardingDefVo0.getDefaultDataSource());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertEquals((-1990), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("&);. zK:@P`m", (String) null, shardingDefVo_ShardingMode0, 811, 811, 811, variableVoArray0, false, modShardingHandler0, 0, false, false, "&);. zK:@P`m");
      int int0 = shardingDefVo0.getDataSourceCount();
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(811, shardingDefVo0.getTableCount());
      assertEquals(811, shardingDefVo0.getTableCapacity());
      assertEquals(0, int0);
      assertFalse(shardingDefVo0.isDataSourceGroup());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[8];
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("Ok", "Ok", shardingDefVo_ShardingMode0, (-2453), (-2453), 0, variableVoArray0, true, modShardingHandler0, (-2321), true, true, "Ok");
      int int0 = shardingDefVo0.getDataSourceCount();
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals((-2321), int0);
      assertEquals((-2453), shardingDefVo0.getTableCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", (String) null, shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, false, rangeShardingHandler0, (-611), true, false, "d6Bx\"/J;,3^Sn{Hq~S");
      String string0 = shardingDefVo0.getDataSource();
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertNull(string0);
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals((-611), shardingDefVo0.getDataSourceCount());
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertEquals("d6Bx\"/J;,3^Sn{Hq~S", shardingDefVo0.getDefaultDataSource());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(0, shardingDefVo0.getTableCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[6];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, "", shardingDefVo_ShardingMode0, 0, 76, (-891), variableVoArray0, true, rangeShardingHandler0, (-4519), true, true, "");
      String string0 = shardingDefVo0.getDataSource();
      assertNotNull(string0);
      assertEquals(76, shardingDefVo0.getTableCount());
      assertEquals((-891), shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertEquals((-4519), shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isDataSourceGroup());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[4];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("z+", "z+", shardingDefVo_ShardingMode0, 51, 51, 51, variableVoArray0, true, hashShardingHandler0, 51, true, true, "z+");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.I;
      VariableVo[] variableVoArray1 = new VariableVo[1];
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(variableVo0).getValue(any());
      variableVoArray1[0] = variableVo0;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("z+", shardingArgVo_ShardingTemplate0, variableVoArray1, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingDefVo0.getShardingResult(shardingArgVo0, shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u4E3A\u7A7A
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[9];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("=j*", "=j*", shardingDefVo_ShardingMode0, 15, 15, 15, variableVoArray0, true, hashShardingHandler0, 15, true, true, "=j*");
      // Undeclared exception!
      try { 
        shardingDefVo0.getShardingResult((ShardingArgVo) null, shardingDefVo_ShardingMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      VariableVo[] variableVoArray0 = new VariableVo[9];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("=j*", "=j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, false, hashShardingHandler0, 4, false, false, "=j*");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray1 = new VariableVo[0];
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("=j*", shardingArgVo_ShardingTemplate0, variableVoArray1, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingDefVo0.getShardingResult(shardingArgVo0, shardingDefVo_ShardingMode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[9];
      Object object0 = new Object();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("h@/&G;#mJ0S~\"Ii=n4", (String) null, shardingDefVo_ShardingMode0, 2, 0, 941, variableVoArray0, false, hashShardingHandler0, 1, false, true, "RANDOM");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingDefVo0.getShardingResult(shardingArgVo0, hashShardingHandler0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo(".", "org.xson.tangyuan.sharding.ShardingDefVo", shardingDefVo_ShardingMode0, 3120, 3120, 3120, variableVoArray0, true, randomShardingHandler0, 0, false, false, ".");
      int int0 = shardingDefVo0.getTableCount();
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertEquals(".", shardingDefVo0.getDefaultDataSource());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals(3120, int0);
      assertEquals(3120, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isDataSourceGroup());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5j*", "5j*", shardingDefVo_ShardingMode0, 25, 25, 25, variableVoArray0, true, hashShardingHandler0, 25, true, true, "5j*");
      boolean boolean0 = shardingDefVo0.isTableNameIndexIncrement();
      assertEquals(25, shardingDefVo0.getTableCapacity());
      assertEquals(25, shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertTrue(boolean0);
      assertEquals(25, shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5j*", "5j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, true, true, "mDI7UHJ");
      int int0 = shardingDefVo0.getTableCapacity();
      assertEquals("mDI7UHJ", shardingDefVo0.getDefaultDataSource());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals(4, shardingDefVo0.getTableCount());
      assertEquals(4, int0);
      assertTrue(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, (String) null, shardingDefVo_ShardingMode0, 1796, (-1142), 1796, (VariableVo[]) null, false, hashShardingHandler0, (-1142), false, false, "");
      String string0 = shardingDefVo0.getTable();
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals((-1142), shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(1796, shardingDefVo0.getTableCapacity());
      assertNull(string0);
      assertEquals((-1142), shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("U.jwz.+n<8y4", (String) null, shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, false, rangeShardingHandler0, 0, false, false, (String) null);
      shardingDefVo0.getHandler();
      assertEquals(0, shardingDefVo0.getTableCapacity());
      assertEquals(0, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(0, shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("=j*", "=j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, true, true, "=j*");
      shardingDefVo0.getMode();
      assertEquals(4, shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertEquals(4, shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("&);. zK:@P`m", "&);. zK:@P`m", shardingDefVo_ShardingMode0, 810, 810, 810, variableVoArray0, false, modShardingHandler0, 810, false, false, "&);. zK:@P`m");
      int int0 = shardingDefVo0.getDataSourceCount();
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(810, shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(810, int0);
      assertEquals(810, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, (String) null, shardingDefVo_ShardingMode0, 1796, (-1142), 1796, (VariableVo[]) null, false, hashShardingHandler0, (-1142), false, false, "");
      shardingDefVo0.getKeywords();
      assertEquals((-1142), shardingDefVo0.getDataSourceCount());
      assertEquals(1796, shardingDefVo0.getTableCapacity());
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertFalse(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals((-1142), shardingDefVo0.getTableCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[2];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("30n9')rF", "30n9')rF", shardingDefVo_ShardingMode0, (-1354), 0, (-1354), variableVoArray0, true, modShardingHandler0, 2, true, true, "wUN'~");
      String string0 = shardingDefVo0.getDefaultDataSource();
      assertEquals(2, shardingDefVo0.getDataSourceCount());
      assertEquals((-1354), shardingDefVo0.getTableCapacity());
      assertTrue(shardingDefVo0.isDataSourceGroup());
      assertEquals(0, shardingDefVo0.getTableCount());
      assertEquals("wUN'~", string0);
      assertTrue(shardingDefVo0.isRequireKeyword());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("hF", "hF", shardingDefVo_ShardingMode0, (-1816), 1247, (-1816), (VariableVo[]) null, true, randomShardingHandler0, (-294), true, false, "hF");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("hF", shardingArgVo_ShardingTemplate0, (VariableVo[]) null, shardingDefVo0);
      ShardingResult shardingResult0 = shardingDefVo0.getShardingResult(shardingArgVo0, (Object) null);
      assertEquals("-225707", shardingResult0.getTable());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals((-1816), shardingDefVo0.getTableCapacity());
      assertEquals("hF.-181", shardingResult0.getDataSource());
      assertEquals((-294), shardingDefVo0.getDataSourceCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5j*", "5j*", shardingDefVo_ShardingMode0, 4, 4, 4, variableVoArray0, true, hashShardingHandler0, 4, false, false, "mDI7UHJ");
      String string0 = shardingDefVo0.getDataSource();
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals("mDI7UHJ", shardingDefVo0.getDefaultDataSource());
      assertEquals(4, shardingDefVo0.getDataSourceCount());
      assertFalse(shardingDefVo0.isRequireKeyword());
      assertEquals("5j*", string0);
      assertEquals(4, shardingDefVo0.getTableCount());
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
      assertEquals(4, shardingDefVo0.getTableCapacity());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("pY", "e9E<HdtJeVGGQ2j{{", shardingDefVo_ShardingMode0, 5, 5, 5, (VariableVo[]) null, true, rangeShardingHandler0, (-1377), false, false, "e9E<HdtJeVGGQ2j{{");
      boolean boolean0 = shardingDefVo0.isRequireKeyword();
      assertFalse(shardingDefVo0.isDataSourceGroup());
      assertEquals(5, shardingDefVo0.getTableCount());
      assertEquals("e9E<HdtJeVGGQ2j{{", shardingDefVo0.getDefaultDataSource());
      assertEquals((-1377), shardingDefVo0.getDataSourceCount());
      assertEquals(5, shardingDefVo0.getTableCapacity());
      assertFalse(boolean0);
      assertTrue(shardingDefVo0.isTableNameIndexIncrement());
  }
}
