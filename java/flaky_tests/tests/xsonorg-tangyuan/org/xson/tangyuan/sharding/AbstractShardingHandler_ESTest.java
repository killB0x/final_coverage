/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:38:33 GMT 2022
 */

package org.xson.tangyuan.sharding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.sharding.ModShardingHandler;
import org.xson.tangyuan.sharding.RandomShardingHandler;
import org.xson.tangyuan.sharding.RangeShardingHandler;
import org.xson.tangyuan.sharding.ShardingArgVo;
import org.xson.tangyuan.sharding.ShardingDefVo;
import org.xson.tangyuan.sharding.ShardingResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractShardingHandler_ESTest extends AbstractShardingHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("}+", "}+", shardingDefVo_ShardingMode0, (-605), (-720), 3, variableVoArray0, false, randomShardingHandler0, (-720), false, false, "`>A\"uWs<KLnI1#rW");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("]y^msYUfj%C.8.u=/", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = randomShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, shardingDefVo0);
      assertEquals("}+0", shardingResult0.getTable());
      assertNotNull(shardingResult0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("<uB", "?>.bE^!CP", shardingDefVo_ShardingMode0, 591, (-1872), (-1872), variableVoArray0, false, randomShardingHandler0, (-842), true, true, "?>.bE^!CP");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("?>.bE^!CP", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      Object object0 = new Object();
      ShardingResult shardingResult0 = randomShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, object0);
      assertEquals("?>.bE^!CP.59", shardingResult0.getDataSource());
      assertEquals("<uB0", shardingResult0.getTable());
      assertNotNull(shardingResult0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModShardingHandler modShardingHandler0 = new ModShardingHandler();
      Byte byte0 = new Byte((byte)4);
      long long0 = modShardingHandler0.getValue(byte0);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      Byte byte0 = new Byte((byte) (-30));
      long long0 = randomShardingHandler0.getValue(byte0);
      assertEquals((-30L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("zb(eae[R?zR#yh9$E", (String) null, shardingDefVo_ShardingMode0, (-1), 0, (-1), (VariableVo[]) null, false, randomShardingHandler0, 0, false, false, (String) null);
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, (VariableVo[]) null, shardingDefVo0);
      ShardingResult shardingResult0 = randomShardingHandler0.getResult(0L, (-1016L), shardingDefVo0, shardingArgVo0);
      assertEquals("0", shardingResult0.getTable());
      assertNotNull(shardingResult0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      // Undeclared exception!
      try { 
        rangeShardingHandler0.getResult(1L, 1L, (ShardingDefVo) null, (ShardingArgVo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.sharding.AbstractShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      // Undeclared exception!
      try { 
        rangeShardingHandler0.getValue(rangeShardingHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u975E\u6CD5:class org.xson.tangyuan.sharding.RangeShardingHandler
         //
         verifyException("org.xson.tangyuan.sharding.AbstractShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      // Undeclared exception!
      try { 
        randomShardingHandler0.getValue((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u4E3A\u7A7A
         //
         verifyException("org.xson.tangyuan.sharding.AbstractShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, (byte) (-30), (-1045), (-1045), variableVoArray0, false, randomShardingHandler0, (-1045), false, false, "");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", (ShardingArgVo.ShardingTemplate) null, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = randomShardingHandler0.getResult((-460L), (byte) (-30), shardingDefVo0, shardingArgVo0);
      assertNull(shardingResult0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 2593, 2593, 2593, (VariableVo[]) null, false, randomShardingHandler0, 2593, true, true, "");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.I;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", shardingArgVo_ShardingTemplate0, (VariableVo[]) null, shardingDefVo0);
      ShardingResult shardingResult0 = shardingDefVo0.getShardingResult(shardingArgVo0, shardingDefVo_ShardingMode0);
      assertEquals("0", shardingResult0.getTable());
      assertNotNull(shardingResult0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("\"VjC*FYBRR@wU? BP", "\"VjC*FYBRR@wU? BP", shardingDefVo_ShardingMode0, 1, 1, 1, variableVoArray0, true, randomShardingHandler0, 1, true, true, "\"VjC*FYBRR@wU? BP");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.D;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("\"VjC*FYBRR@wU? BP", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = randomShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, shardingArgVo_ShardingTemplate0);
      assertEquals("\"VjC*FYBRR@wU? BP.0", shardingResult0.getDataSource());
      assertNotNull(shardingResult0);
      assertEquals("", shardingResult0.getTable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      Byte byte0 = new Byte((byte)0);
      long long0 = rangeShardingHandler0.getValue(byte0);
      assertEquals(0L, long0);
  }
}
