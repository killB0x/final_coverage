/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:16:32 GMT 2022
 */

package org.xson.tangyuan.sharding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.sharding.HashShardingHandler;
import org.xson.tangyuan.sharding.ShardingArgVo;
import org.xson.tangyuan.sharding.ShardingDefVo;
import org.xson.tangyuan.sharding.ShardingResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HashShardingHandler_ESTest extends HashShardingHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      VariableVo[] variableVoArray0 = new VariableVo[4];
      Object object0 = new Object();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("C\"e6.z@vhu!/Y&,~", "!z'@", shardingDefVo_ShardingMode0, 531, 1, 1916, variableVoArray0, true, hashShardingHandler0, (-4365), false, false, "C\"e6.z@vhu!/Y&,~");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = hashShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, object0);
      assertEquals("C\"e6.z@vhu!/Y&,~4", shardingResult0.getTable());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn("").when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 0, 2, 2, variableVoArray0, true, hashShardingHandler0, 1, true, true, "");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hashShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, object0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("%uH1rs,", shardingArgVo_ShardingTemplate0, variableVoArray0, (ShardingDefVo) null);
      // Undeclared exception!
      try { 
        hashShardingHandler0.selectDataSourceAndTable((ShardingDefVo) null, shardingArgVo0, shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u4E3A\u7A7A
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.MOD;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      Object object0 = new Object();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("&\"hqduY:8>4Rtq8dU5", "&\"hqduY:8>4Rtq8dU5", shardingDefVo_ShardingMode0, (-1646), (-1646), (-1646), variableVoArray0, true, hashShardingHandler0, (-1646), true, true, "&\"hqduY:8>4Rtq8dU5");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("m@3] %7?KLhq6fh1%", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = hashShardingHandler0.selectDataSourceAndTable(shardingDefVo0, shardingArgVo0, shardingArgVo0);
      assertEquals("&\"hqduY:8>4Rtq8dU5-6580", shardingResult0.getTable());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      Object object0 = new Object();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("&\"hqduY:8>4Rtq8dU5", "&\"hqduY:8>4Rtq8dU5", shardingDefVo_ShardingMode0, (-1646), 1464, 1464, variableVoArray0, false, hashShardingHandler0, (-1646), false, false, "&\"hqduY:8>4Rtq8dU5");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("m@3] %7?KLhq6fh1%", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = shardingArgVo0.getShardingResult(shardingArgVo_ShardingTemplate0);
      assertEquals("&\"hqduY:8>4Rtq8dU54", shardingResult0.getTable());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, (VariableVo[]) null, (ShardingDefVo) null);
      // Undeclared exception!
      try { 
        hashShardingHandler0.selectDataSourceAndTable((ShardingDefVo) null, shardingArgVo0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        HashShardingHandler.main(stringArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, variableVoArray0, (ShardingDefVo) null);
      // Undeclared exception!
      try { 
        hashShardingHandler0.selectDataSourceAndTable((ShardingDefVo) null, shardingArgVo0, shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }
}
