/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:37:07 GMT 2022
 */

package org.xson.tangyuan.sharding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.ognl.vars.VariableVo;
import org.xson.tangyuan.sharding.HashShardingHandler;
import org.xson.tangyuan.sharding.RandomShardingHandler;
import org.xson.tangyuan.sharding.RangeShardingHandler;
import org.xson.tangyuan.sharding.ShardingArgVo;
import org.xson.tangyuan.sharding.ShardingDefVo;
import org.xson.tangyuan.sharding.ShardingHandler;
import org.xson.tangyuan.sharding.ShardingResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShardingArgVo_ESTest extends ShardingArgVo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("org.xson.tangyuan.sharding.ShardingDefVo", "DT", shardingDefVo_ShardingMode0, (-1437), (-1963), (-1963), variableVoArray0, false, randomShardingHandler0, (-1963), false, true, "DT");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("MOD", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate1 = shardingArgVo0.getTemplate();
      assertEquals(ShardingArgVo.ShardingTemplate.DI, shardingArgVo_ShardingTemplate1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, "org.xson.tangyuan.sharding.RangeShardingHandler", shardingDefVo_ShardingMode0, 24, 1329, 435, variableVoArray0, false, (ShardingHandler) null, 1329, true, false, "org.xson.tangyuan.sharding.RangeShardingHandler");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      String string0 = shardingArgVo0.getTable();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "3(6}X[uD?uD3{%3#r:", shardingDefVo_ShardingMode0, 3858, 2427, 948, variableVoArray0, true, (ShardingHandler) null, 2427, true, true, "3(6}X[uD?uD3{%3#r:");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      String string0 = shardingArgVo0.getTable();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.D;
      VariableVo[] variableVoArray0 = new VariableVo[2];
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("", shardingArgVo_ShardingTemplate0, variableVoArray0, (ShardingDefVo) null);
      ShardingDefVo shardingDefVo0 = shardingArgVo0.getShardingDef();
      assertNull(shardingDefVo0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "lmQ(>%37h{b? -ahk", shardingDefVo_ShardingMode0, (-763), 0, 1, (VariableVo[]) null, false, hashShardingHandler0, 1, true, false, "{!");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.D;
      VariableVo[] variableVoArray0 = new VariableVo[5];
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("org.xson.tangyuan.sharding.ShardingResult", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingDefVo shardingDefVo1 = shardingArgVo0.getShardingDef();
      assertEquals(1, shardingDefVo1.getTableCapacity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 1, 842, 0, (VariableVo[]) null, false, hashShardingHandler0, 463, true, false, "");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, (VariableVo[]) null, shardingDefVo0);
      ShardingDefVo shardingDefVo1 = shardingArgVo0.getShardingDef();
      assertFalse(shardingDefVo1.isRequireKeyword());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("org.xson.tangyuan.sharding.ShardingDefVo", "DT", shardingDefVo_ShardingMode0, (-1437), (-1963), (-1963), variableVoArray0, false, randomShardingHandler0, (-1963), false, true, "DT");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("MOD", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingDefVo shardingDefVo1 = shardingArgVo0.getShardingDef();
      assertEquals((-1963), shardingDefVo1.getDataSourceCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("", "", shardingDefVo_ShardingMode0, 1, 842, 0, (VariableVo[]) null, false, hashShardingHandler0, 463, true, false, "");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, (VariableVo[]) null, shardingDefVo0);
      VariableVo[] variableVoArray0 = shardingArgVo0.getKeywords();
      assertNull(variableVoArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("5=j1afx4", "5=j1afx4", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, true, hashShardingHandler0, 2508, true, true, "h-WbiPN9~!bqig7");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("5=j1afx4", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      VariableVo[] variableVoArray1 = shardingArgVo0.getKeywords();
      assertSame(variableVoArray1, variableVoArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[1];
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("h-WbiPN9~!bqig7", "h-WbiPN9~!bqig7", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, true, hashShardingHandler0, 0, true, true, "h-WbiPN9~!bqig7");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("h-WbiPN9~!bqig7", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingArgVo0.getShardingResult(shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \u5206\u5E93\u5206\u8868\u5BF9\u8C61\u503C\u4E3A\u7A7A
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[1];
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo(":T0v ,;Yc!", shardingArgVo_ShardingTemplate0, variableVoArray0, (ShardingDefVo) null);
      // Undeclared exception!
      try { 
        shardingArgVo0.getShardingResult(shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.sharding.ShardingArgVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[1];
      Object object0 = new Object();
      VariableVo variableVo0 = mock(VariableVo.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(variableVo0).getValue(any());
      variableVoArray0[0] = variableVo0;
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("h-WbiPN9~!bqig7", "h-WbiPN9~!bqig7", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, true, hashShardingHandler0, 0, true, true, "h-WbiPN9~!bqig7");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("h-WbiPN9~!bqig7", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingArgVo0.getShardingResult(shardingArgVo_ShardingTemplate0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.xson.tangyuan.sharding.HashShardingHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("org.xson.tangyuan.sharding.ShardingDefVo", "DT", shardingDefVo_ShardingMode0, (-1437), (-1963), (-1963), variableVoArray0, false, randomShardingHandler0, (-1963), false, true, "DT");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("MOD", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      VariableVo[] variableVoArray1 = shardingArgVo0.getKeywords();
      assertEquals(0, variableVoArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANDOM;
      RandomShardingHandler randomShardingHandler0 = new RandomShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("org.xson.tangyuan.sharding.ShardingDefVo", "DT", shardingDefVo_ShardingMode0, (-1437), (-1963), (-1963), variableVoArray0, false, randomShardingHandler0, (-1963), false, true, "DT");
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("MOD", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingResult shardingResult0 = shardingArgVo0.getShardingResult(shardingArgVo_ShardingTemplate0);
      assertEquals("DT", shardingResult0.getDataSource());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[10];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("h-WbiPN9~!bqig7", "h-WbiPN9~!bqig7", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, true, hashShardingHandler0, 0, true, true, "h-WbiPN9~!bqig7");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DI;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("h-WbiPN9~!bqig7", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      ShardingDefVo shardingDefVo1 = shardingArgVo0.getShardingDef();
      assertEquals(0, shardingDefVo1.getTableCapacity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VariableVo[] variableVoArray0 = new VariableVo[10];
      HashShardingHandler hashShardingHandler0 = new HashShardingHandler();
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.HASH;
      ShardingDefVo shardingDefVo0 = new ShardingDefVo("h-WbiPN9~!bqig7", "h-WbiPN9~!bqig7", shardingDefVo_ShardingMode0, 0, 0, 0, variableVoArray0, true, hashShardingHandler0, 0, true, true, "h-WbiPN9~!bqig7");
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.DT;
      ShardingArgVo shardingArgVo0 = new ShardingArgVo("h-WbiPN9~!bqig7", shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      String string0 = shardingArgVo0.getTable();
      assertEquals("h-WbiPN9~!bqig7", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShardingArgVo.ShardingTemplate shardingArgVo_ShardingTemplate0 = ShardingArgVo.ShardingTemplate.T;
      VariableVo[] variableVoArray0 = new VariableVo[0];
      ShardingDefVo.ShardingMode shardingDefVo_ShardingMode0 = ShardingDefVo.ShardingMode.RANGE;
      RangeShardingHandler rangeShardingHandler0 = new RangeShardingHandler();
      ShardingDefVo shardingDefVo0 = new ShardingDefVo((String) null, (String) null, shardingDefVo_ShardingMode0, (-1), 0, (-1), variableVoArray0, true, rangeShardingHandler0, 0, true, true, (String) null);
      ShardingArgVo shardingArgVo0 = new ShardingArgVo((String) null, shardingArgVo_ShardingTemplate0, variableVoArray0, shardingDefVo0);
      // Undeclared exception!
      try { 
        shardingArgVo0.getShardingResult((Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.xson.tangyuan.sharding.RangeShardingHandler", e);
      }
  }
}
