/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:23:51 GMT 2022
 */

package org.xson.tangyuan.cache.vo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.cache.EhCacheCache;
import org.xson.tangyuan.cache.FIFOCache;
import org.xson.tangyuan.cache.ICache;
import org.xson.tangyuan.cache.LRUCache;
import org.xson.tangyuan.cache.LocalCache;
import org.xson.tangyuan.cache.LoggingCache;
import org.xson.tangyuan.cache.MemcachedCache;
import org.xson.tangyuan.cache.RedisCache;
import org.xson.tangyuan.cache.ScheduledCache;
import org.xson.tangyuan.cache.SoftCache;
import org.xson.tangyuan.cache.SynchronizedCache;
import org.xson.tangyuan.cache.WeakCache;
import org.xson.tangyuan.cache.vo.CacheVo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CacheVo_ESTest extends CacheVo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo((String) null, cacheVo_CacheType0, redisCache0, false, "", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: org/xson/thirdparty/redis/JedisClient
         //
         verifyException("org.xson.tangyuan.cache.RedisCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("s`)(", false);
      assertFalse(cacheVo0.isDefaultCache());
      
      cacheVo0.setDefaultCache(true);
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      LocalCache localCache0 = new LocalCache("org.xson.tangyuan.cache.WeakCache");
      CacheVo cacheVo0 = new CacheVo("org.xson.tangyuan.cache.WeakCache", cacheVo_CacheType0, localCache0, true, "9-KB:dQ>m-| Xp", (Map<String, String>) null);
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      cacheVo0.putObject("org.xson.tangyuan.cache.WeakCache", object0, (Integer) null, stringArray0, "org.xson.tangyuan.cache.WeakCache");
      assertEquals("org.xson.tangyuan.cache.WeakCache", cacheVo0.getId());
      assertTrue(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
      assertEquals("9-KB:dQ>m-| Xp", cacheVo0.getResource());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      LocalCache localCache0 = new LocalCache("org.xson.tangyuan.cache.WeakCache");
      CacheVo cacheVo0 = new CacheVo("org.xson.tangyuan.cache.WeakCache", cacheVo_CacheType0, localCache0, true, "9-KB:dQ>m-| Xp", (Map<String, String>) null);
      String[] stringArray0 = new String[9];
      cacheVo0.removeObject((String) null, stringArray0, "?KM{9{n#PqwN");
      assertEquals("9-KB:dQ>m-| Xp", cacheVo0.getResource());
      assertEquals("org.xson.tangyuan.cache.WeakCache", cacheVo0.getId());
      assertTrue(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("Xpr|Nn#oNHC4uP", true);
      assertFalse(cacheVo0.isGroup());
      
      cacheVo0.group = true;
      cacheVo0.isGroup();
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("kvs>l:Urn&)IR+n", true);
      cacheVo0.defaultCache = false;
      boolean boolean0 = cacheVo0.isDefaultCache();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("s*`)F", true);
      cacheVo0.getType();
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("", true);
      String string0 = cacheVo0.getResource();
      assertTrue(cacheVo0.isDefaultCache());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      LocalCache localCache0 = new LocalCache("!MXKZiOW.Z&_");
      FIFOCache fIFOCache0 = new FIFOCache(localCache0, 1614);
      LoggingCache loggingCache0 = new LoggingCache(fIFOCache0);
      WeakCache weakCache0 = new WeakCache(loggingCache0, 1614);
      CacheVo cacheVo0 = new CacheVo("!MXKZiOW.Z&_", cacheVo_CacheType0, weakCache0, false, "org.xson.tangyuan.cache.vo.CacheVo$CacheStrategyType", (Map<String, String>) null);
      String string0 = cacheVo0.getResource();
      assertEquals("!MXKZiOW.Z&_", cacheVo0.getId());
      assertFalse(cacheVo0.isGroup());
      assertEquals("org.xson.tangyuan.cache.vo.CacheVo$CacheStrategyType", string0);
      assertFalse(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      MemcachedCache memcachedCache0 = new MemcachedCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo((String) null, cacheVo_CacheType0, memcachedCache0, false, "XIa'xKYge8ahHqS$", hashMap0);
      cacheVo0.getProperties();
      assertFalse(cacheVo0.isGroup());
      assertFalse(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("", cacheVo_CacheType0, redisCache0, false, "", hashMap0);
      hashMap0.put("", "");
      cacheVo0.getProperties();
      assertFalse(cacheVo0.isGroup());
      assertFalse(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      RedisCache redisCache0 = new RedisCache();
      ScheduledCache scheduledCache0 = new ScheduledCache(redisCache0, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("OPh-oOR[-P9", cacheVo_CacheType0, scheduledCache0, true, "OPh-oOR[-P9", hashMap0);
      cacheVo0.getObject("OPh-oOR[-P9");
      assertTrue(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("Cache instances require an ID.", false);
      String string0 = cacheVo0.getId();
      assertNotNull(string0);
      assertFalse(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("", true);
      String string0 = cacheVo0.getId();
      assertTrue(cacheVo0.isDefaultCache());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo(",nq", true);
      cacheVo0.getCache();
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      MemcachedCache memcachedCache0 = new MemcachedCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("qV{.s", cacheVo_CacheType0, memcachedCache0, false, "qV{.s", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.start();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Memcached miss property 'serverlist'
         //
         verifyException("org.xson.tangyuan.cache.MemcachedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      SynchronizedCache synchronizedCache0 = new SynchronizedCache((ICache) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("#S/]eIXU[,K0", cacheVo_CacheType0, synchronizedCache0, false, "#S/]eIXU[,K0", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.start();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.SynchronizedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("", cacheVo_CacheType0, redisCache0, false, "UOe", hashMap0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        cacheVo0.removeObject((String) null, stringArray0, "UOe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: cache key does not allow null
         //
         verifyException("org.xson.tangyuan.cache.RedisCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      SynchronizedCache synchronizedCache0 = new SynchronizedCache((ICache) null);
      CacheVo cacheVo0 = new CacheVo("*NPC9", cacheVo_CacheType0, synchronizedCache0, true, "}:kc JqK5{J%q", (Map<String, String>) null);
      // Undeclared exception!
      try { 
        cacheVo0.removeObject("}:kc JqK5{J%q", (String[]) null, "*NPC9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.SynchronizedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      EhCacheCache ehCacheCache0 = new EhCacheCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("`<kfY59\"u5CPK", cacheVo_CacheType0, ehCacheCache0, false, "v~Eg+U", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.removeObject("K5?BXcUi`p{|F7o", (String[]) null, "v~Eg+U");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/ehcache/Cache
         //
         verifyException("org.xson.tangyuan.cache.EhCacheCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      EhCacheCache ehCacheCache0 = new EhCacheCache();
      LoggingCache loggingCache0 = new LoggingCache(ehCacheCache0);
      SynchronizedCache synchronizedCache0 = new SynchronizedCache(loggingCache0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("", cacheVo_CacheType0, synchronizedCache0, true, "", hashMap0);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        cacheVo0.removeObject("org.xson.tangyuan.util.SerializeUtil", stringArray0, "org.xson.tangyuan.util.SerializeUtil");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/ehcache/Cache
         //
         verifyException("org.xson.tangyuan.cache.EhCacheCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("MVS.|s", true);
      Integer integer0 = new Integer(1216);
      // Undeclared exception!
      try { 
        cacheVo0.putObject("MVS.|s", integer0, integer0, (String[]) null, "MVS.|s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.vo.CacheVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      MemcachedCache memcachedCache0 = new MemcachedCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo(",", cacheVo_CacheType0, memcachedCache0, true, ",", hashMap0);
      Object object0 = new Object();
      Integer integer0 = new Integer(4);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        cacheVo0.putObject("!:=b0(5", object0, integer0, stringArray0, ",");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/whalin/MemCached/MemCachedClient
         //
         verifyException("org.xson.tangyuan.cache.MemcachedCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("", true);
      // Undeclared exception!
      try { 
        cacheVo0.getObject("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.vo.CacheVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      LRUCache lRUCache0 = new LRUCache((ICache) null, 0);
      SoftCache softCache0 = new SoftCache(lRUCache0, 0);
      SynchronizedCache synchronizedCache0 = new SynchronizedCache(softCache0);
      CacheVo cacheVo0 = new CacheVo("7lV$Aai7rqdp", cacheVo_CacheType0, synchronizedCache0, true, (String) null, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        cacheVo0.getObject("3~7s3rp^w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.LRUCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      EhCacheCache ehCacheCache0 = new EhCacheCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("FIFO", cacheVo_CacheType0, ehCacheCache0, false, "FIFO", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.getObject("FIFO");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/ehcache/Cache
         //
         verifyException("org.xson.tangyuan.cache.EhCacheCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.REDIS;
      EhCacheCache ehCacheCache0 = new EhCacheCache();
      SynchronizedCache synchronizedCache0 = new SynchronizedCache(ehCacheCache0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("7 mU)*H$@J^U%7`|X", cacheVo_CacheType0, synchronizedCache0, true, "7 mU)*H$@J^U%7`|X", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.getObject("7 mU)*H$@J^U%7`|X");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/ehcache/Cache
         //
         verifyException("org.xson.tangyuan.cache.EhCacheCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("s`)(", false);
      // Undeclared exception!
      try { 
        cacheVo0.start();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // net/sf/ehcache/CacheException
         //
         verifyException("org.xson.tangyuan.cache.vo.CacheVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("*NPC9", false);
      // Undeclared exception!
      try { 
        cacheVo0.removeObject("}:kc JqK5{J%q", (String[]) null, "*NPC9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.vo.CacheVo", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.LOCAL;
      LocalCache localCache0 = new LocalCache("FIFO");
      WeakCache weakCache0 = new WeakCache(localCache0, 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("org.xson.tangyuan.cache.vo.CacheVo$CacheStrategyType", cacheVo_CacheType0, weakCache0, true, "", hashMap0);
      String string0 = cacheVo0.getResource();
      assertEquals("", string0);
      assertEquals("org.xson.tangyuan.cache.vo.CacheVo$CacheStrategyType", cacheVo0.getId());
      assertTrue(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("kvs>l:Urn&)IR+n", true);
      boolean boolean0 = cacheVo0.isDefaultCache();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      LocalCache localCache0 = new LocalCache("aLSl'Mb");
      SoftCache softCache0 = new SoftCache(localCache0, (-692));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("Error setting Log implementation.  Cause: ", cacheVo_CacheType0, softCache0, false, "Error setting Log implementation.  Cause: ", hashMap0);
      cacheVo0.getType();
      assertFalse(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo((String) null, true);
      cacheVo0.getId();
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("c=BZyDMycs", false);
      cacheVo0.getProperties();
      assertFalse(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.MEMCACHE;
      RedisCache redisCache0 = new RedisCache();
      WeakCache weakCache0 = new WeakCache(redisCache0, 0);
      FIFOCache fIFOCache0 = new FIFOCache(weakCache0, 1);
      CacheVo cacheVo0 = new CacheVo("LRU", cacheVo_CacheType0, fIFOCache0, true, "WRf-sTHGp3", (Map<String, String>) null);
      Integer integer0 = new Integer(1);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        cacheVo0.putObject("WRf-sTHGp3", fIFOCache0, integer0, stringArray0, "WRf-sTHGp3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.io.NotSerializableException: org.xson.tangyuan.cache.WeakCache$WeakEntry
         //
         verifyException("org.xson.tangyuan.cache.RedisCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CacheVo cacheVo0 = new CacheVo("4ywySAD(P_pyHa{t|5r", true);
      boolean boolean0 = cacheVo0.isGroup();
      assertFalse(boolean0);
      assertTrue(cacheVo0.isDefaultCache());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.EHCACHE;
      RedisCache redisCache0 = new RedisCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("%kD<]@oLv>6", cacheVo_CacheType0, redisCache0, true, "eMM'Dc}Kols", hashMap0);
      // Undeclared exception!
      try { 
        cacheVo0.getObject("eMM'Dc}Kols");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoClassDefFoundError: org/xson/thirdparty/redis/JedisClient
         //
         verifyException("org.xson.tangyuan.cache.RedisCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CacheVo.CacheType cacheVo_CacheType0 = CacheVo.CacheType.LOCAL;
      LocalCache localCache0 = new LocalCache("Cache instanYes require an ID.");
      WeakCache weakCache0 = new WeakCache(localCache0, (-2326));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheVo cacheVo0 = new CacheVo("Cache instanYes require an ID.", cacheVo_CacheType0, weakCache0, true, "Cache instanYes require an ID.", hashMap0);
      cacheVo0.getCache();
      assertTrue(cacheVo0.isDefaultCache());
      assertFalse(cacheVo0.isGroup());
  }
}
