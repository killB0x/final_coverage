/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:04:18 GMT 2022
 */

package org.xson.tangyuan.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xson.tangyuan.cache.ICache;
import org.xson.tangyuan.cache.LRUCache;
import org.xson.tangyuan.cache.LocalCache;
import org.xson.tangyuan.cache.ScheduledCache;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocalCache_ESTest extends LocalCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      LRUCache lRUCache0 = new LRUCache(localCache0, 0);
      Integer integer0 = new Integer(0);
      localCache0.putObject((Object) null, (Object) lRUCache0, integer0);
      localCache0.removeObject((Object) null);
      assertEquals(0, localCache0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("n.c<i*,_^lyUd_");
      Object object0 = new Object();
      Integer integer0 = new Integer(674);
      localCache0.putObject(object0, (Object) "n.c<i*,_^lyUd_", integer0);
      localCache0.getSize();
      assertEquals("n.c<i*,_^lyUd_", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      Integer integer0 = new Integer((-1290));
      localCache0.putObject((Object) "R^_ SA#y2|L0", (Object) "R^_ SA#y2|L0", integer0);
      localCache0.getObject("R^_ SA#y2|L0");
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("CGO`tc\\vI");
      String string0 = localCache0.getId();
      assertEquals("CGO`tc\\vI", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("");
      String string0 = localCache0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("org.xson.tangyuan.cache.LocalCache");
      Integer integer0 = new Integer(0);
      LocalCache localCache1 = new LocalCache((String) null);
      // Undeclared exception!
      try { 
        localCache0.putObject((Object) localCache1, (Object) "org.xson.tangyuan.cache.LocalCache", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.xson.tangyuan.cache.LocalCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScheduledCache scheduledCache0 = new ScheduledCache((ICache) null, 0);
      LocalCache localCache0 = new LocalCache("Memcached miss property 'serverlist'");
      // Undeclared exception!
      try { 
        localCache0.equals(scheduledCache0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.cache.ScheduledCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalCache localCache0 = new LocalCache((String) null);
      // Undeclared exception!
      try { 
        localCache0.hashCode();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.xson.tangyuan.cache.LocalCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      localCache0.hashCode();
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalCache localCache0 = new LocalCache((String) null);
      String string0 = localCache0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      LocalCache localCache1 = new LocalCache((String) null);
      // Undeclared exception!
      try { 
        localCache0.removeObject(localCache1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.xson.tangyuan.cache.LocalCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("ppqN=K[J57+6!T6e$j");
      LRUCache lRUCache0 = new LRUCache(localCache0, 1024);
      localCache0.equals(lRUCache0);
      assertEquals("ppqN=K[J57+6!T6e$j", lRUCache0.getId());
      assertEquals("ppqN=K[J57+6!T6e$j", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("X5");
      boolean boolean0 = localCache0.equals(localCache0);
      assertEquals("X5", localCache0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalCache localCache0 = new LocalCache((String) null);
      // Undeclared exception!
      try { 
        localCache0.equals((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cache instances require an ID.
         //
         verifyException("org.xson.tangyuan.cache.LocalCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      boolean boolean0 = localCache0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      localCache0.clear();
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      localCache0.removeObject(localCache0);
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("R^_ SA#y2|L0");
      localCache0.getSize();
      assertEquals("R^_ SA#y2|L0", localCache0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalCache localCache0 = new LocalCache("@>");
      localCache0.getObject(localCache0);
      assertEquals("@>", localCache0.getId());
  }
}
