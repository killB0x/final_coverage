/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:45:52 GMT 2022
 */

package org.xson.tangyuan.transaction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.xson.tangyuan.datasource.AbstractDataSource;
import org.xson.tangyuan.datasource.DataSourceVo;
import org.xson.tangyuan.datasource.MuiltDataSourceManager;
import org.xson.tangyuan.datasource.SimpleDataSourceManager;
import org.xson.tangyuan.transaction.XConnection;
import org.xson.tangyuan.transaction.XTransactionDefinition;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XConnection_ESTest extends XConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      XTransactionDefinition xTransactionDefinition0 = new XTransactionDefinition("SAVEPOINT_");
      AbstractDataSource abstractDataSource0 = mock(AbstractDataSource.class, new ViolatedAssumptionAnswer());
      doReturn((Connection) null).when(abstractDataSource0).getConnection();
      SimpleDataSourceManager simpleDataSourceManager0 = new SimpleDataSourceManager(abstractDataSource0, "SavepointManager does not support Savepoint.");
      // Undeclared exception!
      try { 
        xConnection0.begin("SAVEPOINT_", simpleDataSourceManager0, xTransactionDefinition0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.transaction.XConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      // Undeclared exception!
      try { 
        xConnection0.setSavepoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.transaction.XConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      // Undeclared exception!
      try { 
        xConnection0.checkSetTransaction((XTransactionDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.transaction.XConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      // Undeclared exception!
      try { 
        xConnection0.beginTransaction((XTransactionDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.transaction.XConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      HashMap<String, DataSourceVo> hashMap0 = new HashMap<String, DataSourceVo>();
      HashMap<String, AbstractDataSource> hashMap1 = new HashMap<String, AbstractDataSource>();
      MuiltDataSourceManager muiltDataSourceManager0 = new MuiltDataSourceManager(hashMap0, hashMap1, "org.xson.tangyuan.transaction.XConnection");
      try { 
        xConnection0.begin("org.xson.tangyuan.transaction.XConnection", muiltDataSourceManager0, (XTransactionDefinition) null, false);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // \u4E0D\u5B58\u5728\u7684DataSource: org.xson.tangyuan.transaction.XConnection
         //
         verifyException("org.xson.tangyuan.datasource.MuiltDataSourceManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      int int0 = xConnection0.getSavepointCounter();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      xConnection0.getSavepoint();
      assertEquals(0, xConnection0.getSavepointCounter());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XConnection xConnection0 = new XConnection();
      xConnection0.getConnection();
      assertEquals(0, xConnection0.getSavepointCounter());
  }
}
