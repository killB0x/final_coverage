/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:42:23 GMT 2022
 */

package org.xson.tangyuan.logging.slf4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Slf4jLoggerImpl_ESTest extends Slf4jLoggerImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl("");
      slf4jLoggerImpl0.error("^ex");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(";]'");
      boolean boolean0 = slf4jLoggerImpl0.isTraceEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl("\"O%k|'M+8");
      boolean boolean0 = slf4jLoggerImpl0.isInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl((Logger) null);
      // Undeclared exception!
      try { 
        slf4jLoggerImpl0.isTraceEnabled();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl((Logger) null);
      MockThrowable mockThrowable0 = new MockThrowable("");
      // Undeclared exception!
      try { 
        slf4jLoggerImpl0.error("$Kr!c8?LZ;", (Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl((Logger) null);
      // Undeclared exception!
      try { 
        slf4jLoggerImpl0.debug((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isInfoEnabled();
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      boolean boolean0 = slf4jLoggerImpl0.isInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      slf4jLoggerImpl0.info("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isDebugEnabled();
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      boolean boolean0 = slf4jLoggerImpl0.isDebugEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl("");
      slf4jLoggerImpl0.info((String) null, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl("");
      slf4jLoggerImpl0.trace("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      slf4jLoggerImpl0.debug("org.evosuite.runtime.mock.java.lang.MockThrowable: ");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl((Logger) null);
      // Undeclared exception!
      try { 
        slf4jLoggerImpl0.error("$Kr!c8?LZ;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xson.tangyuan.logging.slf4j.Slf4jLoggerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      MockThrowable mockThrowable0 = new MockThrowable("");
      slf4jLoggerImpl0.error("", (Throwable) mockThrowable0);
      assertEquals("", mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      slf4jLoggerImpl0.warn("");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isTraceEnabled();
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl(logger0);
      boolean boolean0 = slf4jLoggerImpl0.isTraceEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Slf4jLoggerImpl slf4jLoggerImpl0 = new Slf4jLoggerImpl("2{:QV");
      boolean boolean0 = slf4jLoggerImpl0.isDebugEnabled();
      assertFalse(boolean0);
  }
}
