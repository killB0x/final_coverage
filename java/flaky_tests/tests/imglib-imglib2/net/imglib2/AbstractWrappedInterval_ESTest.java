/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:12:19 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import net.imglib2.FinalInterval;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractWrappedInterval_ESTest extends AbstractWrappedInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 12L;
      IntervalView<ARGBDoubleType> intervalView0 = new IntervalView<ARGBDoubleType>((RandomAccessible<ARGBDoubleType>) null, longArray0, longArray0);
      IterableRandomAccessibleInterval<ARGBDoubleType> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<ARGBDoubleType>(intervalView0);
      long long0 = iterableRandomAccessibleInterval0.min(0);
      assertEquals(12L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>((RandomAccessible<Object>) null, finalInterval0);
      IterableRandomAccessibleInterval<Object> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Object>(intervalView0);
      iterableRandomAccessibleInterval0.max(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[4];
      IntervalView<ARGBDoubleType> intervalView0 = new IntervalView<ARGBDoubleType>((RandomAccessible<ARGBDoubleType>) null, longArray0, longArray0);
      IterableRandomAccessibleInterval<ARGBDoubleType> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<ARGBDoubleType>(intervalView0);
      long long0 = iterableRandomAccessibleInterval0.min(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(65);
      ListImg<PointSampleList<Object>> listImg0 = new ListImg<PointSampleList<Object>>(longArray0, pointSampleList0);
      IterableRandomAccessibleInterval<PointSampleList<Object>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<PointSampleList<Object>>) listImg0);
      iterableRandomAccessibleInterval0.min(longArray0);
      assertEquals(0L, iterableRandomAccessibleInterval0.size());
  }
}
