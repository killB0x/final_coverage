/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:09:30 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Supplier;
import net.imglib2.AbstractRealInterval;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.FinalRealInterval;
import net.imglib2.Interval;
import net.imglib2.KDTree;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.RealPositionable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealInterval_ESTest extends RealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      finalInterval0.minAsDoubleArray();
      // Undeclared exception!
      try { 
        finalInterval0.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      double[] doubleArray0 = finalInterval0.minAsDoubleArray();
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      // Undeclared exception!
      try { 
        finalInterval1.realMin(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      double[] doubleArray0 = finalInterval0.minAsDoubleArray();
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1483);
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      RealPoint realPoint0 = finalInterval0.maxAsRealPoint();
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[12];
      FinalInterval.createMinMax(longArray0);
      long[] longArray1 = new long[4];
      longArray1[0] = 414L;
      longArray1[1] = 0L;
      longArray1[2] = 414L;
      longArray1[3] = (-1L);
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      // Undeclared exception!
      try { 
        finalInterval0.maxAsDoubleArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 44;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(44);
      RealPoint realPoint0 = new RealPoint(44);
      realPoint0.toString();
      Integer integer0 = new Integer(44);
      double[] doubleArray0 = new double[1];
      realPointSampleList0.maxAsDoubleArray();
      realPointSampleList0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList0.forEach(consumer0);
      doubleArray0[0] = (double) 44;
      RealPoint.wrap(doubleArray0);
      realPointSampleList0.realMax((RealPositionable) realPoint0);
      int int1 = 2634;
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2634);
      // Undeclared exception!
      try { 
        pointSampleList0.realMax(2634);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2634 out of bounds for length 2634
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      finalInterval0.maxAsDoubleArray();
      Point point0 = new Point(longArray0, false);
      point0.positionAsPoint();
      RealPointSample<KDTree.SamplerNode<Object>> realPointSample0 = new RealPointSample<KDTree.SamplerNode<Object>>((Supplier<KDTree.SamplerNode<Object>>) null, point0);
      // Undeclared exception!
      try { 
        finalInterval0.realMax((RealPositionable) realPointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      finalInterval0.minAsDoubleArray();
      // Undeclared exception!
      try { 
        finalInterval0.realMax((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0, true);
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      FinalInterval finalInterval1 = new FinalInterval((Dimensions) finalInterval0);
      finalInterval1.maxAsRealPoint();
      Point.wrap(longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2932L);
      longArray0[1] = 9223372036854775807L;
      longArray0[2] = 730L;
      longArray0[3] = (-2829L);
      longArray0[4] = (-532L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-532L);
      doubleArray0[1] = (double) (-532L);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (double) 730L;
      doubleArray0[4] = (double) (-532L);
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = (double) 730L;
      doubleArray0[7] = (-1.0);
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0, false);
      int int0 = 2421;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(2421);
      KDTree<Integer> kDTree0 = new KDTree<Integer>(realPointSampleList0);
      kDTree0.minAsRealPoint();
      // Undeclared exception!
      try { 
        kDTree0.firstElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray1, true);
      abstractRealInterval0.minAsDoubleArray();
      abstractRealInterval0.maxAsDoubleArray();
      abstractRealInterval0.realMin(doubleArray0);
      PointSampleList<Integer> pointSampleList0 = null;
      try {
        pointSampleList0 = new PointSampleList<Integer>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.PointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      finalInterval0.minAsPoint();
      finalInterval0.maxAsRealPoint();
      finalInterval0.maxAsRealPoint();
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      // Undeclared exception!
      try { 
        pointSampleList0.realMin(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      realPointSampleList0.minAsRealPoint();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1611.19572);
      doubleArray0[1] = 1218.12051021232;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2634.2;
      doubleArray0[4] = 1186.7870112238;
      doubleArray0[5] = 997.5726845045;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1.7976931348623157E308);
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0, false);
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      KDTree<Integer> kDTree0 = new KDTree<Integer>(realPointSampleList0);
      kDTree0.minAsRealPoint();
      // Undeclared exception!
      try { 
        kDTree0.firstElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2932L);
      longArray0[1] = 9223372036854775807L;
      longArray0[2] = 730L;
      longArray0[3] = (-2829L);
      longArray0[4] = (-532L);
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      FinalInterval finalInterval1 = new FinalInterval((Dimensions) finalInterval0);
      finalInterval1.minAsDoubleArray();
      finalInterval1.maxAsRealPoint();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = finalInterval0.minAsDoubleArray();
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 624;
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(624);
      assertEquals(624, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertNotNull(pointSampleList0);
      
      double[] doubleArray0 = pointSampleList0.maxAsDoubleArray();
      assertEquals(624, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(624, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        pointSampleList0.max((Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0, true);
      assertEquals(0, abstractRealInterval0.numDimensions());
      assertEquals(0, doubleArray0.length);
      assertNotNull(abstractRealInterval0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2751.461262482;
      double[] doubleArray2 = abstractRealInterval0.maxAsDoubleArray();
      assertEquals(0, abstractRealInterval0.numDimensions());
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-3164.07293755342);
      abstractRealInterval0.realMin(doubleArray1);
      assertEquals(0, abstractRealInterval0.numDimensions());
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2751.461262482, 0.0, (-3164.07293755342)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      PointSampleList<Integer> pointSampleList0 = null;
      try {
        pointSampleList0 = new PointSampleList<Integer>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.PointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = finalInterval0.maxAsDoubleArray();
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      RealPoint realPoint0 = finalInterval0.maxAsRealPoint();
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, realPoint0.numDimensions());
      assertEquals(4, longArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2932L);
      longArray0[1] = 9223372036854775807L;
      longArray0[2] = 730L;
      longArray0[3] = (-2829L);
      longArray0[4] = (-532L);
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      FinalInterval finalInterval1 = new FinalInterval((Dimensions) finalInterval0);
      finalInterval1.maxAsRealPoint();
  }
}
