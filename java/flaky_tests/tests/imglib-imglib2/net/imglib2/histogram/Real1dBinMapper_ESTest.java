/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:23:04 GMT 2022
 */

package net.imglib2.histogram;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.histogram.HistogramNd;
import net.imglib2.histogram.Real1dBinMapper;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import net.imglib2.img.sparse.IntNtree;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Real1dBinMapper_ESTest extends Real1dBinMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 4294967295L, true);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getCenterValue(4L, (UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[8];
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMappers: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[4];
      boolean[] booleanArray0 = new boolean[18];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMappers: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(1030.2754, 1030.2754, 9223372036854775807L, false);
      boolean boolean0 = real1dBinMapper0.includesUpperBound(0L);
      assertFalse(real1dBinMapper0.hasTails());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(1030.2754, 1030.2754, 9223372036854775807L, true);
      boolean boolean0 = real1dBinMapper0.includesUpperBound(9223372036854775807L);
      assertTrue(real1dBinMapper0.hasTails());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4L, 4L, 4L, true);
      boolean boolean0 = real1dBinMapper0.includesLowerBound(4L);
      assertTrue(real1dBinMapper0.hasTails());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>((-32768.0), 4.2949643160798287E9, 9223372036854775805L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(70368256133148L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = null;
      try {
        real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9.223372036854776E18, 9.223372036854776E18, 1L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Real1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(1030.2754, 1030.2754, 9223372036854775807L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      real1dBinMapper0.getLowerBound(1L, unsignedIntType0);
      assertEquals(1030, unsignedIntType0.getInt());
      assertEquals(1030L, unsignedIntType0.get());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      longArray0[0] = 4L;
      longArray0[1] = 4L;
      longArray0[2] = 4L;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      HistogramNd<UnsignedIntType> histogramNd0 = Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
      assertEquals(0L, histogramNd0.totalCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[6];
      longArray0[0] = 4294967296L;
      longArray0[1] = 4294967296L;
      longArray0[2] = 4294967296L;
      longArray0[3] = 4294967296L;
      longArray0[4] = 4294967296L;
      longArray0[5] = 4294967296L;
      boolean[] booleanArray0 = new boolean[6];
      HistogramNd<UnsignedIntType> histogramNd0 = Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
      assertFalse(histogramNd0.hasTails());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[6];
      longArray0[0] = 4294967291L;
      longArray0[1] = 4294967291L;
      longArray0[2] = 4294967291L;
      longArray0[3] = 4294967291L;
      longArray0[4] = 4294967291L;
      longArray0[5] = 4294967291L;
      boolean[] booleanArray0 = new boolean[6];
      HistogramNd<UnsignedIntType> histogramNd0 = Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
      assertFalse(histogramNd0.hasTails());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(259.0, 259.0, 12L, true);
      boolean boolean0 = real1dBinMapper0.hasTails();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(1030.2754, 1030.2754, 9223372036854775807L, false);
      real1dBinMapper0.copy();
      assertFalse(real1dBinMapper0.hasTails());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      UnsignedIntType unsignedIntType1 = unsignedIntType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        real1dBinMapper0.map(unsignedIntType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4294967317L, 4294967317L, 4294967317L, true);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.map(unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapIntBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775804L, 9223372036854775804L, 9223372036854775804L, true);
      int[] intArray0 = new int[0];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(dirtyIntArray0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.map(unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[0];
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      longArray0[0] = 661L;
      longArray0[1] = 661L;
      longArray0[2] = 661L;
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, (long[]) null, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      longArray0[0] = 9223372036854775786L;
      longArray0[1] = 9223372036854775786L;
      longArray0[2] = 9223372036854775786L;
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -10648
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      boolean[] booleanArray0 = new boolean[3];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray1, longArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775782L, 9223372036854775782L, 9223372036854775782L, true);
      long[] longArray0 = new long[9];
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 2189);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      real1dBinMapper0.getUpperBound(9223372036854775782L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775756L, 9223372036854775756L, 9223372036854775756L, false);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getUpperBound(9223372036854775756L, (UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>((-2709.0), (-2709.0), 4294967247L, true);
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(0, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(dirtyVolatileIntArray0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getUpperBound(1L, unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775789L, 9223372036854775789L, 9223372036854775789L, false);
      long[] longArray0 = new long[0];
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, (-2146348613));
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      real1dBinMapper0.getLowerBound(2L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775804L, 9223372036854775804L, 9223372036854775804L, false);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getLowerBound(9223372036854775804L, (UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>((-3740.0), (-3740.0), 4294967317L, true);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getLowerBound((long) 0, unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775695L, 9223372036854775695L, 9223372036854775695L, false);
      int[] intArray0 = new int[0];
      IntArray intArray1 = new IntArray(intArray0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intArray1);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getLowerBound(648L, unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775789L, 9223372036854775789L, 9223372036854775789L, true);
      long[] longArray0 = new long[8];
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 1411);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      real1dBinMapper0.getCenterValue(9223372036854775789L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(1211.0, Double.POSITIVE_INFINITY, 1954L, true);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getCenterValue(0L, unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(0.0, 0.0, 807L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      // Undeclared exception!
      try { 
        real1dBinMapper0.getCenterValue(807L, unsignedIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid bin position specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(0.0, 1711.165704391, 4294967288L, false);
      int[] intArray0 = new int[0];
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(intArray0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(volatileIntArray0);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getCenterValue(1622L, unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = null;
      try {
        real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.POSITIVE_INFINITY, 4L, 4L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Real1dBinMapper: invalid data range specified (min > max)
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = null;
      try {
        real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(0.0, 11L, (-1711), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Real1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4L, false);
      long long0 = real1dBinMapper0.getBinCount();
      assertFalse(real1dBinMapper0.hasTails());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4294967300L, 4294967300L, 4294967300L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      // Undeclared exception!
      try { 
        real1dBinMapper0.getUpperBound(4294967300L, unsignedIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid bin position specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775807L, 9223372036854775807L, 9223372036854775807L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType((-1891L));
      // Undeclared exception!
      try { 
        real1dBinMapper0.getUpperBound((-1891L), unsignedIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid bin position specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775807L, 9223372036854775807L, 9223372036854775807L, true);
      real1dBinMapper0.getCenterValue(453L, unsignedIntType0);
      assertEquals(4294967295L, unsignedIntType0.getIntegerLong());
      assertEquals((-1), unsignedIntType0.getInt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4294967294L, 4294967294L, 4294967294L, true);
      // Undeclared exception!
      try { 
        real1dBinMapper0.getLowerBound((-1L), (UnsignedIntType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid bin position specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMappers: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[1];
      boolean[] booleanArray0 = new boolean[4];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMappers: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4L, false);
      boolean boolean0 = real1dBinMapper0.includesUpperBound(3L);
      assertFalse(real1dBinMapper0.hasTails());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(259.0, 259.0, 12L, true);
      boolean boolean0 = real1dBinMapper0.includesUpperBound(3081L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(2.0, 2.0, 751L, true);
      boolean boolean0 = real1dBinMapper0.includesUpperBound((-285L));
      assertTrue(real1dBinMapper0.hasTails());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 4L, false);
      boolean boolean0 = real1dBinMapper0.includesUpperBound(4L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 4294967295L, true);
      boolean boolean0 = real1dBinMapper0.includesLowerBound(4294967294L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 4294967295L, true);
      boolean boolean0 = real1dBinMapper0.includesLowerBound(2706L);
      assertTrue(boolean0);
      assertTrue(real1dBinMapper0.hasTails());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4L, 4L, 4L, false);
      boolean boolean0 = real1dBinMapper0.includesLowerBound(4L);
      assertFalse(real1dBinMapper0.hasTails());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775807L, 9223372036854775807L, 9223372036854775807L, false);
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 4294967288L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4294967288L, 4294967288L, 4294967288L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(4294967288L);
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4294967267L, 4294967267L, 4294967267L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(4294967267L);
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 4294967288L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(4294967287L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(4L);
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>((-436.7069265), 4L, 4L, true);
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(9223372036854775789L);
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775789L, 9223372036854775789L, 9223372036854775789L, true);
      long long0 = real1dBinMapper0.map(unsignedIntType0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = null;
      try {
        real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(2L, 2L, 2L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Real1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[3];
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Real1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Real1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(4L, 4L, 4L, false);
      boolean boolean0 = real1dBinMapper0.hasTails();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      longArray0[0] = 9223372036854775807L;
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        Real1dBinMapper.histogramNd(doubleArray0, doubleArray0, longArray0, booleanArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 9223372036854775807 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Real1dBinMapper<UnsignedIntType> real1dBinMapper0 = new Real1dBinMapper<UnsignedIntType>(9223372036854775782L, 9223372036854775782L, 9223372036854775782L, true);
      assertEquals(9223372036854775782L, real1dBinMapper0.getBinCount());
      
      real1dBinMapper0.copy();
      assertTrue(real1dBinMapper0.hasTails());
  }
}
