/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:49:47 GMT 2022
 */

package net.imglib2.histogram;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.imglib2.histogram.HistogramNd;
import net.imglib2.histogram.Integer1dBinMapper;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.sparse.IntNtree;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Integer1dBinMapper_ESTest extends Integer1dBinMapper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean[] booleanArray0 = new boolean[3];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMapper: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[5];
      boolean[] booleanArray0 = new boolean[9];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray1, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMapper: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(0L, 147L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getUpperBound((-2093L), unsignedIntType0);
      assertEquals((-2094), unsignedIntType0.getInt());
      assertEquals((-2094), unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775806L, 9223372036854775806L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getLowerBound((-825L), unsignedIntType0);
      assertEquals(4294966468L, unsignedIntType0.get());
      assertEquals((-828), unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(0L, 147L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getCenterValue((-1L), unsignedIntType0);
      assertEquals(4294967294L, unsignedIntType0.get());
      assertEquals((-2), unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>((-1L), 1L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(63L, 9223372036854775807L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      unsignedIntType0.setReal((double) 63L);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(9223372036854775806L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1L, 916L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(916L);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(915L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = null;
      try {
        integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2L, 2L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Integer1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = null;
      try {
        integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>((-709L), (-709L), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Integer1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      HistogramNd<UnsignedIntType> histogramNd0 = Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
      assertEquals(0L, histogramNd0.totalCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      boolean[] booleanArray0 = new boolean[1];
      HistogramNd<UnsignedIntType> histogramNd0 = Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
      assertFalse(histogramNd0.hasTails());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775806L, 9223372036854775806L, true);
      boolean boolean0 = integer1dBinMapper0.hasTails();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1440L, 1440L, false);
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper1 = integer1dBinMapper0.copy();
      assertFalse(integer1dBinMapper1.hasTails());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2273L, 2273L, true);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.map((UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(4294967295L, 4294967295L, true);
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(byteBuffer0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.map(unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsIntBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(771L, 771L, true);
      int[] intArray0 = new int[0];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(dirtyVolatileIntArray0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.map(unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray1 = new long[1];
      longArray1[0] = 9223372036854775806L;
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray1, booleanArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 9223372036854775806 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2147483647L;
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray0, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2412L;
      longArray0[1] = 9223372036854775806L;
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4824
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(15L, 15L, false);
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 1009);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      integer1dBinMapper0.getUpperBound(15L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(63L, 63L, true);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getUpperBound(63L, (UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(486L, 486L, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(byteBuffer0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getUpperBound(486L, unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1355L, 1355L, true);
      IntArray intArray0 = new IntArray(0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intArray0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getUpperBound(575L, unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1816L, 1816L, false);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getLowerBound(1816L, (UnsignedIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(306L, 306L, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      IntBufferAccess intBufferAccess0 = IntBufferAccess.fromByteBuffer(byteBuffer0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getLowerBound((-4233L), unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1L, 1L, false);
      int[] intArray0 = new int[0];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(dirtyIntArray0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getLowerBound((-9223372036854775808L), unsignedIntType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1586L, 1586L, true);
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 14);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      integer1dBinMapper0.getCenterValue(1L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2273L, 2273L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      UnsignedIntType unsignedIntType1 = unsignedIntType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getCenterValue(2273L, unsignedIntType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2147483622L, 2147483622L, true);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(byteBuffer0, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        integer1dBinMapper0.getCenterValue(2147483622L, unsignedIntType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1440L, 1440L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(148L);
      integer1dBinMapper0.getCenterValue(1049L, unsignedIntType0);
      assertEquals(2489, unsignedIntType0.getInt());
      assertEquals(2489, unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = null;
      try {
        integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(0L, 0L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Integer1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1L, 916L, false);
      long long0 = integer1dBinMapper0.getBinCount();
      assertEquals(916L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMapper: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        Integer1dBinMapper.histogramNd(longArray0, longArray1, (boolean[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multiDimMapper: differing input array sizes
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775806L, 9223372036854775806L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(1632L);
      integer1dBinMapper0.getUpperBound(9223372036854775806L, unsignedIntType0);
      //  // Unstable assertion: assertEquals((-2), unsignedIntType0.getInt());
      //  // Unstable assertion: assertEquals((-2), unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(4064L, 4064L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getUpperBound(0L, unsignedIntType0);
      assertEquals(4063L, unsignedIntType0.getIntegerLong());
      assertEquals(4063, unsignedIntType0.getInteger());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775806L, 9223372036854775806L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getLowerBound(9223372036854775806L, unsignedIntType0);
      //  // Unstable assertion: assertEquals(4294967290L, unsignedIntType0.get());
      //  // Unstable assertion: assertEquals(4294967290L, unsignedIntType0.getIntegerLong());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(4064L, 4064L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      integer1dBinMapper0.getLowerBound(0L, unsignedIntType0);
      assertEquals(1L, unsignedIntType0.get());
      assertEquals(1L, unsignedIntType0.getIntegerLong());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(3462L, 3462L, true);
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 1743);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intNtree0);
      // Undeclared exception!
      integer1dBinMapper0.getLowerBound(3462L, unsignedIntType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(835L, 9223372036854775806L, true);
      integer1dBinMapper0.getCenterValue(9223372036854775806L, unsignedIntType0);
      //  // Unstable assertion: assertEquals(831, unsignedIntType0.getInteger());
      //  // Unstable assertion: assertEquals(831, unsignedIntType0.getInt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(0L, 147L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType((-2659L));
      integer1dBinMapper0.getCenterValue(0L, unsignedIntType0);
      assertEquals((-1), unsignedIntType0.getInteger());
      assertEquals(4294967295L, unsignedIntType0.getIntegerLong());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1L, 1L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(63L, 9223372036854775807L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      unsignedIntType0.setInt(2113929216);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(9223372036854775806L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2412L, 2412L, false);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(2412L);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(29L, 29L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(29L);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(2164L, 9223372036854775794L, false);
      integer1dBinMapper0.getUpperBound((-9223372036854775808L), unsignedIntType0);
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(2164L, unsignedIntType0.get());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(486L, 486L, true);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long long0 = integer1dBinMapper0.map(unsignedIntType0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = null;
      try {
        integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(1L, 1L, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid Integer1dBinMapper: no data bins specified
         //
         verifyException("net.imglib2.histogram.Integer1dBinMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(486L, 486L, true);
      integer1dBinMapper0.copy();
      assertTrue(integer1dBinMapper0.hasTails());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(835L, 9223372036854775806L, true);
      boolean boolean0 = integer1dBinMapper0.includesUpperBound(2127L);
      assertTrue(integer1dBinMapper0.hasTails());
      assertEquals(9223372036854775806L, integer1dBinMapper0.getBinCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775805L, 9223372036854775805L, true);
      boolean boolean0 = integer1dBinMapper0.includesLowerBound(9223372036854775805L);
      assertTrue(boolean0);
      assertTrue(integer1dBinMapper0.hasTails());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(9223372036854775806L, 9223372036854775806L, false);
      boolean boolean0 = integer1dBinMapper0.hasTails();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1792L;
      longArray0[1] = 1792L;
      longArray0[2] = 1792L;
      longArray0[3] = 1792L;
      longArray0[4] = 1792L;
      longArray0[5] = 1792L;
      boolean[] booleanArray0 = new boolean[6];
      HistogramNd<UnsignedIntType> histogramNd0 = Integer1dBinMapper.histogramNd(longArray0, longArray0, booleanArray0);
      assertFalse(histogramNd0.hasTails());
  }
}
