/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:00:51 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.FlatIterationOrder;
import net.imglib2.Interval;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlatIterationOrder_ESTest extends FlatIterationOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (long) 59;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FinalInterval finalInterval1 = new FinalInterval((Dimensions) finalInterval0);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(finalInterval1);
      FlatIterationOrder flatIterationOrder1 = new FlatIterationOrder(finalInterval0);
      boolean boolean0 = flatIterationOrder0.equals(flatIterationOrder1);
      assertFalse(flatIterationOrder1.equals((Object)flatIterationOrder0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FlatIterationOrder flatIterationOrder1 = new FlatIterationOrder(finalInterval0);
      boolean boolean0 = flatIterationOrder0.equals(flatIterationOrder1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(7032);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      // Undeclared exception!
      flatIterationOrder0.equals(flatIterationOrder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder((Interval) null);
      // Undeclared exception!
      try { 
        flatIterationOrder0.equals(flatIterationOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FlatIterationOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      int[] intArray0 = new int[4];
      Point point0 = new Point(intArray0);
      Point point1 = new Point(3);
      FinalInterval finalInterval0 = new FinalInterval(point0, point1);
      FlatIterationOrder flatIterationOrder1 = new FlatIterationOrder(finalInterval0);
      // Undeclared exception!
      try { 
        flatIterationOrder0.equals(flatIterationOrder1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(finalInterval0);
      boolean boolean0 = flatIterationOrder0.equals(flatIterationOrder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      FlatIterationOrder flatIterationOrder1 = new FlatIterationOrder(finalInterval0);
      boolean boolean0 = flatIterationOrder0.equals(flatIterationOrder1);
      assertFalse(boolean0);
      assertFalse(flatIterationOrder1.equals((Object)flatIterationOrder0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(1);
      FlatIterationOrder flatIterationOrder1 = new FlatIterationOrder(pointSampleList1);
      boolean boolean0 = flatIterationOrder1.equals(flatIterationOrder0);
      assertFalse(flatIterationOrder0.equals((Object)flatIterationOrder1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      boolean boolean0 = flatIterationOrder0.equals("'t&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(19);
      FlatIterationOrder flatIterationOrder0 = new FlatIterationOrder(pointSampleList0);
      boolean boolean0 = flatIterationOrder0.equals(flatIterationOrder0);
      assertTrue(boolean0);
  }
}
