/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:55:08 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.KDTree;
import net.imglib2.KDTreeNode;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KDTreeNode_ESTest extends KDTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = new Point(1195);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 3, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      double double0 = kDTree_ValueNode0.squDistanceTo((RealLocalizable) point0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = new Point(27);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 27, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.getFloatPosition((-71));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -71 out of bounds for length 27
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      Integer integer0 = new Integer(230);
      KDTree.ValueNode<Integer> kDTree_ValueNode1 = new KDTree.ValueNode<Integer>((Integer) null, kDTree_ValueNode0, (-1015), (KDTree.ValueNode<Integer>) null, (KDTree.ValueNode<Integer>) null);
      KDTree.ValueNode<Integer> kDTree_ValueNode2 = new KDTree.ValueNode<Integer>(kDTree_ValueNode1);
      KDTree.ValueNode<Integer> kDTree_ValueNode3 = new KDTree.ValueNode<Integer>(integer0, point0, (-1015), kDTree_ValueNode1, kDTree_ValueNode2);
      KDTree.ValueNode<Integer> kDTree_ValueNode4 = new KDTree.ValueNode<Integer>(kDTree_ValueNode3);
      assertEquals((-1015), kDTree_ValueNode4.getSplitDimension());
      assertEquals(230, kDTree_ValueNode4.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      Point point0 = new Point(intArray0);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 21, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      double[] doubleArray0 = new double[4];
      kDTree_ValueNode0.localize(doubleArray0);
      assertEquals(21, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 1438;
      float float0 = kDTree_ValueNode0.squDistanceTo(floatArray0);
      assertEquals(2067844.0F, float0, 0.01F);
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      double double0 = kDTree_ValueNode0.squDistanceTo(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Point point0 = new Point(205);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 205, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(206);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      double double0 = kDTree_ValueNode0.squDistanceTo((RealLocalizable) realPoint0);
      assertEquals(1.7439471304698096E40, double0, 0.01);
      assertEquals(205, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      PointSampleList<Point> pointSampleList0 = new PointSampleList<Point>(223);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      KDTree.ValueNode<Object> kDTree_ValueNode0 = new KDTree.ValueNode<Object>(object0, realPoint0, 223, (KDTree.ValueNode<Object>) null, (KDTree.ValueNode<Object>) null);
      int int0 = kDTree_ValueNode0.numDimensions();
      assertEquals(223, kDTree_ValueNode0.getSplitDimension());
      assertEquals(223, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      Integer integer0 = new Integer(0);
      KDTree.ValueNode<Integer> kDTree_ValueNode1 = new KDTree.ValueNode<Integer>(integer0, kDTree_ValueNode0, 0, (KDTree.ValueNode<Integer>) null, (KDTree.ValueNode<Integer>) null);
      KDTree.ValueNode<Integer> kDTree_ValueNode2 = new KDTree.ValueNode<Integer>(kDTree_ValueNode1);
      kDTree_ValueNode2.getSplitCoordinate();
      assertEquals(230, kDTree_ValueNode0.getSplitDimension());
      assertEquals(0, kDTree_ValueNode2.getSplitDimension());
      assertEquals(230, kDTree_ValueNode2.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = new Point(205);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 205, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      kDTree_ValueNode0.getDoublePosition(0);
      assertEquals(205, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(223);
      Point point0 = pointSampleList0.maxAsPoint();
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 223, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      kDTree_ValueNode0.getDoublePosition(0);
      assertEquals(223, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = new Point(0);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 0, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      KDTreeNode<Point> kDTreeNode0 = kDTree_ValueNode0.copy();
      assertEquals(0, kDTreeNode0.getSplitDimension());
      assertEquals(0, kDTreeNode0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      Integer integer0 = new Integer(0);
      KDTree.ValueNode<Integer> kDTree_ValueNode1 = new KDTree.ValueNode<Integer>(integer0, kDTree_ValueNode0, (-318), (KDTree.ValueNode<Integer>) null, (KDTree.ValueNode<Integer>) null);
      KDTreeNode<Integer> kDTreeNode0 = kDTree_ValueNode1.copy();
      assertEquals((-318), kDTreeNode0.getSplitDimension());
      assertEquals(230, kDTreeNode0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Point point0 = new Point(0);
      PointSampleList<Point> pointSampleList0 = new PointSampleList<Point>(3);
      Point point1 = pointSampleList0.maxAsPoint();
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point1, 1, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      KDTreeNode<Point> kDTreeNode0 = kDTree_ValueNode0.copy();
      assertEquals(1, kDTreeNode0.getSplitDimension());
      assertEquals(3, kDTreeNode0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Point point0 = new Point(44);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.squDistanceTo((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 3, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.squDistanceTo(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      PointSampleList<Point> pointSampleList0 = new PointSampleList<Point>(223);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      KDTree.ValueNode<Object> kDTree_ValueNode0 = new KDTree.ValueNode<Object>(object0, realPoint0, 223, (KDTree.ValueNode<Object>) null, (KDTree.ValueNode<Object>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.squDistanceTo((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Point point0 = new Point(230);
      PointSampleList<Point> pointSampleList0 = new PointSampleList<Point>(1);
      KDTree.ValueNode<Object> kDTree_ValueNode0 = new KDTree.ValueNode<Object>(pointSampleList0, point0, 230, (KDTree.ValueNode<Object>) null, (KDTree.ValueNode<Object>) null);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.squDistanceTo(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.squDistanceTo((RealLocalizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Point point0 = new Point(44);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.localize((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.localize(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Point point0 = new Point(44);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.getDoublePosition(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 44 out of bounds for length 44
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PointSampleList<Point> pointSampleList0 = new PointSampleList<Point>(223);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      long[] longArray0 = new long[4];
      Point point0 = Point.wrap(longArray0);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, realPoint0, 189, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      kDTree_ValueNode0.getDoublePosition(189);
      assertEquals(189, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      double[] doubleArray0 = new double[4];
      double double0 = kDTree_ValueNode0.squDistanceTo(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      float[] floatArray0 = new float[8];
      float float0 = kDTree_ValueNode0.squDistanceTo(floatArray0);
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      float[] floatArray0 = new float[8];
      kDTree_ValueNode0.localize(floatArray0);
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Point point0 = new Point(230);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 230, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      Integer integer0 = new Integer(0);
      KDTree.ValueNode<Integer> kDTree_ValueNode1 = new KDTree.ValueNode<Integer>(integer0, kDTree_ValueNode0, 0, (KDTree.ValueNode<Integer>) null, (KDTree.ValueNode<Integer>) null);
      KDTree.ValueNode<Integer> kDTree_ValueNode2 = new KDTree.ValueNode<Integer>(kDTree_ValueNode1);
      KDTree.ValueNode<Integer> kDTree_ValueNode3 = new KDTree.ValueNode<Integer>(kDTree_ValueNode2);
      kDTree_ValueNode3.toString();
      assertEquals(230, kDTree_ValueNode2.numDimensions());
      assertEquals(230, kDTree_ValueNode0.getSplitDimension());
      assertEquals(0, kDTree_ValueNode3.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      kDTree_ValueNode0.positionAsRealPoint();
      assertEquals(3, kDTree_ValueNode0.numDimensions());
      assertEquals(44, kDTree_ValueNode0.getSplitDimension());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Point point0 = new Point(1195);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 3, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      KDTreeNode<Point> kDTreeNode0 = kDTree_ValueNode0.copy();
      assertEquals(3, kDTreeNode0.getSplitDimension());
      assertEquals(1195, kDTreeNode0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point(3);
      KDTree.ValueNode<Point> kDTree_ValueNode0 = new KDTree.ValueNode<Point>(point0, point0, 44, (KDTree.ValueNode<Point>) null, (KDTree.ValueNode<Point>) null);
      // Undeclared exception!
      try { 
        kDTree_ValueNode0.getSplitCoordinate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 44 out of bounds for length 3
         //
         verifyException("net.imglib2.KDTreeNode", e);
      }
  }
}
