/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:07:22 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.PointSampleList;
import net.imglib2.converter.AbstractConvertedCursor;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.BiConvertedCursor;
import net.imglib2.converter.read.ConvertedCursor;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedCursor;
import net.imglib2.img.basictypeaccess.array.CharArray;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileShortArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.list.ListCursor;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListLocalizingCursor;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.volatiles.VolatileByteType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedCursor_ESTest extends AbstractConvertedCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(118);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<Integer, Integer, Integer> biConvertedCursor0 = new BiConvertedCursor<Integer, Integer, Integer>(pointSampleList_PointSampleListCursor0, pointSampleList_PointSampleListCursor0, biConverter0, supplier0);
      biConvertedCursor0.remove();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[4];
      Integer integer0 = new Integer((-2313));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      ListCursor<Integer> listCursor0 = listImg0.cursor();
      SamplerConverter<Integer, PlanarImg<VolatileByteType, LongArray>> samplerConverter0 = (SamplerConverter<Integer, PlanarImg<VolatileByteType, LongArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, PlanarImg<VolatileByteType, LongArray>> writeConvertedCursor0 = new WriteConvertedCursor<Integer, PlanarImg<VolatileByteType, LongArray>>(listCursor0, samplerConverter0);
      boolean boolean0 = writeConvertedCursor0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      long[] longArray0 = new long[4];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListCursor<Integer> listCursor0 = listImg0.cursor();
      Converter<Integer, DirtyVolatileShortArray> converter0 = (Converter<Integer, DirtyVolatileShortArray>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<DirtyVolatileShortArray> supplier0 = (Supplier<DirtyVolatileShortArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      ConvertedCursor<Integer, DirtyVolatileShortArray> convertedCursor0 = new ConvertedCursor<Integer, DirtyVolatileShortArray>(listCursor0, converter0, supplier0);
      AbstractConvertedCursor<Integer, DirtyVolatileShortArray> abstractConvertedCursor0 = convertedCursor0.copy();
      assertNotNull(abstractConvertedCursor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, Integer> writeConvertedCursor0 = new WriteConvertedCursor<Integer, Integer>((Cursor<Integer>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SamplerConverter<Integer, PlanarImg<ComplexDoubleType, CharArray>> samplerConverter0 = (SamplerConverter<Integer, PlanarImg<ComplexDoubleType, CharArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, PlanarImg<ComplexDoubleType, CharArray>> writeConvertedCursor0 = new WriteConvertedCursor<Integer, PlanarImg<ComplexDoubleType, CharArray>>((Cursor<Integer>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<Integer, Cell<Object>> samplerConverter0 = (SamplerConverter<Integer, Cell<Object>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, Cell<Object>> writeConvertedCursor0 = new WriteConvertedCursor<Integer, Cell<Object>>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        writeConvertedCursor0.localize(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[6];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      ListCursor<Integer> listCursor0 = listImg0.cursor();
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, Integer> writeConvertedCursor0 = new WriteConvertedCursor<Integer, Integer>(listCursor0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.localize(longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<Integer, Integer, Integer> biConvertedCursor0 = new BiConvertedCursor<Integer, Integer, Integer>(pointSampleList_PointSampleListCursor0, pointSampleList_PointSampleListCursor0, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.jumpFwd(569L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SamplerConverter<DirtyByteArray, DirtyByteArray> samplerConverter0 = (SamplerConverter<DirtyByteArray, DirtyByteArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<DirtyByteArray, DirtyByteArray> writeConvertedCursor0 = new WriteConvertedCursor<DirtyByteArray, DirtyByteArray>((Cursor<DirtyByteArray>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Object, Object> convertedCursor0 = new ConvertedCursor<Object, Object>((Cursor<Object>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedCursor0.fwd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<DirtyVolatileShortArray> pointSampleList0 = new PointSampleList<DirtyVolatileShortArray>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Converter<Cell<Integer>, Integer> converter0 = (Converter<Cell<Integer>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Cell<Integer>, Integer> convertedCursor0 = new ConvertedCursor<Cell<Integer>, Integer>(pointSampleList_PointSampleListCursor0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedCursor0.fwd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SamplerConverter<DirtyByteArray, DirtyByteArray> samplerConverter0 = (SamplerConverter<DirtyByteArray, DirtyByteArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<DirtyByteArray, DirtyByteArray> writeConvertedCursor0 = new WriteConvertedCursor<DirtyByteArray, DirtyByteArray>((Cursor<DirtyByteArray>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SamplerConverter<DirtyByteArray, DirtyByteArray> samplerConverter0 = (SamplerConverter<DirtyByteArray, DirtyByteArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<DirtyByteArray, DirtyByteArray> writeConvertedCursor0 = new WriteConvertedCursor<DirtyByteArray, DirtyByteArray>((Cursor<DirtyByteArray>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      long[] longArray0 = new long[3];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = listImg0.localizingCursor();
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Integer, Object> convertedCursor0 = new ConvertedCursor<Integer, Object>(listLocalizingCursor0, (Converter<? super Integer, ? super Object>) null, supplier0);
      convertedCursor0.fwd();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray((byte[]) null);
      SamplerConverter<DirtyByteArray, DirtyByteArray> samplerConverter0 = (SamplerConverter<DirtyByteArray, DirtyByteArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(dirtyByteArray0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<DirtyByteArray, DirtyByteArray> writeConvertedCursor0 = new WriteConvertedCursor<DirtyByteArray, DirtyByteArray>((Cursor<DirtyByteArray>) null, samplerConverter0);
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        writeConvertedCursor0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<Integer, DirtyVolatileLongArray> samplerConverter0 = (SamplerConverter<Integer, DirtyVolatileLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, DirtyVolatileLongArray> writeConvertedCursor0 = new WriteConvertedCursor<Integer, DirtyVolatileLongArray>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        writeConvertedCursor0.localize(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PointSampleList<ARGBDoubleType> pointSampleList0 = new PointSampleList<ARGBDoubleType>(27);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<ARGBDoubleType, Cell<Integer>> samplerConverter0 = (SamplerConverter<ARGBDoubleType, Cell<Integer>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<ARGBDoubleType, Cell<Integer>> writeConvertedCursor0 = new WriteConvertedCursor<ARGBDoubleType, Cell<Integer>>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.getIntPosition(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SamplerConverter<DirtyByteArray, DirtyByteArray> samplerConverter0 = (SamplerConverter<DirtyByteArray, DirtyByteArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<DirtyByteArray, DirtyByteArray> writeConvertedCursor0 = new WriteConvertedCursor<DirtyByteArray, DirtyByteArray>((Cursor<DirtyByteArray>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      long[] longArray0 = new long[6];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = listImg0.localizingCursor();
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, Integer> writeConvertedCursor0 = new WriteConvertedCursor<Integer, Integer>(listLocalizingCursor0, samplerConverter0);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Integer, Integer> convertedCursor0 = new ConvertedCursor<Integer, Integer>(writeConvertedCursor0, converter0, supplier0);
      convertedCursor0.localize(longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<Integer, DirtyVolatileLongArray> samplerConverter0 = (SamplerConverter<Integer, DirtyVolatileLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, DirtyVolatileLongArray> writeConvertedCursor0 = new WriteConvertedCursor<Integer, DirtyVolatileLongArray>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.getDoublePosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter<Integer, NativeARGBDoubleType> converter0 = (Converter<Integer, NativeARGBDoubleType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Integer, NativeARGBDoubleType> convertedCursor0 = new ConvertedCursor<Integer, NativeARGBDoubleType>((Cursor<Integer>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedCursor0.getLongPosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<Integer, DirtyVolatileLongArray> samplerConverter0 = (SamplerConverter<Integer, DirtyVolatileLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, DirtyVolatileLongArray> writeConvertedCursor0 = new WriteConvertedCursor<Integer, DirtyVolatileLongArray>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      writeConvertedCursor0.reset();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SamplerConverter<Cell<Integer>, IntBufferAccess> samplerConverter0 = (SamplerConverter<Cell<Integer>, IntBufferAccess>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Cell<Integer>, IntBufferAccess> writeConvertedCursor0 = new WriteConvertedCursor<Cell<Integer>, IntBufferAccess>((Cursor<Cell<Integer>>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.getFloatPosition((-1450));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[4];
      Integer integer0 = new Integer((-2313));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      ListCursor<Integer> listCursor0 = listImg0.cursor();
      SamplerConverter<Integer, PlanarImg<VolatileByteType, LongArray>> samplerConverter0 = (SamplerConverter<Integer, PlanarImg<VolatileByteType, LongArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Integer, PlanarImg<VolatileByteType, LongArray>> writeConvertedCursor0 = new WriteConvertedCursor<Integer, PlanarImg<VolatileByteType, LongArray>>(listCursor0, samplerConverter0);
      writeConvertedCursor0.jumpFwd(0L);
  }
}
