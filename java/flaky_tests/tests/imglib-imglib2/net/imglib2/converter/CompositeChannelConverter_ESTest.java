/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:03:00 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.converter.CompositeChannelConverter;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListRandomAccess;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.view.composite.GenericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CompositeChannelConverter_ESTest extends CompositeChannelConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CompositeChannelConverter<VolatileFloatType, GenericComposite<VolatileFloatType>> compositeChannelConverter0 = new CompositeChannelConverter<VolatileFloatType, GenericComposite<VolatileFloatType>>(0L);
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(2634, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      Supplier<VolatileFloatType> supplier0 = (Supplier<VolatileFloatType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileFloatType0).when(supplier0).get();
      long[] longArray0 = new long[7];
      PointSample<VolatileFloatType> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      GenericComposite<VolatileFloatType> genericComposite0 = new GenericComposite<VolatileFloatType>(pointSample0);
      compositeChannelConverter0.convert(genericComposite0, volatileFloatType0);
      assertFalse(volatileFloatType0.isValid());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CompositeChannelConverter<VolatileFloatType, GenericComposite<VolatileFloatType>> compositeChannelConverter0 = new CompositeChannelConverter<VolatileFloatType, GenericComposite<VolatileFloatType>>((-149L));
      long[] longArray0 = new long[2];
      LinkedList<VolatileFloatType> linkedList0 = new LinkedList<VolatileFloatType>();
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(linkedList0, longArray0);
      ListRandomAccess<VolatileFloatType> listRandomAccess0 = listImg0.randomAccess();
      GenericComposite<VolatileFloatType> genericComposite0 = new GenericComposite<VolatileFloatType>(listRandomAccess0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      // Undeclared exception!
      try { 
        compositeChannelConverter0.convert(genericComposite0, volatileFloatType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
