/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:29:10 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.converter.AbstractConvertedRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.BiConvertedRandomAccessible;
import net.imglib2.converter.read.ConvertedRandomAccessible;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccessible;
import net.imglib2.img.NativeImg;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.ByteAccess;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.transform.integer.ComponentMappingTransform;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.view.TransformView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedRandomAccessible_ESTest extends AbstractConvertedRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      UnsignedByteType unsignedByteType0 = new UnsignedByteType((NativeImg<?, ? extends ByteAccess>) null);
      ArrayImgFactory<UnsignedByteType> arrayImgFactory0 = new ArrayImgFactory<UnsignedByteType>(unsignedByteType0);
      ArrayImg<UnsignedByteType, ?> arrayImg0 = arrayImgFactory0.create((Dimensions) finalInterval0);
      Converter<UnsignedByteType, Integer> converter0 = (Converter<UnsignedByteType, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccessible<UnsignedByteType, Integer> convertedRandomAccessible0 = new ConvertedRandomAccessible<UnsignedByteType, Integer>(arrayImg0, converter0, supplier0);
      SamplerConverter<Integer, UnsignedByteType> samplerConverter0 = (SamplerConverter<Integer, UnsignedByteType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccessible<Integer, UnsignedByteType> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, UnsignedByteType>(convertedRandomAccessible0, samplerConverter0);
      AbstractConvertedRandomAccess<Integer, UnsignedByteType> abstractConvertedRandomAccess0 = writeConvertedRandomAccessible0.randomAccess((Interval) arrayImg0);
      assertNotNull(abstractConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BiConsumer<Localizable, Integer> biConsumer0 = (BiConsumer<Localizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(supplier0).get();
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, supplier0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(functionRandomAccessible0, componentMappingTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0[3]).when(supplier1).get();
      ConvertedRandomAccessible<Integer, Integer> convertedRandomAccessible0 = new ConvertedRandomAccessible<Integer, Integer>(transformView0, (Converter<? super Integer, ? super Integer>) null, supplier1);
      AbstractConvertedRandomAccess<Integer, Integer> abstractConvertedRandomAccess0 = convertedRandomAccessible0.randomAccess();
      assertNotNull(abstractConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BiConsumer<Localizable, Integer> biConsumer0 = (BiConsumer<Localizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, supplier0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(functionRandomAccessible0, componentMappingTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<Integer, Integer> convertedRandomAccessible0 = new ConvertedRandomAccessible<Integer, Integer>(transformView0, (Converter<? super Integer, ? super Integer>) null, supplier1);
      int int0 = convertedRandomAccessible0.numDimensions();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<Integer, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, Integer>((RandomAccessible<Integer>) null, samplerConverter0);
      RandomAccessible<Integer> randomAccessible0 = writeConvertedRandomAccessible0.getSource();
      assertNull(randomAccessible0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WriteConvertedRandomAccessible<Integer, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, Integer>((RandomAccessible<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      WriteConvertedRandomAccessible<Integer, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, Integer>((RandomAccessible<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<Integer, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, Integer>((RandomAccessible<Integer>) null, samplerConverter0);
      BiConverter<Integer, Integer, UnsignedByteType> biConverter0 = (BiConverter<Integer, Integer, UnsignedByteType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Integer, Integer, UnsignedByteType> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Integer, Integer, UnsignedByteType>(writeConvertedRandomAccessible0, (RandomAccessible<Integer>) null, biConverter0, (Supplier<? extends UnsignedByteType>) null);
      RandomAccessible<Integer> randomAccessible0 = biConvertedRandomAccessible0.getSource();
      assertNotNull(randomAccessible0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BiConsumer<Localizable, Integer> biConsumer0 = (BiConsumer<Localizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, supplier0);
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<Integer, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<Integer, Integer>(functionRandomAccessible0, samplerConverter0);
      int int0 = writeConvertedRandomAccessible0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SamplerConverter<UnsignedByteType, Integer> samplerConverter0 = (SamplerConverter<UnsignedByteType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<UnsignedByteType, Integer> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<UnsignedByteType, Integer>((RandomAccessible<UnsignedByteType>) null, samplerConverter0);
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess((Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessible", e);
      }
  }
}
