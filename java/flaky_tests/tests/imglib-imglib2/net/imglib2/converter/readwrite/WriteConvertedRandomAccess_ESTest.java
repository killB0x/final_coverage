/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:08:58 GMT 2022
 */

package net.imglib2.converter.readwrite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import net.imglib2.converter.ColorChannelOrder;
import net.imglib2.converter.readwrite.CompositeARGBSamplerConverter;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccess;
import net.imglib2.view.composite.Composite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteConvertedRandomAccess_ESTest extends WriteConvertedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<CompositeARGBSamplerConverter> pointSample0 = new PointSample<CompositeARGBSamplerConverter>(supplier0, 0);
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSample0, samplerConverter0);
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = writeConvertedRandomAccess0.get();
      assertNull(compositeARGBSamplerConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<CompositeARGBSamplerConverter> pointSample0 = new PointSample<CompositeARGBSamplerConverter>(supplier0, 0);
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSample0, samplerConverter0);
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccess1 = writeConvertedRandomAccess0.copy();
      assertNotSame(writeConvertedRandomAccess1, writeConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<CompositeARGBSamplerConverter> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.RGB;
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = new CompositeARGBSamplerConverter(colorChannelOrder0);
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSample0, samplerConverter0);
      CompositeARGBSamplerConverter compositeARGBSamplerConverter1 = writeConvertedRandomAccess0.get();
      assertSame(compositeARGBSamplerConverter0, compositeARGBSamplerConverter1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>((RandomAccess<Composite<CompositeARGBSamplerConverter>>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WriteConvertedRandomAccess<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = null;
      try {
        writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>((RandomAccess<Composite<CompositeARGBSamplerConverter>>) null, (SamplerConverter<? super Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccess", e);
      }
  }
}
