/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:07:26 GMT 2022
 */

package net.imglib2.converter.readwrite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Cursor;
import net.imglib2.PointSampleList;
import net.imglib2.RealCursor;
import net.imglib2.converter.ColorChannelOrder;
import net.imglib2.converter.readwrite.CompositeARGBSamplerConverter;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRealCursor;
import net.imglib2.view.composite.Composite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteConvertedRealCursor_ESTest extends WriteConvertedRealCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PointSampleList<Composite<CompositeARGBSamplerConverter>> pointSampleList0 = new PointSampleList<Composite<CompositeARGBSamplerConverter>>(12);
      Cursor<Composite<CompositeARGBSamplerConverter>> cursor0 = pointSampleList0.cursor();
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.RGB;
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = new CompositeARGBSamplerConverter(colorChannelOrder0);
      SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRealCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedRealCursor0 = new WriteConvertedRealCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>(cursor0, samplerConverter0);
      CompositeARGBSamplerConverter compositeARGBSamplerConverter1 = writeConvertedRealCursor0.get();
      assertSame(compositeARGBSamplerConverter1, compositeARGBSamplerConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRealCursor<Object, Object> writeConvertedRealCursor0 = new WriteConvertedRealCursor<Object, Object>((RealCursor<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRealCursor0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRealCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PointSampleList<Composite<CompositeARGBSamplerConverter>> pointSampleList0 = new PointSampleList<Composite<CompositeARGBSamplerConverter>>(12);
      Cursor<Composite<CompositeARGBSamplerConverter>> cursor0 = pointSampleList0.cursor();
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.RGB;
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = new CompositeARGBSamplerConverter(colorChannelOrder0);
      SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0, compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRealCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedRealCursor0 = new WriteConvertedRealCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>(cursor0, samplerConverter0);
      WriteConvertedRealCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedRealCursor1 = writeConvertedRealCursor0.copy();
      assertNotSame(writeConvertedRealCursor0, writeConvertedRealCursor1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRealCursor<Object, Object> writeConvertedRealCursor0 = new WriteConvertedRealCursor<Object, Object>((RealCursor<Object>) null, samplerConverter0);
      Object object0 = writeConvertedRealCursor0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      WriteConvertedRealCursor<Object, Object> writeConvertedRealCursor0 = null;
      try {
        writeConvertedRealCursor0 = new WriteConvertedRealCursor<Object, Object>((RealCursor<Object>) null, (SamplerConverter<? super Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRealCursor", e);
      }
  }
}
