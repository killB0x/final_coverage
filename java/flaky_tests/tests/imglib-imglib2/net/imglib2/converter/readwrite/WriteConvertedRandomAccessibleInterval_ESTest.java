/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:15:28 GMT 2022
 */

package net.imglib2.converter.readwrite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.converter.readwrite.CompositeARGBSamplerConverter;
import net.imglib2.converter.readwrite.RealDoubleSamplerConverter;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccess;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccessibleInterval;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteConvertedRandomAccessibleInterval_ESTest extends WriteConvertedRandomAccessibleInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<Localizable, RealDoubleSamplerConverter<BitType>> biConsumer0 = (BiConsumer<Localizable, RealDoubleSamplerConverter<BitType>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RealDoubleSamplerConverter<BitType>> supplier0 = (Supplier<RealDoubleSamplerConverter<BitType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<RealDoubleSamplerConverter<BitType>> functionRandomAccessible0 = new FunctionRandomAccessible<RealDoubleSamplerConverter<BitType>>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[0];
      IntervalView<RealDoubleSamplerConverter<BitType>> intervalView0 = new IntervalView<RealDoubleSamplerConverter<BitType>>(functionRandomAccessible0, longArray0, longArray0);
      SubsampleIntervalView<RealDoubleSamplerConverter<BitType>> subsampleIntervalView0 = new SubsampleIntervalView<RealDoubleSamplerConverter<BitType>>(intervalView0, longArray0);
      SamplerConverter<RealDoubleSamplerConverter<BitType>, BitType> samplerConverter0 = (SamplerConverter<RealDoubleSamplerConverter<BitType>, BitType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<BitType>, BitType> writeConvertedRandomAccessibleInterval0 = new WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<BitType>, BitType>(subsampleIntervalView0, samplerConverter0);
      WriteConvertedRandomAccess<RealDoubleSamplerConverter<BitType>, BitType> writeConvertedRandomAccess0 = writeConvertedRandomAccessibleInterval0.randomAccess((Interval) subsampleIntervalView0);
      assertNotNull(writeConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<VolatileDoubleType>, RandomAccessibleInterval<CompositeARGBSamplerConverter>> writeConvertedRandomAccessibleInterval0 = new WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<VolatileDoubleType>, RandomAccessibleInterval<CompositeARGBSamplerConverter>>((RandomAccessibleInterval<RealDoubleSamplerConverter<VolatileDoubleType>>) null, (SamplerConverter<? super RealDoubleSamplerConverter<VolatileDoubleType>, RandomAccessibleInterval<CompositeARGBSamplerConverter>>) null);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessibleInterval0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessibleInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BiConsumer<Localizable, CompositeARGBSamplerConverter> biConsumer0 = (BiConsumer<Localizable, CompositeARGBSamplerConverter>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<CompositeARGBSamplerConverter> functionRandomAccessible0 = new FunctionRandomAccessible<CompositeARGBSamplerConverter>((-2735), biConsumer0, supplier0);
      long[] longArray0 = new long[4];
      IntervalView<CompositeARGBSamplerConverter> intervalView0 = new IntervalView<CompositeARGBSamplerConverter>(functionRandomAccessible0, longArray0, longArray0);
      SamplerConverter<CompositeARGBSamplerConverter, RealDoubleSamplerConverter<Unsigned128BitType>> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, RealDoubleSamplerConverter<Unsigned128BitType>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessibleInterval<CompositeARGBSamplerConverter, RealDoubleSamplerConverter<Unsigned128BitType>> writeConvertedRandomAccessibleInterval0 = new WriteConvertedRandomAccessibleInterval<CompositeARGBSamplerConverter, RealDoubleSamplerConverter<Unsigned128BitType>>(intervalView0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessibleInterval0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2735
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WriteConvertedRandomAccessibleInterval<Unsigned2BitType, Unsigned2BitType> writeConvertedRandomAccessibleInterval0 = new WriteConvertedRandomAccessibleInterval<Unsigned2BitType, Unsigned2BitType>((RandomAccessibleInterval<Unsigned2BitType>) null, (SamplerConverter<? super Unsigned2BitType, Unsigned2BitType>) null);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessibleInterval0.randomAccess((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessibleInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BiConsumer<Localizable, RealDoubleSamplerConverter<Unsigned2BitType>> biConsumer0 = (BiConsumer<Localizable, RealDoubleSamplerConverter<Unsigned2BitType>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RealDoubleSamplerConverter<Unsigned2BitType>> supplier0 = (Supplier<RealDoubleSamplerConverter<Unsigned2BitType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<RealDoubleSamplerConverter<Unsigned2BitType>> functionRandomAccessible0 = new FunctionRandomAccessible<RealDoubleSamplerConverter<Unsigned2BitType>>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[8];
      IntervalView<RealDoubleSamplerConverter<Unsigned2BitType>> intervalView0 = new IntervalView<RealDoubleSamplerConverter<Unsigned2BitType>>(functionRandomAccessible0, longArray0, longArray0);
      SamplerConverter<RealDoubleSamplerConverter<Unsigned2BitType>, ConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>> samplerConverter0 = (SamplerConverter<RealDoubleSamplerConverter<Unsigned2BitType>, ConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<Unsigned2BitType>, ConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>> writeConvertedRandomAccessibleInterval0 = new WriteConvertedRandomAccessibleInterval<RealDoubleSamplerConverter<Unsigned2BitType>, ConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>>(intervalView0, samplerConverter0);
      WriteConvertedRandomAccess<RealDoubleSamplerConverter<Unsigned2BitType>, ConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>> writeConvertedRandomAccess0 = writeConvertedRandomAccessibleInterval0.randomAccess();
      assertNotNull(writeConvertedRandomAccess0);
  }
}
