/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:53:10 GMT 2022
 */

package net.imglib2.converter.readwrite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.converter.ColorChannelOrder;
import net.imglib2.converter.readwrite.CompositeARGBSamplerConverter;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedCursor;
import net.imglib2.view.composite.Composite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteConvertedCursor_ESTest extends WriteConvertedCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PointSampleList<CompositeARGBSamplerConverter> pointSampleList0 = new PointSampleList<CompositeARGBSamplerConverter>(1);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor0 = new WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = writeConvertedCursor0.get();
      assertNull(compositeARGBSamplerConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PointSampleList<CompositeARGBSamplerConverter> pointSampleList0 = new PointSampleList<CompositeARGBSamplerConverter>(192);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = mock(CompositeARGBSamplerConverter.class, new ViolatedAssumptionAnswer());
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0, compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor0 = new WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor1 = writeConvertedCursor0.copy();
      assertNotSame(writeConvertedCursor0, writeConvertedCursor1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<Composite<CompositeARGBSamplerConverter>> supplier0 = (Supplier<Composite<CompositeARGBSamplerConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Composite<CompositeARGBSamplerConverter>> pointSample0 = new PointSample<Composite<CompositeARGBSamplerConverter>>(supplier0, 0);
      Cursor<Composite<CompositeARGBSamplerConverter>> cursor0 = (Cursor<Composite<CompositeARGBSamplerConverter>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(pointSample0).when(cursor0).copy();
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.RGB;
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = new CompositeARGBSamplerConverter(colorChannelOrder0);
      SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter> writeConvertedCursor0 = new WriteConvertedCursor<Composite<CompositeARGBSamplerConverter>, CompositeARGBSamplerConverter>(cursor0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.copy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.PointSample cannot be cast to class net.imglib2.Cursor (net.imglib2.PointSample and net.imglib2.Cursor are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @9e6529d)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor0 = null;
      try {
        writeConvertedCursor0 = new WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>((Cursor<CompositeARGBSamplerConverter>) null, (SamplerConverter<? super CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PointSampleList<CompositeARGBSamplerConverter> pointSampleList0 = new PointSampleList<CompositeARGBSamplerConverter>(192);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = mock(CompositeARGBSamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeARGBSamplerConverter0).toString();
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(compositeARGBSamplerConverter0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor0 = new WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(pointSampleList_PointSampleListCursor0, samplerConverter0);
      CompositeARGBSamplerConverter compositeARGBSamplerConverter1 = writeConvertedCursor0.get();
      assertSame(compositeARGBSamplerConverter1, compositeARGBSamplerConverter0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedCursor0 = new WriteConvertedCursor<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>((Cursor<CompositeARGBSamplerConverter>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedCursor0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedCursor", e);
      }
  }
}
