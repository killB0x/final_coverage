/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:13:34 GMT 2022
 */

package net.imglib2.converter.readwrite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.converter.ColorChannelOrder;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.converter.readwrite.CompositeARGBSamplerConverter;
import net.imglib2.converter.readwrite.RealDoubleSamplerConverter;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccess;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccessible;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.transform.integer.ComponentMappingTransform;
import net.imglib2.type.volatiles.VolatileIntType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.MixedTransformView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WriteConvertedRandomAccessible_ESTest extends WriteConvertedRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.ARGB;
      CompositeARGBSamplerConverter compositeARGBSamplerConverter0 = new CompositeARGBSamplerConverter(colorChannelOrder0);
      ListImgFactory<CompositeARGBSamplerConverter> listImgFactory0 = new ListImgFactory<CompositeARGBSamplerConverter>(compositeARGBSamplerConverter0);
      int[] intArray0 = new int[1];
      intArray0[0] = 85;
      ListImg<CompositeARGBSamplerConverter> listImg0 = listImgFactory0.create(intArray0);
      IterableRandomAccessibleInterval<CompositeARGBSamplerConverter> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<CompositeARGBSamplerConverter>(listImg0);
      SamplerConverter<CompositeARGBSamplerConverter, VolatileIntType> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, VolatileIntType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, VolatileIntType> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, VolatileIntType>(iterableRandomAccessibleInterval0, samplerConverter0);
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, VolatileIntType> writeConvertedRandomAccess0 = writeConvertedRandomAccessible0.randomAccess((Interval) listImg0);
      assertNotNull(writeConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<CompositeARGBSamplerConverter> functionRandomAccessible0 = new FunctionRandomAccessible<CompositeARGBSamplerConverter>(901, (BiConsumer<Localizable, ? super CompositeARGBSamplerConverter>) null, supplier0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedTransformView<CompositeARGBSamplerConverter> mixedTransformView0 = new MixedTransformView<CompositeARGBSamplerConverter>(functionRandomAccessible0, componentMappingTransform0);
      SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter>(mixedTransformView0, samplerConverter0);
      WriteConvertedRandomAccess<CompositeARGBSamplerConverter, CompositeARGBSamplerConverter> writeConvertedRandomAccess0 = writeConvertedRandomAccessible0.randomAccess();
      assertNotNull(writeConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WriteConvertedRandomAccessible<VolatileIntType, RandomAccessibleInterval<VolatileIntType>> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<VolatileIntType, RandomAccessibleInterval<VolatileIntType>>((RandomAccessible<VolatileIntType>) null, (SamplerConverter<? super VolatileIntType, RandomAccessibleInterval<VolatileIntType>>) null);
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess((Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BiConsumer<Localizable, RandomAccessibleInterval<CompositeARGBSamplerConverter>> biConsumer0 = (BiConsumer<Localizable, RandomAccessibleInterval<CompositeARGBSamplerConverter>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<CompositeARGBSamplerConverter>> supplier0 = (Supplier<RandomAccessibleInterval<CompositeARGBSamplerConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<RandomAccessibleInterval<CompositeARGBSamplerConverter>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<CompositeARGBSamplerConverter>>((-2072), biConsumer0, supplier0);
      long[] longArray0 = new long[2];
      IntervalView<RandomAccessibleInterval<CompositeARGBSamplerConverter>> intervalView0 = new IntervalView<RandomAccessibleInterval<CompositeARGBSamplerConverter>>(functionRandomAccessible0, longArray0, longArray0);
      SamplerConverter<RandomAccessibleInterval<CompositeARGBSamplerConverter>, VolatileIntType> samplerConverter0 = (SamplerConverter<RandomAccessibleInterval<CompositeARGBSamplerConverter>, VolatileIntType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<RandomAccessibleInterval<CompositeARGBSamplerConverter>, VolatileIntType> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<RandomAccessibleInterval<CompositeARGBSamplerConverter>, VolatileIntType>(intervalView0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess((Interval) intervalView0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2072
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BiConsumer<RealLocalizable, VolatileIntType> biConsumer0 = (BiConsumer<RealLocalizable, VolatileIntType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileIntType> supplier0 = (Supplier<VolatileIntType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<VolatileIntType> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<VolatileIntType>(3476, biConsumer0, supplier0);
      RandomAccessibleOnRealRandomAccessible<VolatileIntType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<VolatileIntType>(functionRealRandomAccessible0);
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[4];
      IntervalView<VolatileIntType> intervalView0 = new IntervalView<VolatileIntType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray1);
      SamplerConverter<VolatileIntType, RealDoubleSamplerConverter<VolatileIntType>> samplerConverter0 = (SamplerConverter<VolatileIntType, RealDoubleSamplerConverter<VolatileIntType>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<VolatileIntType, RealDoubleSamplerConverter<VolatileIntType>> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<VolatileIntType, RealDoubleSamplerConverter<VolatileIntType>>(intervalView0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess((Interval) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BiConsumer<Localizable, CompositeARGBSamplerConverter> biConsumer0 = (BiConsumer<Localizable, CompositeARGBSamplerConverter>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<CompositeARGBSamplerConverter> supplier0 = (Supplier<CompositeARGBSamplerConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<CompositeARGBSamplerConverter> functionRandomAccessible0 = new FunctionRandomAccessible<CompositeARGBSamplerConverter>((-1), biConsumer0, supplier0);
      SamplerConverter<CompositeARGBSamplerConverter, Object> samplerConverter0 = (SamplerConverter<CompositeARGBSamplerConverter, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, Object> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<CompositeARGBSamplerConverter, Object>(functionRandomAccessible0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VolatileIntType volatileIntType0 = new VolatileIntType(1);
      ArrayImgFactory<VolatileIntType> arrayImgFactory0 = new ArrayImgFactory<VolatileIntType>(volatileIntType0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      ArrayImg<VolatileIntType, ?> arrayImg0 = arrayImgFactory0.create(longArray0);
      SamplerConverter<VolatileIntType, VolatileIntType> samplerConverter0 = (SamplerConverter<VolatileIntType, VolatileIntType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessible<VolatileIntType, VolatileIntType> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<VolatileIntType, VolatileIntType>(arrayImg0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess((Interval) arrayImg0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.img.basictypeaccess.array.IntArray cannot be cast to class net.imglib2.img.basictypeaccess.volatiles.VolatileIntAccess (net.imglib2.img.basictypeaccess.array.IntArray and net.imglib2.img.basictypeaccess.volatiles.VolatileIntAccess are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @46985e53)
         //
         verifyException("net.imglib2.type.volatiles.VolatileIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      WriteConvertedRandomAccessible<RealDoubleSamplerConverter<VolatileIntType>, BiConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, VolatileIntType, VolatileIntType>> writeConvertedRandomAccessible0 = new WriteConvertedRandomAccessible<RealDoubleSamplerConverter<VolatileIntType>, BiConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, VolatileIntType, VolatileIntType>>((RandomAccessible<RealDoubleSamplerConverter<VolatileIntType>>) null, (SamplerConverter<? super RealDoubleSamplerConverter<VolatileIntType>, BiConvertedRealRandomAccessibleRealInterval<CompositeARGBSamplerConverter, VolatileIntType, VolatileIntType>>) null);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccessible", e);
      }
  }
}
