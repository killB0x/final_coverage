/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:00:52 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccess;
import net.imglib2.converter.AbstractConvertedRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.BiConvertedRandomAccess;
import net.imglib2.converter.read.ConvertedRandomAccess;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccess;
import net.imglib2.img.basictypeaccess.array.DirtyBooleanArray;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DirtyLongArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedRandomAccess_ESTest extends AbstractConvertedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<DirtyBooleanArray> supplier0 = (Supplier<DirtyBooleanArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      PointSample<DirtyBooleanArray> pointSample0 = new PointSample<DirtyBooleanArray>(supplier0, intArray0);
      SamplerConverter<DirtyBooleanArray, Integer> samplerConverter0 = (SamplerConverter<DirtyBooleanArray, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyBooleanArray, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyBooleanArray, Integer>(pointSample0, samplerConverter0);
      double[] doubleArray0 = new double[2];
      writeConvertedRandomAccess0.localize(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[7];
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<NativeARGBDoubleType> pointSample0 = new PointSample<NativeARGBDoubleType>(supplier0, longArray0);
      SamplerConverter<NativeARGBDoubleType, Integer> samplerConverter0 = (SamplerConverter<NativeARGBDoubleType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<NativeARGBDoubleType, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<NativeARGBDoubleType, Integer>(pointSample0, samplerConverter0);
      SamplerConverter<Integer, NativeARGBDoubleType> samplerConverter1 = (SamplerConverter<Integer, NativeARGBDoubleType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter1).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, NativeARGBDoubleType> writeConvertedRandomAccess1 = new WriteConvertedRandomAccess<Integer, NativeARGBDoubleType>(writeConvertedRandomAccess0, samplerConverter1);
      writeConvertedRandomAccess1.setPosition(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[4];
      Supplier<Cell<DirtyVolatileByteArray>> supplier1 = (Supplier<Cell<DirtyVolatileByteArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Cell<DirtyVolatileByteArray>> pointSample0 = new PointSample<Cell<DirtyVolatileByteArray>>(supplier1, longArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccess<Cell<DirtyVolatileByteArray>, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<Cell<DirtyVolatileByteArray>, Integer>(pointSample0, converter0, supplier0);
      int[] intArray0 = new int[9];
      convertedRandomAccess0.setPosition(intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Integer>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.setPosition((Localizable) pointSample0);
      assertEquals(1, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccess<Integer, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, Integer>(pointSample0, converter0, supplier0);
      convertedRandomAccess0.setPosition(0L, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<DirtyVolatileByteArray> supplier1 = (Supplier<DirtyVolatileByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<DirtyVolatileByteArray> pointSample1 = new PointSample<DirtyVolatileByteArray>(supplier1, pointSample0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier2).get();
      BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(longArray0);
      Supplier<DirtyLongArray> supplier3 = (Supplier<DirtyLongArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(dirtyLongArray0).when(supplier3).get();
      ConvertedRandomAccess<Integer, DirtyLongArray> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, DirtyLongArray>(biConvertedRandomAccess0, converter0, supplier3);
      convertedRandomAccess0.setPosition(10, 0);
      assertArrayEquals(new long[] {10L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      Supplier<DirtyVolatileByteArray> supplier1 = (Supplier<DirtyVolatileByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<DirtyVolatileByteArray> pointSample1 = new PointSample<DirtyVolatileByteArray>(supplier1, 0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Integer>(biConvertedRandomAccess0, samplerConverter0);
      long[] longArray0 = new long[5];
      writeConvertedRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      SamplerConverter<Integer, Cell<Integer>> samplerConverter0 = (SamplerConverter<Integer, Cell<Integer>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Cell<Integer>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Cell<Integer>>(pointSample0, samplerConverter0);
      int[] intArray0 = new int[9];
      writeConvertedRandomAccess0.move(intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      PointSample<DirtyDoubleArray> pointSample0 = new PointSample<DirtyDoubleArray>((Supplier<DirtyDoubleArray>) null, intArray0);
      SamplerConverter<Object, Cell<DirtyDoubleArray>> samplerConverter0 = (SamplerConverter<Object, Cell<DirtyDoubleArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.move((Localizable) pointSample0);
      assertEquals(8, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[8];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      SamplerConverter<Integer, DirtyLongArray> samplerConverter0 = (SamplerConverter<Integer, DirtyLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, DirtyLongArray> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, DirtyLongArray>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.move(0L, 6);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(32, true);
      long[] longArray0 = new long[7];
      PointSample<DirtyVolatileLongArray> pointSample0 = PointSample.wrap(dirtyVolatileLongArray0, longArray0);
      SamplerConverter<DirtyVolatileLongArray, DirtyVolatileLongArray> samplerConverter0 = (SamplerConverter<DirtyVolatileLongArray, DirtyVolatileLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyVolatileLongArray, DirtyVolatileLongArray> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyVolatileLongArray, DirtyVolatileLongArray>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.move(205, 0);
      assertArrayEquals(new long[] {205L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[7];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.localize(longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      SamplerConverter<Integer, Cell<Integer>> samplerConverter0 = (SamplerConverter<Integer, Cell<Integer>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Cell<Integer>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Cell<Integer>>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      Converter<Integer, NativeARGBDoubleType> converter0 = (Converter<Integer, NativeARGBDoubleType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<NativeARGBDoubleType> supplier1 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Integer, NativeARGBDoubleType> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, NativeARGBDoubleType>(pointSample0, converter0, supplier1);
      convertedRandomAccess0.localize((float[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<DirtyVolatileByteArray> supplier1 = (Supplier<DirtyVolatileByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<DirtyVolatileByteArray> pointSample1 = new PointSample<DirtyVolatileByteArray>(supplier1, pointSample0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier2).get();
      BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, DirtyVolatileByteArray, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Integer>(biConvertedRandomAccess0, samplerConverter0);
      writeConvertedRandomAccess0.fwd(0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<NativeARGBDoubleType> pointSample0 = new PointSample<NativeARGBDoubleType>(supplier0, longArray0);
      Integer integer0 = Integer.valueOf(0);
      SamplerConverter<NativeARGBDoubleType, Integer> samplerConverter0 = (SamplerConverter<NativeARGBDoubleType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<NativeARGBDoubleType, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<NativeARGBDoubleType, Integer>(pointSample0, samplerConverter0);
      writeConvertedRandomAccess0.bck(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[8];
      PointSample<DirtyDoubleArray> pointSample0 = new PointSample<DirtyDoubleArray>((Supplier<DirtyDoubleArray>) null, intArray0);
      SamplerConverter<Object, Cell<DirtyDoubleArray>> samplerConverter0 = (SamplerConverter<Object, Cell<DirtyDoubleArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>>(pointSample0, samplerConverter0);
      int int0 = writeConvertedRandomAccess0.numDimensions();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Supplier<DirtyVolatileFloatArray> supplier0 = (Supplier<DirtyVolatileFloatArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2965));
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2965);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      PointSample<DirtyVolatileFloatArray> pointSample1 = new PointSample<DirtyVolatileFloatArray>(supplier0, pointSample0);
      Converter<DirtyVolatileFloatArray, Integer> converter0 = (Converter<DirtyVolatileFloatArray, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<DirtyVolatileFloatArray, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<DirtyVolatileFloatArray, Integer>(pointSample1, converter0, supplier1);
      double double0 = convertedRandomAccess0.getDoublePosition(0);
      assertEquals((-2965.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      PointSample<DirtyDoubleArray> pointSample0 = new PointSample<DirtyDoubleArray>((Supplier<DirtyDoubleArray>) null, intArray0);
      SamplerConverter<Object, Cell<DirtyDoubleArray>> samplerConverter0 = (SamplerConverter<Object, Cell<DirtyDoubleArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>>(pointSample0, samplerConverter0);
      AbstractConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>> abstractConvertedRandomAccess0 = writeConvertedRandomAccess0.copy();
      assertNotNull(abstractConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<Cell<DirtyVolatileByteArray>> supplier0 = (Supplier<Cell<DirtyVolatileByteArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Cell<DirtyVolatileByteArray>> pointSample0 = new PointSample<Cell<DirtyVolatileByteArray>>(supplier0, longArray0);
      Converter<Cell<DirtyVolatileByteArray>, Integer> converter0 = (Converter<Cell<DirtyVolatileByteArray>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Cell<DirtyVolatileByteArray>, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<Cell<DirtyVolatileByteArray>, Integer>(pointSample0, converter0, supplier1);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        convertedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.setPosition((Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 340);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Integer, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, Integer>(pointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRandomAccess0.setPosition(0L, (-1607));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1607 out of bounds for length 340
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-13));
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      BiConverter<Integer, Integer, DirtyByteArray> biConverter0 = (BiConverter<Integer, Integer, DirtyByteArray>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<DirtyByteArray> supplier0 = (Supplier<DirtyByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, DirtyByteArray> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, DirtyByteArray>(pointSample0, pointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(2497, (-13));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -13 out of bounds for length 4
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move((-1232L), 260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SamplerConverter<Integer, Cell<Integer>> samplerConverter0 = (SamplerConverter<Integer, Cell<Integer>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Cell<Integer>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Cell<Integer>>((RandomAccess<Integer>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move(0, 677);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.localize(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSampleList<Cell<Integer>> pointSampleList0 = new PointSampleList<Cell<Integer>>(1098);
      Point point0 = pointSampleList0.maxAsPoint();
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, point0);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Integer, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, Integer>(pointSample0, converter0, supplier1);
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        convertedRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[1];
      PointSample<DirtyByteArray> pointSample0 = PointSample.wrap((DirtyByteArray) null, longArray0);
      Supplier<DirtyByteArray> supplier0 = (Supplier<DirtyByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccess<DirtyByteArray, DirtyByteArray> convertedRandomAccess0 = new ConvertedRandomAccess<DirtyByteArray, DirtyByteArray>(pointSample0, (Converter<? super DirtyByteArray, ? super DirtyByteArray>) null, supplier0);
      // Undeclared exception!
      try { 
        convertedRandomAccess0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<NativeARGBDoubleType> pointSample0 = new PointSample<NativeARGBDoubleType>(supplier0, longArray0);
      SamplerConverter<NativeARGBDoubleType, Integer> samplerConverter0 = (SamplerConverter<NativeARGBDoubleType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<NativeARGBDoubleType, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<NativeARGBDoubleType, Integer>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getLongPosition((-104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -104 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getIntPosition((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Object, Integer>(pointSample0, pointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.getIntPosition(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(32, true);
      long[] longArray0 = new long[7];
      PointSample<DirtyVolatileLongArray> pointSample0 = PointSample.wrap(dirtyVolatileLongArray0, longArray0);
      SamplerConverter<DirtyVolatileLongArray, DirtyVolatileLongArray> samplerConverter0 = (SamplerConverter<DirtyVolatileLongArray, DirtyVolatileLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(dirtyVolatileLongArray0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyVolatileLongArray, DirtyVolatileLongArray> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyVolatileLongArray, DirtyVolatileLongArray>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getFloatPosition(205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 205 out of bounds for length 7
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getDoublePosition(925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<NativeARGBDoubleType> pointSample0 = new PointSample<NativeARGBDoubleType>(supplier0, longArray0);
      Integer integer0 = new Integer((-3407));
      SamplerConverter<NativeARGBDoubleType, Integer> samplerConverter0 = (SamplerConverter<NativeARGBDoubleType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<NativeARGBDoubleType, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<NativeARGBDoubleType, Integer>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getDoublePosition((-3407));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3407 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, Integer>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.fwd(754);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 754 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<NativeARGBDoubleType> pointSample0 = new PointSample<NativeARGBDoubleType>(supplier0, longArray0);
      SamplerConverter<NativeARGBDoubleType, Integer> samplerConverter0 = (SamplerConverter<NativeARGBDoubleType, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<NativeARGBDoubleType, Integer> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<NativeARGBDoubleType, Integer>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.bck(814);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 814 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 47);
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>(pointSample0, samplerConverter0);
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.localize(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      SamplerConverter<Integer, DirtyLongArray> samplerConverter0 = (SamplerConverter<Integer, DirtyLongArray>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Integer, DirtyLongArray> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Integer, DirtyLongArray>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move((long) 3591, 3591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3591 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.bck((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      BiConverter<Integer, Integer, LongArray> biConverter0 = (BiConverter<Integer, Integer, LongArray>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<LongArray> supplier1 = (Supplier<LongArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Integer, LongArray> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, LongArray>(pointSample0, pointSample0, biConverter0, supplier1);
      Converter<LongArray, Integer> converter0 = (Converter<LongArray, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      ConvertedRandomAccess<LongArray, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<LongArray, Integer>(biConvertedRandomAccess0, converter0, supplier2);
      int int0 = convertedRandomAccess0.getIntPosition(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getFloatPosition((-1023));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Supplier<DirtyVolatileFloatArray> supplier0 = (Supplier<DirtyVolatileFloatArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2965));
      long[] longArray0 = new long[9];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      PointSample<DirtyVolatileFloatArray> pointSample1 = new PointSample<DirtyVolatileFloatArray>(supplier0, pointSample0);
      Converter<DirtyVolatileFloatArray, Integer> converter0 = (Converter<DirtyVolatileFloatArray, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<DirtyVolatileFloatArray, Integer> convertedRandomAccess0 = new ConvertedRandomAccess<DirtyVolatileFloatArray, Integer>(pointSample1, converter0, supplier1);
      double double0 = convertedRandomAccess0.getDoublePosition(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.setPosition(4L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 17);
      Supplier<DirtyLongArray> supplier1 = (Supplier<DirtyLongArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Integer, DirtyLongArray> convertedRandomAccess0 = new ConvertedRandomAccess<Integer, DirtyLongArray>(pointSample0, (Converter<? super Integer, ? super DirtyLongArray>) null, supplier1);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        convertedRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.getLongPosition(65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.setPosition((-734), (-734));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.fwd(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[8];
      PointSample<DirtyDoubleArray> pointSample0 = new PointSample<DirtyDoubleArray>((Supplier<DirtyDoubleArray>) null, intArray0);
      SamplerConverter<Object, Cell<DirtyDoubleArray>> samplerConverter0 = (SamplerConverter<Object, Cell<DirtyDoubleArray>>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<DirtyDoubleArray, Cell<DirtyDoubleArray>>(pointSample0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.move(4, 1507);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1507 out of bounds for length 8
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SamplerConverter<Object, Object> samplerConverter0 = (SamplerConverter<Object, Object>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess<Object>) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedRandomAccess<Object, Object> writeConvertedRandomAccess0 = new WriteConvertedRandomAccess<Object, Object>((RandomAccess<Object>) null, samplerConverter0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        writeConvertedRandomAccess0.localize(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRandomAccess", e);
      }
  }
}
