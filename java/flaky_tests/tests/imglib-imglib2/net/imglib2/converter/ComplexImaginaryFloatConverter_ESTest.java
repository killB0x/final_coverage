/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:04:27 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.converter.ComplexImaginaryFloatConverter;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.real.FloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexImaginaryFloatConverter_ESTest extends ComplexImaginaryFloatConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComplexImaginaryFloatConverter<UnsignedIntType> complexImaginaryFloatConverter0 = new ComplexImaginaryFloatConverter<UnsignedIntType>();
      int[] intArray0 = new int[9];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(dirtyIntArray0);
      FloatType floatType0 = new FloatType();
      complexImaginaryFloatConverter0.convert(unsignedIntType0, floatType0);
      assertEquals(32, unsignedIntType0.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComplexImaginaryFloatConverter<UnsignedIntType> complexImaginaryFloatConverter0 = new ComplexImaginaryFloatConverter<UnsignedIntType>();
      FloatType floatType0 = new FloatType();
      // Undeclared exception!
      try { 
        complexImaginaryFloatConverter0.convert((UnsignedIntType) null, floatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.ComplexImaginaryFloatConverter", e);
      }
  }
}
