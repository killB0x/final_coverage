/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:43:59 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.RealInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPointSampleList;
import net.imglib2.RealRandomAccessible;
import net.imglib2.converter.AbstractConvertedRealRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.BiConvertedRealRandomAccessible;
import net.imglib2.converter.read.ConvertedRealRandomAccessible;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.interpolation.Interpolant;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.position.RealPositionRealRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.view.composite.RealComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedRealRandomAccessible_ESTest extends AbstractConvertedRealRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<RealLocalizable, Integer> biConsumer0 = (BiConsumer<RealLocalizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<Integer> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Integer>(24, biConsumer0, supplier0);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccessible<Integer, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<Integer, Integer>(functionRealRandomAccessible0, converter0, supplier1);
      AbstractConvertedRealRandomAccess<Integer, Integer> abstractConvertedRealRandomAccess0 = convertedRealRandomAccessible0.realRandomAccess((RealInterval) null);
      assertNotNull(abstractConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(489, 4121);
      Converter<DoubleType, Integer> converter0 = (Converter<DoubleType, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccessible<DoubleType, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<DoubleType, Integer>(realPositionRealRandomAccessible0, converter0, supplier0);
      AbstractConvertedRealRandomAccess<DoubleType, Integer> abstractConvertedRealRandomAccess0 = convertedRealRandomAccessible0.realRandomAccess();
      assertNotNull(abstractConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<RealLocalizable, Integer> biConsumer0 = (BiConsumer<RealLocalizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<Integer> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Integer>(0, biConsumer0, (Supplier<Integer>) null);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<Integer, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<Integer, Integer>(functionRealRandomAccessible0, converter0, (Supplier<? extends Integer>) null);
      BiConverter<Integer, Integer, BitType> biConverter0 = (BiConverter<Integer, Integer, BitType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BitType> supplier0 = (Supplier<BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, BitType> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, BitType>(convertedRealRandomAccessible0, convertedRealRandomAccessible0, biConverter0, supplier0);
      int int0 = biConvertedRealRandomAccessible0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(489, 4121);
      Converter<DoubleType, Integer> converter0 = (Converter<DoubleType, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<DoubleType, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<DoubleType, Integer>(realPositionRealRandomAccessible0, converter0, supplier0);
      int int0 = convertedRealRandomAccessible0.numDimensions();
      assertEquals(489, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-824));
      InterpolatorFactory<Integer, Integer> interpolatorFactory0 = (InterpolatorFactory<Integer, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      Interpolant<Integer, Integer> interpolant0 = new Interpolant<Integer, Integer>(integer0, interpolatorFactory0, (-824));
      BiConverter<Integer, Integer, ARGBDoubleType> biConverter0 = (BiConverter<Integer, Integer, ARGBDoubleType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, ARGBDoubleType> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, ARGBDoubleType>(interpolant0, interpolant0, biConverter0, supplier0);
      int int0 = biConvertedRealRandomAccessible0.numDimensions();
      assertEquals((-824), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>(557, (BiConsumer<RealLocalizable, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Object>>) null, supplier0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Object>, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Object>, Object>((RealRandomAccessible<Integer>) null, functionRealRandomAccessible0, biConverter0, supplier1);
      RealRandomAccessible<Integer> realRandomAccessible0 = biConvertedRealRandomAccessible0.getSource();
      assertNull(realRandomAccessible0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter<Integer, Unsigned128BitType> converter0 = (Converter<Integer, Unsigned128BitType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<Integer, Unsigned128BitType> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<Integer, Unsigned128BitType>((RealRandomAccessible<Integer>) null, converter0, (Supplier<? extends Unsigned128BitType>) null);
      RealPointSampleList<LinkedList<Integer>> realPointSampleList0 = new RealPointSampleList<LinkedList<Integer>>(0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccessible0.realRandomAccess((RealInterval) realPointSampleList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>((-1066), biConsumer0, supplier0);
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<Object, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<Object, Integer>(functionRealRandomAccessible0, converter0, supplier1);
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccessible0.realRandomAccess((RealInterval) finalInterval0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1066
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<RealComposite<VolatileByteType>, Integer> converter0 = (Converter<RealComposite<VolatileByteType>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<RealComposite<VolatileByteType>, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<RealComposite<VolatileByteType>, Integer>((RealRandomAccessible<RealComposite<VolatileByteType>>) null, converter0, supplier0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<Integer, Integer> convertedRealRandomAccessible1 = new ConvertedRealRandomAccessible<Integer, Integer>(convertedRealRandomAccessible0, (Converter<? super Integer, ? super Integer>) null, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccessible1.realRandomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Converter<RealComposite<VolatileByteType>, Integer> converter0 = (Converter<RealComposite<VolatileByteType>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<RealComposite<VolatileByteType>, Integer> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<RealComposite<VolatileByteType>, Integer>((RealRandomAccessible<RealComposite<VolatileByteType>>) null, converter0, supplier0);
      BiConsumer<RealLocalizable, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConsumer0 = (BiConsumer<RealLocalizable, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> supplier1 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((-762), biConsumer0, supplier1);
      BiConverter<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer, Integer> biConverter0 = (BiConverter<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer, Integer>(functionRealRandomAccessible0, convertedRealRandomAccessible0, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible0.realRandomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -762
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-530));
      InterpolatorFactory<Integer, Integer> interpolatorFactory0 = (InterpolatorFactory<Integer, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      Interpolant<Integer, Integer> interpolant0 = new Interpolant<Integer, Integer>(integer0, interpolatorFactory0, (-530));
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Unsigned128BitType> supplier0 = (Supplier<Unsigned128BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccessible<Integer, Unsigned128BitType> convertedRealRandomAccessible0 = new ConvertedRealRandomAccessible<Integer, Unsigned128BitType>(interpolant0, converter0, supplier0);
      RealRandomAccessible<Integer> realRandomAccessible0 = convertedRealRandomAccessible0.getSource();
      assertNotNull(realRandomAccessible0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BiConverter<NativeBoolType, NativeBoolType, Integer> biConverter0 = (BiConverter<NativeBoolType, NativeBoolType, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<NativeBoolType, NativeBoolType, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<NativeBoolType, NativeBoolType, Integer>((RealRandomAccessible<NativeBoolType>) null, (RealRandomAccessible<NativeBoolType>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccessible", e);
      }
  }
}
