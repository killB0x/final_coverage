/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:12:50 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.function.Supplier;
import net.imglib2.IterableRealInterval;
import net.imglib2.PointSampleList;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.converter.AbstractConvertedRealCursor;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.BiConvertedIterableRealInterval;
import net.imglib2.converter.read.ConvertedIterableRealInterval;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedIterableRealInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedIterableRealInterval_ESTest extends AbstractConvertedIterableRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealPointSampleList<PointSampleList.PointSampleListCursor> realPointSampleList0 = new RealPointSampleList<PointSampleList.PointSampleListCursor>(970);
      BiConverter<PointSampleList.PointSampleListCursor, Integer, Integer> biConverter0 = (BiConverter<PointSampleList.PointSampleListCursor, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer, Integer> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer, Integer>(realPointSampleList0, (IterableRealInterval<Integer>) null, biConverter0, supplier0);
      long long0 = biConvertedIterableRealInterval0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedIterableRealInterval<Integer, Integer> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<Integer, Integer>(realPointSampleList0, converter0, supplier0);
      AbstractConvertedRealCursor<Integer, Integer> abstractConvertedRealCursor0 = convertedIterableRealInterval0.localizingCursor();
      assertNotNull(abstractConvertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealPointSampleList<PointSampleList.PointSampleListCursor> realPointSampleList0 = new RealPointSampleList<PointSampleList.PointSampleListCursor>(33);
      Supplier<RealPointSample<Integer>> supplier0 = (Supplier<RealPointSample<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, RealPointSample<Integer>> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, RealPointSample<Integer>>(realPointSampleList0, (Converter<? super PointSampleList.PointSampleListCursor, ? super RealPointSample<Integer>>) null, supplier0);
      Iterator<RealPointSample<Integer>> iterator0 = convertedIterableRealInterval0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealPointSampleList<PointSampleList.PointSampleListCursor> realPointSampleList0 = new RealPointSampleList<PointSampleList.PointSampleListCursor>(33);
      SamplerConverter<PointSampleList.PointSampleListCursor, Integer> samplerConverter0 = (SamplerConverter<PointSampleList.PointSampleListCursor, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer>(realPointSampleList0, samplerConverter0);
      RealPointSampleList realPointSampleList1 = (RealPointSampleList)writeConvertedIterableRealInterval0.iterationOrder();
      assertEquals(0L, realPointSampleList1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1391);
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableRealInterval<Integer, Integer, Integer> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<Integer, Integer, Integer>(realPointSampleList0, realPointSampleList0, biConverter0, supplier0);
      AbstractConvertedRealCursor<Integer, Integer> abstractConvertedRealCursor0 = biConvertedIterableRealInterval0.cursor();
      assertNotNull(abstractConvertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>((IterableRealInterval<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      SamplerConverter<Object, Integer> samplerConverter0 = (SamplerConverter<Object, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(samplerConverter0).convert(any(net.imglib2.Sampler.class));
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>(realPointSampleList0, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.firstElement();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WriteConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<PointSampleList.PointSampleListCursor, Integer>((IterableRealInterval<PointSampleList.PointSampleListCursor>) null, (SamplerConverter<? super PointSampleList.PointSampleListCursor, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SamplerConverter<Integer, Integer> samplerConverter0 = (SamplerConverter<Integer, Integer>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>((IterableRealInterval<Integer>) null, samplerConverter0);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.firstElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>((IterableRealInterval<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.readwrite.WriteConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>((IterableRealInterval<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WriteConvertedIterableRealInterval<Integer, Integer> writeConvertedIterableRealInterval0 = new WriteConvertedIterableRealInterval<Integer, Integer>((IterableRealInterval<Integer>) null, (SamplerConverter<? super Integer, Integer>) null);
      // Undeclared exception!
      try { 
        writeConvertedIterableRealInterval0.iterationOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedIterableRealInterval", e);
      }
  }
}
