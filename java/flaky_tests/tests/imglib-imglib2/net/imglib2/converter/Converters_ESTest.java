/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:37:19 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.ColorChannelOrder;
import net.imglib2.converter.Converter;
import net.imglib2.converter.Converters;
import net.imglib2.converter.readwrite.SamplerConverter;
import net.imglib2.converter.readwrite.WriteConvertedRandomAccessibleInterval;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Converters_ESTest extends Converters_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColorChannelOrder colorChannelOrder0 = ColorChannelOrder.ARGB;
      // Undeclared exception!
      try { 
        Converters.mergeARGB((RandomAccessibleInterval<UnsignedByteType>) null, colorChannelOrder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.Converters", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 399;
      // Undeclared exception!
      try { 
        Converters.argbChannels((RandomAccessibleInterval<ARGBType>) null, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 399 out of bounds for length 4
         //
         verifyException("net.imglib2.converter.readwrite.ARGBChannelSamplerConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SamplerConverter<UnsignedByteType, UnsignedByteType> samplerConverter0 = (SamplerConverter<UnsignedByteType, UnsignedByteType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessibleInterval<UnsignedByteType, UnsignedByteType> writeConvertedRandomAccessibleInterval0 = Converters.convert((RandomAccessibleInterval<UnsignedByteType>) null, (SamplerConverter<? super UnsignedByteType, UnsignedByteType>) samplerConverter0);
      assertNotNull(writeConvertedRandomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Converters converters0 = new Converters();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<DirtyVolatileByteArray> supplier0 = (Supplier<DirtyVolatileByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<DirtyVolatileByteArray> randomAccessibleInterval0 = Converters.convert2((RandomAccessibleInterval<DirtyVolatileByteArray>) null, (Converter<? super DirtyVolatileByteArray, ? super DirtyVolatileByteArray>) converter0, supplier0);
      Converter<DirtyVolatileByteArray, DirtyVolatileByteArray> converter1 = (Converter<DirtyVolatileByteArray, DirtyVolatileByteArray>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<DirtyVolatileByteArray> supplier1 = (Supplier<DirtyVolatileByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<DirtyVolatileByteArray> randomAccessibleInterval1 = Converters.convertRAI2(randomAccessibleInterval0, (Converter<? super DirtyVolatileByteArray, ? super DirtyVolatileByteArray>) converter1, supplier1);
      assertNotSame(randomAccessibleInterval0, randomAccessibleInterval1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[9];
      Unsigned2BitType unsigned2BitType0 = new Unsigned2BitType();
      ListImg<Unsigned2BitType> listImg0 = new ListImg<Unsigned2BitType>(longArray0, unsigned2BitType0);
      SamplerConverter<Unsigned2BitType, Unsigned2BitType> samplerConverter0 = (SamplerConverter<Unsigned2BitType, Unsigned2BitType>) mock(SamplerConverter.class, new ViolatedAssumptionAnswer());
      WriteConvertedRandomAccessibleInterval<Unsigned2BitType, Unsigned2BitType> writeConvertedRandomAccessibleInterval0 = Converters.convertRAI((RandomAccessibleInterval<Unsigned2BitType>) listImg0, (SamplerConverter<? super Unsigned2BitType, Unsigned2BitType>) samplerConverter0);
      assertNotNull(writeConvertedRandomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        Converters.argbChannels((RandomAccessibleInterval<ARGBType>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractWrappedRealInterval", e);
      }
  }
}
