/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:46:18 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.PointSample;
import net.imglib2.Sampler;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedCursor;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.view.composite.GenericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedCursor_ESTest extends ConvertedCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> cursor0 = (Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cursor0).get();
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object> convertedCursor0 = new ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object>(cursor0, converter0, supplier0);
      Object object0 = convertedCursor0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> cursor0 = (Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn((Sampler) null).when(cursor0).copy();
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object> convertedCursor0 = new ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object>(cursor0, converter0, supplier0);
      Converter<Object, Object> converter1 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<GenericComposite<ChannelARGBConverter>> supplier1 = (Supplier<GenericComposite<ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>> convertedCursor1 = new ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>>(convertedCursor0, converter1, supplier1);
      ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>> convertedCursor2 = convertedCursor1.copy();
      assertFalse(convertedCursor2.equals((Object)convertedCursor1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Converter<ChannelARGBConverter, ByteType> converter0 = (Converter<ChannelARGBConverter, ByteType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ByteType> supplier0 = (Supplier<ByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<ChannelARGBConverter, ByteType> convertedCursor0 = new ConvertedCursor<ChannelARGBConverter, ByteType>((Cursor<ChannelARGBConverter>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedCursor0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<GenericComposite<ChannelARGBConverter>> supplier0 = (Supplier<GenericComposite<ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>> convertedCursor0 = new ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>>((Cursor<Object>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedCursor0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Supplier<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> supplier0 = (Supplier<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> pointSample0 = new PointSample<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>(supplier0, 2607);
      Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> cursor0 = (Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(pointSample0).when(cursor0).copy();
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pointSample0).when(supplier1).get();
      ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object> convertedCursor0 = new ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object>(cursor0, converter0, supplier1);
      Converter<Object, Object> converter1 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      GenericComposite<ChannelARGBConverter> genericComposite0 = (GenericComposite<ChannelARGBConverter>) mock(GenericComposite.class, new ViolatedAssumptionAnswer());
      Supplier<GenericComposite<ChannelARGBConverter>> supplier2 = (Supplier<GenericComposite<ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0).when(supplier2).get();
      ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>> convertedCursor1 = new ConvertedCursor<Object, GenericComposite<ChannelARGBConverter>>(convertedCursor0, converter1, supplier2);
      // Undeclared exception!
      try { 
        convertedCursor1.copy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.PointSample cannot be cast to class net.imglib2.Cursor (net.imglib2.PointSample and net.imglib2.Cursor are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @778babf8)
         //
         verifyException("net.imglib2.converter.read.ConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConvertedCursor<Object, ChannelARGBConverter> convertedCursor0 = null;
      try {
        convertedCursor0 = new ConvertedCursor<Object, ChannelARGBConverter>((Cursor<Object>) null, (Converter<? super Object, ? super ChannelARGBConverter>) null, (Supplier<? extends ChannelARGBConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>> cursor0 = (Cursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cursor0).get();
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.A;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(channelARGBConverter0).when(supplier0).get();
      ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object> convertedCursor0 = new ConvertedCursor<ConvertedCursor<ChannelARGBConverter, ChannelARGBConverter>, Object>(cursor0, converter0, supplier0);
      Object object0 = convertedCursor0.get();
      assertSame(channelARGBConverter0, object0);
  }
}
