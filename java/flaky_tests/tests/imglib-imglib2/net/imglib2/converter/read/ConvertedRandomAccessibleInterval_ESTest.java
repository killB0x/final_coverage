/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:32:17 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedRandomAccessibleInterval;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.SubsampleIntervalView;
import net.imglib2.view.SubsampleView;
import net.imglib2.view.composite.AbstractComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedRandomAccessibleInterval_ESTest extends ConvertedRandomAccessibleInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[5];
      SubsampleView<ChannelARGBConverter> subsampleView0 = new SubsampleView<ChannelARGBConverter>((RandomAccessible<ChannelARGBConverter>) null, longArray0);
      IntervalView<ChannelARGBConverter> intervalView0 = new IntervalView<ChannelARGBConverter>(subsampleView0, longArray0, longArray0);
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.A;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(channelARGBConverter0).when(supplier0).get();
      ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter>(intervalView0, converter0, supplier0);
      ChannelARGBConverter channelARGBConverter1 = convertedRandomAccessibleInterval0.getDestinationType();
      assertSame(channelARGBConverter1, channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Converter<Object, ChannelARGBConverter> converter0 = (Converter<Object, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter>((RandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>>) null, converter0, supplier0);
      ConvertedRandomAccessibleInterval<ChannelARGBConverter, AbstractComposite<ChannelARGBConverter>> convertedRandomAccessibleInterval1 = new ConvertedRandomAccessibleInterval<ChannelARGBConverter, AbstractComposite<ChannelARGBConverter>>(convertedRandomAccessibleInterval0, (Converter<? super ChannelARGBConverter, ? super AbstractComposite<ChannelARGBConverter>>) null, (Supplier<? extends AbstractComposite<ChannelARGBConverter>>) null);
      Supplier<? extends AbstractComposite<ChannelARGBConverter>> supplier1 = convertedRandomAccessibleInterval1.getDestinationSupplier();
      assertNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Converter<ByteType, ChannelARGBConverter> converter0 = (Converter<ByteType, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessibleInterval<ByteType, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ByteType, ChannelARGBConverter>((RandomAccessibleInterval<ByteType>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRandomAccessibleInterval0.randomAccess((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccessibleInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter>((RandomAccessibleInterval<ChannelARGBConverter>) null, converter0, (Supplier<? extends ChannelARGBConverter>) null);
      Supplier<Converter<? super ChannelARGBConverter, ? super ChannelARGBConverter>> supplier0 = convertedRandomAccessibleInterval0.getConverterSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter>((RandomAccessibleInterval<ChannelARGBConverter>) null, converter0, supplier0);
      Supplier<? extends ChannelARGBConverter> supplier1 = convertedRandomAccessibleInterval0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Converter<ByteType, ChannelARGBConverter> converter0 = (Converter<ByteType, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccessibleInterval<ByteType, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ByteType, ChannelARGBConverter>((RandomAccessibleInterval<ByteType>) null, converter0, supplier0);
      ChannelARGBConverter channelARGBConverter0 = convertedRandomAccessibleInterval0.getDestinationType();
      assertNull(channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.B;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      ListImgFactory<ChannelARGBConverter> listImgFactory0 = new ListImgFactory<ChannelARGBConverter>(channelARGBConverter0);
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      ListImg<ChannelARGBConverter> listImg0 = listImgFactory0.create((Dimensions) finalInterval0);
      SubsampleIntervalView<ChannelARGBConverter> subsampleIntervalView0 = new SubsampleIntervalView<ChannelARGBConverter>(listImg0, 4294967295L);
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<ChannelARGBConverter, ChannelARGBConverter>(subsampleIntervalView0, converter0, (Supplier<? extends ChannelARGBConverter>) null);
      // Undeclared exception!
      try { 
        convertedRandomAccessibleInterval0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Converter<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter> converter0 = (Converter<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter> convertedRandomAccessibleInterval0 = new ConvertedRandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>, ChannelARGBConverter>((RandomAccessibleInterval<RandomAccessibleInterval<ChannelARGBConverter>>) null, converter0, supplier0);
      Converter<? super RandomAccessibleInterval<ChannelARGBConverter>, ? super ChannelARGBConverter> converter1 = convertedRandomAccessibleInterval0.getConverter();
      assertNotNull(converter1);
  }
}
