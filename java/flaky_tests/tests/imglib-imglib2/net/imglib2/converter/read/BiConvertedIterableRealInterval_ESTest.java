/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:46:40 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.IterableRealInterval;
import net.imglib2.KDTree;
import net.imglib2.PointSampleList;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedIterableRealInterval;
import net.imglib2.converter.read.BiConvertedRealCursor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedIterableRealInterval_ESTest extends BiConvertedIterableRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1375);
      Supplier<BiConvertedIterableRealInterval<Object, Integer, Integer>> supplier0 = (Supplier<BiConvertedIterableRealInterval<Object, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableRealInterval<Object, Object, BiConvertedIterableRealInterval<Object, Integer, Integer>> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<Object, Object, BiConvertedIterableRealInterval<Object, Integer, Integer>>(realPointSampleList0, realPointSampleList0, (BiConverter<? super Object, ? super Object, ? super BiConvertedIterableRealInterval<Object, Integer, Integer>>) null, supplier0);
      BiConvertedRealCursor<Object, Object, BiConvertedIterableRealInterval<Object, Integer, Integer>> biConvertedRealCursor0 = biConvertedIterableRealInterval0.localizingCursor();
      assertNotNull(biConvertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPointSampleList<BiConvertedIterableRealInterval<Integer, Integer, Object>> realPointSampleList0 = new RealPointSampleList<BiConvertedIterableRealInterval<Integer, Integer, Object>>(0);
      KDTree<BiConvertedIterableRealInterval<Integer, Integer, Object>> kDTree0 = new KDTree<BiConvertedIterableRealInterval<Integer, Integer, Object>>(realPointSampleList0);
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      BiConvertedIterableRealInterval<BiConvertedIterableRealInterval<Integer, Integer, Object>, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<BiConvertedIterableRealInterval<Integer, Integer, Object>, RealPointSampleList<Integer>, Object>(kDTree0, pointSampleList0, biConverter0, supplier0);
      Object object1 = biConvertedIterableRealInterval0.getDestinationType();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealPointSampleList<RealPointSample<Object>> realPointSampleList0 = new RealPointSampleList<RealPointSample<Object>>(2250);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<RealPointSample<Object>, Object, Integer> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSample<Object>, Object, Integer>(realPointSampleList0, pointSampleList0, biConverter0, (Supplier<? extends Integer>) null);
      Supplier<? extends Integer> supplier0 = biConvertedIterableRealInterval0.getDestinationSupplier();
      assertNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biConverter0).toString();
      Supplier<RealPointSample<Integer>> supplier0 = (Supplier<RealPointSample<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, RealPointSample<Integer>> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, RealPointSample<Integer>>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConverter<? super RealPointSampleList<Integer>, ? super RealPointSampleList<Integer>, ? super RealPointSample<Integer>> biConverter1 = biConvertedIterableRealInterval0.getConverter();
      assertNotNull(biConverter1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(2);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConvertedRealCursor<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object> biConvertedRealCursor0 = biConvertedIterableRealInterval0.cursor();
      assertNotNull(biConvertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<RealPointSampleList<Integer>> supplier0 = (Supplier<RealPointSampleList<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<Object, Object, RealPointSampleList<Integer>> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<Object, Object, RealPointSampleList<Integer>>((IterableRealInterval<Object>) null, (IterableRealInterval<Object>) null, (BiConverter<? super Object, ? super Object, ? super RealPointSampleList<Integer>>) null, supplier0);
      BiConverter<? super Object, ? super Object, ? super RealPointSampleList<Integer>> biConverter0 = biConvertedIterableRealInterval0.getConverter();
      assertNull(biConverter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointSampleList<BiConvertedIterableRealInterval<Integer, Object, Integer>> pointSampleList0 = new PointSampleList<BiConvertedIterableRealInterval<Integer, Object, Integer>>(1191);
      BiConvertedIterableRealInterval<BiConvertedIterableRealInterval<Integer, Object, Integer>, RealPointSample<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<BiConvertedIterableRealInterval<Integer, Object, Integer>, RealPointSample<Integer>, Object>(pointSampleList0, (IterableRealInterval<RealPointSample<Integer>>) null, (BiConverter<? super BiConvertedIterableRealInterval<Integer, Object, Integer>, ? super RealPointSample<Integer>, ? super Object>) null, (Supplier<?>) null);
      // Undeclared exception!
      try { 
        biConvertedIterableRealInterval0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(1);
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object>(pointSampleList0, pointSampleList0, (BiConverter<? super RealPointSampleList<Integer>, ? super RealPointSampleList<Integer>, ? super Object>) null, (Supplier<?>) null);
      BiConvertedIterableRealInterval<Object, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval1 = new BiConvertedIterableRealInterval<Object, RealPointSampleList<Integer>, Object>(biConvertedIterableRealInterval0, pointSampleList0, (BiConverter<? super Object, ? super RealPointSampleList<Integer>, ? super Object>) null, (Supplier<?>) null);
      // Undeclared exception!
      try { 
        biConvertedIterableRealInterval1.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<RealPointSample<Integer>> supplier0 = (Supplier<RealPointSample<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<RealPointSampleList<Object>> supplier1 = (Supplier<RealPointSampleList<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, Object, RealPointSampleList<Object>> biConvertedIterableRealInterval1 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, Object, RealPointSampleList<Object>>(pointSampleList0, biConvertedIterableRealInterval0, biConverter1, supplier1);
      Supplier<BiConverter<? super RealPointSampleList<Integer>, ? super Object, ? super RealPointSampleList<Object>>> supplier2 = biConvertedIterableRealInterval1.getConverterSupplier();
      assertNotNull(supplier2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("<jD").when(supplier0).toString();
      BiConvertedIterableRealInterval<Integer, Integer, Integer> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<Integer, Integer, Integer>(realPointSampleList0, realPointSampleList0, biConverter0, supplier0);
      Supplier<? extends Integer> supplier1 = biConvertedIterableRealInterval0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<RealPointSampleList<Integer>> pointSampleList0 = new PointSampleList<RealPointSampleList<Integer>>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<RealPointSample<Integer>> supplier0 = (Supplier<RealPointSample<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object> biConvertedIterableRealInterval0 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, RealPointSampleList<Integer>, Object>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<RealPointSampleList<Object>> supplier1 = (Supplier<RealPointSampleList<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedIterableRealInterval<RealPointSampleList<Integer>, Object, RealPointSampleList<Object>> biConvertedIterableRealInterval1 = new BiConvertedIterableRealInterval<RealPointSampleList<Integer>, Object, RealPointSampleList<Object>>(pointSampleList0, biConvertedIterableRealInterval0, biConverter1, supplier1);
      RealPointSampleList<Object> realPointSampleList0 = biConvertedIterableRealInterval1.getDestinationType();
      assertNull(realPointSampleList0);
  }
}
