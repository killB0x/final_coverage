/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:52:28 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedRandomAccess;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileLongType;
import net.imglib2.view.composite.NumericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedRandomAccess_ESTest extends ConvertedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 2);
      Converter<Object, ChannelARGBConverter> converter0 = (Converter<Object, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Object, ChannelARGBConverter> convertedRandomAccess0 = new ConvertedRandomAccess<Object, ChannelARGBConverter>(pointSample0, converter0, supplier1);
      ChannelARGBConverter channelARGBConverter0 = convertedRandomAccess0.get();
      assertNull(channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.B;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(channelARGBConverter0).when(supplier0).get();
      int[] intArray0 = new int[5];
      PointSample<ChannelARGBConverter> pointSample0 = new PointSample<ChannelARGBConverter>(supplier0, intArray0);
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(channelARGBConverter0).when(supplier1).get();
      ConvertedRandomAccess<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccess0 = new ConvertedRandomAccess<ChannelARGBConverter, ChannelARGBConverter>(pointSample0, converter0, supplier1);
      ChannelARGBConverter channelARGBConverter1 = convertedRandomAccess0.get();
      assertSame(channelARGBConverter1, channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<ChannelARGBConverter> pointSample0 = new PointSample<ChannelARGBConverter>(supplier0, intArray0);
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      ConvertedRandomAccess<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccess0 = new ConvertedRandomAccess<ChannelARGBConverter, ChannelARGBConverter>(pointSample0, converter0, supplier1);
      ConvertedRandomAccess<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccess1 = convertedRandomAccess0.copy();
      assertFalse(convertedRandomAccess1.equals((Object)convertedRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConvertedRandomAccess<NumericComposite<VolatileByteType>, ChannelARGBConverter> convertedRandomAccess0 = null;
      try {
        convertedRandomAccess0 = new ConvertedRandomAccess<NumericComposite<VolatileByteType>, ChannelARGBConverter>((RandomAccess<NumericComposite<VolatileByteType>>) null, (Converter<? super NumericComposite<VolatileByteType>, ? super ChannelARGBConverter>) null, (Supplier<? extends ChannelARGBConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 12);
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccess<Object, ChannelARGBConverter> convertedRandomAccess0 = new ConvertedRandomAccess<Object, ChannelARGBConverter>(pointSample0, (Converter<? super Object, ? super ChannelARGBConverter>) null, supplier1);
      // Undeclared exception!
      try { 
        convertedRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Supplier<VolatileLongType> supplier0 = (Supplier<VolatileLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccess<ConvertedRandomAccess<VolatileLongType, ChannelARGBConverter>, VolatileLongType> convertedRandomAccess0 = new ConvertedRandomAccess<ConvertedRandomAccess<VolatileLongType, ChannelARGBConverter>, VolatileLongType>((RandomAccess<ConvertedRandomAccess<VolatileLongType, ChannelARGBConverter>>) null, (Converter<? super ConvertedRandomAccess<VolatileLongType, ChannelARGBConverter>, ? super VolatileLongType>) null, supplier0);
      // Undeclared exception!
      try { 
        convertedRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccess", e);
      }
  }
}
