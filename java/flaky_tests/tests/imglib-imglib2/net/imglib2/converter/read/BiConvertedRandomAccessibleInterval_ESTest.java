/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:49:07 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRandomAccessibleInterval;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.outofbounds.RealOutOfBoundsFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.util.Grid;
import net.imglib2.view.ExtendedRealRandomAccessibleRealInterval;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.StackView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRandomAccessibleInterval_ESTest extends BiConvertedRandomAccessibleInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<Localizable, Grid.CellIntervals> biConsumer0 = (BiConsumer<Localizable, Grid.CellIntervals>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Grid.CellIntervals> functionRandomAccessible0 = new FunctionRandomAccessible<Grid.CellIntervals>(1403, biConsumer0, (Supplier<Grid.CellIntervals>) null);
      long[] longArray0 = new long[9];
      IntervalView<Grid.CellIntervals> intervalView0 = new IntervalView<Grid.CellIntervals>(functionRandomAccessible0, longArray0, longArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessibleInterval<Grid.CellIntervals, Grid.CellIntervals, Object> biConvertedRandomAccessibleInterval0 = new BiConvertedRandomAccessibleInterval<Grid.CellIntervals, Grid.CellIntervals, Object>(intervalView0, intervalView0, biConverter0, (Supplier<?>) null);
      // Undeclared exception!
      try { 
        biConvertedRandomAccessibleInterval0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConvertedRealRandomAccessibleRealInterval<Object, RandomAccessibleInterval<Object>> convertedRealRandomAccessibleRealInterval0 = (ConvertedRealRandomAccessibleRealInterval<Object, RandomAccessibleInterval<Object>>) mock(ConvertedRealRandomAccessibleRealInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(convertedRealRandomAccessibleRealInterval0).numDimensions();
      RealOutOfBoundsFactory<RandomAccessibleInterval<Object>, Object> realOutOfBoundsFactory0 = (RealOutOfBoundsFactory<RandomAccessibleInterval<Object>, Object>) mock(RealOutOfBoundsFactory.class, new ViolatedAssumptionAnswer());
      ExtendedRealRandomAccessibleRealInterval<RandomAccessibleInterval<Object>, ConvertedRealRandomAccessibleRealInterval<Object, RandomAccessibleInterval<Object>>> extendedRealRandomAccessibleRealInterval0 = new ExtendedRealRandomAccessibleRealInterval<RandomAccessibleInterval<Object>, ConvertedRealRandomAccessibleRealInterval<Object, RandomAccessibleInterval<Object>>>(convertedRealRandomAccessibleRealInterval0, realOutOfBoundsFactory0);
      RandomAccessibleOnRealRandomAccessible<RandomAccessibleInterval<Object>> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<RandomAccessibleInterval<Object>>(extendedRealRandomAccessibleRealInterval0);
      long[] longArray0 = new long[6];
      IntervalView<RandomAccessibleInterval<Object>> intervalView0 = new IntervalView<RandomAccessibleInterval<Object>>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      BiConverter<Object, Object, Grid.CellIntervals> biConverter0 = (BiConverter<Object, Object, Grid.CellIntervals>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Grid.CellIntervals> supplier0 = (Supplier<Grid.CellIntervals>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessibleInterval<StackView<Object>, RandomAccessibleInterval<Object>, Grid.CellIntervals> biConvertedRandomAccessibleInterval0 = new BiConvertedRandomAccessibleInterval<StackView<Object>, RandomAccessibleInterval<Object>, Grid.CellIntervals>((RandomAccessibleInterval<StackView<Object>>) null, intervalView0, biConverter0, supplier0);
      Supplier<BiConverter<? super StackView<Object>, ? super RandomAccessibleInterval<Object>, ? super Grid.CellIntervals>> supplier1 = biConvertedRandomAccessibleInterval0.getConverterSupplier();
      assertNotNull(supplier1);
  }
}
