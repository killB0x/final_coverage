/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:49:46 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRealRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRealRandomAccess_ESTest extends BiConvertedRealRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2567.061);
      doubleArray0[1] = (-1506.6);
      doubleArray0[2] = 555.69978659;
      doubleArray0[3] = 2.147483647E9;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1887.6460170041798;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-2567.061), (-1506.6), 555.69978659, 2.147483647E9, 0.0, 1887.6460170041798}, doubleArray0, 0.01);
      
      RealPointSample<Object> realPointSample1 = realPointSample0.copy();
      assertNotNull(realPointSample1);
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-2567.061), (-1506.6), 555.69978659, 2.147483647E9, 0.0, 1887.6460170041798}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      Integer integer0 = new Integer(451);
      assertNotNull(integer0);
      assertEquals(451, (int)integer0);
      
      boolean boolean0 = realPointSample0.equals(integer0);
      assertNotSame(realPointSample0, realPointSample1);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-2567.061), (-1506.6), 555.69978659, 2.147483647E9, 0.0, 1887.6460170041798}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>((RealRandomAccess<Integer>) null, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-2567.061), (-1506.6), 555.69978659, 2.147483647E9, 0.0, 1887.6460170041798}, doubleArray0, 0.01);
      
      int int0 = 10;
      int int1 = 0;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.fwd(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = 165;
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 165);
      assertNotNull(realPointSample0);
      assertEquals(165, realPointSample0.numDimensions());
      
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 165;
      doubleArray0[1] = (double) 165;
      doubleArray0[2] = (-1.7976931348623157E308);
      RealPointSample<Object> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {165.0, 165.0, (-1.7976931348623157E308)}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, doubleArray0.length);
      assertEquals(165, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {165.0, 165.0, (-1.7976931348623157E308)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((double) 165, 165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 165 out of bounds for length 165
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealRandomAccess<Object> realRandomAccess0 = null;
      Supplier<BiConvertedRealRandomAccess<Object, Integer, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Object, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Object>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Object>>(supplier0, 0);
      assertNotNull(realPointSample0);
      assertEquals(0, realPointSample0.numDimensions());
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Object, Integer, Object>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Object, Integer, Object>, Integer>((RealRandomAccess<Object>) null, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(0, realPointSample0.numDimensions());
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((float) 0, (-2428));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealRandomAccess<Object> realRandomAccess0 = null;
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer>((RealRandomAccess<Object>) null, (RealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) null, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      
      int int0 = (-973);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(1.0F, (-973));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2230.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = (-2231.137136529);
      doubleArray0[3] = 1123.415;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Object, Object>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Object, Object>, Integer>((RealRandomAccess<Integer>) null, (RealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Object>>) null, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3285);
      intArray0[1] = 3729;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-4353);
      intArray0[5] = 1;
      intArray0[6] = (-563);
      Point point0 = new Point(intArray0);
      assertNotNull(point0);
      assertEquals(7, intArray0.length);
      assertEquals(7, point0.numDimensions());
      assertArrayEquals(new int[] {(-3285), 3729, (-1), (-1), (-4353), 1, (-563)}, intArray0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((Localizable) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[] floatArray0 = new float[9];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample1 = new RealPointSample<Object>(supplier0, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertEquals(9, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = realPointSample0.equals(object0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>>(realPointSample1, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertEquals(9, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess0.move(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertEquals(9, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      realPointSample0.move((RealLocalizable) biConvertedRealRandomAccess0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertEquals(9, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BiConverter<Object, Integer, Object> biConverter1 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRealRandomAccess1 = null;
      try {
        biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer, Integer>(biConvertedRealRandomAccess0, realPointSample0, biConverter1, (Supplier<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealRandomAccess<Integer> realRandomAccess0 = null;
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 1);
      assertNotNull(realPointSample0);
      assertEquals(1, realPointSample0.numDimensions());
      
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>((RealRandomAccess<Integer>) null, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, realPointSample0.numDimensions());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-798.0);
      doubleArray0[2] = 4524.6;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-798.0), 4524.6}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Object>(realPointSample0, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-798.0), 4524.6}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      biConvertedRealRandomAccess0.fwd(0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {1.0, (-798.0), 4524.6}, doubleArray0, 0.01);
      
      floatArray0[2] = 0.0F;
      Object object0 = biConvertedRealRandomAccess0.setPositionAndGet(floatArray0);
      assertNull(object0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 532.5F;
      floatArray0[6] = (-1.0F);
      biConvertedRealRandomAccess0.setPosition(floatArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 532.5F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = 1316.620811;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 1316.620811, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (-3827L);
      longArray0[1] = (-842L);
      longArray0[2] = 0L;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      assertNotNull(pointSample0);
      assertEquals(3, longArray0.length);
      assertEquals(3, pointSample0.numDimensions());
      assertArrayEquals(new long[] {(-3827L), (-842L), 0L}, longArray0);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier2, 0);
      assertNotNull(realPointSample1);
      assertEquals(0, realPointSample1.numDimensions());
      
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample1, realPointSample0, (BiConverter<? super Integer, ? super Object, ? super Integer>) null, supplier3);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 1316.620811, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-3827L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-3827L);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1221.0);
      doubleArray0[6] = (-1754.283956);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      int int0 = 353;
      Integer integer0 = new Integer(353);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(353, (int)integer0);
      
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample1, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(8, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      int int1 = 0;
      biConvertedRealRandomAccess1.setPosition(353, 0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(8, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample2 = new RealPointSample<Integer>(supplier3, biConvertedRealRandomAccess0);
      assertNotNull(realPointSample2);
      assertEquals(8, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(8, realPointSample2.numDimensions());
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter1 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess2 = null;
      try {
        biConvertedRealRandomAccess2 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(biConvertedRealRandomAccess1, realPointSample2, biConverter1, (Supplier<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Object>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Object>> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, floatArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(1, floatArray0.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.move(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-138.6224812399863);
      doubleArray0[2] = 3045.5;
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-718.9363703725807);
      doubleArray0[6] = 1.0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-138.6224812399863), 3045.5, (-1.7976931348623157E308), 0.0, (-718.9363703725807), 1.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-138.6224812399863), 3045.5, (-1.7976931348623157E308), 0.0, (-718.9363703725807), 1.0}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.setPosition(1, 1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 3045.5, (-1.7976931348623157E308), 0.0, (-718.9363703725807), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>>(supplier0, 0);
      assertNotNull(realPointSample0);
      assertEquals(0, realPointSample0.numDimensions());
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer, Integer>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.move((-1421.3355716845), 1456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1456 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1754.283956);
      doubleArray0[2] = (-1961.2667241239008);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1221.0);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1754.283956), (-1961.2667241239008), 0.0, (-1221.0)}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = null;
      int int0 = (-2724);
      Integer integer0 = new Integer((-2724));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2724), (int)integer0);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1754.283956), (-1961.2667241239008), 0.0, (-1221.0)}, doubleArray0, 0.01);
      
      long long0 = 0L;
      long long1 = (-40L);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[0] = (-40L);
      longArray0[1] = 0L;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier2, longArray0);
      assertNotNull(pointSample0);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertArrayEquals(new long[] {(-40L), 0L}, longArray0);
      
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1754.283956), (-1961.2667241239008), 0.0, (-1221.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.setPosition((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 0);
      assertNotNull(realPointSample0);
      assertEquals(0, realPointSample0.numDimensions());
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier4 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>>(supplier4, longArray0);
      assertNotNull(pointSample0);
      assertEquals(6, longArray0.length);
      assertEquals(6, pointSample0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> pointSample1 = pointSample0.copy();
      assertNotNull(pointSample1);
      assertNotSame(pointSample0, pointSample1);
      assertNotSame(pointSample1, pointSample0);
      assertEquals(6, longArray0.length);
      assertEquals(6, pointSample0.numDimensions());
      assertEquals(6, pointSample1.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      PointSample<Integer> pointSample2 = new PointSample<Integer>(supplier3, pointSample1);
      assertNotNull(pointSample2);
      assertEquals(6, longArray0.length);
      assertEquals(6, pointSample0.numDimensions());
      assertEquals(6, pointSample1.numDimensions());
      assertEquals(6, pointSample2.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      biConvertedRealRandomAccess0.move((Localizable) pointSample2);
      assertNotSame(pointSample0, pointSample1);
      assertNotSame(pointSample1, pointSample0);
      assertEquals(6, longArray0.length);
      assertEquals(6, pointSample0.numDimensions());
      assertEquals(6, pointSample1.numDimensions());
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(6, pointSample2.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      RealPointSample<Integer> realPointSample2 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertEquals(2, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointSample<BiConvertedRealRandomAccess<Object, Object, Object>> realPointSample3 = new RealPointSample<BiConvertedRealRandomAccess<Object, Object, Object>>((Supplier<BiConvertedRealRandomAccess<Object, Object, Object>>) null, 0);
      assertNotNull(realPointSample3);
      assertEquals(0, realPointSample3.numDimensions());
      
      Supplier<Integer> supplier5 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier5).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Object, Object>, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Object, Object>, Integer>(realPointSample2, realPointSample3, (BiConverter<? super Integer, ? super BiConvertedRealRandomAccess<Object, Object, Object>, ? super Integer>) null, supplier5);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(0, realPointSample3.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Object, Object>, Integer> biConvertedRealRandomAccess2 = biConvertedRealRandomAccess1.copy();
      assertNotNull(biConvertedRealRandomAccess2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(0, realPointSample3.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess2.bck(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-657.9125662769);
      doubleArray0[2] = (-657.9125662769);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier1, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-657.9125662769), (-657.9125662769), 1.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-3041));
      assertNotNull(integer0);
      assertEquals((-3041), (int)integer0);
      
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-657.9125662769), (-657.9125662769), 1.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 1L;
      longArray0[2] = (-3827L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier2, longArray0);
      assertNotNull(pointSample0);
      assertEquals(5, longArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertArrayEquals(new long[] {0L, 1L, (-3827L), 0L, 0L}, longArray0);
      
      biConvertedRealRandomAccess0.setPosition((Localizable) pointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-657.9125662769), (-657.9125662769), 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 1L, (-3827L), 0L, 0L}, longArray0);
      
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(biConvertedRealRandomAccess0, realPointSample0, (BiConverter<? super Integer, ? super Object, ? super Integer>) null, supplier3);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-657.9125662769), (-657.9125662769), 1.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.setPosition(0, (-2454));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2454 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      assertNotNull(realPointSample0);
      assertEquals(0, realPointSample0.numDimensions());
      
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample1, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      int int0 = biConvertedRealRandomAccess1.numDimensions();
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(0, int0);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.setPosition((-1849), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      assertNotNull(pointSample0);
      assertEquals(1, longArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertArrayEquals(new long[] {1L}, longArray0);
      
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>>(supplier0, pointSample0);
      assertNotNull(realPointSample0);
      assertEquals(1, longArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new long[] {1L}, longArray0);
      
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Integer>, BiConvertedRealRandomAccess<Integer, Object, Object>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Integer>, BiConvertedRealRandomAccess<Integer, Object, Object>, Integer>(realPointSample0, (RealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Object>>) null, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, longArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new long[] {1L}, longArray0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(1830, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[2];
      BiConverter<Integer, Object, Object> biConverter0 = null;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      RealPointSample<Object> realPointSample1 = RealPointSample.wrap(object0, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample2 = new RealPointSample<Object>(supplier0, 0);
      assertNotNull(realPointSample2);
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertEquals(0, realPointSample2.numDimensions());
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Object>(realPointSample1, realPointSample2, biConverter1, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, doubleArray0.length);
      assertFalse(realPointSample1.equals((Object)realPointSample2));
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertEquals(3, realPointSample1.numDimensions());
      assertEquals(0, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(3, doubleArray0.length);
      assertFalse(realPointSample1.equals((Object)realPointSample2));
      assertFalse(realPointSample2.equals((Object)realPointSample1));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(3, realPointSample1.numDimensions());
      assertEquals(0, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.setPosition(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>((RealRandomAccess<Object>) null, (RealRandomAccess<Object>) null, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = 1316.620811;
      doubleArray0[5] = (-657.9125662769);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 1316.620811, (-657.9125662769), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[0] = (-3827L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-842L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      assertNotNull(pointSample0);
      assertEquals(4, longArray0.length);
      assertEquals(4, pointSample0.numDimensions());
      assertArrayEquals(new long[] {(-3827L), 1L, 0L, (-842L)}, longArray0);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier2, 40);
      assertNotNull(realPointSample1);
      assertEquals(40, realPointSample1.numDimensions());
      
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample1, realPointSample0, (BiConverter<? super Integer, ? super Object, ? super Integer>) null, supplier3);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(9, doubleArray0.length);
      assertEquals(40, realPointSample1.numDimensions());
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 0.0, 1316.620811, (-657.9125662769), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (-842L);
      floatArray0[2] = 0.0F;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1754.283956);
      doubleArray0[2] = (-1961.2667241239008);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1221.0);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1754.283956), (-1961.2667241239008), 0.0, (-1221.0)}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1754.283956), (-1961.2667241239008), 0.0, (-1221.0)}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[0] = (-40L);
      longArray0[1] = 0L;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier2, longArray0);
      assertNotNull(pointSample0);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertArrayEquals(new long[] {(-40L), 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier1, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample1, realPointSample0, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(0, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Supplier<Object> supplier3 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier3, longArray0);
      assertNotNull(pointSample0);
      assertEquals(0, longArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertArrayEquals(new long[] {}, longArray0);
      
      biConvertedRealRandomAccess1.setPosition((Localizable) pointSample0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, longArray0.length);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(0, realPointSample0.numDimensions());
      assertEquals(0, realPointSample1.numDimensions());
      assertEquals(0, pointSample0.numDimensions());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1347.9455829598023;
      doubleArray0[4] = 1316.620811;
      doubleArray0[5] = (-657.9125662769);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1347.9455829598023, 1316.620811, (-657.9125662769), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 1347.9455829598023, 1316.620811, (-657.9125662769), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[0] = (-3827L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-842L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier2, longArray0);
      assertNotNull(pointSample0);
      assertEquals(4, longArray0.length);
      assertEquals(4, pointSample0.numDimensions());
      assertArrayEquals(new long[] {(-3827L), 1L, 0L, (-842L)}, longArray0);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConverter<Integer, Integer, Object> biConverter1 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      Supplier<BiConverter<Object, Object, Integer>> supplier4 = (Supplier<BiConverter<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier5 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1221.0);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1221.0)}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter2 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter2, supplier3);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1221.0)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.setPosition((long) 2, 0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {2.0, (-1221.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer0, (Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.setPosition(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample1 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>>(supplier1, floatArray0);
      assertNotNull(realPointSample1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample2 = realPointSample1.copy();
      assertNotNull(realPointSample2);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample3 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample3);
      assertNotSame(realPointSample3, realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertTrue(realPointSample3.equals((Object)realPointSample0));
      assertEquals(5, realPointSample3.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float float0 = realPointSample0.getFloatPosition(0);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(1886);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1886, (int)integer1);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer1).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object>(biConvertedRealRandomAccess0, realPointSample2, biConverter1, supplier2);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object> biConvertedRealRandomAccess2 = biConvertedRealRandomAccess1.copy();
      assertNotNull(biConvertedRealRandomAccess2);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(realPointSample0, realPointSample3);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess2.fwd(0);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(realPointSample0, realPointSample3);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess2));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      Integer integer2 = realPointSample0.setPositionAndGet(doubleArray0);
      assertNotNull(integer2);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess3 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess3);
      assertNotSame(realPointSample0, realPointSample3);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess3);
      assertNotSame(biConvertedRealRandomAccess3, biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertFalse(biConvertedRealRandomAccess3.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = biConvertedRealRandomAccess3.setPositionAndGet(doubleArray0);
      assertNotNull(object0);
      assertNotSame(realPointSample0, realPointSample3);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess3);
      assertNotSame(biConvertedRealRandomAccess3, biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess3));
      assertFalse(biConvertedRealRandomAccess3.equals((Object)biConvertedRealRandomAccess0));
      assertFalse(object0.equals((Object)integer1));
      assertEquals(0, object0);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-25);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess3.move(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      double[] doubleArray0 = new double[6];
      int int0 = 1414;
      Integer integer1 = new Integer(1414);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(1414, (int)integer1);
      
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(6, doubleArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer2).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(6, doubleArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer1, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer2 = realPointSample0.get();
      assertNotNull(integer2);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer3).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = realPointSample0.numDimensions();
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, int0);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long long0 = (-1045L);
      BiConverter<Object, Object, Integer> biConverter1 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Object, Integer, Integer>(biConvertedRealRandomAccess0, realPointSample0, biConverter1, supplier1);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.move(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer1, integer2).when(supplier0).get();
      RealPoint realPoint0 = realPointSample0.positionAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, realPoint0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.move((-1), 1);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess1.setPosition((RealLocalizable) realPoint0);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, realPoint0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess1.setPosition((-1234.58F), 1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer3 = new Integer((-781));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-781), (int)integer3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      RealPoint realPoint0 = realPointSample0.positionAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, realPoint0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(6, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      int int1 = 1;
      biConvertedRealRandomAccess0.move((-1), 1);
      assertEquals(6, doubleArray0.length);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      int int2 = 1;
      biConvertedRealRandomAccess1.setPosition((-1234.58F), 1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Object> biConvertedRealRandomAccess2 = new BiConvertedRealRandomAccess<Integer, Object, Object>(realPointSample0, biConvertedRealRandomAccess0, biConverter1, supplier1);
      assertNotNull(biConvertedRealRandomAccess2);
      assertEquals(6, doubleArray0.length);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Object, Object> biConvertedRealRandomAccess3 = biConvertedRealRandomAccess2.copy();
      assertNotNull(biConvertedRealRandomAccess3);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess3);
      assertNotSame(biConvertedRealRandomAccess3, biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(6, doubleArray0.length);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(biConvertedRealRandomAccess3.equals((Object)biConvertedRealRandomAccess2));
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(6, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1.0), (-3.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      int int3 = (-241);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess3.bck((-241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -241 out of bounds for length 6
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer1, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer2 = new Integer(70);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(70, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      
      RealPoint realPoint0 = realPointSample0.positionAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertEquals(5, realPointSample0.numDimensions());
      assertEquals(5, realPoint0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-6509);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((-1553), (-6509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -6509 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1221.0);
      doubleArray0[6] = (-1754.283956);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConverter<Integer, Object, Integer>> supplier2 = (Supplier<BiConverter<Integer, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier3 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      Supplier<Integer> supplier4 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier4).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample1, realPointSample1, biConverter0, supplier4);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      Object object0 = realPointSample0.setPositionAndGet(doubleArray0);
      assertNull(object0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      RealRandomAccess<Integer> realRandomAccess0 = biConvertedRealRandomAccess0.sourceB;
      assertNotNull(realRandomAccess0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>>(realPointSample0, realRandomAccess0, biConverter1, supplier3);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, realPointSample0.numDimensions());
      assertEquals(8, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1221.0), 0.0, 0.0, (-1754.283956), 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = 0L;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3812.3231970801035);
      doubleArray0[1] = (-3812.3231970801035);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-3812.3231970801035);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrap((Object) biConverter0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-3812.3231970801035), (-3812.3231970801035), 1.0, (-3812.3231970801035), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Object>> realPointSample1 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-3812.3231970801035), (-3812.3231970801035), 1.0, (-3812.3231970801035), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample2 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {(-3812.3231970801035), (-3812.3231970801035), 1.0, (-3812.3231970801035), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter2 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object>(realPointSample0, realPointSample1, biConverter1, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-3812.3231970801035), (-3812.3231970801035), 1.0, (-3812.3231970801035), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter3 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier3 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample2, biConvertedRealRandomAccess0, biConverter2, supplier3);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertEquals(7, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {(-3812.3231970801035), (-3812.3231970801035), 1.0, (-3812.3231970801035), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-1348L);
      longArray0[2] = 1325L;
      longArray0[3] = 732L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      biConvertedRealRandomAccess1.setPosition(longArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, longArray0.length);
      assertEquals(7, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertEquals(7, realPointSample2.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1348.0), 1325.0, 732.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, (-1348L), 1325L, 732L, 0L, 0L, 0L}, longArray0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Supplier<Integer> supplier4 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier4).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object> biConvertedRealRandomAccess2 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object>(realPointSample0, realPointSample1, biConverter3, supplier4);
      assertNotNull(biConvertedRealRandomAccess2);
      assertEquals(7, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(7, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, (-1348.0), 1325.0, 732.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess2.setPosition(0L, (-2145));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2145 out of bounds for length 7
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[23];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      biConvertedRealRandomAccess0.setPosition(intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(23, intArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer1 = realPointSample0.get();
      assertNotNull(integer1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, (int)integer1);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-1110);
      Integer integer2 = new Integer((-1110));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1110), (int)integer2);
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer2).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(0.0F, (-1110));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1110 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1377.7885251975576);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1377.7885251975576)}, doubleArray0, 0.01);
      
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>((Supplier<Integer>) null, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-1377.7885251975576)}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>>(realPointSample0, realPointSample1, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(1, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-1377.7885251975576)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.move(16.49, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(1, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-1361.2985251975576)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>((Supplier<Object>) null, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = realPointSample0.positionAsDoubleArray();
      assertNotNull(doubleArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = realPointSample1.setPositionAndGet(doubleArray0);
      assertNull(integer0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Integer>(realPointSample0, realPointSample1, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess0.move((-2760L), 0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess0.move(357.4612064, 0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess0.move(0.0F, 0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-573.8F);
      floatArray0[2] = 1.0F;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Object>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Object>>(supplier0, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-573.8F), 1.0F}, floatArray0, 0.01F);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, 1019);
      assertNotNull(realPointSample1);
      assertEquals(1019, realPointSample1.numDimensions());
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(1019, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-573.8F), 1.0F}, floatArray0, 0.01F);
      
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Object>, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(3, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(1019, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-573.8F), 1.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess1.setPosition((double) (-573.8F), 0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(3, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(1019, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-573.8F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-160.0F);
      RealPoint realPoint0 = new RealPoint(floatArray0);
      assertNotNull(realPoint0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, realPoint0.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, realPoint0);
      assertNotNull(realPointSample0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-160.0F);
      doubleArray0[1] = (double) (-160.0F);
      doubleArray0[2] = (double) (-160.0F);
      doubleArray0[3] = (double) (-160.0F);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (double) (-160.0F);
      doubleArray0[6] = (-1.0);
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertEquals(7, doubleArray0.length);
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-160.0), (-160.0), (-160.0), (-160.0), 1.7976931348623157E308, (-160.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(realPointSample0.equals((Object)realPointSample1));
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {(-160.0), (-160.0), (-160.0), (-160.0), 1.7976931348623157E308, (-160.0), (-1.0)}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.bck(0);
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(realPointSample0.equals((Object)realPointSample1));
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {(-161.0), (-160.0), (-160.0), (-160.0), 1.7976931348623157E308, (-160.0), (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1193L);
      longArray0[2] = (-1193L);
      longArray0[3] = 1L;
      longArray0[4] = (-1244L);
      longArray0[5] = (-1193L);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-320.98013F);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier1, floatArray0);
      assertNotNull(realPointSample0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      assertNotNull(realPointSample1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConverter<Object, Integer, Object>> supplier2 = (Supplier<BiConverter<Object, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier3 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample1, realPointSample1, biConverter0, supplier3);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      assertNotNull(biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
      assertEquals(3, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess0));
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3162;
      longArray0[1] = (long) 3162;
      longArray0[2] = (long) 3162;
      longArray0[3] = (long) 3162;
      longArray0[4] = (long) 3162;
      biConvertedRealRandomAccess0.move(longArray0);
      assertNotSame(biConvertedRealRandomAccess0, biConvertedRealRandomAccess1);
      assertEquals(3, floatArray0.length);
      assertEquals(5, longArray0.length);
      assertFalse(biConvertedRealRandomAccess0.equals((Object)biConvertedRealRandomAccess1));
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {3162L, 3162L, 3162L, 3162L, 3162L}, longArray0);
      
      Supplier<BiConvertedRealRandomAccess<Object, Integer, Integer>> supplier4 = (Supplier<BiConvertedRealRandomAccess<Object, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Integer>> realPointSample2 = new RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Integer>>(supplier4, floatArray0);
      assertNotNull(realPointSample2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample2.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Integer>> realPointSample3 = realPointSample2.copy();
      assertNotNull(realPointSample3);
      assertNotSame(realPointSample2, realPointSample3);
      assertNotSame(realPointSample3, realPointSample2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample2.numDimensions());
      assertEquals(3, realPointSample3.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      Supplier<Integer> supplier5 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier5).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Integer, Integer>, Integer> biConvertedRealRandomAccess2 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Integer, Integer>, Integer>(realPointSample1, realPointSample3, (BiConverter<? super Integer, ? super BiConvertedRealRandomAccess<Object, Integer, Integer>, ? super Integer>) null, supplier5);
      assertNotNull(biConvertedRealRandomAccess2);
      assertEquals(3, floatArray0.length);
      assertEquals(3, realPointSample2.numDimensions());
      assertEquals(3, realPointSample3.numDimensions());
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess2.move(longArray0);
      assertNotSame(realPointSample2, realPointSample3);
      assertNotSame(realPointSample3, realPointSample2);
      assertEquals(3, floatArray0.length);
      assertEquals(5, longArray0.length);
      assertFalse(realPointSample2.equals((Object)realPointSample3));
      assertFalse(realPointSample3.equals((Object)realPointSample2));
      assertEquals(3, realPointSample2.numDimensions());
      assertEquals(3, realPointSample3.numDimensions());
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-320.98013F)}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {3162L, 3162L, 3162L, 3162L, 3162L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.setPosition(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample1 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>>(supplier1, floatArray0);
      assertNotNull(realPointSample1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample2 = realPointSample1.copy();
      assertNotNull(realPointSample2);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample3 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample3);
      assertNotSame(realPointSample3, realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertTrue(realPointSample3.equals((Object)realPointSample0));
      assertEquals(5, realPointSample3.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float float0 = realPointSample0.getFloatPosition(0);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object>(biConvertedRealRandomAccess0, realPointSample2, biConverter1, supplier2);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Integer>, Object> biConvertedRealRandomAccess2 = biConvertedRealRandomAccess1.copy();
      assertNotNull(biConvertedRealRandomAccess2);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      biConvertedRealRandomAccess2.fwd(0);
      assertNotSame(realPointSample1, realPointSample2);
      assertNotSame(realPointSample2, realPointSample1);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, floatArray0.length);
      assertFalse(biConvertedRealRandomAccess1.equals((Object)biConvertedRealRandomAccess2));
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(2, realPointSample1.numDimensions());
      assertEquals(2, realPointSample2.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-25);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      biConvertedRealRandomAccess0.move(intArray0);
      assertNotSame(realPointSample0, realPointSample3);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertTrue(realPointSample0.equals((Object)realPointSample3));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, (-50.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, (-25), 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1221.0);
      doubleArray0[1] = (-1754.283956);
      doubleArray0[2] = (-1961.2667241239008);
      doubleArray0[3] = (-1221.0);
      doubleArray0[4] = (-1221.0);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1221.0), (-1754.283956), (-1961.2667241239008), (-1221.0), (-1221.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1022);
      assertNotNull(integer0);
      assertEquals(1022, (int)integer0);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1221.0), (-1754.283956), (-1961.2667241239008), (-1221.0), (-1221.0)}, doubleArray0, 0.01);
      
      long long0 = 0L;
      long long1 = (-40L);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[0] = 1022;
      intArray0[1] = 1022;
      intArray0[2] = 1022;
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1022);
      assertNotNull(pointSampleList0);
      assertEquals(1022, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      Point point0 = pointSampleList0.minAsPoint();
      assertNotNull(point0);
      assertEquals(1022, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1022, point0.numDimensions());
      
      biConvertedRealRandomAccess0.setPosition((Localizable) point0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1022, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1022, point0.numDimensions());
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {(-1221.0), (-1754.283956), (-1961.2667241239008), (-1221.0), (-1221.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-160.0F);
      RealPoint realPoint0 = new RealPoint(floatArray0);
      assertNotNull(realPoint0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, realPoint0.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, realPoint0);
      assertNotNull(realPointSample0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-160.0F);
      doubleArray0[1] = (double) (-160.0F);
      doubleArray0[2] = (double) (-160.0F);
      doubleArray0[3] = (double) (-160.0F);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (double) (-160.0F);
      doubleArray0[6] = (-1.0);
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      assertNotNull(realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      assertEquals(7, doubleArray0.length);
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {(-160.0), (-160.0), (-160.0), (-160.0), 1.7976931348623157E308, (-160.0), (-1.0)}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-492));
      assertNotNull(integer0);
      assertEquals((-492), (int)integer0);
      
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(realPointSample0.equals((Object)realPointSample1));
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(7, realPointSample1.numDimensions());
      assertArrayEquals(new float[] {(-160.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {(-160.0), (-160.0), (-160.0), (-160.0), 1.7976931348623157E308, (-160.0), (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[2] = 1L;
      int[] intArray0 = new int[1];
      intArray0[0] = 761;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer1, (Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      biConvertedRealRandomAccess0.setPosition(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Integer, Object, Object> biConverter1 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample0, biConvertedRealRandomAccess0, biConverter1, supplier1);
      assertNotNull(biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess2 = biConvertedRealRandomAccess1.copy();
      assertNotNull(biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess2);
      assertNotSame(biConvertedRealRandomAccess2, biConvertedRealRandomAccess1);
      assertEquals(5, doubleArray0.length);
      assertFalse(biConvertedRealRandomAccess2.equals((Object)biConvertedRealRandomAccess1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(5, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 1674;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess2.setPosition((float) 0, 1674);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1674 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2676.695646017);
      doubleArray0[2] = 0.0;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertArrayEquals(new double[] {0.0, (-2676.695646017), 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1167);
      assertNotNull(integer0);
      assertEquals(1167, (int)integer0);
      
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrap(integer0, doubleArray0);
      assertNotNull(realPointSample1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, (-2676.695646017), 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier1);
      assertNotNull(biConvertedRealRandomAccess0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, realPointSample1.numDimensions());
      assertArrayEquals(new double[] {0.0, (-2676.695646017), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(647.58F, 1167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1167 out of bounds for length 3
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1776.772132);
      doubleArray0[1] = 165.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.7976931348623157E308);
      RealPointSample<BiConvertedRealRandomAccess<Object, Object, Integer>> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2075.4392F;
      floatArray0[5] = (-1139.49F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 442.194F;
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, floatArray0);
      RealPointSample<Integer> realPointSample2 = realPointSample1.copy();
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Object, Object, Integer>, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Object, Object, Integer>, Integer, Object>(realPointSample0, realPointSample2, biConverter0, supplier2);
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier3 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = (-2008L);
      longArray0[1] = (-384L);
      longArray0[2] = 0L;
      longArray0[3] = 9223372036854775807L;
      longArray0[4] = (-608L);
      longArray0[5] = 0L;
      PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>>(supplier3, longArray0);
      PointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> pointSample1 = pointSample0.copy();
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((Localizable) pointSample1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1397.4587118231234);
      doubleArray0[2] = 3802.883475267334;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1.7976931348623157E308;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      float float0 = 1.0F;
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Cursor<Object> cursor0 = pointSampleList_PointSampleListCursor0.copyCursor();
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((Localizable) cursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3812.3231970801035);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2752.445378);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrap(object0, doubleArray0);
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Object>> realPointSample1 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Integer, Object, Object>, Object>(realPointSample0, realPointSample1, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(0L, (-2289));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2289 out of bounds for length 6
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[] floatArray0 = new float[1];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(295L, 795);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 795 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      Integer integer1 = new Integer(0);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer1, doubleArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      biConvertedRealRandomAccess0.setPosition(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      biConvertedRealRandomAccess0.setPosition(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess1 = new BiConvertedRealRandomAccess<Object, Object, Integer>(biConvertedRealRandomAccess0, biConvertedRealRandomAccess0, biConverter1, supplier1);
      biConvertedRealRandomAccess1.move((long) 0, 0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 487.2061956286;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, 2826);
      RealPointSample<Integer> realPointSample2 = realPointSample1.copy();
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Object>(realPointSample0, realPointSample2, biConverter0, supplier2);
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-160.0F);
      RealPoint realPoint0 = new RealPoint(floatArray0);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, realPoint0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-160.0F);
      doubleArray0[1] = (double) (-160.0F);
      doubleArray0[2] = (double) (-160.0F);
      doubleArray0[3] = (double) (-160.0F);
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = (double) (-160.0F);
      doubleArray0[6] = (-1.0);
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1193L);
      longArray0[2] = 1L;
      longArray0[3] = (-1244L);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, realPoint0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      biConvertedRealRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(743);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Integer, Integer>>((Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) null, point0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Integer, Integer>, BiConvertedRealRandomAccess<Integer, Integer, Integer>, Integer>(realPointSample0, realPointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.bck(743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 743 out of bounds for length 743
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 122.1805;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-294.773758);
      doubleArray0[3] = (-1022.05099);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 149.3872344;
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Object>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Object>>(supplier0, doubleArray0);
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrap((Integer) null, doubleArray0);
      RealPointSample<Integer> realPointSample2 = realPointSample1.copy();
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Object>, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Integer, Object, Object>, Integer, Integer>(realPointSample0, realPointSample2, biConverter0, supplier1);
      int int0 = 826;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.bck(826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 826 out of bounds for length 7
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 887.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 629.4636F;
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      RealPointSample<Integer> realPointSample1 = realPointSample0.copy();
      Supplier<BiConvertedRealRandomAccess<Object, Integer, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Object, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3213.7166602782;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.0F);
      RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Integer>> realPointSample2 = new RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Integer>>(supplier1, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Integer, Integer>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Object, Integer, Integer>, Integer>(realPointSample1, realPointSample2, biConverter0, supplier2);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      float float0 = (-1.0F);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, floatArray0);
      double[] doubleArray0 = realPointSample0.positionAsDoubleArray();
      Integer integer0 = new Integer((-940));
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier1, realPointSample0);
      realPointSample1.setPositionAndGet(doubleArray0);
      int int1 = (-9);
      Integer integer1 = new Integer((-3170));
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Integer>(realPointSample0, realPointSample1, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(1113L, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-760.7336F);
      float float0 = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2596.885F);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>((Supplier<Object>) null, floatArray0);
      double[] doubleArray0 = realPointSample0.positionAsDoubleArray();
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      realPointSample1.setPositionAndGet(doubleArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Integer>(realPointSample0, realPointSample1, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((-2760L), 1752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1752 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Object>((RealRandomAccess<Object>) null, (RealRandomAccess<Object>) null, biConverter0, supplier0);
      int int0 = (-1615);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.bck((-1615));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Object, Integer, Object>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Object, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Object>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Object, Integer, Object>>(supplier0, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Object, Integer, Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, BiConvertedRealRandomAccess<Object, Integer, Object>, Object>((RealRandomAccess<Object>) null, realPointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.bck((-702));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = new Integer((-1957));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1957);
      doubleArray0[2] = (double) (-1957);
      doubleArray0[3] = (double) (-1957);
      doubleArray0[4] = (double) (-1957);
      doubleArray0[5] = (double) (-1957);
      doubleArray0[6] = (double) (-1957);
      doubleArray0[7] = (double) (-1957);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample0, realPointSample0, biConverter0, supplier0);
      Integer integer1 = biConvertedRealRandomAccess0.get();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Object>(realPointSample0, realPointSample0, biConverter0, supplier1);
      BiConvertedRealRandomAccess<Object, Object, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      long[] longArray0 = new long[8];
      longArray0[0] = 405L;
      longArray0[1] = 54L;
      longArray0[2] = (-755L);
      longArray0[3] = 2051L;
      longArray0[4] = 736L;
      longArray0[5] = 1652L;
      longArray0[6] = (-3020L);
      longArray0[7] = 0L;
      Point point0 = Point.wrap(longArray0);
      biConvertedRealRandomAccess1.move((RealLocalizable) point0);
      assertNotSame(biConvertedRealRandomAccess1, biConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier2, doubleArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier3 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier3).get();
      BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>>(realPointSample0, realPointSample1, biConverter0, supplier3);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2800.4F);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1490.682559061082);
      doubleArray0[2] = (-406.72062189);
      doubleArray0[3] = 3240.4;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3570.141144856761);
      doubleArray0[6] = 1998.4;
      doubleArray0[7] = (-771.69032065);
      doubleArray0[8] = 2.0;
      RealPoint realPoint0 = RealPoint.wrap(doubleArray0);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, realPoint0);
      Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>> supplier1 = (Supplier<BiConvertedRealRandomAccess<Integer, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>> realPointSample1 = new RealPointSample<BiConvertedRealRandomAccess<Integer, Object, Integer>>(supplier1, 0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Object, Integer>, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Object, Integer>, Integer>(realPointSample0, realPointSample1, biConverter0, supplier2);
      BiConvertedRealRandomAccess<Integer, BiConvertedRealRandomAccess<Integer, Object, Integer>, Integer> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.fwd(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1970.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3052.0);
      doubleArray0[5] = 1114.206192809869;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier((Supplier<Object>) null, doubleArray0);
      RealPointSample<Object> realPointSample1 = realPointSample0.copy();
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>((RealRandomAccess<Integer>) null, realPointSample1, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[] floatArray0 = new float[1];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, BiConvertedRealRandomAccess<Integer, Integer, Integer>>((RealRandomAccess<Object>) null, realPointSample0, (BiConverter<? super Object, ? super Integer, ? super BiConvertedRealRandomAccess<Integer, Integer, Integer>>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[] floatArray0 = new float[5];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample1, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>> supplier0 = (Supplier<BiConvertedRealRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1537.1996127908;
      RealPointSample<BiConvertedRealRandomAccess<Object, Object, Integer>> realPointSample0 = new RealPointSample<BiConvertedRealRandomAccess<Object, Object, Integer>>(supplier0, doubleArray0);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      RealPointSample<Object> realPointSample1 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Object, Object, Integer>, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BiConvertedRealRandomAccess<Object, Object, Integer>, Object, Object>(realPointSample0, realPointSample1, biConverter0, supplier2);
      biConvertedRealRandomAccess0.numDimensions();
      biConvertedRealRandomAccess0.setPositionAndGet((RealLocalizable) realPointSample0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer((-1));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, (Object) null).when(supplier0).get();
      RealPoint realPoint0 = realPointSample0.positionAsRealPoint();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier0);
      biConvertedRealRandomAccess0.move((-1), 1);
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      biConvertedRealRandomAccess1.setPosition((RealLocalizable) realPoint0);
      biConvertedRealRandomAccess1.setPosition((-1234.58F), 1);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer((-781));
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-225.54783);
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.fwd((-2235));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2235 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-320.98013F);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier1, floatArray0);
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, realPointSample0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample1, realPointSample1, biConverter0, supplier2);
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess1 = biConvertedRealRandomAccess0.copy();
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess1.fwd(3162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3162 out of bounds for length 3
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer((-2544));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2544);
      doubleArray0[1] = (double) (-2544);
      doubleArray0[2] = (double) (-2544);
      doubleArray0[3] = (double) (-2544);
      doubleArray0[6] = (-4999.094088771352);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample1 = new RealPointSample<Object>(supplier0, realPointSample0);
      RealPointSample<Object> realPointSample2 = realPointSample1.copy();
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample0, realPointSample2, biConverter0, supplier1);
      biConvertedRealRandomAccess0.move(doubleArray0);
      assertArrayEquals(new double[] {(-5088.0), (-5088.0), (-5088.0), (-5088.0), 0.0, 0.0, (-9998.188177542705), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer((-2550));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2550);
      doubleArray0[1] = (double) (-2550);
      doubleArray0[2] = (double) (-2550);
      doubleArray0[3] = (double) (-2550);
      doubleArray0[4] = (double) (-2550);
      doubleArray0[5] = (double) (-2550);
      doubleArray0[6] = (-4999.094088771352);
      doubleArray0[7] = (double) (-2550);
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample1 = new RealPointSample<Object>(supplier0, realPointSample0);
      RealPointSample<Object> realPointSample2 = realPointSample1.copy();
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Integer>(realPointSample0, realPointSample2, biConverter0, supplier1);
      biConvertedRealRandomAccess0.move(doubleArray0);
      assertArrayEquals(new double[] {(-5100.0), (-5100.0), (-5100.0), (-5100.0), (-5100.0), (-5100.0), (-9998.188177542705), (-5100.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1045.051);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, doubleArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, supplier1);
      biConvertedRealRandomAccess0.copy();
      PointSampleList<Integer> pointSampleList0 = null;
      try {
        pointSampleList0 = new PointSampleList<Integer>((-381));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -381
         //
         verifyException("net.imglib2.PointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2247.45516521678;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2994.58);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = 0.0;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>((Supplier<Object>) null, doubleArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      RealPointSample<Integer> realPointSample1 = new RealPointSample<Integer>(supplier0, 0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess0 = null;
      try {
        biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Object>(realPointSample0, realPointSample1, biConverter0, (Supplier<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, biConverter0, supplier0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = null;
      try {
        biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, (Supplier<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 664.9852F;
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Integer, Integer, Object> biConvertedRealRandomAccess0 = null;
      try {
        biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Object>(realPointSample0, realPointSample0, biConverter0, (Supplier<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }
}
