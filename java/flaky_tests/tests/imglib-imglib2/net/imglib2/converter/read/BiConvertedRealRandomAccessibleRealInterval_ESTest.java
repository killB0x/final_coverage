/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:46:55 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.RealInterval;
import net.imglib2.RealRandomAccessibleRealInterval;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.type.logic.BitType;
import net.imglib2.view.composite.AbstractComposite;
import net.imglib2.view.composite.Composite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRealRandomAccessibleRealInterval_ESTest extends BiConvertedRealRandomAccessibleRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessibleRealInterval<Object, Object, Integer> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Object, Object, Integer>((RealRandomAccessibleRealInterval<Object>) null, (RealRandomAccessibleRealInterval<Object>) null, biConverter0, supplier0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccessibleRealInterval<Object, Integer, Integer> biConvertedRealRandomAccessibleRealInterval1 = new BiConvertedRealRandomAccessibleRealInterval<Object, Integer, Integer>((RealRandomAccessibleRealInterval<Object>) null, biConvertedRealRandomAccessibleRealInterval0, (BiConverter<? super Object, ? super Integer, ? super Integer>) null, supplier1);
      Integer integer0 = biConvertedRealRandomAccessibleRealInterval1.getDestinationType();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      AbstractComposite<Integer> abstractComposite0 = new AbstractComposite<Integer>(pointSample0);
      Supplier<Composite<Integer>> supplier1 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(abstractComposite0).when(supplier1).get();
      BiConvertedRealRandomAccessibleRealInterval<Object, Object, Composite<Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Object, Object, Composite<Integer>>((RealRandomAccessibleRealInterval<Object>) null, (RealRandomAccessibleRealInterval<Object>) null, biConverter0, supplier1);
      Composite<Integer> composite0 = biConvertedRealRandomAccessibleRealInterval0.getDestinationType();
      assertNotNull(composite0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BiConverter<BitType, BitType, Integer> biConverter0 = (BiConverter<BitType, BitType, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      BiConvertedRealRandomAccessibleRealInterval<BitType, BitType, Integer> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<BitType, BitType, Integer>((RealRandomAccessibleRealInterval<BitType>) null, (RealRandomAccessibleRealInterval<BitType>) null, biConverter0, supplier0);
      Supplier<? extends Integer> supplier1 = biConvertedRealRandomAccessibleRealInterval0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BiConvertedRealRandomAccessibleRealInterval<Integer, BitType, Integer> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, BitType, Integer>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<BitType>) null, (BiConverter<? super Integer, ? super BitType, ? super Integer>) null, (Supplier<? extends Integer>) null);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biConverter0).toString();
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object> biConvertedRealRandomAccessibleRealInterval1 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>((RealRandomAccessibleRealInterval<Integer>) null, biConvertedRealRandomAccessibleRealInterval0, biConverter0, (Supplier<?>) null);
      BiConverter<? super Integer, ? super Integer, ? super Object> biConverter1 = biConvertedRealRandomAccessibleRealInterval1.getConverter();
      assertNotNull(biConverter1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BiConverter<Integer, Integer, BitType> biConverter0 = (BiConverter<Integer, Integer, BitType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, BitType> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, BitType>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, biConverter0, (Supplier<? extends BitType>) null);
      Supplier<? extends BitType> supplier0 = biConvertedRealRandomAccessibleRealInterval0.getDestinationSupplier();
      assertNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null, (Supplier<? extends ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConverter0 = biConvertedRealRandomAccessibleRealInterval0.getConverter();
      assertNull(biConverter0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, biConverter0, (Supplier<? extends ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      Supplier<BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>> supplier0 = biConvertedRealRandomAccessibleRealInterval0.getConverterSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null, (Supplier<? extends ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessibleRealInterval0.getDestinationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null, (Supplier<? extends ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessibleRealInterval0.realRandomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRealRandomAccessibleRealInterval0 = new BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((RealRandomAccessibleRealInterval<Integer>) null, (RealRandomAccessibleRealInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null, (Supplier<? extends ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessibleRealInterval0.realRandomAccess((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval", e);
      }
  }
}
