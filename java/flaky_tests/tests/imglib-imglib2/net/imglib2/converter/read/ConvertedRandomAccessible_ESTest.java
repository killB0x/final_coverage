/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:06:34 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.ComplexPowerGLogFloatConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedRandomAccess;
import net.imglib2.converter.read.ConvertedRandomAccessible;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleView;
import net.imglib2.view.composite.AbstractComposite;
import net.imglib2.view.composite.GenericComposite;
import net.imglib2.view.composite.NumericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedRandomAccessible_ESTest extends ConvertedRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealRandomAccessible<Unsigned2BitType> realRandomAccessible0 = (RealRandomAccessible<Unsigned2BitType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess(any(net.imglib2.RealInterval.class));
      RandomAccessibleOnRealRandomAccessible<Unsigned2BitType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<Unsigned2BitType>(realRandomAccessible0);
      Converter<Unsigned2BitType, AbstractComposite<ChannelARGBConverter>> converter0 = (Converter<Unsigned2BitType, AbstractComposite<ChannelARGBConverter>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractComposite<ChannelARGBConverter>> supplier0 = (Supplier<AbstractComposite<ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccessible<Unsigned2BitType, AbstractComposite<ChannelARGBConverter>> convertedRandomAccessible0 = new ConvertedRandomAccessible<Unsigned2BitType, AbstractComposite<ChannelARGBConverter>>(randomAccessibleOnRealRandomAccessible0, converter0, supplier0);
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      ConvertedRandomAccess<Unsigned2BitType, AbstractComposite<ChannelARGBConverter>> convertedRandomAccess0 = convertedRandomAccessible0.randomAccess((Interval) finalInterval0);
      assertNotNull(convertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealRandomAccessible<GenericComposite<LongType>> realRandomAccessible0 = (RealRandomAccessible<GenericComposite<LongType>>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<GenericComposite<LongType>> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<GenericComposite<LongType>>(realRandomAccessible0);
      Converter<Object, ChannelARGBConverter> converter0 = (Converter<Object, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccessible<GenericComposite<LongType>, ChannelARGBConverter> convertedRandomAccessible0 = new ConvertedRandomAccessible<GenericComposite<LongType>, ChannelARGBConverter>(randomAccessibleOnRealRandomAccessible0, converter0, supplier0);
      ConvertedRandomAccess<GenericComposite<LongType>, ChannelARGBConverter> convertedRandomAccess0 = convertedRandomAccessible0.randomAccess();
      assertNotNull(convertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>> converter0 = (Converter<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<GenericComposite<UnsignedVariableBitLengthType>> supplier0 = (Supplier<GenericComposite<UnsignedVariableBitLengthType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRandomAccessible<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>>((RandomAccessible<ChannelARGBConverter>) null, converter0, supplier0);
      GenericComposite<UnsignedVariableBitLengthType> genericComposite0 = convertedRandomAccessible0.getDestinationType();
      assertNull(genericComposite0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RealRandomAccessible<ChannelARGBConverter> realRandomAccessible1 = (RealRandomAccessible<ChannelARGBConverter>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible1).numDimensions();
      RandomAccessibleOnRealRandomAccessible<ChannelARGBConverter> randomAccessibleOnRealRandomAccessible1 = new RandomAccessibleOnRealRandomAccessible<ChannelARGBConverter>(realRandomAccessible1);
      Converter<ChannelARGBConverter, Object> converter1 = (Converter<ChannelARGBConverter, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType>(randomAccessibleOnRealRandomAccessible1, converter1, supplier0);
      Supplier<ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType>> supplier1 = (Supplier<ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRandomAccessible<ARGBDoubleType, ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType>> convertedRandomAccessible1 = new ConvertedRandomAccessible<ARGBDoubleType, ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType>>(randomAccessibleOnRealRandomAccessible0, converter0, supplier1);
      ConvertedRandomAccessible<ChannelARGBConverter, ARGBDoubleType> convertedRandomAccessible2 = convertedRandomAccessible1.getDestinationType();
      assertSame(convertedRandomAccessible2, convertedRandomAccessible0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter<ChannelARGBConverter, Unsigned2BitType> converter0 = (Converter<ChannelARGBConverter, Unsigned2BitType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Unsigned2BitType> supplier0 = (Supplier<Unsigned2BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      ConvertedRandomAccessible<ChannelARGBConverter, Unsigned2BitType> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, Unsigned2BitType>((RandomAccessible<ChannelARGBConverter>) null, converter0, supplier0);
      Supplier<? extends Unsigned2BitType> supplier1 = convertedRandomAccessible0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>> converter0 = (Converter<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      Supplier<GenericComposite<UnsignedVariableBitLengthType>> supplier0 = (Supplier<GenericComposite<UnsignedVariableBitLengthType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, GenericComposite<UnsignedVariableBitLengthType>>((RandomAccessible<ChannelARGBConverter>) null, converter0, supplier0);
      Converter<? super ChannelARGBConverter, ? super GenericComposite<UnsignedVariableBitLengthType>> converter1 = convertedRandomAccessible0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      IntervalView<AbstractComposite<Object>> intervalView0 = new IntervalView<AbstractComposite<Object>>((RandomAccessible<AbstractComposite<Object>>) null, longArray0, longArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<AbstractComposite<Object>, ChannelARGBConverter> convertedRandomAccessible0 = new ConvertedRandomAccessible<AbstractComposite<Object>, ChannelARGBConverter>(intervalView0, converter0, supplier0);
      Supplier<Converter<? super AbstractComposite<Object>, ? super ChannelARGBConverter>> supplier1 = convertedRandomAccessible0.getConverterSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<Object, ComplexPowerGLogFloatConverter<Unsigned128BitType>> convertedRandomAccessible0 = new ConvertedRandomAccessible<Object, ComplexPowerGLogFloatConverter<Unsigned128BitType>>((RandomAccessible<Object>) null, converter0, (Supplier<ComplexPowerGLogFloatConverter<Unsigned128BitType>>) null);
      // Undeclared exception!
      try { 
        convertedRandomAccessible0.getDestinationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalView<NumericComposite<NativeBoolType>> intervalView0 = new IntervalView<NumericComposite<NativeBoolType>>((RandomAccessible<NumericComposite<NativeBoolType>>) null, longArray0, longArray0);
      SubsampleView<NumericComposite<NativeBoolType>> subsampleView0 = new SubsampleView<NumericComposite<NativeBoolType>>(intervalView0, longArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<NumericComposite<NativeBoolType>, ChannelARGBConverter> convertedRandomAccessible0 = new ConvertedRandomAccessible<NumericComposite<NativeBoolType>, ChannelARGBConverter>(subsampleView0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.IntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>> realRandomAccessible0 = (RealRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      RandomAccessibleOnRealRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>>(realRandomAccessible0);
      long[] longArray0 = new long[4];
      SubsampleView<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>> subsampleView0 = new SubsampleView<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>>(randomAccessibleOnRealRandomAccessible0, longArray0);
      Converter<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>, RandomAccessibleInterval<ChannelARGBConverter>> converter0 = (Converter<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>, RandomAccessibleInterval<ChannelARGBConverter>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>, RandomAccessibleInterval<ChannelARGBConverter>> convertedRandomAccessible0 = new ConvertedRandomAccessible<ComplexPowerGLogFloatConverter<VolatileUnsignedByteType>, RandomAccessibleInterval<ChannelARGBConverter>>(subsampleView0, converter0, (Supplier<RandomAccessibleInterval<ChannelARGBConverter>>) null);
      Supplier<? extends RandomAccessibleInterval<ChannelARGBConverter>> supplier0 = convertedRandomAccessible0.getDestinationSupplier();
      assertNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter<ChannelARGBConverter, NumericComposite<UnsignedIntType>> converter0 = (Converter<ChannelARGBConverter, NumericComposite<UnsignedIntType>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<ChannelARGBConverter, NumericComposite<UnsignedIntType>> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, NumericComposite<UnsignedIntType>>((RandomAccessible<ChannelARGBConverter>) null, converter0, (Supplier<NumericComposite<UnsignedIntType>>) null);
      // Undeclared exception!
      try { 
        convertedRandomAccessible0.randomAccess((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedRandomAccessible<ChannelARGBConverter, ChannelARGBConverter> convertedRandomAccessible0 = new ConvertedRandomAccessible<ChannelARGBConverter, ChannelARGBConverter>((RandomAccessible<ChannelARGBConverter>) null, (Converter<? super ChannelARGBConverter, ? super ChannelARGBConverter>) null, supplier0);
      Converter<? super ChannelARGBConverter, ? super ChannelARGBConverter> converter0 = convertedRandomAccessible0.getConverter();
      assertNull(converter0);
  }
}
