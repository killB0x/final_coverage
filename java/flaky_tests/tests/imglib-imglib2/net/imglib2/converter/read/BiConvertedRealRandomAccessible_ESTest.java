/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:18:34 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.FinalRealInterval;
import net.imglib2.RealInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRealRandomAccess;
import net.imglib2.converter.read.BiConvertedRealRandomAccessible;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.interpolation.Interpolant;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.position.FunctionRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRealRandomAccessible_ESTest extends BiConvertedRealRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, biConverter0, supplier0);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Object, Integer, Integer> biConvertedRealRandomAccessible1 = new BiConvertedRealRandomAccessible<Object, Integer, Integer>(biConvertedRealRandomAccessible0, (RealRandomAccessible<Integer>) null, biConverter1, supplier1);
      double[] doubleArray0 = new double[8];
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible1.realRandomAccess((RealInterval) finalRealInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2177);
      InterpolatorFactory<Integer, Integer> interpolatorFactory0 = (InterpolatorFactory<Integer, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess) null, (RealRandomAccess) null).when(interpolatorFactory0).create(anyInt() , any(net.imglib2.RealInterval.class));
      Interpolant<Integer, Integer> interpolant0 = new Interpolant<Integer, Integer>(integer0, interpolatorFactory0, (-1403));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccessible<Integer, Integer, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Integer>(interpolant0, interpolant0, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, supplier0);
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = biConvertedRealRandomAccessible0.realRandomAccess((RealInterval) finalInterval0);
      assertNotNull(biConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>(1585, biConsumer0, supplier0);
      Integer integer0 = new Integer(1585);
      InterpolatorFactory<List<Object>, Integer> interpolatorFactory0 = (InterpolatorFactory<List<Object>, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess) null).when(interpolatorFactory0).create(anyInt());
      Interpolant<List<Object>, Integer> interpolant0 = new Interpolant<List<Object>, Integer>(integer0, interpolatorFactory0, 1585);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, List<Object>, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, List<Object>, Integer>(functionRealRandomAccessible0, interpolant0, biConverter0, supplier1);
      BiConvertedRealRandomAccess<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, List<Object>, Integer> biConvertedRealRandomAccess0 = biConvertedRealRandomAccessible0.realRandomAccess();
      assertNotNull(biConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, biConverter0, supplier0);
      Object object0 = biConvertedRealRandomAccessible0.getDestinationType();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      BiConvertedRealRandomAccessible<Integer, Integer, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Integer>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, supplier0);
      Supplier<? extends Integer> supplier1 = biConvertedRealRandomAccessible0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, biConsumer0, supplier0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biConverter0).toString();
      Supplier<List<Integer>> supplier1 = (Supplier<List<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Object, Object, List<Integer>> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Object, Object, List<Integer>>(functionRealRandomAccessible0, functionRealRandomAccessible0, biConverter0, supplier1);
      BiConverter<? super Object, ? super Object, ? super List<Integer>> biConverter1 = biConvertedRealRandomAccessible0.getConverter();
      assertNotNull(biConverter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConvertedRealRandomAccessible<Integer, Integer, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Integer>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, (Supplier<? extends Integer>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible0.realRandomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, (Supplier<?>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible0.getDestinationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      Supplier<BiConverter<? super Integer, ? super Integer, ? super Object>> supplier1 = biConvertedRealRandomAccessible0.getConverterSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, biConverter0, (Supplier<?>) null);
      Supplier<?> supplier0 = biConvertedRealRandomAccessible0.getDestinationSupplier();
      assertNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, Integer> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Integer>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, supplier0);
      BiConverter<? super Integer, ? super Integer, ? super Integer> biConverter0 = biConvertedRealRandomAccessible0.getConverter();
      assertNull(biConverter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<Integer, Integer, Object> biConvertedRealRandomAccessible0 = new BiConvertedRealRandomAccessible<Integer, Integer, Object>((RealRandomAccessible<Integer>) null, (RealRandomAccessible<Integer>) null, biConverter0, (Supplier<?>) null);
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>((-1), biConsumer0, supplier0);
      BiConverter<Object, Object, Integer> biConverter1 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>, Object, Integer> biConvertedRealRandomAccessible1 = new BiConvertedRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>, Object, Integer>(functionRealRandomAccessible0, biConvertedRealRandomAccessible0, biConverter1, (Supplier<? extends Integer>) null);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccessible1.realRandomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }
}
