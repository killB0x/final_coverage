/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:11:08 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.ComplexPowerGLogFloatConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.TypeIdentity;
import net.imglib2.converter.read.ConvertedRealRandomAccess;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.view.composite.NumericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedRealRandomAccess_ESTest extends ConvertedRealRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Supplier<BoolType> supplier0 = (Supplier<BoolType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<BoolType> realPointSample0 = new RealPointSample<BoolType>(supplier0, 3647);
      Converter<BoolType, ChannelARGBConverter> converter0 = (Converter<BoolType, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<BoolType, ChannelARGBConverter> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<BoolType, ChannelARGBConverter>(realPointSample0, converter0, supplier1);
      ChannelARGBConverter channelARGBConverter0 = convertedRealRandomAccess0.get();
      assertNull(channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BoolType boolType0 = new BoolType(false);
      Supplier<BoolType> supplier0 = (Supplier<BoolType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(boolType0).when(supplier0).get();
      RealPointSample<BoolType> realPointSample0 = new RealPointSample<BoolType>(supplier0, 3647);
      Converter<BoolType, ChannelARGBConverter> converter0 = (Converter<BoolType, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.G;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(channelARGBConverter0).when(supplier1).get();
      ConvertedRealRandomAccess<BoolType, ChannelARGBConverter> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<BoolType, ChannelARGBConverter>(realPointSample0, converter0, supplier1);
      ChannelARGBConverter channelARGBConverter1 = convertedRealRandomAccess0.get();
      assertSame(channelARGBConverter1, channelARGBConverter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<NativeARGBDoubleType> realPointSample0 = new RealPointSample<NativeARGBDoubleType>(supplier0, 2631);
      TypeIdentity<NativeARGBDoubleType> typeIdentity0 = new TypeIdentity<NativeARGBDoubleType>();
      Supplier<NativeARGBDoubleType> supplier1 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<NativeARGBDoubleType, NativeARGBDoubleType> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<NativeARGBDoubleType, NativeARGBDoubleType>(realPointSample0, typeIdentity0, supplier1);
      ConvertedRealRandomAccess<NativeARGBDoubleType, NativeARGBDoubleType> convertedRealRandomAccess1 = convertedRealRandomAccess0.copy();
      assertFalse(convertedRealRandomAccess1.equals((Object)convertedRealRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Supplier<NumericComposite<ARGBDoubleType>> supplier0 = (Supplier<NumericComposite<ARGBDoubleType>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<NumericComposite<ARGBDoubleType>> realPointSample0 = new RealPointSample<NumericComposite<ARGBDoubleType>>(supplier0, 255);
      ConvertedRealRandomAccess<NumericComposite<ARGBDoubleType>, ChannelARGBConverter> convertedRealRandomAccess0 = null;
      try {
        convertedRealRandomAccess0 = new ConvertedRealRandomAccess<NumericComposite<ARGBDoubleType>, ChannelARGBConverter>(realPointSample0, (Converter<? super NumericComposite<ARGBDoubleType>, ? super ChannelARGBConverter>) null, (Supplier<? extends ChannelARGBConverter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ComplexPowerGLogFloatConverter<UnsignedLongType> complexPowerGLogFloatConverter0 = new ComplexPowerGLogFloatConverter<UnsignedLongType>();
      double[] doubleArray0 = new double[1];
      RealPointSample<ComplexPowerGLogFloatConverter<UnsignedLongType>> realPointSample0 = RealPointSample.wrap(complexPowerGLogFloatConverter0, doubleArray0);
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<ComplexPowerGLogFloatConverter<UnsignedLongType>, ChannelARGBConverter> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<ComplexPowerGLogFloatConverter<UnsignedLongType>, ChannelARGBConverter>(realPointSample0, (Converter<? super ComplexPowerGLogFloatConverter<UnsignedLongType>, ? super ChannelARGBConverter>) null, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<ConvertedRealRandomAccess<VolatileUnsignedLongType, VolatileUnsignedLongType>, ChannelARGBConverter> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<ConvertedRealRandomAccess<VolatileUnsignedLongType, VolatileUnsignedLongType>, ChannelARGBConverter>((RealRandomAccess<ConvertedRealRandomAccess<VolatileUnsignedLongType, VolatileUnsignedLongType>>) null, (Converter<? super ConvertedRealRandomAccess<VolatileUnsignedLongType, VolatileUnsignedLongType>, ? super ChannelARGBConverter>) null, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedRealRandomAccess", e);
      }
  }
}
