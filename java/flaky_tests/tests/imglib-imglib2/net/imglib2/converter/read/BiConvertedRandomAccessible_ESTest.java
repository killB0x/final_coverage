/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:29:34 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRandomAccess;
import net.imglib2.converter.read.BiConvertedRandomAccessible;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.interpolation.Interpolant;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRandomAccessible_ESTest extends BiConvertedRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1304);
      InterpolatorFactory<Integer, Integer> interpolatorFactory0 = (InterpolatorFactory<Integer, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess) null).when(interpolatorFactory0).create(anyInt());
      doReturn((RealRandomAccess) null).when(interpolatorFactory0).create(anyInt() , any(net.imglib2.RealInterval.class));
      Interpolant<Integer, Integer> interpolant0 = new Interpolant<Integer, Integer>(integer0, interpolatorFactory0, 1);
      RandomAccessibleOnRealRandomAccessible<Integer> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<Integer>(interpolant0);
      long[] longArray0 = new long[8];
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccessible<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>(randomAccessibleOnRealRandomAccessible0, intervalView0, biConverter0, supplier0);
      BiConvertedRandomAccess<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRandomAccess0 = biConvertedRandomAccessible0.randomAccess((Interval) intervalView0);
      assertNotNull(biConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1304);
      InterpolatorFactory<Integer, Integer> interpolatorFactory0 = (InterpolatorFactory<Integer, Integer>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess) null, (RealRandomAccess) null).when(interpolatorFactory0).create(anyInt());
      Interpolant<Integer, Integer> interpolant0 = new Interpolant<Integer, Integer>(integer0, interpolatorFactory0, 1);
      RandomAccessibleOnRealRandomAccessible<Integer> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<Integer>(interpolant0);
      long[] longArray0 = new long[8];
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccessible<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>(randomAccessibleOnRealRandomAccessible0, intervalView0, biConverter0, supplier0);
      BiConvertedRandomAccess<Integer, Integer, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConvertedRandomAccess0 = biConvertedRandomAccessible0.randomAccess();
      assertNotNull(biConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(translationTransform0).when(supplier0).get();
      BiConvertedRandomAccessible<Object, Object, Object> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Object, Object>((RandomAccessible<Object>) null, (RandomAccessible<Object>) null, (BiConverter<? super Object, ? super Object, ? super Object>) null, supplier0);
      Object object0 = biConvertedRandomAccessible0.getDestinationType();
      assertSame(object0, translationTransform0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      BiConvertedRandomAccessible<Object, Object, Integer> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Object, Integer>((RandomAccessible<Object>) null, (RandomAccessible<Object>) null, biConverter0, supplier0);
      Supplier<? extends Integer> supplier1 = biConvertedRandomAccessible0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      ListImg<Integer> listImg0 = listImgFactory0.create(longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biConverter0).toString();
      BiConvertedRandomAccessible<Object, Integer, Integer> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Integer, Integer>((RandomAccessible<Object>) null, listImg0, biConverter0, (Supplier<? extends Integer>) null);
      BiConverter<? super Object, ? super Integer, ? super Integer> biConverter1 = biConvertedRandomAccessible0.getConverter();
      assertNotNull(biConverter1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>((-1), biConsumer0, supplier0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>>(functionRandomAccessible0, (RandomAccessible<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>>) null, biConverter0, (Supplier<? extends RandomAccessibleInterval<Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, (Supplier<Integer>) null);
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Integer, Integer, Integer> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Integer, Integer, Integer>(functionRandomAccessible0, functionRandomAccessible0, biConverter0, (Supplier<? extends Integer>) null);
      // Undeclared exception!
      try { 
        biConvertedRandomAccessible0.getDestinationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, (Supplier<Integer>) null);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Integer, Integer, Object> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Integer, Integer, Object>(functionRandomAccessible0, functionRandomAccessible0, biConverter0, (Supplier<?>) null);
      Supplier<?> supplier0 = biConvertedRandomAccessible0.getDestinationSupplier();
      assertNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>>((RandomAccessible<Object>) null, (RandomAccessible<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>>) null, (BiConverter<? super Object, ? super BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, ? super RandomAccessibleInterval<Integer>>) null, (Supplier<? extends RandomAccessibleInterval<Integer>>) null);
      BiConverter<? super Object, ? super BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, ? super RandomAccessibleInterval<Integer>> biConverter0 = biConvertedRandomAccessible0.getConverter();
      assertNull(biConverter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Object, Object, Integer> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Object, Integer>((RandomAccessible<Object>) null, (RandomAccessible<Object>) null, biConverter0, supplier0);
      Supplier<BiConverter<? super Object, ? super Object, ? super Integer>> supplier1 = biConvertedRandomAccessible0.getConverterSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Object, Object, Integer> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Object, Integer>((RandomAccessible<Object>) null, (RandomAccessible<Object>) null, biConverter0, supplier0);
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccessible0.randomAccess((Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccessible<Object, Object, Object> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, Object, Object>((RandomAccessible<Object>) null, (RandomAccessible<Object>) null, biConverter0, supplier0);
      Object object0 = biConvertedRandomAccessible0.getDestinationType();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>> biConvertedRandomAccessible0 = new BiConvertedRandomAccessible<Object, BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, RandomAccessibleInterval<Integer>>((RandomAccessible<Object>) null, (RandomAccessible<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>>) null, (BiConverter<? super Object, ? super BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Integer>, ? super RandomAccessibleInterval<Integer>>) null, (Supplier<? extends RandomAccessibleInterval<Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedRandomAccessible0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccessible", e);
      }
  }
}
