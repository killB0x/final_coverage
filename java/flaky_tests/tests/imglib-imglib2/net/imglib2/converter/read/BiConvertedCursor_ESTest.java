/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:05:07 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Function;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.KDTree;
import net.imglib2.PointSampleList;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedCursor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedCursor_ESTest extends BiConvertedCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<PointSampleList.PointSampleListCursor> pointSampleList0 = new PointSampleList<PointSampleList.PointSampleListCursor>(1);
      Cursor<PointSampleList.PointSampleListCursor> cursor0 = pointSampleList0.localizingCursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedCursor<Object, Object, Object>> supplier0 = (Supplier<BiConvertedCursor<Object, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>>(cursor0, cursor0, biConverter0, supplier0);
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>> biConvertedCursor1 = biConvertedCursor0.copy();
      biConvertedCursor1.remove();
      assertFalse(biConvertedCursor1.equals((Object)biConvertedCursor0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Cursor<PointSampleList.PointSampleListCursor> cursor0 = pointSampleList_PointSampleListCursor0.copyCursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedCursor<Object, Object, Object>> supplier0 = (Supplier<BiConvertedCursor<Object, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>>(cursor0, pointSampleList_PointSampleListCursor0, biConverter0, supplier0);
      boolean boolean0 = biConvertedCursor0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PointSampleList<KDTree<Object>> pointSampleList0 = new PointSampleList<KDTree<Object>>(0);
      Cursor<KDTree<Object>> cursor0 = pointSampleList0.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<PointSampleList.PointSampleListCursor> supplier0 = (Supplier<PointSampleList.PointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      BiConvertedCursor<KDTree<Object>, KDTree<Object>, PointSampleList.PointSampleListCursor> biConvertedCursor0 = new BiConvertedCursor<KDTree<Object>, KDTree<Object>, PointSampleList.PointSampleListCursor>(cursor0, cursor0, biConverter0, supplier0);
      BiConvertedCursor<KDTree<Object>, KDTree<Object>, PointSampleList.PointSampleListCursor> biConvertedCursor1 = biConvertedCursor0.copy();
      biConvertedCursor1.reset();
      assertFalse(biConvertedCursor1.equals((Object)biConvertedCursor0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointSampleList<KDTree<Object>> pointSampleList0 = new PointSampleList<KDTree<Object>>(1668);
      Cursor<KDTree<Object>> cursor0 = pointSampleList0.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, KDTree<Object>, Object> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, KDTree<Object>, Object>((Cursor<PointSampleList.PointSampleListCursor>) null, cursor0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.fwd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PointSampleList<KDTree<Object>> pointSampleList0 = new PointSampleList<KDTree<Object>>(0);
      Cursor<KDTree<Object>> cursor0 = pointSampleList0.cursor();
      PointSampleList<PointSampleList.PointSampleListCursor> pointSampleList1 = new PointSampleList<PointSampleList.PointSampleListCursor>(0);
      Cursor<PointSampleList.PointSampleListCursor> cursor1 = pointSampleList1.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<PointSampleList.PointSampleListCursor> supplier0 = (Supplier<PointSampleList.PointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<KDTree<Object>, PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor> biConvertedCursor0 = new BiConvertedCursor<KDTree<Object>, PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor>(cursor0, cursor1, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.jumpFwd(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Cursor<PointSampleList.PointSampleListCursor> cursor0 = pointSampleList_PointSampleListCursor0.copyCursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedCursor<Object, Object, Object>> supplier0 = (Supplier<BiConvertedCursor<Object, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>>(cursor0, pointSampleList_PointSampleListCursor0, biConverter0, supplier0);
      BiConvertedCursor<Object, Object, Object> biConvertedCursor1 = biConvertedCursor0.get();
      assertNull(biConvertedCursor1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointSampleList<BiConvertedCursor<Object, Object, Object>> pointSampleList0 = new PointSampleList<BiConvertedCursor<Object, Object, Object>>(1);
      Cursor<BiConvertedCursor<Object, Object, Object>> cursor0 = pointSampleList0.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function0 = Function.identity();
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(function0).when(supplier0).get();
      BiConvertedCursor<BiConvertedCursor<Object, Object, Object>, BiConvertedCursor<Object, Object, Object>, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<BiConvertedCursor<Object, Object, Object>, BiConvertedCursor<Object, Object, Object>, Function<Object, Object>>(cursor0, cursor0, biConverter0, supplier0);
      Function<Object, Object> function1 = biConvertedCursor0.get();
      assertSame(function0, function1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PointSampleList<BiConvertedCursor<Object, Object, Object>> pointSampleList0 = new PointSampleList<BiConvertedCursor<Object, Object, Object>>(1);
      Cursor<BiConvertedCursor<Object, Object, Object>> cursor0 = pointSampleList0.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<BiConvertedCursor<Object, Object, Object>, BiConvertedCursor<Object, Object, Object>, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<BiConvertedCursor<Object, Object, Object>, BiConvertedCursor<Object, Object, Object>, Function<Object, Object>>(cursor0, cursor0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.fwd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedCursor<Object, Object, Object>> supplier0 = (Supplier<BiConvertedCursor<Object, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, BiConvertedCursor<Object, Object, Object>>((Cursor<PointSampleList.PointSampleListCursor>) null, (Cursor<PointSampleList.PointSampleListCursor>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>> biConvertedCursor0 = null;
      try {
        biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>>((Cursor<PointSampleList.PointSampleListCursor>) null, (Cursor<PointSampleList.PointSampleListCursor>) null, (BiConverter<? super PointSampleList.PointSampleListCursor, ? super PointSampleList.PointSampleListCursor, ? super Function<Object, Object>>) null, (Supplier<? extends Function<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<KDTree<Object>, KDTree<Object>, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<KDTree<Object>, KDTree<Object>, Function<Object, Object>>((Cursor<KDTree<Object>>) null, (Cursor<KDTree<Object>>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.jumpFwd(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PointSampleList<KDTree<Object>> pointSampleList0 = new PointSampleList<KDTree<Object>>(0);
      Cursor<KDTree<Object>> cursor0 = pointSampleList0.cursor();
      PointSampleList<PointSampleList.PointSampleListCursor> pointSampleList1 = new PointSampleList<PointSampleList.PointSampleListCursor>(0);
      Cursor<PointSampleList.PointSampleListCursor> cursor1 = pointSampleList1.cursor();
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<PointSampleList.PointSampleListCursor> supplier0 = (Supplier<PointSampleList.PointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      BiConvertedCursor<KDTree<Object>, PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor> biConvertedCursor0 = new BiConvertedCursor<KDTree<Object>, PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor>(cursor0, cursor1, biConverter0, supplier0);
      BiConvertedCursor<KDTree<Object>, PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor> biConvertedCursor1 = biConvertedCursor0.copy();
      assertNotSame(biConvertedCursor0, biConvertedCursor1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>>((Cursor<PointSampleList.PointSampleListCursor>) null, (Cursor<PointSampleList.PointSampleListCursor>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>>((Cursor<PointSampleList.PointSampleListCursor>) null, (Cursor<PointSampleList.PointSampleListCursor>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<PointSampleList.PointSampleListCursor, PointSampleList.PointSampleListCursor, Function<Object, Object>>((Cursor<PointSampleList.PointSampleListCursor>) null, (Cursor<PointSampleList.PointSampleListCursor>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Function<Object, Object>> supplier0 = (Supplier<Function<Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedCursor<KDTree<Object>, KDTree<Object>, Function<Object, Object>> biConvertedCursor0 = new BiConvertedCursor<KDTree<Object>, KDTree<Object>, Function<Object, Object>>((Cursor<KDTree<Object>>) null, (Cursor<KDTree<Object>>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedCursor0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedCursor", e);
      }
  }
}
