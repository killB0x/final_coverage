/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:17:32 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Supplier;
import net.imglib2.IterableRealInterval;
import net.imglib2.PointSampleList;
import net.imglib2.RealPointSampleList;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedIterableRealInterval;
import net.imglib2.converter.read.ConvertedRealCursor;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.view.composite.Composite;
import net.imglib2.view.composite.GenericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConvertedIterableRealInterval_ESTest extends ConvertedIterableRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<VolatileUnsignedIntType> pointSampleList0 = new PointSampleList<VolatileUnsignedIntType>(255);
      Converter<VolatileUnsignedIntType, ChannelARGBConverter> converter0 = (Converter<VolatileUnsignedIntType, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedIterableRealInterval<VolatileUnsignedIntType, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<VolatileUnsignedIntType, ChannelARGBConverter>(pointSampleList0, converter0, supplier0);
      Converter<ChannelARGBConverter, Object> converter1 = (Converter<ChannelARGBConverter, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<ChannelARGBConverter>> supplier1 = (Supplier<Composite<ChannelARGBConverter>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedIterableRealInterval<ChannelARGBConverter, Composite<ChannelARGBConverter>> convertedIterableRealInterval1 = new ConvertedIterableRealInterval<ChannelARGBConverter, Composite<ChannelARGBConverter>>(convertedIterableRealInterval0, converter1, supplier1);
      ConvertedRealCursor<ChannelARGBConverter, Composite<ChannelARGBConverter>> convertedRealCursor0 = convertedIterableRealInterval1.localizingCursor();
      assertNotNull(convertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      Converter<Object, ChannelARGBConverter> converter0 = (Converter<Object, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ChannelARGBConverter.Channel channelARGBConverter_Channel0 = ChannelARGBConverter.Channel.R;
      ChannelARGBConverter channelARGBConverter0 = new ChannelARGBConverter(channelARGBConverter_Channel0);
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedIterableRealInterval<Object, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<Object, ChannelARGBConverter>(pointSampleList0, converter0, supplier0);
      ChannelARGBConverter channelARGBConverter1 = convertedIterableRealInterval0.getDestinationType();
      assertSame(channelARGBConverter0, channelARGBConverter1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      Converter<Object, ChannelARGBConverter> converter0 = (Converter<Object, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<Object, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<Object, ChannelARGBConverter>(pointSampleList0, converter0, supplier0);
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter1 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier1 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier1).toString();
      ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter> convertedIterableRealInterval1 = new ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter>(convertedIterableRealInterval0, converter1, supplier1);
      Supplier<? extends ChannelARGBConverter> supplier2 = convertedIterableRealInterval1.getDestinationSupplier();
      assertNotNull(supplier2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealPointSampleList<GenericComposite<ChannelARGBConverter>> realPointSampleList0 = new RealPointSampleList<GenericComposite<ChannelARGBConverter>>(820);
      Supplier<VolatileUnsignedByteType> supplier0 = (Supplier<VolatileUnsignedByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<GenericComposite<ChannelARGBConverter>, VolatileUnsignedByteType> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<GenericComposite<ChannelARGBConverter>, VolatileUnsignedByteType>(realPointSampleList0, (Converter<? super GenericComposite<ChannelARGBConverter>, ? super VolatileUnsignedByteType>) null, supplier0);
      Converter<? super GenericComposite<ChannelARGBConverter>, ? super VolatileUnsignedByteType> converter0 = convertedIterableRealInterval0.getConverter();
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealPointSampleList<ChannelARGBConverter> realPointSampleList0 = new RealPointSampleList<ChannelARGBConverter>(10);
      Supplier<ByteType> supplier0 = (Supplier<ByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedIterableRealInterval<ChannelARGBConverter, ByteType> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<ChannelARGBConverter, ByteType>(realPointSampleList0, (Converter<? super ChannelARGBConverter, ? super ByteType>) null, supplier0);
      ConvertedRealCursor<ChannelARGBConverter, ByteType> convertedRealCursor0 = convertedIterableRealInterval0.cursor();
      assertNotNull(convertedRealCursor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter<ChannelARGBConverter, ByteType> converter0 = (Converter<ChannelARGBConverter, ByteType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(converter0).toString();
      ConvertedIterableRealInterval<ChannelARGBConverter, ByteType> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<ChannelARGBConverter, ByteType>((IterableRealInterval<ChannelARGBConverter>) null, converter0, (Supplier<? extends ByteType>) null);
      Converter<? super ChannelARGBConverter, ? super ByteType> converter1 = convertedIterableRealInterval0.getConverter();
      assertNotNull(converter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter>((IterableRealInterval<ChannelARGBConverter>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedIterableRealInterval0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter<ChannelARGBConverter, ChannelARGBConverter> converter0 = (Converter<ChannelARGBConverter, ChannelARGBConverter>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter>((IterableRealInterval<ChannelARGBConverter>) null, converter0, (Supplier<? extends ChannelARGBConverter>) null);
      Supplier<Converter<? super ChannelARGBConverter, ? super ChannelARGBConverter>> supplier0 = convertedIterableRealInterval0.getConverterSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter<ChannelARGBConverter, Object> converter0 = (Converter<ChannelARGBConverter, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<ChannelARGBConverter> supplier0 = (Supplier<ChannelARGBConverter>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<ChannelARGBConverter, ChannelARGBConverter>((IterableRealInterval<ChannelARGBConverter>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedIterableRealInterval0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.ConvertedIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<ByteType> supplier0 = (Supplier<ByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<Object, Object> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<Object, Object>(realPointSampleList0, converter0, supplier0);
      Object object0 = convertedIterableRealInterval0.getDestinationType();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      long[] longArray0 = new long[4];
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedIterableRealInterval<Object, Object> convertedIterableRealInterval0 = new ConvertedIterableRealInterval<Object, Object>(listImg0, converter0, (Supplier<?>) null);
      Supplier<?> supplier0 = convertedIterableRealInterval0.getDestinationSupplier();
      assertNull(supplier0);
  }
}
