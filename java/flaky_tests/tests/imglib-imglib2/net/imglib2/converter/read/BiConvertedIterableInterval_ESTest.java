/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:28:26 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.IterableInterval;
import net.imglib2.PointSampleList;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedCursor;
import net.imglib2.converter.read.BiConvertedIterableInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedIterableInterval_ESTest extends BiConvertedIterableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableInterval<Object, Object, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Object, Object, Integer>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConvertedCursor<Object, Object, Integer> biConvertedCursor0 = biConvertedIterableInterval0.localizingCursor();
      assertNotNull(biConvertedCursor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointSampleList<BiConvertedIterableInterval<Integer, Integer, Integer>> pointSampleList0 = new PointSampleList<BiConvertedIterableInterval<Integer, Integer, Integer>>(1151);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableInterval<PointSampleList<Object>, BiConvertedIterableInterval<Integer, Integer, Integer>, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<PointSampleList<Object>, BiConvertedIterableInterval<Integer, Integer, Integer>, Integer>((IterableInterval<PointSampleList<Object>>) null, pointSampleList0, biConverter0, supplier0);
      Integer integer0 = biConvertedIterableInterval0.getDestinationType();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableInterval<Integer, Integer, Object> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Object>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, biConverter0, supplier0);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedIterableInterval<Object, Object, Integer> biConvertedIterableInterval1 = new BiConvertedIterableInterval<Object, Object, Integer>(biConvertedIterableInterval0, biConvertedIterableInterval0, biConverter1, (Supplier<? extends Integer>) null);
      Supplier<? extends Integer> supplier1 = biConvertedIterableInterval1.getDestinationSupplier();
      assertNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biConverter0).toString();
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, biConverter0, (Supplier<? extends Integer>) null);
      BiConverter<? super Integer, ? super Integer, ? super Integer> biConverter1 = biConvertedIterableInterval0.getConverter();
      assertNotNull(biConverter1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(3306);
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>(pointSampleList0, pointSampleList0, biConverter0, supplier0);
      BiConvertedCursor<Integer, Integer, Integer> biConvertedCursor0 = biConvertedIterableInterval0.cursor();
      assertNotNull(biConvertedCursor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, (Supplier<? extends Integer>) null);
      Supplier<BiConverter<? super Integer, ? super Integer, ? super Integer>> supplier0 = biConvertedIterableInterval0.getConverterSupplier();
      assertNotNull(supplier0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConvertedIterableInterval<Integer, Integer, PointSampleList<Integer>> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, PointSampleList<Integer>>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super PointSampleList<Integer>>) null, (Supplier<? extends PointSampleList<Integer>>) null);
      // Undeclared exception!
      try { 
        biConvertedIterableInterval0.getDestinationType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedIterableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConvertedIterableInterval<Integer, Integer, Object> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Object>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, (Supplier<?>) null);
      // Undeclared exception!
      try { 
        biConvertedIterableInterval0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedIterableInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, (Supplier<? extends Integer>) null);
      BiConverter<? super Integer, ? super Integer, ? super Integer> biConverter0 = biConvertedIterableInterval0.getConverter();
      assertNull(biConverter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, biConverter0, supplier0);
      Supplier<? extends Integer> supplier1 = biConvertedIterableInterval0.getDestinationSupplier();
      assertNotNull(supplier1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConvertedIterableInterval<Integer, Integer, Integer> biConvertedIterableInterval0 = new BiConvertedIterableInterval<Integer, Integer, Integer>((IterableInterval<Integer>) null, (IterableInterval<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Integer>) null, (Supplier<? extends Integer>) null);
      // Undeclared exception!
      try { 
        biConvertedIterableInterval0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedIterableInterval", e);
      }
  }
}
