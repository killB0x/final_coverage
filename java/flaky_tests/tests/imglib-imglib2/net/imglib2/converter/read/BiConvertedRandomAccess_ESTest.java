/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:46:13 GMT 2022
 */

package net.imglib2.converter.read;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.read.BiConvertedRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BiConvertedRandomAccess_ESTest extends BiConvertedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Object, Integer>(pointSample0, pointSample0, (BiConverter<? super Object, ? super Object, ? super Integer>) null, supplier1);
      BiConvertedRandomAccess<Object, Object, Integer> biConvertedRandomAccess1 = biConvertedRandomAccess0.copy();
      biConvertedRandomAccess1.move(0L, 0);
      assertNotSame(biConvertedRandomAccess0, biConvertedRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(supplier2).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      Supplier<BiConvertedRandomAccess<Object, Integer, Integer>> supplier3 = (Supplier<BiConvertedRandomAccess<Object, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Object, Integer, Integer>> pointSample2 = PointSample.wrapSupplier(supplier3, longArray0);
      BiConverter<Integer, Object, Integer> biConverter1 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier4 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(supplier4).get();
      BiConvertedRandomAccess<Integer, BiConvertedRandomAccess<Object, Integer, Integer>, Integer> biConvertedRandomAccess1 = new BiConvertedRandomAccess<Integer, BiConvertedRandomAccess<Object, Integer, Integer>, Integer>(biConvertedRandomAccess0, pointSample2, biConverter1, supplier4);
      biConvertedRandomAccess1.move(16, 0);
      assertArrayEquals(new long[] {16L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier((Supplier<Object>) null, longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier0, pointSample0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample0, pointSample1, (BiConverter<? super Object, ? super Integer, ? super Integer>) null, supplier1);
      biConvertedRandomAccess0.setPosition(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>(pointSample0, pointSample0, biConverter0, supplier1);
      biConvertedRandomAccess0.setPosition((Localizable) biConvertedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier0, longArray0);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample1, pointSample0, (BiConverter<? super Object, ? super Integer, ? super Integer>) null, supplier2);
      biConvertedRandomAccess0.setPosition((-1L), 2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Object, Object, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      PointSample<BiConvertedRandomAccess<Object, Object, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Object, Object, Integer>>(supplier0, intArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Integer> pointSample1 = PointSample.wrapSupplier(supplier1, longArray0);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Integer, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      biConvertedRandomAccess0.setPosition((-1312), 1);
      assertArrayEquals(new long[] {0L, (-1312L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample1 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier0, pointSample0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Object, Integer>(pointSample1, pointSample0, biConverter0, supplier1);
      int[] intArray0 = new int[2];
      biConvertedRandomAccess0.move(intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample1 = PointSample.wrap((Integer) 1846, longArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Object>(pointSample0, pointSample1, biConverter0, supplier1);
      biConvertedRandomAccess0.move((Localizable) pointSample1);
      assertEquals(5, pointSample1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      long[] longArray0 = new long[8];
      PointSample<Object> pointSample1 = new PointSample<Object>((Supplier<Object>) null, longArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BiConvertedRandomAccess<Object, Integer, Object>> supplier1 = (Supplier<BiConvertedRandomAccess<Object, Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Object, BiConvertedRandomAccess<Object, Integer, Object>> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Object, BiConvertedRandomAccess<Object, Integer, Object>>(pointSample0, pointSample1, biConverter0, supplier1);
      biConvertedRandomAccess0.fwd(1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Integer>(pointSample0, pointSample0, biConverter0, supplier0);
      biConvertedRandomAccess0.bck(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Object, Object, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<BiConvertedRandomAccess<Object, Object, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Object, Object, Integer>>(supplier0, 1919);
      Integer integer0 = new Integer(1919);
      long[] longArray0 = new long[6];
      PointSample<Object> pointSample1 = PointSample.wrap((Object) integer0, longArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Object, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Object, Object>(pointSample0, pointSample1, biConverter0, supplier1);
      Object object0 = biConvertedRandomAccess0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      int[] intArray0 = new int[4];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Object, Integer>(pointSample0, pointSample0, biConverter0, supplier1);
      Supplier<BiConvertedRandomAccess<Object, Object, Integer>> supplier2 = (Supplier<BiConvertedRandomAccess<Object, Object, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(biConvertedRandomAccess0).when(supplier2).get();
      PointSample<BiConvertedRandomAccess<Object, Object, Integer>> pointSample1 = new PointSample<BiConvertedRandomAccess<Object, Object, Integer>>(supplier2, 1919);
      BiConverter<Object, Object, Object> biConverter1 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier3 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(biConvertedRandomAccess0).when(supplier3).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Object, Object> biConvertedRandomAccess1 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Object, Object, Integer>, Object, Object>(pointSample1, pointSample0, biConverter1, supplier3);
      Object object0 = biConvertedRandomAccess1.get();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, biConverter0, supplier0);
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier1);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Object, Object>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Object, Object>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Object, Object>>(supplier0, 40);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample1 = PointSample.wrapSupplier(supplier1, longArray0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(supplier2).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Object, Object>, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Object, Object>, Object, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-3795));
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      BiConverter<Integer, Integer, Integer> biConverter0 = (BiConverter<Integer, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Integer>((RandomAccess<Integer>) null, pointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[15];
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0[2]).when(supplier2).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition((Localizable) biConvertedRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((BiConverter<Integer, Integer, Object>) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition((-9223372036854775808L), 2067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier1 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier1, 2);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Object, Integer>((RandomAccess<Integer>) null, (RandomAccess<Object>) null, biConverter0, supplier0);
      long[] longArray0 = new long[8];
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample1 = PointSample.wrap((Integer) 1846, longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(pointSample0).when(supplier1).get();
      BiConvertedRandomAccess<Object, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Object>(pointSample0, pointSample1, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      long[] longArray0 = new long[8];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Integer>(pointSample0, pointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move(40, 618);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 618 out of bounds for length 8
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>(pointSample0, pointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.fwd(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier0, 2);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.bck(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = null;
      try {
        biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, (Supplier<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier0, 0);
      Integer integer0 = new Integer(0);
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample1 = PointSample.wrap(integer0, longArray0);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Integer>(pointSample1, pointSample1, biConverter0, supplier1);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess1 = new BiConvertedRandomAccess<Integer, Integer, Object>(biConvertedRandomAccess0, pointSample1, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess1.move((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier0, 2);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier1);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier((Supplier<Object>) null, longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier0, pointSample0);
      Integer integer0 = new Integer(2536);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      BiConvertedRandomAccess<Object, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Integer, Integer>(pointSample0, pointSample1, (BiConverter<? super Object, ? super Integer, ? super Integer>) null, supplier1);
      biConvertedRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      BiConverter<Object, Integer, Integer> biConverter0 = (BiConverter<Object, Integer, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Integer>(pointSample0, pointSample0, biConverter0, supplier0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess1 = new BiConvertedRandomAccess<Integer, Integer, Object>(biConvertedRandomAccess0, pointSample0, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier1);
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess2 = biConvertedRandomAccess1.copy();
      assertNotSame(biConvertedRandomAccess2, biConvertedRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<Object, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Object, Object, Integer>(pointSample0, pointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move((-26L), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.move(0, 2624);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[4];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) null, longArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Object, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Object, Object>((RandomAccess<Integer>) null, pointSample0, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.fwd(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRandomAccess<Integer, Integer, Object> biConvertedRandomAccess0 = new BiConvertedRandomAccess<Integer, Integer, Object>((RandomAccess<Integer>) null, (RandomAccess<Integer>) null, (BiConverter<? super Integer, ? super Integer, ? super Object>) null, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.bck((-2933));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier1 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier1, 2);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(0L, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Integer, Integer>>(supplier0, 2007);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Integer, Integer>, Integer, Integer>(pointSample0, (RandomAccess<Integer>) null, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRandomAccess0.setPosition(2007, 2007);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2007 out of bounds for length 2007
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<BiConvertedRandomAccess<Integer, Object, Object>> supplier0 = (Supplier<BiConvertedRandomAccess<Integer, Object, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<BiConvertedRandomAccess<Integer, Object, Object>> pointSample0 = new PointSample<BiConvertedRandomAccess<Integer, Object, Object>>(supplier0, 0);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample1 = PointSample.wrapSupplier(supplier1, longArray0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Object, Object>, Object, Integer> biConvertedRandomAccess0 = new BiConvertedRandomAccess<BiConvertedRandomAccess<Integer, Object, Object>, Object, Integer>(pointSample0, pointSample1, biConverter0, supplier2);
      int[] intArray0 = new int[3];
      biConvertedRandomAccess0.setPosition(intArray0);
      assertEquals(3, intArray0.length);
  }
}
