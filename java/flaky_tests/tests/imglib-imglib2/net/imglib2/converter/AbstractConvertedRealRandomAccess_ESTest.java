/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:01:41 GMT 2022
 */

package net.imglib2.converter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import net.imglib2.converter.AbstractConvertedRealRandomAccess;
import net.imglib2.converter.BiConverter;
import net.imglib2.converter.Converter;
import net.imglib2.converter.TypeIdentity;
import net.imglib2.converter.read.BiConvertedRealRandomAccess;
import net.imglib2.converter.read.ConvertedRealRandomAccess;
import net.imglib2.img.basictypeaccess.nio.CharBufferAccess;
import net.imglib2.img.basictypeaccess.nio.ShortBufferAccess;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import net.imglib2.view.composite.AbstractComposite;
import net.imglib2.view.composite.GenericComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractConvertedRealRandomAccess_ESTest extends AbstractConvertedRealRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      int[] intArray0 = new int[6];
      convertedRealRandomAccess0.setPosition(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      float[] floatArray0 = new float[4];
      convertedRealRandomAccess0.setPosition(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<AbstractComposite<Object>> supplier0 = (Supplier<AbstractComposite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      RealPointSample<AbstractComposite<Object>> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Object>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Object>, Integer>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.setPosition((RealLocalizable) realPointSample0);
      assertEquals(5, realPointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, pointSample0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier2);
      convertedRealRandomAccess0.setPosition((Localizable) pointSample0);
      assertEquals(1, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.setPosition((long) 1580, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 64);
      Supplier<AbstractComposite<Object>> supplier1 = (Supplier<AbstractComposite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<AbstractComposite<Object>> realPointSample1 = new RealPointSample<AbstractComposite<Object>>(supplier1, realPointSample0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractComposite<Integer>> supplier2 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((AbstractComposite<Integer>) null).when(supplier2).get();
      ConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Integer>> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Integer>>(realPointSample1, converter0, supplier2);
      convertedRealRandomAccess0.setPosition((float) 64, 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.setPosition((double) (-1385), 24);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Integer>(realPointSample0, (Converter<? super Integer, ? super Integer>) null, supplier1);
      long[] longArray0 = new long[8];
      convertedRealRandomAccess0.move(longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier0, floatArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(13);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer>(realPointSample0, converter0, supplier1);
      int[] intArray0 = new int[2];
      convertedRealRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      double[] doubleArray0 = new double[1];
      convertedRealRandomAccess0.move(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) supplier0, longArray0);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, pointSample0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.move((RealLocalizable) realPointSample0);
      assertEquals(5, realPointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.move(2175.6453F, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, pointSample0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier2);
      convertedRealRandomAccess0.move((double) 0L, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      float[] floatArray0 = new float[1];
      convertedRealRandomAccess0.localize(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 2062);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      convertedRealRandomAccess0.fwd(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier0, floatArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.bck(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      int int0 = convertedRealRandomAccess0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      BiConverter<Integer, Integer, AbstractComposite<Integer>> biConverter0 = (BiConverter<Integer, Integer, AbstractComposite<Integer>>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractComposite<Integer>> supplier1 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>>(realPointSample0, realPointSample0, biConverter0, supplier1);
      int int0 = biConvertedRealRandomAccess0.numDimensions();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier0, floatArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer>(realPointSample0, converter0, supplier1);
      float float0 = convertedRealRandomAccess0.getFloatPosition(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1562.33313644);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, doubleArray0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Integer>(realPointSample0, converter0, supplier1);
      float float0 = convertedRealRandomAccess0.getFloatPosition(0);
      assertEquals((-1562.3331F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Supplier<AbstractComposite<Integer>> supplier1 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<AbstractComposite<Integer>> realPointSample1 = new RealPointSample<AbstractComposite<Integer>>(supplier1, realPointSample0);
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer>(realPointSample1, converter0, supplier2);
      double double0 = convertedRealRandomAccess0.getDoublePosition(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      double[] doubleArray0 = new double[7];
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      Converter<Integer, Integer> converter0 = (Converter<Integer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Integer>(realPointSample0, converter0, supplier0);
      BiConverter<Integer, Integer, BoolType> biConverter0 = (BiConverter<Integer, Integer, BoolType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BoolType> supplier1 = (Supplier<BoolType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, BoolType> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, BoolType>(convertedRealRandomAccess0, convertedRealRandomAccess0, biConverter0, supplier1);
      AbstractConvertedRealRandomAccess<Integer, BoolType> abstractConvertedRealRandomAccess0 = biConvertedRealRandomAccess0.copy();
      assertNotNull(abstractConvertedRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      BiConverter<BoolType, Integer, BoolType> biConverter0 = (BiConverter<BoolType, Integer, BoolType>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<BoolType> supplier1 = (Supplier<BoolType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<BoolType, Integer, BoolType> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<BoolType, Integer, BoolType>((RealRandomAccess<BoolType>) null, realPointSample0, biConverter0, supplier1);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 2247);
      BiConverter<Integer, Object, Integer> biConverter0 = (BiConverter<Integer, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BiConverter<Integer, Integer, Object> biConverter0 = (BiConverter<Integer, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>>((RealRandomAccess<Integer>) null, (RealRandomAccess<Integer>) null, biConverter0, supplier0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 14);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object>((RealRandomAccess<AbstractComposite<Object>>) null, (RealRandomAccess<AbstractComposite<Object>>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      BiConverter<Integer, Integer, AbstractComposite<Integer>> biConverter0 = (BiConverter<Integer, Integer, AbstractComposite<Integer>>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      GenericComposite<Integer> genericComposite0 = new GenericComposite<Integer>(pointSample0);
      Supplier<AbstractComposite<Integer>> supplier2 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0).when(supplier2).get();
      BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Integer, AbstractComposite<Integer>>(realPointSample0, realPointSample0, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((RealLocalizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>((RealRandomAccess<Integer>) null, converter0, supplier0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier1, longArray0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier2, longArray0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<AbstractComposite<Object>, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractComposite<Object>, Object, Integer>((RealRandomAccess<AbstractComposite<Object>>) null, convertedRealRandomAccess0, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition((-1L), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Converter<ARGBDoubleType, Integer> converter0 = (Converter<ARGBDoubleType, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<ARGBDoubleType, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<ARGBDoubleType, Integer>((RealRandomAccess<ARGBDoubleType>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(2413, 2413);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(84, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 84 out of bounds for length 84
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess<AbstractComposite<Object>>) null).when(supplier0).get();
      BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object>((RealRandomAccess<AbstractComposite<Object>>) null, (RealRandomAccess<AbstractComposite<Object>>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.setPosition(271.7114F, (-1423));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 6267);
      Integer integer0 = Integer.valueOf((-2648));
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, (Converter<? super Integer, ? super Object>) null, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition((-397.3087109), (-4125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4125 out of bounds for length 6267
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, doubleArray0);
      BiConverter<ARGBDoubleType, ARGBDoubleType, Integer> biConverter0 = (BiConverter<ARGBDoubleType, ARGBDoubleType, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<ARGBDoubleType, ARGBDoubleType, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<ARGBDoubleType, ARGBDoubleType, Integer>(realPointSample0, realPointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSampleList<DoubleNtree> pointSampleList0 = new PointSampleList<DoubleNtree>(1502);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier0, realPoint0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractConvertedRealRandomAccess<Integer, Integer>> supplier2 = (Supplier<AbstractConvertedRealRandomAccess<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, Integer, AbstractConvertedRealRandomAccess<Integer, Integer>> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, AbstractConvertedRealRandomAccess<Integer, Integer>>(convertedRealRandomAccess0, realPointSample0, biConverter0, supplier2);
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Supplier<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>> supplier0 = (Supplier<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[5];
      RealPointSample<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>> realPointSample0 = new RealPointSample<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>>(supplier0, floatArray0);
      Converter<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>, Integer> converter0 = (Converter<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractConvertedRealRandomAccess<Integer, ShortBufferAccess>, Integer>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier2, longArray0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((RealLocalizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier2, longArray0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((Localizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>((RealRandomAccess<Integer>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move(2493, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((-766), 936);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 936 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Integer>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((float) 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 255 out of bounds for length 84
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractComposite<Object>, AbstractComposite<Object>, Object>((RealRandomAccess<AbstractComposite<Object>>) null, (RealRandomAccess<AbstractComposite<Object>>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move(0.0, 1584);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.read.BiConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      BiConverter<Integer, Object, Object> biConverter0 = (BiConverter<Integer, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<Integer, Object, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Integer, Object, Object>((RealRandomAccess<Integer>) null, realPointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 256);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, (Converter<? super Integer, ? super Object>) null, supplier1);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>((RealRandomAccess<Integer>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.getFloatPosition(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 727);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      BiConvertedRealRandomAccess<Object, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Integer>((RealRandomAccess<Object>) null, realPointSample0, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.getDoublePosition(727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<CharBufferAccess> supplier1 = (Supplier<CharBufferAccess>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<CharBufferAccess> realPointSample0 = new RealPointSample<CharBufferAccess>(supplier1, 0);
      Converter<CharBufferAccess, Integer> converter0 = (Converter<CharBufferAccess, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<CharBufferAccess, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<CharBufferAccess, Integer>(realPointSample0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.fwd(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<AbstractComposite<Integer>> supplier1 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[3];
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier1, floatArray0);
      Converter<AbstractComposite<Integer>, Integer> converter0 = (Converter<AbstractComposite<Integer>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Integer>(realPointSample0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.bck((-2123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2123 out of bounds for length 3
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<AbstractComposite<Integer>> supplier1 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 0);
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier1, pointSample0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>(realPointSample0, converter0, supplier2);
      convertedRealRandomAccess0.move((Localizable) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      BiConvertedRealRandomAccess<Object, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Object, Integer>((RealRandomAccess<Object>) null, (RealRandomAccess<Object>) null, biConverter0, supplier0);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(biConverter0).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      long[] longArray0 = new long[8];
      convertedRealRandomAccess0.setPosition(longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Supplier<NativeARGBDoubleType> supplier0 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      RealPointSample<NativeARGBDoubleType> realPointSample0 = new RealPointSample<NativeARGBDoubleType>(supplier0, doubleArray0);
      TypeIdentity<NativeARGBDoubleType> typeIdentity0 = new TypeIdentity<NativeARGBDoubleType>();
      Supplier<NativeARGBDoubleType> supplier1 = (Supplier<NativeARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<NativeARGBDoubleType, NativeARGBDoubleType> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<NativeARGBDoubleType, NativeARGBDoubleType>(realPointSample0, typeIdentity0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(1659.662F, (-2600));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2600 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      double[] doubleArray0 = new double[3];
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      convertedRealRandomAccess0.setPosition(doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Supplier<AbstractConvertedRealRandomAccess<Integer, Integer>> supplier0 = (Supplier<AbstractConvertedRealRandomAccess<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      RealPointSample<AbstractConvertedRealRandomAccess<Integer, Integer>> realPointSample0 = new RealPointSample<AbstractConvertedRealRandomAccess<Integer, Integer>>(supplier0, floatArray0);
      Integer integer0 = new Integer(1774);
      double[] doubleArray0 = new double[1];
      RealPointSample<Integer> realPointSample1 = RealPointSample.wrap(integer0, doubleArray0);
      BiConverter<Object, Object, Integer> biConverter0 = (BiConverter<Object, Object, Integer>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      BiConvertedRealRandomAccess<AbstractConvertedRealRandomAccess<Integer, Integer>, Integer, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractConvertedRealRandomAccess<Integer, Integer>, Integer, Integer>(realPointSample0, realPointSample1, biConverter0, supplier1);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.getFloatPosition(2952);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2952 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Supplier<AbstractComposite<Integer>> supplier0 = (Supplier<AbstractComposite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      RealPointSample<AbstractComposite<Integer>> realPointSample0 = new RealPointSample<AbstractComposite<Integer>>(supplier0, doubleArray0);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.localize(doubleArray0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer((-746));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 2746);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      convertedRealRandomAccess0.move(0, 0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move(0.0F, (-1074));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(biConverter0).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move((double) 0L, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.setPosition((-1385), 4);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(biConverter0).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      float[] floatArray0 = new float[0];
      convertedRealRandomAccess0.move(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Supplier<BoolType> supplier0 = (Supplier<BoolType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<BoolType> realPointSample0 = new RealPointSample<BoolType>(supplier0, 0);
      Converter<BoolType, Integer> converter0 = (Converter<BoolType, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<BoolType, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<BoolType, Integer>(realPointSample0, converter0, supplier1);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.setPosition((long) 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      double[] doubleArray0 = new double[3];
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrap(integer0, doubleArray0);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.getDoublePosition(828);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 828 out of bounds for length 3
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, 84);
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(84);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Integer integer0 = new Integer((-746));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, 2746);
      Converter<Integer, Object> converter0 = (Converter<Integer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      ConvertedRealRandomAccess<Integer, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Object>(realPointSample0, converter0, supplier0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        convertedRealRandomAccess0.move(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealPointSample<Integer> realPointSample0 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      BiConverter<Object, Integer, Object> biConverter0 = (BiConverter<Object, Integer, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<Object, Integer, Object> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<Object, Integer, Object>(convertedRealRandomAccess0, realPointSample0, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.move((RealLocalizable) convertedRealRandomAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      ConvertedRealRandomAccess<AbstractComposite<Integer>, Object> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<AbstractComposite<Integer>, Object>((RealRandomAccess<AbstractComposite<Integer>>) null, converter0, supplier0);
      Supplier<AbstractComposite<Object>> supplier1 = (Supplier<AbstractComposite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      RealPointSample<AbstractComposite<Object>> realPointSample0 = RealPointSample.wrapSupplier(supplier1, doubleArray0);
      BiConverter<Object, Object, Object> biConverter0 = (BiConverter<Object, Object, Object>) mock(BiConverter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier2 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      BiConvertedRealRandomAccess<AbstractComposite<Object>, Object, Integer> biConvertedRealRandomAccess0 = new BiConvertedRealRandomAccess<AbstractComposite<Object>, Object, Integer>(realPointSample0, convertedRealRandomAccess0, biConverter0, supplier2);
      // Undeclared exception!
      try { 
        biConvertedRealRandomAccess0.bck(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.converter.AbstractConvertedRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, doubleArray0);
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      ConvertedRealRandomAccess<Integer, Integer> convertedRealRandomAccess0 = new ConvertedRealRandomAccess<Integer, Integer>(realPointSample0, converter0, supplier1);
      convertedRealRandomAccess0.move((-734L), 1);
  }
}
