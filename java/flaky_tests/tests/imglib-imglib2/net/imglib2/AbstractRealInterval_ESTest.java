/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:52:57 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.AbstractRealInterval;
import net.imglib2.FinalRealInterval;
import net.imglib2.KDTree;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.RealInterval;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPositionable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractRealInterval_ESTest extends AbstractRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2633.548418;
      doubleArray0[1] = 0.0;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrap(object0, doubleArray0);
      Supplier<Object> supplier0 = realPointSample0.sampleSupplier;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 480.0F;
      floatArray0[1] = (-3071.779F);
      floatArray0[2] = (-61.81F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1181.146F);
      floatArray0[5] = (-1.0F);
      RealPointSample<Object> realPointSample1 = new RealPointSample<Object>(supplier0, floatArray0);
      AbstractRealInterval abstractRealInterval0 = null;
      try {
        abstractRealInterval0 = new AbstractRealInterval(realPointSample1, realPointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-363);
      double[] doubleArray0 = new double[1];
      int int1 = 40;
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(40);
      KDTree<Object> kDTree0 = new KDTree<Object>(pointSampleList0);
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(kDTree0);
      abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.maxAsRealPoint();
      double[] doubleArray1 = null;
      AbstractRealInterval abstractRealInterval1 = null;
      try {
        abstractRealInterval1 = new AbstractRealInterval(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      double[] doubleArray0 = null;
      AbstractRealInterval abstractRealInterval1 = null;
      try {
        abstractRealInterval1 = new AbstractRealInterval((double[]) null, (double[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(4179);
      abstractRealInterval0.minAsRealPoint();
      RealPoint realPoint0 = abstractRealInterval0.minAsRealPoint();
      // Undeclared exception!
      abstractRealInterval0.realMin((RealPositionable) realPoint0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(1984);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2511);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      AbstractRealInterval abstractRealInterval1 = null;
      try {
        abstractRealInterval1 = new AbstractRealInterval(pointSampleList_PointSampleListCursor0, pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2416);
      abstractRealInterval0.toString();
      abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.numDimensions();
      double[] doubleArray0 = abstractRealInterval0.maxAsDoubleArray();
      AbstractRealInterval abstractRealInterval1 = new AbstractRealInterval(2416);
      double[] doubleArray1 = abstractRealInterval1.minAsDoubleArray();
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray1, doubleArray1, true);
      abstractRealInterval0.realMax(doubleArray0);
      finalRealInterval0.toString();
      abstractRealInterval1.minAsRealPoint();
      finalRealInterval0.toString();
      abstractRealInterval1.realMin(doubleArray0);
      abstractRealInterval1.toString();
      // Undeclared exception!
      abstractRealInterval0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2571);
      AbstractRealInterval abstractRealInterval1 = null;
      try {
        abstractRealInterval1 = new AbstractRealInterval((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(1);
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2397);
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMin((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      // Undeclared exception!
      try { 
        finalRealInterval0.realMax((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      Point point0 = new Point(longArray0, false);
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(point0, point0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1L);
      finalRealInterval0.equals(point0);
      doubleArray0[1] = (double) (-1L);
      FinalRealInterval finalRealInterval1 = FinalRealInterval.wrap(doubleArray0, doubleArray0);
      doubleArray0[2] = (double) (-1L);
      point0.positionAsPoint();
      doubleArray0[3] = 502.20743;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) (-1L);
      finalRealInterval0.realMin(doubleArray0);
      finalRealInterval1.realMin(0);
      // Undeclared exception!
      try { 
        finalRealInterval1.realMin((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      finalRealInterval0.realMax(doubleArray0);
      // Undeclared exception!
      try { 
        finalRealInterval0.realMax((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      AbstractRealInterval abstractRealInterval0 = null;
      try {
        abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2170.7F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      RealPointSample<AbstractRealInterval> realPointSample0 = new RealPointSample<AbstractRealInterval>((Supplier<AbstractRealInterval>) null, floatArray0);
      RealPointSample<AbstractRealInterval> realPointSample1 = realPointSample0.copy();
      finalRealInterval0.realMax(2);
      finalRealInterval0.realMax(2);
      finalRealInterval0.realMax((RealPositionable) realPointSample1);
      assertEquals(3, realPointSample1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      assertEquals(0, abstractRealInterval0.numDimensions());
      
      RealPoint realPoint0 = abstractRealInterval0.minAsRealPoint();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      abstractRealInterval0.realMin(doubleArray0);
      abstractRealInterval0.realMin(doubleArray0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      FinalRealInterval finalRealInterval0 = FinalRealInterval.wrap(doubleArray0, doubleArray0);
      finalRealInterval0.realMin(0);
      finalRealInterval0.toString();
      // Undeclared exception!
      try { 
        finalRealInterval0.realMin((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(4482);
      double[] doubleArray0 = new double[0];
      RealPoint realPoint0 = RealPoint.wrap(doubleArray0);
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMin((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(1176);
      AbstractRealInterval abstractRealInterval1 = new AbstractRealInterval(abstractRealInterval0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1176;
      doubleArray0[1] = (double) 1176;
      RealPoint realPoint0 = new RealPoint(doubleArray0);
      // Undeclared exception!
      try { 
        abstractRealInterval1.realMax((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      double double1 = 264.98937449;
      doubleArray0[3] = 264.98937449;
      double double2 = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0, false);
      finalRealInterval0.numDimensions();
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(finalRealInterval0);
      RealPoint realPoint0 = abstractRealInterval0.minAsRealPoint();
      abstractRealInterval0.realMin((RealPositionable) realPoint0);
      // Undeclared exception!
      try { 
        finalRealInterval0.realMin(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMin(5208);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2397);
      AbstractRealInterval abstractRealInterval1 = new AbstractRealInterval(abstractRealInterval0);
      assertEquals(2397, abstractRealInterval1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1443.055;
      doubleArray0[3] = (-543.932837);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1485.67331);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 723.842968698078;
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0, true);
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(finalRealInterval0);
      assertEquals(8, abstractRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = null;
      try {
        abstractRealInterval0 = new AbstractRealInterval((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2363.488306;
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0, true);
      RealPoint realPoint0 = abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.toString();
      abstractRealInterval0.realMax(doubleArray0);
      RealPoint realPoint1 = abstractRealInterval0.maxAsRealPoint();
      realPoint1.toString();
      double[] doubleArray1 = realPoint1.positionAsDoubleArray();
      abstractRealInterval0.realMax((RealPositionable) realPoint1);
      abstractRealInterval0.realMax((RealPositionable) realPoint0);
      abstractRealInterval0.realMax(doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0);
      abstractRealInterval0.realMax(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 459.308876;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 665.5100982372214;
      doubleArray0[6] = 0.0;
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0);
      abstractRealInterval0.realMax(1);
      RealPoint realPoint0 = new RealPoint(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1032.84;
      doubleArray1[3] = 459.308876;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 665.5100982372214;
      doubleArray1[6] = 1.7976931348623157E308;
      RealPoint.wrap(doubleArray1);
      abstractRealInterval0.realMax((RealPositionable) realPoint0);
      double double0 = abstractRealInterval0.realMin(1);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        finalRealInterval0.realMin(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2416);
      abstractRealInterval0.toString();
      double[] doubleArray0 = new double[9];
      abstractRealInterval0.maxAsRealPoint();
      abstractRealInterval0.maxAsRealPoint();
      doubleArray0[0] = (double) 2416;
      doubleArray0[1] = (double) 2416;
      doubleArray0[2] = (double) 2416;
      doubleArray0[3] = (double) 2416;
      doubleArray0[4] = (double) 2416;
      abstractRealInterval0.maxAsRealPoint();
      doubleArray0[5] = (double) 2416;
      abstractRealInterval0.numDimensions();
      doubleArray0[6] = (double) 2416;
      abstractRealInterval0.maxAsDoubleArray();
      abstractRealInterval0.minAsDoubleArray();
      doubleArray0[7] = (double) 2416;
      doubleArray0[8] = (double) 2416;
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMin(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      abstractRealInterval0.realMin(doubleArray0);
      abstractRealInterval0.realMin(doubleArray0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      KDTree<Object> kDTree0 = new KDTree<Object>(pointSampleList0);
      // Undeclared exception!
      try { 
        kDTree0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      finalRealInterval0.realMax(doubleArray0);
      assertEquals(4, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 854.8600833713;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1160.726327062538);
      doubleArray0[5] = 2791.6748;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1981.1336526379;
      doubleArray0[8] = 0.0;
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      Object object0 = new Object();
      finalRealInterval0.equals(object0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        finalRealInterval0.realMax(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      FinalRealInterval.wrap(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3555.2639;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        FinalRealInterval.wrap(doubleArray1, doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Point point0 = new Point(0);
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(point0, point0);
      assertEquals(0, abstractRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2389);
      RealPoint realPoint0 = abstractRealInterval0.maxAsRealPoint();
      assertEquals(2389, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1206.99958502;
      doubleArray0[1] = 520.8494500545;
      doubleArray0[2] = 0.0;
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      Supplier<AbstractRealInterval> supplier0 = (Supplier<AbstractRealInterval>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-939.5417F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2170.7F;
      floatArray0[7] = 2777.0195F;
      floatArray0[8] = 0.0F;
      RealPointSample<AbstractRealInterval> realPointSample0 = new RealPointSample<AbstractRealInterval>(supplier0, floatArray0);
      RealPointSample<AbstractRealInterval> realPointSample1 = realPointSample0.copy();
      finalRealInterval0.realMax((RealPositionable) realPointSample1);
      assertFalse(realPointSample1.equals((Object)realPointSample0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2389);
      RealPoint realPoint0 = abstractRealInterval0.minAsRealPoint();
      assertEquals(2389, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      assertEquals(0, finalRealInterval0.numDimensions());
      
      String string0 = finalRealInterval0.toString();
      assertEquals("FinalRealInterval [() -- ()]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(2107);
      String string0 = abstractRealInterval0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      finalRealInterval0.realMin(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      finalRealInterval0.realMin(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2038.896133425213;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-392.08095);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-363.46835);
      doubleArray0[5] = 530.2349233811;
      doubleArray0[6] = 371.161524750777;
      doubleArray0[7] = 458.855299988;
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0, true);
      abstractRealInterval0.toString();
      abstractRealInterval0.minAsDoubleArray();
      abstractRealInterval0.minAsRealPoint();
      PointSampleList<Object> pointSampleList0 = null;
      try {
        pointSampleList0 = new PointSampleList<Object>((-3087));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3087
         //
         verifyException("net.imglib2.PointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2127.48271277);
      AbstractRealInterval abstractRealInterval0 = null;
      try {
        abstractRealInterval0 = new AbstractRealInterval(doubleArray1, doubleArray0, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        FinalRealInterval.wrap(doubleArray0, doubleArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2602.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 2602.0;
      doubleArray1[3] = 2602.0;
      AbstractRealInterval abstractRealInterval0 = null;
      try {
        abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray1, true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      finalRealInterval0.realMax(doubleArray0);
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMax(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(0);
      abstractRealInterval0.maxAsDoubleArray();
      // Undeclared exception!
      try { 
        abstractRealInterval0.realMax(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
