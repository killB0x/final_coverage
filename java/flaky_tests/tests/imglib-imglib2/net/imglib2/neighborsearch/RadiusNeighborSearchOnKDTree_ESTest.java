/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:30:41 GMT 2022
 */

package net.imglib2.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.function.Supplier;
import net.imglib2.KDTree;
import net.imglib2.KDTreeNode;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.Sampler;
import net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree;
import net.imglib2.util.ValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RadiusNeighborSearchOnKDTree_ESTest extends RadiusNeighborSearchOnKDTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KDTreeNode<RealPointSample<Object>> kDTreeNode0 = (KDTreeNode<RealPointSample<Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(1611).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(1611);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      radiusNeighborSearchOnKDTree0.search(point0, 4890.505652000385, true);
      assertEquals(1611, point0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KDTreeNode<ValuePair<Object, Object>> kDTreeNode0 = (KDTreeNode<ValuePair<Object, Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<ValuePair<Object, Object>> kDTree0 = (KDTree<ValuePair<Object, Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(3346).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<ValuePair<Object, Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<ValuePair<Object, Object>>(kDTree0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      radiusNeighborSearchOnKDTree0.search(pointSample0, 0L, true);
      assertEquals(1, radiusNeighborSearchOnKDTree0.numNeighbors());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(3804).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode0 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      radiusNeighborSearchOnKDTree0.searchNode(kDTreeNode0, 158.787962979809);
      int int0 = radiusNeighborSearchOnKDTree0.numNeighbors();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1611).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      int int0 = radiusNeighborSearchOnKDTree0.numDimensions();
      assertEquals(1611, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      ArrayList<ValuePair<KDTreeNode<RealPointSampleList.RealPointSampleListCursor>, Double>> arrayList0 = new ArrayList<ValuePair<KDTreeNode<RealPointSampleList.RealPointSampleListCursor>, Double>>();
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode0 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(255.11);
      ValuePair<KDTreeNode<RealPointSampleList.RealPointSampleListCursor>, Double> valuePair0 = new ValuePair<KDTreeNode<RealPointSampleList.RealPointSampleListCursor>, Double>(kDTreeNode0, double0);
      arrayList0.add(valuePair0);
      radiusNeighborSearchOnKDTree0.resultPoints = arrayList0;
      double double1 = radiusNeighborSearchOnKDTree0.getSquareDistance(0);
      assertEquals(255.11, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KDTreeNode<RealPointSample<Object>> kDTreeNode0 = (KDTreeNode<RealPointSample<Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((double)1866).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn((-322.998685)).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(1866).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      Supplier<RealPointSampleList.RealPointSampleListCursor> supplier0 = (Supplier<RealPointSampleList.RealPointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      RealPointSample<RealPointSampleList.RealPointSampleListCursor> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      radiusNeighborSearchOnKDTree0.search(realPointSample0, 1.7976931348623157E308, true);
      double double0 = radiusNeighborSearchOnKDTree0.getSquareDistance(0);
      assertEquals((-322.998685), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode0 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kDTreeNode0).toString();
      doReturn((double)40).when(kDTreeNode0).getSplitCoordinate();
      doReturn(1).when(kDTreeNode0).getSplitDimension();
      doReturn((double)40).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode1 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode1).getSplitCoordinate();
      doReturn(0).when(kDTreeNode1).getSplitDimension();
      doReturn(0.0).when(kDTreeNode1).squDistanceTo(any(double[].class));
      radiusNeighborSearchOnKDTree0.searchNode(kDTreeNode1, 1);
      radiusNeighborSearchOnKDTree0.searchNode(kDTreeNode0, 40);
      Sampler<RealPointSampleList.RealPointSampleListCursor> sampler0 = radiusNeighborSearchOnKDTree0.getSampler(1);
      assertNotNull(sampler0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(3804).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode0 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kDTreeNode0).toString();
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      radiusNeighborSearchOnKDTree0.searchNode(kDTreeNode0, 158.787962979809);
      RealLocalizable realLocalizable0 = radiusNeighborSearchOnKDTree0.getPosition(0);
      assertNotNull(realLocalizable0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      ArrayList<ValuePair<KDTreeNode<RealPointSample<Object>>, Double>> arrayList0 = new ArrayList<ValuePair<KDTreeNode<RealPointSample<Object>>, Double>>();
      KDTreeNode<RealPointSample<Object>> kDTreeNode0 = (KDTreeNode<RealPointSample<Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(2922.12);
      ValuePair<KDTreeNode<RealPointSample<Object>>, Double> valuePair0 = new ValuePair<KDTreeNode<RealPointSample<Object>>, Double>(kDTreeNode0, double0);
      radiusNeighborSearchOnKDTree0.resultPoints = arrayList0;
      arrayList0.add(valuePair0);
      double double1 = radiusNeighborSearchOnKDTree0.getDistance(0);
      assertEquals(54.056636965316294, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.searchNode((KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) null, 788.437376407);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      KDTreeNode<RealPointSampleList.RealPointSampleListCursor> kDTreeNode0 = (KDTreeNode<RealPointSampleList.RealPointSampleListCursor>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.searchNode(kDTreeNode0, (-795.6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.search((RealLocalizable) null, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      RealPoint realPoint0 = new RealPoint(3804);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.search(realPoint0, 3804, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      radiusNeighborSearchOnKDTree0.resultPoints = null;
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.numNeighbors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KDTree<ValuePair<Object, Object>> kDTree0 = (KDTree<ValuePair<Object, Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<ValuePair<Object, Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<ValuePair<Object, Object>>(kDTree0);
      radiusNeighborSearchOnKDTree0.resultPoints = null;
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getSampler(859);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(31).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      radiusNeighborSearchOnKDTree0.resultPoints = null;
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getPosition(31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      radiusNeighborSearchOnKDTree0.resultPoints = null;
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getDistance((-3897));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RadiusNeighborSearchOnKDTree<Object> radiusNeighborSearchOnKDTree0 = null;
      try {
        radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<Object>((KDTree<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn((-1211)).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = null;
      try {
        radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1211
         //
         verifyException("net.imglib2.neighborsearch.RadiusNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KDTreeNode<RealPointSample<Object>> kDTreeNode0 = (KDTreeNode<RealPointSample<Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(3804).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      RealPoint realPoint0 = new RealPoint(3804);
      radiusNeighborSearchOnKDTree0.search(realPoint0, 3804, false);
      assertEquals(3804, radiusNeighborSearchOnKDTree0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.search((RealLocalizable) null, (-0.6770198784272128), true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KDTreeNode<RealPointSample<Object>> kDTreeNode0 = (KDTreeNode<RealPointSample<Object>>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((double)1866).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn((double)0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(1866).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      Supplier<RealPointSampleList.RealPointSampleListCursor> supplier0 = (Supplier<RealPointSampleList.RealPointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      RealPointSample<RealPointSampleList.RealPointSampleListCursor> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      radiusNeighborSearchOnKDTree0.search(realPointSample0, 1.7976931348623157E308, true);
      assertEquals(1, radiusNeighborSearchOnKDTree0.numNeighbors());
      
      double double0 = radiusNeighborSearchOnKDTree0.getSquareDistance(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(3804).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      int int0 = radiusNeighborSearchOnKDTree0.numNeighbors();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      int int0 = radiusNeighborSearchOnKDTree0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1866).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getPosition(1866);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(827).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getDistance(1954);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KDTree<RealPointSample<Object>> kDTree0 = (KDTree<RealPointSample<Object>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1866).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSample<Object>> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSample<Object>>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getSquareDistance(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> radiusNeighborSearchOnKDTree0 = new RadiusNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      // Undeclared exception!
      try { 
        radiusNeighborSearchOnKDTree0.getSampler(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
