/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:03:26 GMT 2022
 */

package net.imglib2.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import net.imglib2.KDTree;
import net.imglib2.KDTreeNode;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPointSample;
import net.imglib2.Sampler;
import net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KNearestNeighborSearchOnKDTree_ESTest extends KNearestNeighborSearchOnKDTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(4132.266).when(kDTreeNode0).getSplitCoordinate();
      doReturn(21).when(kDTreeNode0).getSplitDimension();
      doReturn((double)40).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 40);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.getK());
      
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(40, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(40.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(6.324555320336759, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      
      KDTreeNode<Integer> kDTreeNode1 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(65).when(kDTreeNode1).getSplitDimension();
      doReturn(1326.04466953).when(kDTreeNode1).squDistanceTo(any(double[].class));
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 65 out of bounds for length 40
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(2233).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(2233, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      int int0 = kNearestNeighborSearchOnKDTree0.numDimensions();
      assertEquals(2233, int0);
      assertEquals(2233, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      double[] doubleArray0 = new double[4];
      kNearestNeighborSearchOnKDTree0.bestSquDistances = doubleArray0;
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      double double0 = kNearestNeighborSearchOnKDTree0.getSquareDistance(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KDTree<RealPointSample<Integer>> kDTree0 = (KDTree<RealPointSample<Integer>>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<RealPointSample<Integer>> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<RealPointSample<Integer>>(kDTree0, 1504);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1504, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      double double0 = kNearestNeighborSearchOnKDTree0.getSquareDistance(792);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1504, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      double[] doubleArray0 = new double[1];
      kNearestNeighborSearchOnKDTree0.bestSquDistances = doubleArray0;
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      double double0 = kNearestNeighborSearchOnKDTree0.getSquareDistance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 2592);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(2592, kNearestNeighborSearchOnKDTree0.getK());
      
      double double0 = kNearestNeighborSearchOnKDTree0.getSquareDistance();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(2592, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 753);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(753, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      Sampler<Object> sampler0 = kNearestNeighborSearchOnKDTree0.getSampler(0);
      assertNull(sampler0);
      assertEquals(753, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(kDTreeNode0).toString();
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      KDTreeNode<Object>[] kDTreeNodeArray0 = (KDTreeNode<Object>[]) Array.newInstance(KDTreeNode.class, 7);
      kDTreeNodeArray0[0] = kDTreeNode0;
      kNearestNeighborSearchOnKDTree0.bestPoints = kDTreeNodeArray0;
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      Sampler<Object> sampler0 = kNearestNeighborSearchOnKDTree0.getSampler();
      assertNotNull(sampler0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 6);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(6, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      RealLocalizable realLocalizable0 = kNearestNeighborSearchOnKDTree0.getPosition(0);
      assertNull(realLocalizable0);
      assertEquals(6, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40, 40, 65).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 1545);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      
      KDTree<Integer> kDTree1 = kNearestNeighborSearchOnKDTree0.tree;
      assertSame(kDTree1, kDTree0);
      assertNotNull(kDTree1);
      assertEquals(65, kDTree1.numDimensions());
      assertEquals(0L, kDTree1.size());
      
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree1 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree1, 1545);
      assertNotNull(kNearestNeighborSearchOnKDTree1);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(65, kDTree1.numDimensions());
      assertEquals(0L, kDTree1.size());
      assertEquals(65, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1545, kNearestNeighborSearchOnKDTree1.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
      
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree2 = kNearestNeighborSearchOnKDTree1.copy();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree2);
      assertSame(kDTree1, kDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree2);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree0);
      assertNotNull(kNearestNeighborSearchOnKDTree2);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(65, kDTree1.numDimensions());
      assertEquals(0L, kDTree1.size());
      assertEquals(65, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1545, kNearestNeighborSearchOnKDTree1.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertEquals(65, kNearestNeighborSearchOnKDTree2.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree2.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree2.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree2.getK());
      assertFalse(kNearestNeighborSearchOnKDTree0.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree0));
      
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(kDTreeNode0).toString();
      doReturn((double)1545).when(kDTreeNode0).getSplitCoordinate();
      doReturn(44).when(kDTreeNode0).getSplitDimension();
      doReturn((double)1545).when(kDTreeNode0).squDistanceTo(any(double[].class));
      kNearestNeighborSearchOnKDTree2.searchNode(kDTreeNode0);
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree2);
      assertSame(kDTree1, kDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree2);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(65, kDTree1.numDimensions());
      assertEquals(0L, kDTree1.size());
      assertEquals(65, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1545, kNearestNeighborSearchOnKDTree1.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertEquals(65, kNearestNeighborSearchOnKDTree2.numDimensions());
      assertEquals(1545.0, kNearestNeighborSearchOnKDTree2.getSquareDistance(), 0.01);
      assertEquals(39.30648801406709, kNearestNeighborSearchOnKDTree2.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree2.getK());
      assertFalse(kNearestNeighborSearchOnKDTree0.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree0.equals((Object)kNearestNeighborSearchOnKDTree2));
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree2));
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree0));
      
      RealLocalizable realLocalizable0 = kNearestNeighborSearchOnKDTree2.getPosition();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree2);
      assertSame(kDTree1, kDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree2);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree2, kNearestNeighborSearchOnKDTree0);
      assertNotNull(realLocalizable0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(65, kDTree1.numDimensions());
      assertEquals(0L, kDTree1.size());
      assertEquals(65, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1545, kNearestNeighborSearchOnKDTree1.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertEquals(65, kNearestNeighborSearchOnKDTree2.numDimensions());
      assertEquals(1545.0, kNearestNeighborSearchOnKDTree2.getSquareDistance(), 0.01);
      assertEquals(39.30648801406709, kNearestNeighborSearchOnKDTree2.getDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree2.getK());
      assertFalse(kNearestNeighborSearchOnKDTree0.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree0.equals((Object)kNearestNeighborSearchOnKDTree2));
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree2));
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree1));
      assertFalse(kNearestNeighborSearchOnKDTree2.equals((Object)kNearestNeighborSearchOnKDTree0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1793);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1793, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      int int0 = kNearestNeighborSearchOnKDTree0.getK();
      assertEquals(1793, int0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1793, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      double[] doubleArray0 = new double[1];
      kNearestNeighborSearchOnKDTree0.bestSquDistances = doubleArray0;
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      double double0 = kNearestNeighborSearchOnKDTree0.getDistance(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 2);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(2, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      double double0 = kNearestNeighborSearchOnKDTree0.getDistance(0);
      assertEquals(1.3407807929942596E154, double0, 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(2, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      double[] doubleArray0 = new double[1];
      kNearestNeighborSearchOnKDTree0.bestSquDistances = doubleArray0;
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      double double0 = kNearestNeighborSearchOnKDTree0.getDistance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 2);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(2, kNearestNeighborSearchOnKDTree0.getK());
      
      double double0 = kNearestNeighborSearchOnKDTree0.getDistance();
      assertEquals(1.3407807929942596E154, double0, 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(2, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      kNearestNeighborSearchOnKDTree0.bestSquDistances = doubleArray0;
      assertEquals(Double.NaN, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals((-1.0), kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotNull(kNearestNeighborSearchOnKDTree1);
      assertEquals(Double.NaN, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals((-1.0), kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(Double.NaN, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertEquals((-1.0), kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1, kNearestNeighborSearchOnKDTree1.getK());
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotNull(kNearestNeighborSearchOnKDTree1);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree1.getK());
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40, 40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 40);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotNull(kNearestNeighborSearchOnKDTree1);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(40, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(40, kNearestNeighborSearchOnKDTree1.getK());
      assertEquals(0.0, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1497);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1497, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.searchNode((KDTreeNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn((KDTreeNode) null).when(kDTree0).getRoot();
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      Point point0 = new Point(0);
      assertNotNull(point0);
      assertEquals(0, point0.numDimensions());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.search(point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 20);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(20, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      Point point0 = new Point(20);
      assertNotNull(point0);
      assertEquals(20, point0.numDimensions());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.search(point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getSampler();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 865);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(865, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      kNearestNeighborSearchOnKDTree0.bestPoints = null;
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(865, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getPosition();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.getK());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getPosition();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 5917);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(5917, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      // Undeclared exception!
      kNearestNeighborSearchOnKDTree0.copy();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1663);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1663, kNearestNeighborSearchOnKDTree0.getK());
      
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      assertNotSame(kNearestNeighborSearchOnKDTree0, kNearestNeighborSearchOnKDTree1);
      assertNotSame(kNearestNeighborSearchOnKDTree1, kNearestNeighborSearchOnKDTree0);
      assertNotNull(kNearestNeighborSearchOnKDTree1);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1663, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree1.getDistance(), 0.01);
      assertEquals(1663, kNearestNeighborSearchOnKDTree1.getK());
      assertFalse(kNearestNeighborSearchOnKDTree1.equals((Object)kNearestNeighborSearchOnKDTree0));
      
      kNearestNeighborSearchOnKDTree1.bestSquDistances = null;
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1663, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(0, kNearestNeighborSearchOnKDTree1.numDimensions());
      assertEquals(1663, kNearestNeighborSearchOnKDTree1.getK());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-2690)).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1537);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(0, kNearestNeighborSearchOnKDTree0.numDimensions());
      assertEquals(1537, kNearestNeighborSearchOnKDTree0.getK());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.copy();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2690
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(2315, 17).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 17);
      assertNotNull(kNearestNeighborSearchOnKDTree0);
      assertEquals(17, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(2315, kNearestNeighborSearchOnKDTree0.numDimensions());
      
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 4041);
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      KDTree<Integer> kDTree1 = kNearestNeighborSearchOnKDTree1.tree;
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree2 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree1, 4041);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = null;
      try {
        kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>((KDTree<Object>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = null;
      try {
        kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, (-119));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -119
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 17);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getPosition(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 17 out of bounds for length 17
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 6);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getSampler(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1816);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getDistance(1816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1816 out of bounds for length 1816
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 670);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getSquareDistance(670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 670 out of bounds for length 670
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn((-0.8595003192589253)).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(4086).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 65);
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals((-0.8595003192589253), kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(4132.266, 0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(21, 0).when(kDTreeNode0).getSplitDimension();
      doReturn((double)40, 0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 40);
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(40.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(1.7976931348623157E308).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 1);
      kNearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KDTreeNode<Integer> kDTreeNode0 = (KDTreeNode<Integer>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 1545);
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      
      Object object0 = new Object();
      long[] longArray0 = new long[6];
      PointSample<Object> pointSample0 = PointSample.wrap(object0, longArray0);
      kNearestNeighborSearchOnKDTree0.search(pointSample0);
      assertEquals(0.0, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 1816);
      int int0 = kNearestNeighborSearchOnKDTree0.numDimensions();
      assertEquals(0, int0);
      assertEquals(1816, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.3407807929942596E154, kNearestNeighborSearchOnKDTree0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getDistance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      int int0 = kNearestNeighborSearchOnKDTree0.getK();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Object> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Object>(kDTree0, 0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnKDTree0.getSquareDistance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 1545);
      kNearestNeighborSearchOnKDTree0.getSampler();
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(40).when(kDTree0).numDimensions();
      KNearestNeighborSearchOnKDTree<Integer> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<Integer>(kDTree0, 1545);
      kNearestNeighborSearchOnKDTree0.getPosition();
      assertEquals(1545, kNearestNeighborSearchOnKDTree0.getK());
      assertEquals(1.7976931348623157E308, kNearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }
}
