/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:10:12 GMT 2022
 */

package net.imglib2.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.IterableRealInterval;
import net.imglib2.KDTree;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.RealPositionable;
import net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KNearestNeighborSearchOnIterableRealInterval_ESTest extends KNearestNeighborSearchOnIterableRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2842);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      Point point0 = pointSampleList0.minAsPoint();
      RealPoint realPoint1 = point0.positionAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 505);
      Integer integer0 = new Integer(2147483639);
      pointSampleList0.add(point0, integer0);
      pointSampleList0.maxAsRealPoint();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(384);
      Point point1 = pointSampleList0.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      realPoint0.numDimensions();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point1);
      kNearestNeighborSearchOnIterableRealInterval2.search(pointSample0);
      kNearestNeighborSearchOnIterableRealInterval2.squareDistance(realPoint1);
      PointSampleList<Object> pointSampleList2 = new PointSampleList<Object>(1);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval3 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList2, 2842);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval4 = kNearestNeighborSearchOnIterableRealInterval3.copy();
      kNearestNeighborSearchOnIterableRealInterval4.getSquareDistance();
      kNearestNeighborSearchOnIterableRealInterval1.search(point1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      Integer integer0 = new Integer(0);
      pointSampleList0.add(point0, integer0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 82);
      point0.positionAsDoubleArray();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval1.copy();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval2 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 3034);
      kNearestNeighborSearchOnIterableRealInterval2.search(point0);
      kNearestNeighborSearchOnIterableRealInterval2.getSquareDistance(165);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point(0);
      point0.positionAsPoint();
      Integer integer0 = new Integer((-5208));
      Integer integer1 = new Integer(0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Integer integer2 = new Integer(40);
      pointSampleList0.add(point0, integer2);
      pointSampleList0.maxAsRealPoint();
      Point point1 = pointSampleList0.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 4019);
      Integer integer3 = new Integer(0);
      pointSampleList0.add((Point) null, integer2);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(0);
      pointSampleList1.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      realPoint0.numDimensions();
      kNearestNeighborSearchOnIterableRealInterval1.search(point1);
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(point1);
      PointSampleList<Object> pointSampleList2 = new PointSampleList<Object>(495);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList2, 4038);
      // Undeclared exception!
      kNearestNeighborSearchOnIterableRealInterval2.copy();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      point0.positionAsPoint();
      Integer integer0 = new Integer((-5208));
      Integer integer1 = new Integer((-1));
      pointSampleList0.add(point0, integer1);
      pointSampleList0.maxAsRealPoint();
      Point point1 = pointSampleList0.minAsPoint();
      point1.positionAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 1121);
      pointSampleList0.add(point1, integer0);
      pointSampleList0.maxAsRealPoint();
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      int[] intArray0 = new int[0];
      Point point2 = new Point(intArray0);
      point2.numDimensions();
      kNearestNeighborSearchOnIterableRealInterval0.search(point2);
      kNearestNeighborSearchOnIterableRealInterval0.getDistance(388);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      Point point1 = point0.positionAsPoint();
      Integer integer0 = new Integer(388);
      Integer integer1 = new Integer((-5208));
      pointSampleList0.add(point0, integer1);
      pointSampleList0.maxAsRealPoint();
      pointSampleList0.minAsPoint();
      RealPoint realPoint0 = point1.positionAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 475);
      pointSampleList0.add(point1, integer1);
      pointSampleList0.maxAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval1.search(realPoint0);
      kNearestNeighborSearchOnIterableRealInterval1.getPosition();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      point0.positionAsPoint();
      Integer integer0 = new Integer(388);
      Integer integer1 = new Integer((-5208));
      pointSampleList0.add(point0, integer1);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      pointSampleList0.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 505);
      realPoint0.numDimensions();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 388);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 505;
      intArray0[1] = 388;
      realPoint0.setPosition((Localizable) point0);
      intArray0[2] = 388;
      intArray0[3] = 505;
      intArray0[4] = 388;
      intArray0[5] = (-5208);
      intArray0[6] = 455;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      kNearestNeighborSearchOnIterableRealInterval1.search(pointSample0);
      kNearestNeighborSearchOnIterableRealInterval1.getSampler();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(58);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 58);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      Integer integer0 = new Integer(58);
      pointSampleList0.add(point0, integer0);
      pointSampleList0.add(point0, integer0);
      kNearestNeighborSearchOnIterableRealInterval0.search(point0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      assertNotSame(kNearestNeighborSearchOnIterableRealInterval1, kNearestNeighborSearchOnIterableRealInterval0);
      assertEquals(0, kNearestNeighborSearchOnIterableRealInterval1.getK());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(371);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList1, 371);
      kNearestNeighborSearchOnIterableRealInterval2.getSquareDistance();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getSampler();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getPosition();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      Point point0 = new Point(longArray0);
      Point point1 = point0.positionAsPoint();
      Integer integer0 = new Integer((-5208));
      pointSampleList0.add(point1, integer0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      pointSampleList0.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      realPoint0.numDimensions();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(58);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 58);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      Integer integer0 = new Integer(58);
      pointSampleList0.add(point0, integer0);
      kNearestNeighborSearchOnIterableRealInterval0.search(point0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(9);
      RealPoint realPoint0 = new RealPoint(9);
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(9);
      Point point0 = pointSampleList1.dimensionsAsPoint();
      Point point1 = point0.positionAsPoint();
      point1.move((Localizable) point0);
      realPoint0.move((Localizable) point1);
      pointSampleList0.cursor();
      pointSampleList0.min((Positionable) realPoint0);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList0, 9);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 9;
      doubleArray0[8] = (double) 9;
      pointSampleList1.realMax(doubleArray0);
      kNearestNeighborSearchOnIterableRealInterval0.getDistance();
      kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      kNearestNeighborSearchOnIterableRealInterval0.numDimensions();
      kNearestNeighborSearchOnIterableRealInterval0.search(point0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList1, 1215);
      kNearestNeighborSearchOnIterableRealInterval1.search(point0);
      kNearestNeighborSearchOnIterableRealInterval1.getSquareDistance();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getDistance(1953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1953 out of bounds for length 1215
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(2339);
      Point point0 = pointSampleList1.dimensionsAsPoint();
      Point point1 = point0.positionAsPoint();
      realPoint0.setPosition((Localizable) point1);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      PointSampleList<Object> pointSampleList2 = new PointSampleList<Object>(695);
      KDTree<Object> kDTree0 = new KDTree<Object>(pointSampleList2);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Object>(kDTree0, 695);
      kNearestNeighborSearchOnIterableRealInterval1.getPosition();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.squareDistance((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      pointSampleList0.minAsRealPoint();
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(388);
      KDTree<Object> kDTree0 = new KDTree<Object>(pointSampleList1);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(kDTree0, 9);
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList2 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(9);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(pointSampleList2, 388);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      kNearestNeighborSearchOnIterableRealInterval2.getPosition();
      kNearestNeighborSearchOnIterableRealInterval1.getPosition(8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(5);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 5);
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(5);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 5);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(11);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 11);
      Integer integer0 = new Integer(11);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>((int) integer0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      // Undeclared exception!
      try { 
        RealPoint.wrap((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 3308;
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(3308);
      int int1 = 1;
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 1);
      kNearestNeighborSearchOnIterableRealInterval0.getK();
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(2);
      RealPoint realPoint0 = new RealPoint(1);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(40);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 40);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getSquareDistance(40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 40 out of bounds for length 40
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(44);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 44);
      double[] doubleArray0 = new double[0];
      RealPoint realPoint0 = new RealPoint(doubleArray0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 21;
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(21);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 21);
      kNearestNeighborSearchOnIterableRealInterval0.getK();
      int int1 = 0;
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(0);
      RealPoint realPoint0 = new RealPoint(286);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 286;
      longArray0[2] = (long) 21;
      longArray0[3] = (long) 286;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 286;
      longArray0[6] = (long) 286;
      longArray0[7] = (long) 21;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.squareDistance(pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(375);
      realPointSampleList0.cursor();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 375);
      kNearestNeighborSearchOnIterableRealInterval0.getSampler();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      RealPointSampleList<RealPointSampleList.RealPointSampleListCursor> realPointSampleList1 = new RealPointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = new KDTree<RealPointSampleList.RealPointSampleListCursor>(realPointSampleList1);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(kDTree0, 508);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval1.getSquareDistance(0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval2 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval3 = kNearestNeighborSearchOnIterableRealInterval2.copy();
      kNearestNeighborSearchOnIterableRealInterval3.numDimensions();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval4 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 493);
      kNearestNeighborSearchOnIterableRealInterval4.getDistance(1);
      kNearestNeighborSearchOnIterableRealInterval4.getSampler();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(2);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (-960L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 2;
      pointSampleList0.min(longArray0);
      pointSampleList0.numDimensions();
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(pointSampleList0, 0);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(2);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList1, 2);
      kNearestNeighborSearchOnIterableRealInterval1.copy();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 2);
      kNearestNeighborSearchOnIterableRealInterval1.search(realPointSample0);
      kNearestNeighborSearchOnIterableRealInterval1.numDimensions();
      kNearestNeighborSearchOnIterableRealInterval1.getSampler(0);
      kNearestNeighborSearchOnIterableRealInterval2.getK();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      RealPointSampleList<RealPointSampleList.RealPointSampleListCursor> realPointSampleList0 = new RealPointSampleList<RealPointSampleList.RealPointSampleListCursor>(62);
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = new KDTree<RealPointSampleList.RealPointSampleListCursor>(realPointSampleList0);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(pointSampleList0, 1);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.getPosition();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      KDTree<Integer> kDTree0 = new KDTree<Integer>(realPointSampleList0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      int int1 = 682;
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(kDTree0, 682);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 682;
      doubleArray1[1] = (double) 682;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 682;
      doubleArray1[2] = (double) 0;
      doubleArray1[6] = (double) 0;
      RealPoint.wrap(doubleArray1);
      realPoint0.numDimensions();
      pointSampleList0.minAsRealPoint();
      // Undeclared exception!
      try { 
        realPoint0.localize((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(44);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 44);
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(21);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 21);
      kNearestNeighborSearchOnIterableRealInterval0.getK();
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(21);
      RealPoint realPoint0 = new RealPoint(21);
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      // Undeclared exception!
      try { 
        RealPoint.wrap((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealPointSampleList<RealPointSampleList.RealPointSampleListCursor> realPointSampleList0 = new RealPointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = new KDTree<RealPointSampleList.RealPointSampleListCursor>(realPointSampleList0);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(kDTree0, 0);
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(3227);
      KDTree<Object> kDTree1 = new KDTree<Object>(realPointSampleList1);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Object>(kDTree1, 3252);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 3265);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval2.search(realPointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3227 out of bounds for length 3227
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      pointSampleList0.toString();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval3 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList1, 3322);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval4 = kNearestNeighborSearchOnIterableRealInterval3.copy();
      kNearestNeighborSearchOnIterableRealInterval1.copy();
      kNearestNeighborSearchOnIterableRealInterval4.copy();
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval5 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval6 = kNearestNeighborSearchOnIterableRealInterval2.copy();
      kNearestNeighborSearchOnIterableRealInterval6.search(realPointSample0);
      kNearestNeighborSearchOnIterableRealInterval5.numDimensions();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval6.getSampler(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      int int0 = 0;
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2);
      int int1 = 56;
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 56);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      kNearestNeighborSearchOnIterableRealInterval2.getSquareDistance();
      int int2 = 503;
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getDistance(503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 503 out of bounds for length 56
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      kNearestNeighborSearchOnIterableRealInterval0.getK();
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(0);
      RealPoint realPoint0 = pointSampleList1.maxAsRealPoint();
      kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      // Undeclared exception!
      try { 
        RealPoint.wrap((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.getK();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getSquareDistance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(388);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.getSquareDistance();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      pointSampleList0.toString();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(0);
      int int0 = 3322;
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval3 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList1, 3322);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval4 = kNearestNeighborSearchOnIterableRealInterval3.copy();
      kNearestNeighborSearchOnIterableRealInterval1.copy();
      kNearestNeighborSearchOnIterableRealInterval4.copy();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval5 = kNearestNeighborSearchOnIterableRealInterval4.copy();
      kNearestNeighborSearchOnIterableRealInterval4.getSquareDistance();
      int int1 = 503;
      kNearestNeighborSearchOnIterableRealInterval5.getDistance(503);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval2.getSquareDistance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(5);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 1);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getDistance(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 1
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getDistance();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(388);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.numDimensions();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(2267);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 2267);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(2267);
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = new KDTree<RealPointSampleList.RealPointSampleListCursor>(pointSampleList0);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval1 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(kDTree0, 2267);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval2 = kNearestNeighborSearchOnIterableRealInterval1.copy();
      kNearestNeighborSearchOnIterableRealInterval2.getDistance();
      LinkedList<RealPointSampleList.RealPointSampleListCursor> linkedList0 = new LinkedList<RealPointSampleList.RealPointSampleListCursor>();
      KDTree<Object> kDTree1 = null;
      try {
        kDTree1 = new KDTree<Object>((List<Object>) null, (List<RealPointSampleList.RealPointSampleListCursor>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(388);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      point0.positionAsPoint();
      Integer integer0 = new Integer(388);
      Integer integer1 = new Integer((-5208));
      pointSampleList0.add(point0, integer1);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      pointSampleList0.minAsPoint();
      point0.positionAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 505);
      Integer integer2 = new Integer(384);
      pointSampleList0.add(point0, integer2);
      pointSampleList0.maxAsRealPoint();
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(495);
      pointSampleList1.minAsPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      kNearestNeighborSearchOnIterableRealInterval1.copy();
      assertEquals(505, kNearestNeighborSearchOnIterableRealInterval1.getK());
      
      realPoint0.numDimensions();
      kNearestNeighborSearchOnIterableRealInterval1.search(point0);
      assertEquals(0.0, kNearestNeighborSearchOnIterableRealInterval1.getSquareDistance(), 0.01);
      
      double double0 = kNearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      assertEquals(1552.0, double0, 0.01);
      
      PointSampleList<Object> pointSampleList2 = new PointSampleList<Object>(0);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval2 = new KNearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList2, 495);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval3 = kNearestNeighborSearchOnIterableRealInterval2.copy();
      double double1 = kNearestNeighborSearchOnIterableRealInterval3.getSquareDistance();
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      assertEquals(0, kNearestNeighborSearchOnIterableRealInterval0.getK());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 0);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 2);
      kNearestNeighborSearchOnIterableRealInterval1.search(realPointSample0);
      kNearestNeighborSearchOnIterableRealInterval1.numDimensions();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getSampler(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getSampler(767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 767 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      realPointSampleList0.localizingCursor();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.getPosition(388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 388 out of bounds for length 388
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<RealPointSampleList.RealPointSampleListCursor> realPointSampleList0 = new RealPointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(realPointSampleList0, 0);
      kNearestNeighborSearchOnIterableRealInterval0.copy();
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getPosition(353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 353 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      kNearestNeighborSearchOnIterableRealInterval0.getPosition();
      assertEquals(388, kNearestNeighborSearchOnIterableRealInterval0.getK());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(pointSampleList0, 0);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      Integer integer0 = new Integer(0);
      pointSampleList0.add(point0, integer0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.search(point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 3274;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(3274);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0, 3274);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      Cursor<RealPointSampleList.RealPointSampleListCursor> cursor0 = pointSampleList0.localizingCursor();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.search(cursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.search((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      PointSampleList<RealPointSampleList.RealPointSampleListCursor> pointSampleList0 = new PointSampleList<RealPointSampleList.RealPointSampleListCursor>(0);
      long[] longArray0 = new long[0];
      pointSampleList0.min(longArray0);
      pointSampleList0.numDimensions();
      KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<RealPointSampleList.RealPointSampleListCursor>(pointSampleList0, 0);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      RealPoint realPoint0 = new RealPoint(floatArray0);
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = null;
      try {
        kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2301);
      KDTree<Object> kDTree0 = new KDTree<Object>(pointSampleList0);
      kDTree0.minAsRealPoint();
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = null;
      try {
        kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(kDTree0, (-4727));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4727
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0, 388);
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getSampler(388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 388 out of bounds for length 388
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      KNearestNeighborSearchOnIterableRealInterval<Object> kNearestNeighborSearchOnIterableRealInterval0 = null;
      try {
        kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Object>((IterableRealInterval<Object>) null, 383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      KDTree<Integer> kDTree0 = new KDTree<Integer>(realPointSampleList0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Integer>(kDTree0, 0);
      KNearestNeighborSearchOnIterableRealInterval<Integer> kNearestNeighborSearchOnIterableRealInterval1 = kNearestNeighborSearchOnIterableRealInterval0.copy();
      // Undeclared exception!
      try { 
        kNearestNeighborSearchOnIterableRealInterval1.getSampler((-728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -728 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }
}
