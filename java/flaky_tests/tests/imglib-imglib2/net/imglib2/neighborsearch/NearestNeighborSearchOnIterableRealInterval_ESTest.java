/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:35:14 GMT 2022
 */

package net.imglib2.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.IterableRealInterval;
import net.imglib2.KDTree;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RealCursor;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSampleList;
import net.imglib2.neighborsearch.NearestNeighborSearchOnIterableRealInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NearestNeighborSearchOnIterableRealInterval_ESTest extends NearestNeighborSearchOnIterableRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      PointSampleList<PointSample<Object>> pointSampleList0 = new PointSampleList<PointSample<Object>>(1789);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      Object object0 = new Object();
      realPointSampleList0.add(realPoint0, object0);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(1789);
      RealPoint realPoint1 = pointSampleList1.minAsRealPoint();
      realPointSampleList0.add(realPoint1, object0);
      PointSampleList<Integer> pointSampleList2 = new PointSampleList<Integer>(1578);
      RealPoint realPoint2 = pointSampleList2.maxAsRealPoint();
      nearestNeighborSearchOnIterableRealInterval0.search(realPoint2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      PointSampleList<PointSample<Integer>> pointSampleList0 = new PointSampleList<PointSample<Integer>>(1578);
      Point point0 = pointSampleList0.minAsPoint();
      nearestNeighborSearchOnIterableRealInterval0.search(point0);
      RealPoint realPoint0 = point0.positionAsRealPoint();
      nearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1068);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList0);
      Point point0 = pointSampleList0.minAsPoint();
      double double0 = nearestNeighborSearchOnIterableRealInterval0.squareDistance(point0);
      assertEquals(9.085539196789057E40, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      int int0 = nearestNeighborSearchOnIterableRealInterval0.numDimensions();
      assertEquals(0, int0);
      assertEquals(1.7976931348623157E308, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      
      nearestNeighborSearchOnIterableRealInterval0.squareDistance = (double) 0;
      double double0 = nearestNeighborSearchOnIterableRealInterval0.getSquareDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(1546);
      PointSampleList<PointSample<Object>> pointSampleList1 = new PointSampleList<PointSample<Object>>(1546);
      NearestNeighborSearchOnIterableRealInterval<PointSample<Object>> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<PointSample<Object>>(pointSampleList1);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      nearestNeighborSearchOnIterableRealInterval0.element = (RealCursor<PointSample<Object>>) pointSampleList_PointSampleListCursor0;
      nearestNeighborSearchOnIterableRealInterval0.getSampler();
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1789);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      Object object0 = new Object();
      realPointSampleList0.add(realPoint0, object0);
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(1578);
      RealPoint realPoint1 = pointSampleList1.maxAsRealPoint();
      nearestNeighborSearchOnIterableRealInterval0.search(realPoint1);
      nearestNeighborSearchOnIterableRealInterval0.getPosition();
      assertEquals(5.369655750012409E41, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      
      nearestNeighborSearchOnIterableRealInterval0.squareDistance = (double) 0;
      double double0 = nearestNeighborSearchOnIterableRealInterval0.getDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2152);
      KDTree<Object> kDTree0 = new KDTree<Object>(realPointSampleList0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(kDTree0);
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      
      nearestNeighborSearchOnIterableRealInterval0.squareDistance = (-1.0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval1 = nearestNeighborSearchOnIterableRealInterval0.copy();
      assertEquals((-1.0), nearestNeighborSearchOnIterableRealInterval1.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      
      nearestNeighborSearchOnIterableRealInterval0.squareDistance = (double) 0;
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval1 = nearestNeighborSearchOnIterableRealInterval0.copy();
      assertEquals(0.0, nearestNeighborSearchOnIterableRealInterval1.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(4585);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(4585);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList1);
      double double0 = nearestNeighborSearchOnIterableRealInterval0.squareDistance(realPoint0);
      assertEquals(1.7976931348623157E308, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
      assertEquals(3.900486630831257E41, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(275);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnIterableRealInterval0.squareDistance((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1854);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      long[] longArray0 = new long[0];
      Point point0 = new Point(longArray0);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnIterableRealInterval0.squareDistance(point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3831);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3831);
      realPointSampleList0.add(realPoint0, (Object) null);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      
      PointSampleList<Integer> pointSampleList1 = new PointSampleList<Integer>(3831);
      nearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      assertEquals(0.0, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      PointSampleList<PointSample<Integer>> pointSampleList0 = new PointSampleList<PointSample<Integer>>(1578);
      NearestNeighborSearchOnIterableRealInterval<PointSample<Integer>> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<PointSample<Integer>>(pointSampleList0);
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnIterableRealInterval0.search(realPointSampleList_RealPointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      PointSampleList<PointSample<Object>> pointSampleList0 = new PointSampleList<PointSample<Object>>(1789);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NearestNeighborSearchOnIterableRealInterval<PointSample<Object>> nearestNeighborSearchOnIterableRealInterval0 = null;
      try {
        nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<PointSample<Object>>((IterableRealInterval<PointSample<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1580);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1580);
      RealPoint realPoint0 = pointSampleList0.minAsRealPoint();
      realPointSampleList0.add(realPoint0, nearestNeighborSearchOnIterableRealInterval0);
      assertEquals(1.7976931348623157E308, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
      
      realPointSampleList0.add(realPoint0, pointSampleList0);
      nearestNeighborSearchOnIterableRealInterval0.search(realPoint0);
      assertEquals(0.0, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2152);
      KDTree<Integer> kDTree0 = new KDTree<Integer>(pointSampleList0);
      NearestNeighborSearchOnIterableRealInterval<Integer> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Integer>(kDTree0);
      int int0 = nearestNeighborSearchOnIterableRealInterval0.numDimensions();
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
      assertEquals(2152, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1578);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      nearestNeighborSearchOnIterableRealInterval0.getPosition();
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1580);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(realPointSampleList0);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval1 = nearestNeighborSearchOnIterableRealInterval0.copy();
      assertEquals(1.3407807929942596E154, nearestNeighborSearchOnIterableRealInterval1.getDistance(), 0.01);
      assertNotSame(nearestNeighborSearchOnIterableRealInterval1, nearestNeighborSearchOnIterableRealInterval0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(739);
      NearestNeighborSearchOnIterableRealInterval<Integer> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Integer>(realPointSampleList0);
      double double0 = nearestNeighborSearchOnIterableRealInterval0.getDistance();
      assertEquals(1.3407807929942596E154, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PointSampleList<PointSample<Object>> pointSampleList0 = new PointSampleList<PointSample<Object>>(1546);
      NearestNeighborSearchOnIterableRealInterval<PointSample<Object>> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<PointSample<Object>>(pointSampleList0);
      nearestNeighborSearchOnIterableRealInterval0.getSampler();
      assertEquals(1.7976931348623157E308, nearestNeighborSearchOnIterableRealInterval0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3062);
      NearestNeighborSearchOnIterableRealInterval<Object> nearestNeighborSearchOnIterableRealInterval0 = new NearestNeighborSearchOnIterableRealInterval<Object>(pointSampleList0);
      double double0 = nearestNeighborSearchOnIterableRealInterval0.getSquareDistance();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }
}
