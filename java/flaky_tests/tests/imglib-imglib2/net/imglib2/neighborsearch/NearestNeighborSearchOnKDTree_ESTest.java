/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:03:42 GMT 2022
 */

package net.imglib2.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.KDTree;
import net.imglib2.KDTreeNode;
import net.imglib2.PointSample;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPointSampleList;
import net.imglib2.Sampler;
import net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NearestNeighborSearchOnKDTree_ESTest extends NearestNeighborSearchOnKDTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1795).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      nearestNeighborSearchOnKDTree0.bestSquDistance = (double) 1795;
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(kDTreeNode0).getSplitCoordinate();
      doReturn(374).when(kDTreeNode0).getSplitDimension();
      doReturn((double)374).when(kDTreeNode0).squDistanceTo(any(double[].class));
      nearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(19.339079605813716, nearestNeighborSearchOnKDTree0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1795).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(kDTreeNode0).getSplitCoordinate();
      doReturn(374).when(kDTreeNode0).getSplitDimension();
      doReturn((double)374).when(kDTreeNode0).squDistanceTo(any(double[].class));
      nearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(0.0, nearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>(kDTree0);
      int int0 = nearestNeighborSearchOnKDTree0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>(kDTree0);
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree1 = nearestNeighborSearchOnKDTree0.copy();
      nearestNeighborSearchOnKDTree1.bestSquDistance = 2.0;
      double double0 = nearestNeighborSearchOnKDTree1.getSquareDistance();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>(kDTree0);
      nearestNeighborSearchOnKDTree0.bestSquDistance = (-1.7976931348623157E308);
      double double0 = nearestNeighborSearchOnKDTree0.getSquareDistance();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kDTreeNode0).toString();
      doReturn(0.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(kDTreeNode0).when(kDTree0).getRoot();
      doReturn(1).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      KDTreeNode<Object> kDTreeNode1 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      nearestNeighborSearchOnKDTree0.search(kDTreeNode1);
      Sampler<Object> sampler0 = nearestNeighborSearchOnKDTree0.getSampler();
      assertNotNull(sampler0);
      assertEquals(0.0, nearestNeighborSearchOnKDTree0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(357).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(kDTreeNode0).toString();
      nearestNeighborSearchOnKDTree0.bestPoint = kDTreeNode0;
      RealLocalizable realLocalizable0 = nearestNeighborSearchOnKDTree0.getPosition();
      assertNotNull(realLocalizable0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      nearestNeighborSearchOnKDTree0.bestSquDistance = 4721.77542;
      double double0 = nearestNeighborSearchOnKDTree0.getDistance();
      assertEquals(68.71517605303795, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>(kDTree0);
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree1 = nearestNeighborSearchOnKDTree0.copy();
      assertEquals(0.0, nearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      
      nearestNeighborSearchOnKDTree1.bestSquDistance = (-1.7976931348623157E308);
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree2 = nearestNeighborSearchOnKDTree1.copy();
      assertEquals(Double.NaN, nearestNeighborSearchOnKDTree2.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree1 = nearestNeighborSearchOnKDTree0.copy();
      assertEquals(0.0, nearestNeighborSearchOnKDTree1.getSquareDistance(), 0.01);
      
      nearestNeighborSearchOnKDTree1.bestSquDistance = 1.7976931348623157E308;
      nearestNeighborSearchOnKDTree1.copy();
      assertNotSame(nearestNeighborSearchOnKDTree0, nearestNeighborSearchOnKDTree1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree0.searchNode((KDTreeNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTreeNode0).getSplitDimension();
      doReturn(0.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn((KDTreeNode) null).when(kDTree0).getRoot();
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree0.search(kDTreeNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1370);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree0.search(pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KDTree<RealPointSampleList.RealPointSampleListCursor> kDTree0 = (KDTree<RealPointSampleList.RealPointSampleListCursor>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<RealPointSampleList.RealPointSampleListCursor>(kDTree0);
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(2, 3004, 2098).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree1 = nearestNeighborSearchOnKDTree0.copy();
      // Undeclared exception!
      try { 
        nearestNeighborSearchOnKDTree1.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = null;
      try {
        nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>((KDTree<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn((-2146537558)).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = null;
      try {
        nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2146537558
         //
         verifyException("net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(184).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      KDTreeNode<Object> kDTreeNode0 = (KDTreeNode<Object>) mock(KDTreeNode.class, new ViolatedAssumptionAnswer());
      doReturn(2218.0).when(kDTreeNode0).getSplitCoordinate();
      doReturn(1).when(kDTreeNode0).getSplitDimension();
      doReturn(2773.0).when(kDTreeNode0).squDistanceTo(any(double[].class));
      nearestNeighborSearchOnKDTree0.searchNode(kDTreeNode0);
      assertEquals(0.0, nearestNeighborSearchOnKDTree0.getSquareDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      double double0 = nearestNeighborSearchOnKDTree0.getDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KDTree<Integer> kDTree0 = (KDTree<Integer>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Integer> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Integer>(kDTree0);
      double double0 = nearestNeighborSearchOnKDTree0.getSquareDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      RealLocalizable realLocalizable0 = nearestNeighborSearchOnKDTree0.getPosition();
      assertNull(realLocalizable0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(184).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      int int0 = nearestNeighborSearchOnKDTree0.numDimensions();
      assertEquals(184, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KDTree<Object> kDTree0 = (KDTree<Object>) mock(KDTree.class, new ViolatedAssumptionAnswer());
      doReturn(184).when(kDTree0).numDimensions();
      NearestNeighborSearchOnKDTree<Object> nearestNeighborSearchOnKDTree0 = new NearestNeighborSearchOnKDTree<Object>(kDTree0);
      Sampler<Object> sampler0 = nearestNeighborSearchOnKDTree0.getSampler();
      assertNull(sampler0);
  }
}
