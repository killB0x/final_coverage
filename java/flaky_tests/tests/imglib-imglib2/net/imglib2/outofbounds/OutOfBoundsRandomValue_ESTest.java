/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:30:56 GMT 2022
 */

package net.imglib2.outofbounds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Random;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.outofbounds.OutOfBoundsRandomValue;
import net.imglib2.outofbounds.OutOfBoundsRandomValueFactory;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OutOfBoundsRandomValue_ESTest extends OutOfBoundsRandomValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[2];
      PriorityQueue<BitType> priorityQueue0 = new PriorityQueue<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(priorityQueue0, longArray0);
      BitType bitType0 = new BitType(true);
      OutOfBoundsRandomValueFactory<BitType, RandomAccessibleInterval<BitType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<BitType, RandomAccessibleInterval<BitType>>(bitType0, (-1072L), (-911.74926936));
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = outOfBoundsRandomValueFactory0.create((RandomAccessibleInterval<BitType>) listImg0);
      BitType bitType1 = outOfBoundsRandomValue0.setPositionAndGet(longArray0);
      assertFalse(bitType1.equals((Object)bitType0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[2];
      PriorityQueue<BitType> priorityQueue0 = new PriorityQueue<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(priorityQueue0, longArray0);
      BitType bitType0 = new BitType(true);
      OutOfBoundsRandomValueFactory<BitType, RandomAccessibleInterval<BitType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<BitType, RandomAccessibleInterval<BitType>>(bitType0, (-1072L), (-911.74926936));
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = outOfBoundsRandomValueFactory0.create((RandomAccessibleInterval<BitType>) listImg0);
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue1 = new OutOfBoundsRandomValue<BitType>(outOfBoundsRandomValue0);
      assertEquals(2, outOfBoundsRandomValue1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[1];
      HashSet<BitType> hashSet0 = new HashSet<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(hashSet0, longArray0);
      BitType bitType0 = new BitType();
      MockRandom mockRandom0 = new MockRandom();
      BitType bitType1 = bitType0.duplicateTypeOnSameNativeImg();
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<BitType>((RandomAccessibleInterval<BitType>) listImg0, bitType1, (Random) mockRandom0, (double) 2715L, 0.0);
      // Undeclared exception!
      try { 
        outOfBoundsRandomValue0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.logic.BitType", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[2];
      HashSet<BitType> hashSet0 = new HashSet<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(hashSet0, longArray0);
      MockRandom mockRandom0 = new MockRandom();
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<BitType>((RandomAccessibleInterval<BitType>) listImg0, (BitType) null, (Random) mockRandom0, 75.3088, 75.3088);
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue1 = null;
      try {
        outOfBoundsRandomValue1 = new OutOfBoundsRandomValue<BitType>(outOfBoundsRandomValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsRandomValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[3];
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[6];
      intArray0[0] = 264;
      intArray0[1] = 264;
      intArray0[2] = 264;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      byte[] byteArray0 = new byte[2];
      ByteArray byteArray1 = new ByteArray(byteArray0);
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(byteArray1);
      Fraction fraction0 = unsignedByteType0.getEntitiesPerPixel();
      LazyCellImg.Get<Cell<PlanarImg<VolatileShortType, DirtyDoubleArray>>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<PlanarImg<VolatileShortType, DirtyDoubleArray>>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileShortType, PlanarImg<VolatileShortType, DirtyDoubleArray>> lazyCellImg0 = new LazyCellImg<VolatileShortType, PlanarImg<VolatileShortType, DirtyDoubleArray>>(cellGrid0, fraction0, lazyCellImg_Get0);
      VolatileShortType volatileShortType0 = new VolatileShortType((short)126);
      OutOfBoundsRandomValue<VolatileShortType> outOfBoundsRandomValue0 = null;
      try {
        outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<VolatileShortType>((RandomAccessibleInterval<VolatileShortType>) lazyCellImg0, volatileShortType0, (Random) mockRandom0, 4.94E-321, 3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[2];
      HashSet<BitType> hashSet0 = new HashSet<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(hashSet0, longArray0);
      BitType bitType0 = new BitType();
      MockRandom mockRandom0 = new MockRandom();
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<BitType>((RandomAccessibleInterval<BitType>) listImg0, bitType0, (Random) mockRandom0, (double) 2681L, (double) 2681L);
      outOfBoundsRandomValue0.setPositionAndGet((Localizable) outOfBoundsRandomValue0);
      BitType bitType1 = outOfBoundsRandomValue0.get();
      assertSame(bitType0, bitType1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[9];
      HashSet<BitType> hashSet0 = new HashSet<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(hashSet0, longArray0);
      BitType bitType0 = new BitType();
      MockRandom mockRandom0 = new MockRandom(2654L);
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<BitType>((RandomAccessibleInterval<BitType>) listImg0, bitType0, (Random) mockRandom0, (double) 2654L, (double) 2654L);
      // Undeclared exception!
      try { 
        outOfBoundsRandomValue0.get();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[2];
      HashSet<BitType> hashSet0 = new HashSet<BitType>();
      ListImg<BitType> listImg0 = new ListImg<BitType>(hashSet0, longArray0);
      BitType bitType0 = new BitType();
      MockRandom mockRandom0 = new MockRandom(2681L);
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue0 = new OutOfBoundsRandomValue<BitType>((RandomAccessibleInterval<BitType>) listImg0, bitType0, (Random) mockRandom0, (double) 2681L, (double) 2681L);
      OutOfBoundsRandomValue<BitType> outOfBoundsRandomValue1 = outOfBoundsRandomValue0.copy();
      assertNotSame(outOfBoundsRandomValue0, outOfBoundsRandomValue1);
  }
}
