/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:09:00 GMT 2022
 */

package net.imglib2.outofbounds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Stack;
import java.util.TreeSet;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.ChannelARGBConverter;
import net.imglib2.img.list.ListImg;
import net.imglib2.outofbounds.OutOfBoundsMirrorDoubleBoundary;
import net.imglib2.type.label.BasePairBitType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OutOfBoundsMirrorDoubleBoundary_ESTest extends OutOfBoundsMirrorDoubleBoundary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[8];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      IntervalView<BasePairBitType.Base> intervalView0 = new IntervalView<BasePairBitType.Base>(listImg0, longArray0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) intervalView0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(longArray0);
      assertFalse(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      outOfBoundsMirrorDoubleBoundary0.move(intArray0);
      outOfBoundsMirrorDoubleBoundary0.bck(0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[5];
      longArray0[1] = 481L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      SubsampleIntervalView<BasePairBitType.Base> subsampleIntervalView0 = new SubsampleIntervalView<BasePairBitType.Base>(listImg0, 481L);
      IntervalView<BasePairBitType.Base> intervalView0 = new IntervalView<BasePairBitType.Base>(subsampleIntervalView0, longArray0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) intervalView0);
      outOfBoundsMirrorDoubleBoundary0.bck(1);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[20];
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(treeSet0, longArray0);
      IterableRandomAccessibleInterval<Object> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Object>(listImg0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(iterableRandomAccessibleInterval0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<Object> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<Object>((RandomAccessibleInterval<Object>) subsampleIntervalView0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorDoubleBoundary0.fwd(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorDoubleBoundary0.bck(2058);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2058 out of bounds for length 1
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsMirrorDoubleBoundary", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[20];
      ArrayList<BasePairBitType.Base> arrayList0 = new ArrayList<BasePairBitType.Base>();
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(arrayList0, longArray0);
      SubsampleIntervalView<BasePairBitType.Base> subsampleIntervalView0 = new SubsampleIntervalView<BasePairBitType.Base>(listImg0, longArray0);
      IntervalView<BasePairBitType.Base> intervalView0 = new IntervalView<BasePairBitType.Base>(subsampleIntervalView0, subsampleIntervalView0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) intervalView0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorDoubleBoundary0.bck(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutOfBoundsMirrorDoubleBoundary<ChannelARGBConverter.Channel> outOfBoundsMirrorDoubleBoundary0 = null;
      try {
        outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<ChannelARGBConverter.Channel>((OutOfBoundsMirrorDoubleBoundary<ChannelARGBConverter.Channel>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.AbstractOutOfBoundsMirror", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.bck(0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
      
      outOfBoundsMirrorDoubleBoundary0.setPosition(1, 0);
      assertFalse(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition((-418), 0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(1364, 0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-3272);
      outOfBoundsMirrorDoubleBoundary0.move(intArray0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 422L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(longArray0);
      outOfBoundsMirrorDoubleBoundary0.move(longArray0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 432L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary1 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>(outOfBoundsMirrorDoubleBoundary0);
      outOfBoundsMirrorDoubleBoundary1.bck(0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<BasePairBitType.Base> stack0 = new Stack<BasePairBitType.Base>();
      long[] longArray0 = new long[1];
      longArray0[0] = 422L;
      ListImg<BasePairBitType.Base> listImg0 = new ListImg<BasePairBitType.Base>(stack0, longArray0);
      OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base> outOfBoundsMirrorDoubleBoundary0 = new OutOfBoundsMirrorDoubleBoundary<BasePairBitType.Base>((RandomAccessibleInterval<BasePairBitType.Base>) listImg0);
      outOfBoundsMirrorDoubleBoundary0.setPosition(longArray0);
      assertTrue(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
      
      outOfBoundsMirrorDoubleBoundary0.bck(0);
      assertFalse(outOfBoundsMirrorDoubleBoundary0.isOutOfBounds());
  }
}
