/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:36:20 GMT 2022
 */

package net.imglib2.outofbounds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.outofbounds.OutOfBoundsMirrorExpWindowingFactory;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.StackView;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OutOfBoundsMirrorExpWindowingFactory_ESTest extends OutOfBoundsMirrorExpWindowingFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<Unsigned12BitType, RandomAccessibleInterval<Unsigned12BitType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<Unsigned12BitType, RandomAccessibleInterval<Unsigned12BitType>>(1021);
      outOfBoundsMirrorExpWindowingFactory0.setCommonRelativeFadeOutDistance(0.0F);
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[5];
      intArray0[0] = 1021;
      intArray0[1] = (-6);
      intArray0[2] = (-3629);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction(0L, (-3629));
      LazyCellImg.Get<Cell<ByteArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<ByteArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<Unsigned12BitType, ByteArray> lazyCellImg0 = new LazyCellImg<Unsigned12BitType, ByteArray>(cellGrid0, fraction0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<Unsigned12BitType>) lazyCellImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<Unsigned12BitType, RandomAccessibleInterval<Unsigned12BitType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<Unsigned12BitType, RandomAccessibleInterval<Unsigned12BitType>>(1021);
      int[] intArray0 = new int[4];
      intArray0[0] = 1021;
      intArray0[1] = 1021;
      outOfBoundsMirrorExpWindowingFactory0.setFadeOutDistance(intArray0);
      long[] longArray0 = new long[2];
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction((-1L), (-43L));
      LazyCellImg<Unsigned12BitType, ByteArray> lazyCellImg0 = new LazyCellImg<Unsigned12BitType, ByteArray>(cellGrid0, fraction0, (LazyCellImg.Get<Cell<ByteArray>>) null);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<Unsigned12BitType>) lazyCellImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<VolatileFloatType, RandomAccessibleInterval<VolatileFloatType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<VolatileFloatType, RandomAccessibleInterval<VolatileFloatType>>(0.0F);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance());
      
      outOfBoundsMirrorExpWindowingFactory0.minFadeOutDistance = 0;
      long long0 = outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      OutOfBoundsMirrorExpWindowingFactory<UnsignedShortType, RandomAccessibleInterval<UnsignedShortType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedShortType, RandomAccessibleInterval<UnsignedShortType>>(intArray0);
      outOfBoundsMirrorExpWindowingFactory0.getFadeOutDistance();
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance());
      assertEquals(Float.NaN, outOfBoundsMirrorExpWindowingFactory0.getCommonRelativeFadeOutDistance(), 0.01F);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      OutOfBoundsMirrorExpWindowingFactory<VolatileFloatType, StackView<VolatileFloatType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<VolatileFloatType, StackView<VolatileFloatType>>(intArray0);
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      
      outOfBoundsMirrorExpWindowingFactory0.setExponent(0.0F);
      float float0 = outOfBoundsMirrorExpWindowingFactory0.getExponent();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<BitType, RandomAccessibleInterval<BitType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<BitType, RandomAccessibleInterval<BitType>>(0.0F);
      outOfBoundsMirrorExpWindowingFactory0.setExponent((-2648));
      float float0 = outOfBoundsMirrorExpWindowingFactory0.getExponent();
      assertEquals((-2648.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<VolatileByteType, StackView<VolatileByteType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<VolatileByteType, StackView<VolatileByteType>>((-749.2F));
      float float0 = outOfBoundsMirrorExpWindowingFactory0.getCommonRelativeFadeOutDistance();
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance());
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      assertEquals((-749.2F), float0, 0.01F);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<UnsignedVariableBitLengthType, StackView<UnsignedVariableBitLengthType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedVariableBitLengthType, StackView<UnsignedVariableBitLengthType>>((-970));
      outOfBoundsMirrorExpWindowingFactory0.commonFadeOutDistance = 0;
      long long0 = outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>((float) 10);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      ListImg<UnsignedLongType> listImg0 = new ListImg<UnsignedLongType>(longArray0, unsignedLongType0);
      outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) listImg0);
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getCommonRelativeFadeOutDistance(), 0.01F);
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance());
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<VolatileDoubleType, RandomAccessibleInterval<VolatileDoubleType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<VolatileDoubleType, RandomAccessibleInterval<VolatileDoubleType>>();
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.setFadeOutDistance((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsMirrorExpWindowingFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[3];
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>((float) 3);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      ListImg<UnsignedLongType> listImg0 = new ListImg<UnsignedLongType>(longArray0, unsignedLongType0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>(intArray0);
      long[] longArray0 = new long[7];
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, 2848);
      Fraction fraction0 = new Fraction();
      NtreeImg<UnsignedLongType, DoubleNtree> ntreeImg0 = new NtreeImg<UnsignedLongType, DoubleNtree>(doubleNtree0, longArray0, fraction0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) ntreeImg0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsMirrorExpWindowingFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<Unsigned2BitType, StackView<Unsigned2BitType>> outOfBoundsMirrorExpWindowingFactory0 = null;
      try {
        outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<Unsigned2BitType, StackView<Unsigned2BitType>>((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsMirrorExpWindowingFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>(intArray0);
      long[] longArray0 = new long[2];
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<UnsignedLongType> supplier0 = (Supplier<UnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<UnsignedLongType> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<UnsignedLongType>((-3226), biConsumer0, supplier0);
      RandomAccessibleOnRealRandomAccessible<UnsignedLongType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<UnsignedLongType>(functionRealRandomAccessible0);
      SubsampleView<UnsignedLongType> subsampleView0 = new SubsampleView<UnsignedLongType>(randomAccessibleOnRealRandomAccessible0, longArray0);
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      IntervalView<UnsignedLongType> intervalView0 = new IntervalView<UnsignedLongType>(subsampleView0, finalInterval0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) intervalView0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3226
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction((-17), (-17));
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, (-17));
      NtreeImg<UnsignedLongType, DoubleNtree> ntreeImg0 = new NtreeImg<UnsignedLongType, DoubleNtree>(doubleNtree0, longArray0, fraction0);
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>((float) (-17));
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) ntreeImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, RandomAccessibleInterval<NativeBoolType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, RandomAccessibleInterval<NativeBoolType>>((-833));
      long long0 = outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance();
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      assertEquals((-833L), outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance());
      assertEquals(6L, long0);
      assertEquals(Float.NaN, outOfBoundsMirrorExpWindowingFactory0.getCommonRelativeFadeOutDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[9];
      OutOfBoundsMirrorExpWindowingFactory<BitType, StackView<BitType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<BitType, StackView<BitType>>(intArray0);
      long long0 = outOfBoundsMirrorExpWindowingFactory0.getCommonFadeOutDistance();
      assertEquals(10.0F, outOfBoundsMirrorExpWindowingFactory0.getExponent(), 0.01F);
      assertEquals(6L, long0);
      assertEquals(6L, outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance());
      assertEquals(Float.NaN, outOfBoundsMirrorExpWindowingFactory0.getCommonRelativeFadeOutDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, StackView<NativeBoolType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, StackView<NativeBoolType>>((-2145465652));
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.getFadeOutDistance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.OutOfBoundsMirrorExpWindowingFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, RandomAccessibleInterval<NativeBoolType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<NativeBoolType, RandomAccessibleInterval<NativeBoolType>>((-833));
      outOfBoundsMirrorExpWindowingFactory0.setMinFadeOutDistance((-2145465652));
      long long0 = outOfBoundsMirrorExpWindowingFactory0.getMinFadeOutDistance();
      assertEquals((-2145465652L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsMirrorExpWindowingFactory0 = new OutOfBoundsMirrorExpWindowingFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>(2849);
      long[] longArray0 = new long[2];
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, 2849);
      Fraction fraction0 = new Fraction();
      NtreeImg<UnsignedLongType, DoubleNtree> ntreeImg0 = new NtreeImg<UnsignedLongType, DoubleNtree>(doubleNtree0, longArray0, fraction0);
      // Undeclared exception!
      try { 
        outOfBoundsMirrorExpWindowingFactory0.create((RandomAccessibleInterval<UnsignedLongType>) ntreeImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeRandomAccess", e);
      }
  }
}
