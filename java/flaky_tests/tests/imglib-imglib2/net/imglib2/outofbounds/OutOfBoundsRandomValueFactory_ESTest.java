/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:18:56 GMT 2022
 */

package net.imglib2.outofbounds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.img.basictypeaccess.IntAccess;
import net.imglib2.outofbounds.OutOfBoundsRandomValue;
import net.imglib2.outofbounds.OutOfBoundsRandomValueFactory;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.StackView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OutOfBoundsRandomValueFactory_ESTest extends OutOfBoundsRandomValueFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(0L);
      OutOfBoundsRandomValueFactory<UnsignedLongType, StackView<UnsignedLongType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<UnsignedLongType, StackView<UnsignedLongType>>(unsignedLongType0, (-495.0), (-495.0));
      outOfBoundsRandomValueFactory0.setMinMax((-2364.1695226961015), Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(bigInteger0);
      OutOfBoundsRandomValueFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>(unsignedLongType0, (byte) (-63), 0.0);
      // Undeclared exception!
      try { 
        outOfBoundsRandomValueFactory0.create((RandomAccessibleInterval<UnsignedLongType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.AbstractOutOfBoundsValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IntAccess intAccess0 = mock(IntAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intAccess0).getValue(anyInt());
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intAccess0);
      OutOfBoundsRandomValueFactory<UnsignedIntType, RandomAccessibleInterval<UnsignedIntType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<UnsignedIntType, RandomAccessibleInterval<UnsignedIntType>>(unsignedIntType0, (-2868.242238087), (-2868.242238087));
      RealRandomAccessible<UnsignedIntType> realRandomAccessible0 = (RealRandomAccessible<UnsignedIntType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      RandomAccessibleOnRealRandomAccessible<UnsignedIntType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<UnsignedIntType>(realRandomAccessible0);
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[1];
      IntervalView<UnsignedIntType> intervalView0 = new IntervalView<UnsignedIntType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray1);
      // Undeclared exception!
      try { 
        outOfBoundsRandomValueFactory0.create((RandomAccessibleInterval<UnsignedIntType>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(bigInteger0);
      OutOfBoundsRandomValueFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<UnsignedLongType, RandomAccessibleInterval<UnsignedLongType>>(unsignedLongType0, (byte) (-63), 0.0);
      MockRandom mockRandom0 = new MockRandom(3718L);
      outOfBoundsRandomValueFactory0.setRandom(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntAccess intAccess0 = mock(IntAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intAccess0).getValue(anyInt());
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(intAccess0);
      OutOfBoundsRandomValueFactory<UnsignedIntType, RandomAccessibleInterval<UnsignedIntType>> outOfBoundsRandomValueFactory0 = new OutOfBoundsRandomValueFactory<UnsignedIntType, RandomAccessibleInterval<UnsignedIntType>>(unsignedIntType0, (-2868.242238087), (-2868.242238087));
      RealRandomAccessible<UnsignedIntType> realRandomAccessible0 = (RealRandomAccessible<UnsignedIntType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<UnsignedIntType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<UnsignedIntType>(realRandomAccessible0);
      long[] longArray0 = new long[5];
      IntervalView<UnsignedIntType> intervalView0 = new IntervalView<UnsignedIntType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      OutOfBoundsRandomValue<UnsignedIntType> outOfBoundsRandomValue0 = outOfBoundsRandomValueFactory0.create((RandomAccessibleInterval<UnsignedIntType>) intervalView0);
      assertEquals(5, outOfBoundsRandomValue0.numDimensions());
  }
}
