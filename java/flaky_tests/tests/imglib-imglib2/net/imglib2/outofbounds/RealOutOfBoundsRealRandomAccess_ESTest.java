/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:25:31 GMT 2022
 */

package net.imglib2.outofbounds;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.outofbounds.RealOutOfBounds;
import net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealOutOfBoundsRealRandomAccess_ESTest extends RealOutOfBoundsRealRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1092), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move((-1092), 0);
      assertEquals((-1092), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((RealOutOfBounds) null).when(realOutOfBounds0).copy();
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>((-4167), realOutOfBounds0);
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess1 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(realOutOfBoundsRealRandomAccess0);
      assertEquals((-4167), realOutOfBoundsRealRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Integer>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Integer>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Integer>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Integer>>((-2472), realOutOfBounds0);
      long[] longArray0 = new long[6];
      realOutOfBoundsRealRandomAccess0.setPosition(longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      int[] intArray0 = new int[3];
      realOutOfBoundsRealRandomAccess0.setPosition(intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition((float[]) null);
      assertEquals(0, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-620), realOutOfBounds0);
      double[] doubleArray0 = new double[3];
      realOutOfBoundsRealRandomAccess0.setPosition(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-243), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition((RealLocalizable) realOutOfBoundsRealRandomAccess0);
      assertEquals((-243), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1092), realOutOfBounds0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Point point0 = new Point(pointSample0);
      realOutOfBoundsRealRandomAccess0.setPosition((Localizable) point0);
      assertEquals((-1092), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-2295), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition((-2295), (-1));
      assertEquals((-2295), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1092), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition(0.0F, 140);
      assertEquals((-1092), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition(1.0, 1);
      assertEquals(0, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(1420, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move((long[]) null);
      assertEquals(1420, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[5];
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(10, realOutOfBounds0);
      double[] doubleArray0 = new double[3];
      realOutOfBoundsRealRandomAccess0.move(doubleArray0);
      assertEquals(10, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(0, realOutOfBounds0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1764);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      realOutOfBoundsRealRandomAccess0.move((RealLocalizable) pointSampleList_PointSampleListCursor0);
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(0, realOutOfBounds0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      Point point0 = pointSampleList0.maxAsPoint();
      realOutOfBoundsRealRandomAccess0.move((Localizable) point0);
      assertEquals(0, point0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-527), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move((long) (-527), (-527));
      assertEquals((-527), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(2, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move((float) 2, 0);
      assertEquals(2, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-527), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.move((double) (-527), 2014);
      assertEquals((-527), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealOutOfBounds<Object> realOutOfBounds0 = (RealOutOfBounds<Object>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Object>((-1439), realOutOfBounds0);
      float[] floatArray0 = new float[1];
      realOutOfBoundsRealRandomAccess0.localize(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      double[] doubleArray0 = new double[9];
      realOutOfBoundsRealRandomAccess0.localize(doubleArray0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-154), realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.fwd(0);
      assertEquals((-154), realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.bck(0);
      assertEquals(0, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(realOutOfBounds0).isOutOfBounds();
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-3408), realOutOfBounds0);
      boolean boolean0 = realOutOfBoundsRealRandomAccess0.isOutOfBounds();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realOutOfBounds0).isOutOfBounds();
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(3686, realOutOfBounds0);
      boolean boolean0 = realOutOfBoundsRealRandomAccess0.isOutOfBounds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((-555.2068F), 0.0F).when(realOutOfBounds0).getFloatPosition(anyInt());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(10, realOutOfBounds0);
      float float0 = realOutOfBoundsRealRandomAccess0.getFloatPosition(10);
      float float1 = realOutOfBoundsRealRandomAccess0.getFloatPosition(10);
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(realOutOfBounds0).getDoublePosition(anyInt());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(1420, realOutOfBounds0);
      double double0 = realOutOfBoundsRealRandomAccess0.getDoublePosition(1364);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((double)3686).when(realOutOfBounds0).getDoublePosition(anyInt());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(3686, realOutOfBounds0);
      double double0 = realOutOfBoundsRealRandomAccess0.getDoublePosition(3686);
      assertEquals(3686.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((-3395.5490171323972)).when(realOutOfBounds0).getDoublePosition(anyInt());
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>(1420, realOutOfBounds0);
      double double0 = realOutOfBoundsRealRandomAccess0.getDoublePosition(1364);
      assertEquals((-3395.5490171323972), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBounds0 = (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(realOutOfBounds0).get();
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>((-23), realOutOfBounds0);
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess1 = realOutOfBoundsRealRandomAccess0.get();
      assertNull(realOutOfBoundsRealRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBounds<Integer> realOutOfBounds1 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn(realOutOfBounds0).when(realOutOfBounds1).copy();
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, realOutOfBounds1);
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess1 = realOutOfBoundsRealRandomAccess0.copy();
      assertNotSame(realOutOfBoundsRealRandomAccess1, realOutOfBoundsRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealOutOfBounds<Object> realOutOfBounds0 = (RealOutOfBounds<Object>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((RealOutOfBounds) null).when(realOutOfBounds0).copy();
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Object>(566, realOutOfBounds0);
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess1 = realOutOfBoundsRealRandomAccess0.copy();
      assertEquals(566, realOutOfBoundsRealRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBounds<Integer> realOutOfBounds1 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((RealOutOfBounds) null).when(realOutOfBounds1).copy();
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-243), realOutOfBounds1);
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess1 = realOutOfBoundsRealRandomAccess0.copy();
      assertNotSame(realOutOfBoundsRealRandomAccess1, realOutOfBoundsRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, (RealOutOfBounds<Integer>) null);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Object>(0, (RealOutOfBounds<Object>) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<RealOutOfBoundsRealRandomAccess<Object>>((-2772), (RealOutOfBounds<RealOutOfBoundsRealRandomAccess<Object>>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(0L, (-2772));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, (RealOutOfBounds<Integer>) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(2469, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-968), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.getFloatPosition((-968));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(827, (RealOutOfBounds<Integer>) null);
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess1 = null;
      try {
        realOutOfBoundsRealRandomAccess1 = new RealOutOfBoundsRealRandomAccess<Integer>(realOutOfBoundsRealRandomAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move(0.0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-3089), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(1424, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((long) 1424, 1424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition((double) (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-668), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(0.0F, (-668));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(3686, realOutOfBounds0);
      realOutOfBoundsRealRandomAccess0.setPosition((-3721L), (-3189));
      assertEquals(3686, realOutOfBoundsRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(1526, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.bck((-1763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-4094), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((float) (-4094), (-4094));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-2838), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-269), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.getDoublePosition((-269));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      doReturn((float)3686).when(realOutOfBounds0).getFloatPosition(anyInt());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(3686, realOutOfBounds0);
      float float0 = realOutOfBoundsRealRandomAccess0.getFloatPosition(3686);
      assertEquals(3686.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-4094), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-269), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-2838), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.isOutOfBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(2313, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.fwd(2313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-5553), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(2469, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1136), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((-1136), (-1136));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(0, (RealOutOfBounds<Integer>) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1918), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Object> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Object>(1107, (RealOutOfBounds<Object>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.setPosition(1107, 1107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RealOutOfBounds<Integer> realOutOfBounds0 = (RealOutOfBounds<Integer>) mock(RealOutOfBounds.class, new ViolatedAssumptionAnswer());
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(3686, realOutOfBounds0);
      int[] intArray0 = new int[1];
      realOutOfBoundsRealRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-269), (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>((-1), (RealOutOfBounds<Integer>) null);
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RealOutOfBoundsRealRandomAccess<Integer> realOutOfBoundsRealRandomAccess0 = new RealOutOfBoundsRealRandomAccess<Integer>(715, (RealOutOfBounds<Integer>) null);
      // Undeclared exception!
      try { 
        realOutOfBoundsRealRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.outofbounds.RealOutOfBoundsRealRandomAccess", e);
      }
  }
}
