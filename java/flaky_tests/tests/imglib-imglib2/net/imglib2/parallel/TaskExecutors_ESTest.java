/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:59:50 GMT 2022
 */

package net.imglib2.parallel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import net.imglib2.parallel.TaskExecutor;
import net.imglib2.parallel.TaskExecutors;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TaskExecutors_ESTest extends TaskExecutors_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaskExecutors.nestedFixedThreadPool(0, 3638);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskExecutor taskExecutor0 = TaskExecutors.nestedFixedThreadPool(54, 54);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TaskExecutor taskExecutor0 = TaskExecutors.fixedThreadPool(1595);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      TaskExecutor taskExecutor0 = TaskExecutors.forExecutorService(forkJoinPool0);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<TaskExecutor> supplier0 = (Supplier<TaskExecutor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = TaskExecutors.threadFactory(supplier0);
      ThreadFactory threadFactory1 = TaskExecutors.applyTaskExecutorToThreadFactory(supplier0, threadFactory0);
      assertNotSame(threadFactory0, threadFactory1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TaskExecutor taskExecutor0 = TaskExecutors.singleThreaded();
      assertEquals(1, taskExecutor0.getParallelism());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1);
      TaskExecutor taskExecutor0 = TaskExecutors.forExecutorServiceAndNumThreads(scheduledThreadPoolExecutor0, 1);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TaskExecutor taskExecutor0 = TaskExecutors.multiThreaded();
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TaskExecutor taskExecutor0 = TaskExecutors.numThreads(1);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1, 1, 1, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_AbortPolicy0);
      TaskExecutor taskExecutor0 = TaskExecutors.forExecutorServiceAndNumTasks(threadPoolExecutor0, 1);
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TaskExecutors.fixedThreadPool((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
