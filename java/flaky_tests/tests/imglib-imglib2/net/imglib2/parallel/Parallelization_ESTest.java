/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:45:18 GMT 2022
 */

package net.imglib2.parallel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import net.imglib2.parallel.Parallelization;
import net.imglib2.parallel.SequentialTaskExecutor;
import net.imglib2.parallel.TaskExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parallelization_ESTest extends Parallelization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TaskExecutor taskExecutor0 = Parallelization.getTaskExecutor();
      MockThread mockThread0 = new MockThread("");
      Parallelization.runWithExecutor(taskExecutor0, (Runnable) mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TaskExecutor taskExecutor0 = SequentialTaskExecutor.getInstance();
      Parallelization.Frame parallelization_Frame0 = Parallelization.setExecutorRequiresReset(taskExecutor0);
      assertNotNull(parallelization_Frame0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Callable<ForkJoinTask<SequentialTaskExecutor>> callable0 = (Callable<ForkJoinTask<SequentialTaskExecutor>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<SequentialTaskExecutor> forkJoinTask0 = Parallelization.runWithNumThreads(0, callable0);
      assertNull(forkJoinTask0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TaskExecutor taskExecutor0 = Parallelization.getTaskExecutor();
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(taskExecutor0).when(callable0).call();
      SequentialTaskExecutor sequentialTaskExecutor0 = (SequentialTaskExecutor)Parallelization.runWithExecutor(taskExecutor0, callable0);
      assertEquals(1, sequentialTaskExecutor0.getParallelism());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callable0).toString();
      ForkJoinTask<Object> forkJoinTask0 = ForkJoinTask.adapt((Callable<?>) callable0);
      Callable<ForkJoinTask<Object>> callable1 = (Callable<ForkJoinTask<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(forkJoinTask0).when(callable1).call();
      ForkJoinTask<Object> forkJoinTask1 = Parallelization.runSingleThreaded(callable1);
      assertSame(forkJoinTask0, forkJoinTask1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelization.runWithExecutor((ExecutorService) null, (Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Callable<Object> callable0 = null;
      // Undeclared exception!
      try { 
        Parallelization.runSingleThreaded((Callable<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelization.runMultiThreaded((Callable<SequentialTaskExecutor>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Runnable runnable0 = null;
      // Undeclared exception!
      try { 
        Parallelization.runMultiThreaded((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Callable<ForkJoinTask<SequentialTaskExecutor>> callable0 = (Callable<ForkJoinTask<SequentialTaskExecutor>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      Object object0 = Parallelization.runWithExecutor((TaskExecutor) null, callable1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TaskExecutor taskExecutor0 = Parallelization.getTaskExecutor();
      // Undeclared exception!
      try { 
        Parallelization.runWithExecutor(taskExecutor0, (Callable<Delayed>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Callable<SequentialTaskExecutor> callable0 = (Callable<SequentialTaskExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(callable0).toString();
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<SequentialTaskExecutor> forkJoinTask0 = forkJoinPool0.submit(callable0);
      Callable<ForkJoinTask<SequentialTaskExecutor>> callable1 = (Callable<ForkJoinTask<SequentialTaskExecutor>>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(forkJoinTask0).when(callable1).call();
      Parallelization.runWithNumThreads(0, callable1);
      Callable<Object> callable2 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelization.runWithNumThreads((-1956), (Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Callable<SequentialTaskExecutor> callable0 = (Callable<SequentialTaskExecutor>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Parallelization.runWithExecutor((ExecutorService) null, callable0);
      TaskExecutor taskExecutor0 = Parallelization.getTaskExecutor();
      assertNotNull(taskExecutor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelization.runWithNumThreads(1, (Callable<Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThread mockThread0 = new MockThread("net.imglib2.parallel.Parallelization");
      Parallelization.runWithNumThreads(925, (Runnable) mockThread0);
      //  // Unstable assertion: assertFalse(mockThread0.isDaemon());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      Parallelization.runWithExecutor((ExecutorService) null, (Runnable) mockThread0);
      Parallelization.runSingleThreaded((Runnable) mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Delayed delayed0 = Parallelization.runSingleThreaded(callable0);
      assertNull(delayed0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExecutorService executorService0 = Parallelization.getExecutorService();
      assertFalse(executorService0.isShutdown());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parallelization.runSingleThreaded((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.parallel.Parallelization", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      Parallelization.runMultiThreaded(callable0);
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockThread mockThread0 = new MockThread("net.imglib2.parallel.DefaultTaskExecutor");
      Parallelization.runMultiThreaded((Runnable) mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
  }
}
