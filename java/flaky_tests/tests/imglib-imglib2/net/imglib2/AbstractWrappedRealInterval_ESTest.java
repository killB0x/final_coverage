/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:53:53 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.PriorityQueue;
import net.imglib2.FinalInterval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealPoint;
import net.imglib2.RealPositionable;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractWrappedRealInterval_ESTest extends AbstractWrappedRealInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[4];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, false);
      ListImg<DirtyVolatileLongArray> listImg0 = new ListImg<DirtyVolatileLongArray>(longArray0, dirtyVolatileLongArray0);
      IterableRandomAccessibleInterval<DirtyVolatileLongArray> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<DirtyVolatileLongArray>(listImg0);
      // Undeclared exception!
      try { 
        iterableRandomAccessibleInterval0.realMin((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[2];
      PriorityQueue<FinalInterval> priorityQueue0 = new PriorityQueue<FinalInterval>();
      ListImg<FinalInterval> listImg0 = new ListImg<FinalInterval>(priorityQueue0, longArray0);
      SubsampleIntervalView<FinalInterval> subsampleIntervalView0 = new SubsampleIntervalView<FinalInterval>(listImg0, longArray0);
      IterableRandomAccessibleInterval<FinalInterval> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<FinalInterval>) subsampleIntervalView0);
      // Undeclared exception!
      try { 
        iterableRandomAccessibleInterval0.realMax(1467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1467 out of bounds for length 2
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[7];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, false);
      ListImg<DirtyVolatileLongArray> listImg0 = new ListImg<DirtyVolatileLongArray>(longArray0, dirtyVolatileLongArray0);
      IterableRandomAccessibleInterval<DirtyVolatileLongArray> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<DirtyVolatileLongArray>(listImg0);
      double[] doubleArray0 = iterableRandomAccessibleInterval0.minAsDoubleArray();
      iterableRandomAccessibleInterval0.realMin(doubleArray0);
      assertEquals(0L, iterableRandomAccessibleInterval0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PriorityQueue<RandomAccessibleInterval<DirtyIntArray>> priorityQueue0 = new PriorityQueue<RandomAccessibleInterval<DirtyIntArray>>();
      long[] longArray0 = new long[2];
      ListImg<RandomAccessibleInterval<DirtyIntArray>> listImg0 = new ListImg<RandomAccessibleInterval<DirtyIntArray>>(priorityQueue0, longArray0);
      IterableRandomAccessibleInterval<RandomAccessibleInterval<DirtyIntArray>> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<RandomAccessibleInterval<DirtyIntArray>>(listImg0);
      double double0 = iterableRandomAccessibleInterval0.realMin(63);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[7];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, false);
      ListImg<DirtyVolatileLongArray> listImg0 = new ListImg<DirtyVolatileLongArray>(longArray0, dirtyVolatileLongArray0);
      IterableRandomAccessibleInterval<DirtyVolatileLongArray> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<DirtyVolatileLongArray>(listImg0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        iterableRandomAccessibleInterval0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[7];
      FloatType floatType0 = new FloatType((-729L));
      ListImg<FloatType> listImg0 = new ListImg<FloatType>(longArray0, floatType0);
      RealPoint realPoint0 = listImg0.maxAsRealPoint();
      IterableRandomAccessibleInterval<FloatType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<FloatType>) listImg0);
      iterableRandomAccessibleInterval0.realMin((RealPositionable) realPoint0);
      assertEquals(0L, iterableRandomAccessibleInterval0.size());
  }
}
