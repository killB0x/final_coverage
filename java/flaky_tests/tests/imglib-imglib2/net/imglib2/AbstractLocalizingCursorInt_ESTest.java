/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:24:49 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import net.imglib2.AbstractLocalizingCursorInt;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListLocalizingCursor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractLocalizingCursorInt_ESTest extends AbstractLocalizingCursorInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      listLocalizingCursor0.jumpFwd((-594));
      assertFalse(linkedList0.contains((-594)));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      long[] longArray0 = new long[8];
      linkedList0.add((Integer) null);
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      Integer integer0 = listLocalizingCursor0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer(368);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      AbstractLocalizingCursorInt<Integer> abstractLocalizingCursorInt0 = listLocalizingCursor0.copyCursor();
      assertEquals(5, abstractLocalizingCursorInt0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[9];
      Integer integer0 = new Integer((-1));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      ListLocalizingCursor<Object> listLocalizingCursor0 = listImg0.localizingCursor();
      AbstractLocalizingCursorInt<Object> abstractLocalizingCursorInt0 = listLocalizingCursor0.copy();
      assertEquals(9, abstractLocalizingCursorInt0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[2];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      // Undeclared exception!
      try { 
        listLocalizingCursor0.jumpFwd(1719L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      long[] longArray0 = new long[8];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      // Undeclared exception!
      try { 
        listLocalizingCursor0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      ListLocalizingCursor<Integer> listLocalizingCursor0 = new ListLocalizingCursor<Integer>(listImg0);
      listLocalizingCursor0.remove();
      assertEquals(1, listLocalizingCursor0.numDimensions());
  }
}
