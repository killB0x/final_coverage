/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:15:14 GMT 2022
 */

package net.imglib2.iterator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.iterator.OffsetableIntervalIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OffsetableIntervalIterator_ESTest extends OffsetableIntervalIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2864L;
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0);
      offsetableIntervalIterator0.setMin(longArray0);
      assertArrayEquals(new long[] {2864L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[2];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0);
      int[] intArray0 = new int[7];
      intArray0[1] = 813;
      offsetableIntervalIterator0.setMin(intArray0);
      assertArrayEquals(new int[] {0, 813, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(intArray0);
      // Undeclared exception!
      try { 
        offsetableIntervalIterator0.setMin((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.iterator.OffsetableIntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[2];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0);
      // Undeclared exception!
      try { 
        offsetableIntervalIterator0.setMin((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.iterator.OffsetableIntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[2];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        offsetableIntervalIterator0.setMin(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.OffsetableIntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[0];
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[0];
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[0];
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      OffsetableIntervalIterator offsetableIntervalIterator0 = null;
      try {
        offsetableIntervalIterator0 = new OffsetableIntervalIterator(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(finalInterval0);
      assertTrue(offsetableIntervalIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(intArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        offsetableIntervalIterator0.setMin(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.OffsetableIntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[2];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(longArray0, longArray0);
      assertEquals((-1L), offsetableIntervalIterator0.getIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[3];
      OffsetableIntervalIterator offsetableIntervalIterator0 = new OffsetableIntervalIterator(intArray0, intArray0);
      assertTrue(offsetableIntervalIterator0.hasNext());
  }
}
