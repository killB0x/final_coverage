/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:59:30 GMT 2022
 */

package net.imglib2.iterator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.PointSampleList;
import net.imglib2.iterator.IntervalIterator;
import net.imglib2.iterator.ZeroMinIntervalIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalIterator_ESTest extends IntervalIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      intervalIterator0.jumpFwd((-9223372036854775808L));
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals(9223372036854775807L, intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      intervalIterator0.fwd();
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-9223372036854775808L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertNotNull(intervalIterator0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      intervalIterator0.fwd();
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals(0L, intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2003L);
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2003L)}, longArray0);
      
      IntervalIterator intervalIterator1 = IntervalIterator.create(intervalIterator0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, intervalIterator0.numDimensions());
      assertTrue(intervalIterator1.hasNext());
      assertEquals(1, intervalIterator1.numDimensions());
      assertEquals((-1L), intervalIterator1.getIndex());
      assertNotNull(intervalIterator1);
      assertEquals(1, longArray0.length);
      assertNotSame(intervalIterator0, intervalIterator1);
      assertNotSame(intervalIterator1, intervalIterator0);
      assertArrayEquals(new long[] {(-2003L)}, longArray0);
      assertFalse(intervalIterator1.equals((Object)intervalIterator0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[3] = 1;
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0, intArray1);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(4, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray1);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(7, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      intervalIterator0.localize(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intervalIterator0.localize(intArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, intervalIterator0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(2, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      intervalIterator0.dimensions(longArray0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(3, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      intervalIterator0.localize(floatArray0);
      assertEquals(3, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      intervalIterator0.localize(doubleArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, intArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[6];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(6, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long long0 = intervalIterator0.getLongPosition(1);
      assertEquals(0L, long0);
      assertEquals(6, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 1885L;
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(6, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 1885L, 0L, 0L, 0L, 0L}, longArray0);
      
      long long0 = intervalIterator0.getLongPosition(1);
      assertEquals(1885L, long0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(6, intervalIterator0.numDimensions());
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 1885L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1073741824;
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1073741824}, intArray0);
      
      long long0 = intervalIterator0.getLongPosition(1);
      assertEquals((-1L), long0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1073741824}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(2, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      int int0 = intervalIterator0.getIntPosition(0);
      assertEquals(0, int0);
      assertEquals(2, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2037;
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0, intArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(8, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2037, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = intervalIterator0.getIntPosition(0);
      assertEquals(2037, int0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(8, intervalIterator0.numDimensions());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2037, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1294L);
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(8, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1294L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = intervalIterator0.getIntPosition(0);
      assertEquals((-1294), int0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(8, intervalIterator0.numDimensions());
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1294L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      intervalIterator0.jumpFwd(3478L);
      assertEquals(3477L, intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      long long0 = intervalIterator0.getIndex();
      assertEquals(3477L, long0);
      assertEquals(3477L, intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2500L);
      longArray0[1] = (-2500L);
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2500L), (-2500L), 0L}, longArray0);
      
      IntervalIterator intervalIterator1 = IntervalIterator.create(intervalIterator0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator1.getIndex());
      assertEquals(3, intervalIterator1.numDimensions());
      assertFalse(intervalIterator1.hasNext());
      assertNotNull(intervalIterator1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2500L), (-2500L), 0L}, longArray0);
      
      float float0 = intervalIterator1.getFloatPosition(1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(3, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator1.getIndex());
      assertEquals(3, intervalIterator1.numDimensions());
      assertFalse(intervalIterator1.hasNext());
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2500L), (-2500L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 814L;
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(9, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 814L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float float0 = intervalIterator0.getFloatPosition(1);
      assertEquals(814.0F, float0, 0.01F);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(9, intervalIterator0.numDimensions());
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 814L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1908L);
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1908L)}, longArray0);
      
      float float0 = intervalIterator0.getFloatPosition(0);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(1, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1908L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      IntervalIterator intervalIterator1 = IntervalIterator.create(intervalIterator0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, intervalIterator1.numDimensions());
      assertEquals((-1L), intervalIterator1.getIndex());
      assertTrue(intervalIterator1.hasNext());
      assertNotNull(intervalIterator1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double double0 = intervalIterator1.getDoublePosition(0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(1, intervalIterator1.numDimensions());
      assertEquals((-1L), intervalIterator1.getIndex());
      assertTrue(intervalIterator1.hasNext());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[3] = 2251;
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0, intArray0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(7, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 2251, 0, 0, 0}, intArray0);
      
      double double0 = intervalIterator0.getDoublePosition(3);
      assertEquals(2251.0, double0, 0.01);
      assertTrue(intervalIterator0.hasNext());
      assertEquals(7, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 2251, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1073741824;
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1073741824}, intArray0);
      
      double double0 = intervalIterator0.getDoublePosition(1);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1073741824}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[13];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals(13, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(13, longArray0.length);
      
      long long0 = intervalIterator0.dimension(0);
      assertEquals(0L, long0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals(13, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(13, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2315L);
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(7, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2315L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long long0 = intervalIterator0.dimension(0);
      assertEquals((-2315L), long0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertEquals(7, intervalIterator0.numDimensions());
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2315L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertFalse(intervalIterator0.hasNext());
      assertEquals(3, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.toString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(3, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.localize(longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[6];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(6, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertNotNull(intervalIterator0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        intervalIterator0.localize(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertEquals(3, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.localize((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(3, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        intervalIterator0.localize(floatArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[3];
      ZeroMinIntervalIterator zeroMinIntervalIterator0 = new ZeroMinIntervalIterator(longArray0);
      assertFalse(zeroMinIntervalIterator0.hasNext());
      assertEquals((-1L), zeroMinIntervalIterator0.getIndex());
      assertEquals(3, zeroMinIntervalIterator0.numDimensions());
      assertNotNull(zeroMinIntervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        zeroMinIntervalIterator0.localize(doubleArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(3, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.getLongPosition(2828);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2828 out of bounds for length 3
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(2, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.getIntPosition(2147483646);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483646 out of bounds for length 2
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[32];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals(32, intervalIterator0.numDimensions());
      assertNotNull(intervalIterator0);
      assertEquals(32, longArray0.length);
      
      // Undeclared exception!
      try { 
        intervalIterator0.getFloatPosition(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      assertEquals(1, intervalIterator0.numDimensions());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.getDoublePosition(2681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2681 out of bounds for length 1
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[3];
      ZeroMinIntervalIterator zeroMinIntervalIterator0 = new ZeroMinIntervalIterator(longArray0);
      assertEquals(3, zeroMinIntervalIterator0.numDimensions());
      assertFalse(zeroMinIntervalIterator0.hasNext());
      assertEquals((-1L), zeroMinIntervalIterator0.getIndex());
      assertNotNull(zeroMinIntervalIterator0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        zeroMinIntervalIterator0.dimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[4];
      int[] intArray0 = new int[9];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0, intArray0);
      assertEquals(9, intervalIterator0.numDimensions());
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertNotNull(intervalIterator0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        intervalIterator0.dimensions(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.dimension((-45));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -45 out of bounds for length 3
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalIterator.create((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      // Undeclared exception!
      try { 
        IntervalIterator.create(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[5];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[0];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[0];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      IntervalIterator intervalIterator0 = null;
      try {
        intervalIterator0 = new IntervalIterator(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.iterator.IntervalIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      IntervalIterator intervalIterator1 = new IntervalIterator(intervalIterator0);
      assertEquals((-1L), intervalIterator1.getIndex());
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
      assertFalse(intervalIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[5];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.localize((int[]) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      long long0 = intervalIterator0.dimension(1);
      assertEquals(1L, long0);
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[11];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      boolean boolean0 = intervalIterator0.hasNext();
      assertTrue(boolean0);
      assertEquals((-1L), intervalIterator0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      boolean boolean0 = intervalIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals((-1L), intervalIterator0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(27);
      IntervalIterator intervalIterator0 = IntervalIterator.create(pointSampleList0);
      assertTrue(intervalIterator0.hasNext());
      assertEquals((-1L), intervalIterator0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[5];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      intervalIterator0.reset();
      assertEquals((-1L), intervalIterator0.getIndex());
      assertTrue(intervalIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.getFloatPosition(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 31 out of bounds for length 2
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[8];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      long long0 = intervalIterator0.getIndex();
      assertFalse(intervalIterator0.hasNext());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        intervalIterator0.localize(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.getLongPosition(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[12];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        intervalIterator0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[6];
      int[] intArray0 = new int[7];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0, intArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.localize(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[1];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0, longArray0);
      String string0 = intervalIterator0.toString();
      assertTrue(intervalIterator0.hasNext());
      assertEquals("(-1)", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[8];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      intervalIterator0.fwd();
      long long0 = intervalIterator0.getIndex();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[6];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.getIntPosition(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalIterator intervalIterator0 = new IntervalIterator(longArray0);
      intervalIterator0.jumpFwd((-9223372036854775808L));
      boolean boolean0 = intervalIterator0.hasNext();
      assertEquals(9223372036854775807L, intervalIterator0.getIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntervalIterator intervalIterator0 = new IntervalIterator(intArray0);
      // Undeclared exception!
      try { 
        intervalIterator0.getDoublePosition(1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }
}
