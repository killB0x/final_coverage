/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:20:09 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalRealInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.RealRandomAccessibleRealInterval;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.img.basictypeaccess.FloatAccess;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListRandomAccess;
import net.imglib2.interpolation.Interpolant;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.position.RealPositionRealRandomAccessible;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.real.FloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealRandomAccessible_ESTest extends RealRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<FloatType> supplier0 = (Supplier<FloatType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<FloatType> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<FloatType>(0, biConsumer0, supplier0);
      FloatType floatType0 = functionRealRandomAccessible0.getAt((float[]) null);
      assertNull(floatType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FloatAccess floatAccess0 = mock(FloatAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(floatAccess0).getValue(anyInt());
      FloatType floatType0 = new FloatType(floatAccess0);
      Supplier<FloatType> supplier0 = (Supplier<FloatType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(floatType0).when(supplier0).get();
      FunctionRealRandomAccessible<FloatType> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<FloatType>(0, biConsumer0, supplier0);
      FloatType floatType1 = functionRealRandomAccessible0.getAt((float[]) null);
      assertEquals((-3.4028234663852886E38), floatType1.getMinValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      RealRandomAccessibleRealInterval<BiConvertedRealRandomAccessibleRealInterval<Integer, Object, UnsignedIntType>> realRandomAccessibleRealInterval0 = (RealRandomAccessibleRealInterval<BiConvertedRealRandomAccessibleRealInterval<Integer, Object, UnsignedIntType>>) mock(RealRandomAccessibleRealInterval.class, CALLS_REAL_METHODS);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, realRandomAccessibleRealInterval0).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, biConsumer0, supplier0);
      double[] doubleArray0 = new double[0];
      functionRealRandomAccessible0.getAt(doubleArray0);
      double[] doubleArray1 = new double[0];
      Object object0 = functionRealRandomAccessible0.getAt(doubleArray1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, biConsumer0, supplier0);
      Object object0 = functionRealRandomAccessible0.getAt((RealLocalizable) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType();
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(unsigned4BitType0).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, biConsumer0, supplier0);
      Unsigned4BitType unsigned4BitType1 = (Unsigned4BitType)functionRealRandomAccessible0.getAt((RealLocalizable) null);
      assertEquals(1.0, unsigned4BitType1.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(63, 0);
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible((-3), (-3));
      float[] floatArray0 = new float[6];
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt(floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(Integer.MAX_VALUE, 0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      realPositionRealRandomAccessible0.getAt(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible((-3), (-3));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt(doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.RealPositionRealRandomAccessible$RealPositionRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Interpolant<Object, Integer> interpolant0 = new Interpolant<Object, Integer>(integer0, (InterpolatorFactory<Object, Integer>) null, 0);
      long[] longArray0 = new long[1];
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      ListRandomAccess<Object> listRandomAccess0 = listImg0.randomAccess();
      // Undeclared exception!
      try { 
        interpolant0.getAt((RealLocalizable) listRandomAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.Interpolant", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible((-365), 0);
      double[] doubleArray0 = new double[8];
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(doubleArray0, doubleArray0);
      RealPoint realPoint0 = finalRealInterval0.minAsRealPoint();
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt((RealLocalizable) realPoint0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -365
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(1480, 1480);
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(0, 0);
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt((float[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.RealPositionRealRandomAccessible$RealPositionRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(0, 0);
      // Undeclared exception!
      try { 
        realPositionRealRandomAccessible0.getAt((RealLocalizable) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.RealPositionRealRandomAccessible$RealPositionRealRandomAccess", e);
      }
  }
}
