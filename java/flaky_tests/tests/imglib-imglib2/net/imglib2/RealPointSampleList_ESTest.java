/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:34:54 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealCursor;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.RealPositionable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealPointSampleList_ESTest extends RealPointSampleList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(63);
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(63);
      // Undeclared exception!
      try { 
        realPointSampleList1.realMax((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RealPoint realPoint0 = new RealPoint(33);
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(842);
      RealPoint realPoint1 = realPointSampleList0.minAsRealPoint();
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(842);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      Point point0 = pointSampleList_PointSampleListCursor0.position;
      realPointSampleList0.add(realPoint1, (Object) null);
      // Undeclared exception!
      try { 
        realPointSampleList0.add(realPoint0, realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 33 out of bounds for length 33
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(2);
      assertNotNull(realPoint0);
      assertEquals(2, realPoint0.numDimensions());
      
      realPointSampleList0.add(realPoint0, realPoint0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(2, realPoint0.numDimensions());
      
      realPointSampleList0.add(realPoint0, realPoint0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      assertEquals(2, realPoint0.numDimensions());
      
      realPointSampleList0.realMin((RealPositionable) realPoint0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPoint realPoint0 = new RealPoint(3678);
      assertNotNull(realPoint0);
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint1 = realPointSampleList0.maxAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3678);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3678, pointSampleList0.numDimensions());
      
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      assertNotNull(pointSampleList_PointSampleListCursor0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3678, pointSampleList0.numDimensions());
      assertEquals(3678, pointSampleList_PointSampleListCursor0.numDimensions());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      
      Point point0 = pointSampleList_PointSampleListCursor0.position;
      assertNull(point0);
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(2034);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(2034, realPointSampleList1.numDimensions());
      
      realPointSampleList1.add(realPoint1, realCursor0);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      assertEquals(3678, realPoint1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(2034, realPointSampleList1.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      assertNotSame(realPoint1, realPoint0);
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      RealPoint realPoint2 = new RealPoint(3678);
      assertFalse(realPoint2.equals((Object)realPoint1));
      assertNotNull(realPoint2);
      assertEquals(3678, realPoint2.numDimensions());
      
      realPointSampleList0.add(realPoint0, (Object) null);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertFalse(realPoint0.equals((Object)realPoint1));
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      assertNotSame(realPoint0, realPoint2);
      assertNotSame(realPoint0, realPoint1);
      
      realPointSampleList1.add(realPoint0, pointSampleList_PointSampleListCursor0);
      assertFalse(realPoint0.equals((Object)realPoint1));
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(3678, realPoint0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3678, pointSampleList0.numDimensions());
      assertEquals(3678, pointSampleList_PointSampleListCursor0.numDimensions());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      assertEquals(2L, realPointSampleList1.size());
      assertEquals(2034, realPointSampleList1.numDimensions());
      assertNotSame(realPoint0, realPoint2);
      assertNotSame(realPoint0, realPoint1);
      assertNotSame(realPointSampleList1, realPointSampleList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(2);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(pointSample0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L}, longArray0);
      assertEquals(5, pointSample0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(pointSample0);
      assertEquals(5, longArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L}, longArray0);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(5, realPoint0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(2, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      Object object0 = realPointSampleList_RealPointSampleListCursor0.get();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNull(object0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(2, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      realPointSampleList1.add(realPoint0, (Object) null);
      assertEquals(5, longArray0.length);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L}, longArray0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(5, realPoint0.numDimensions());
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      long long0 = realPointSampleList1.size();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(1L, long0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      RealPointSampleList<Integer> realPointSampleList2 = new RealPointSampleList<Integer>(1242);
      assertNotNull(realPointSampleList2);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1242, realPointSampleList2.numDimensions());
      
      double double0 = realPointSampleList2.realMin(2);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1242, realPointSampleList2.numDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray1 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(3678);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      
      realPointSampleList1.realMin(doubleArray1);
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPointSampleList<Point> realPointSampleList2 = new RealPointSampleList<Point>(44);
      assertNotNull(realPointSampleList2);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(44, realPointSampleList2.numDimensions());
      
      RealCursor<Point> realCursor0 = realPointSampleList2.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(44, realPointSampleList2.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      // Undeclared exception!
      realPointSampleList1.realMin(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1);
      assertNotNull(realPointSampleList0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1, realPoint0.numDimensions());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      realPointSampleList0.add(realPoint0, integer0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1, realPoint0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.jumpFwd(1);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(0);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList<Object> realPointSampleList2 = new RealPointSampleList<Object>(1);
      assertNotNull(realPointSampleList2);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1, realPointSampleList2.numDimensions());
      
      long long0 = realPointSampleList2.size();
      assertEquals(0L, long0);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1, realPointSampleList2.numDimensions());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      realPointSampleList2.realMax(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 1.0, (-1.7976931348623157E308), 0.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1, realPointSampleList2.numDimensions());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-1399.9435F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0;
      realPointSampleList_RealPointSampleListCursor0.localize(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 0.0F, (-1399.9435F), 0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(2);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(2, realPointSampleList1.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList1.realMin((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 979;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(979);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      
      realPointSampleList0.lastIndex = 979;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.cursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      assertTrue(realCursor0.hasNext());
      
      RealCursor<Object> realCursor1 = realPointSampleList0.cursor();
      assertFalse(realCursor1.equals((Object)realCursor0));
      assertNotNull(realCursor1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      assertTrue(realCursor1.hasNext());
      assertNotSame(realCursor1, realCursor0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      assertEquals(979, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 979;
      doubleArray0[1] = (double) 979;
      doubleArray0[2] = (double) 979;
      RealCursor<Point> realCursor2 = realPointSampleList_RealPointSampleListCursor0.copy();
      assertNotNull(realCursor2);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(979, realPointSampleList0.numDimensions());
      assertEquals(979, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertTrue(realCursor2.hasNext());
      
      doubleArray0[3] = (double) 979;
      doubleArray0[4] = (double) 979;
      doubleArray0[5] = (double) 979;
      doubleArray0[6] = (double) 979;
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1, realPointSampleList0.numDimensions());
      
      RealPointSampleList<Point> realPointSampleList1 = new RealPointSampleList<Point>(1);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (-3543L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(pointSample0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-3543L), 0L, (-1L)}, longArray0);
      assertEquals(6, pointSample0.numDimensions());
      
      Supplier<Object> supplier1 = pointSample0.sampleSupplier;
      assertEquals(6, longArray0.length);
      assertNotNull(supplier1);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-3543L), 0L, (-1L)}, longArray0);
      assertSame(supplier1, supplier0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = 425.5242F;
      floatArray0[5] = (float) 1L;
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier1, floatArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(realPointSample0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-3543L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 425.5242F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, pointSample0.numDimensions());
      
      Supplier<Object> supplier2 = realPointSample0.sampleSupplier;
      assertEquals(6, longArray0.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(supplier2);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-3543L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 425.5242F, 1.0F}, floatArray0, 0.01F);
      assertSame(supplier2, supplier1);
      assertSame(supplier2, supplier0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-3543L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 0.0F;
      RealPointSample<Object> realPointSample1 = new RealPointSample<Object>(supplier2, doubleArray0, false);
      assertEquals(6, longArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, floatArray0.length);
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertNotNull(realPointSample1);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-3543L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0, (-3543.0), 0.0, 1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 425.5242F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, realPointSample0.numDimensions());
      assertEquals(6, pointSample0.numDimensions());
      assertEquals(6, realPointSample1.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList1.realMin((RealPositionable) realPointSample1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1279);
      assertNotNull(realPointSampleList0);
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPoint0.numDimensions());
      
      Integer integer0 = new Integer(1279);
      assertNotNull(integer0);
      assertEquals(1279, (int)integer0);
      
      realPointSampleList0.add(realPoint0, integer0);
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1279, realPoint0.numDimensions());
      
      String string0 = realPoint0.toString();
      assertNotNull(string0);
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1279, realPoint0.numDimensions());
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1279;
      doubleArray0[1] = (double) 1279;
      RealPoint realPoint1 = new RealPoint(doubleArray0, true);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertArrayEquals(new double[] {1279.0, 1279.0}, doubleArray0, 0.01);
      assertEquals(2, realPoint1.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.add(realPoint1, integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(2);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(2, realPoint0.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      
      long long0 = realPointSampleList1.size();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(0L, long0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      RealPoint realPoint1 = new RealPoint(doubleArray0, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertTrue(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(2, realPoint1.numDimensions());
      
      RealPoint realPoint2 = realPoint1.positionAsRealPoint();
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertTrue(realPoint1.equals((Object)realPoint0));
      assertTrue(realPoint2.equals((Object)realPoint0));
      assertTrue(realPoint2.equals((Object)realPoint1));
      assertNotNull(realPoint2);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(2, realPoint1.numDimensions());
      assertEquals(2, realPoint2.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      assertNotSame(realPoint1, realPoint0);
      assertNotSame(realPoint1, realPoint2);
      assertNotSame(realPoint2, realPoint1);
      assertNotSame(realPoint2, realPoint0);
      
      realPointSampleList1.add(realPoint1, realPoint1);
      assertEquals(2, doubleArray0.length);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertTrue(realPoint1.equals((Object)realPoint0));
      assertTrue(realPoint1.equals((Object)realPoint2));
      assertArrayEquals(new double[] {(-1.7976931348623157E308), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(2, realPoint1.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      assertNotSame(realPointSampleList1, realPointSampleList0);
      assertNotSame(realPoint1, realPoint0);
      assertNotSame(realPoint1, realPoint2);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(2, realPointSampleList1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(2, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.getDoublePosition((-1393));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1242);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1242, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(1242);
      assertNotNull(realPoint0);
      assertEquals(1242, realPoint0.numDimensions());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(1242);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1242, realPointSampleList1.numDimensions());
      
      int int0 = realPointSampleList1.numDimensions();
      assertEquals(1242, int0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1242, realPointSampleList1.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1242, realPointSampleList1.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1242, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize((RealPositionable) realPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(3678);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList1.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      Integer integer0 = new Integer((-2376));
      assertNotNull(integer0);
      assertEquals((-2376), (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      realPointSampleList1.add(realPoint0, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      realPointSampleList_RealPointSampleListCursor0.jumpFwd(1);
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPointSampleList<Integer> realPointSampleList2 = new RealPointSampleList<Integer>(1);
      assertFalse(realPointSampleList2.equals((Object)realPointSampleList1));
      assertNotNull(realPointSampleList2);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(1, realPointSampleList2.numDimensions());
      
      RealPointSampleList<Object> realPointSampleList3 = null;
      try {
        realPointSampleList3 = new RealPointSampleList<Object>((-319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -319
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1544;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1544);
      assertNotNull(realPointSampleList0);
      assertEquals(1544, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1544, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1544, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      double[] doubleArray0 = new double[7];
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList0.forEach(consumer0);
      assertEquals(1544, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      doubleArray0[0] = 773.3833508693867;
      int int1 = 223;
      realPointSampleList_RealPointSampleListCursor0.index = 223;
      assertEquals(1544, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1544, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      doubleArray0[1] = (double) 1544;
      doubleArray0[2] = (double) 1544;
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList_RealPointSampleListCursor0.forEachRemaining(consumer1);
      assertEquals(1544, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1544, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      doubleArray0[3] = (double) 1544;
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.jumpFwd(223);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList0.forEach(consumer0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realCursor0.hasNext());
      
      RealPointSampleList<Point> realPointSampleList1 = new RealPointSampleList<Point>(3678);
      assertNotNull(realPointSampleList1);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      int int0 = 1179;
      double double0 = realPointSampleList1.realMax(1179);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.jumpFwd(639L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(33);
      assertNotNull(realPointSampleList0);
      assertEquals(33, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 33 out of bounds for length 33
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(1258);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1258 out of bounds for length 2
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      Point point0 = new Point(0);
      assertNotNull(point0);
      assertEquals(0, point0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPoint0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor1.hasNext());
      
      realPointSampleList_RealPointSampleListCursor1.index = 0;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor1.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor1.fwd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(5);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(5, realPointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.add((RealPoint) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(1);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      
      double[] doubleArray1 = realPointSampleList1.minAsDoubleArray();
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPoint realPoint0 = realPointSampleList1.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      assertEquals(1, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList1.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint1 = realPointSampleList1.minAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      assertEquals(1, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      double double0 = realPointSampleList1.realMin(0);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      int int0 = realPointSampleList1.numDimensions();
      assertEquals(1, int0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1, realPointSampleList1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(17);
      assertNotNull(realPointSampleList0);
      assertEquals(17, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3678;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint1 = realPointSampleList0.minAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3678);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3678, pointSampleList0.numDimensions());
      
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      assertNotNull(pointSampleList_PointSampleListCursor0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3678, pointSampleList0.numDimensions());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      assertEquals(3678, pointSampleList_PointSampleListCursor0.numDimensions());
      
      Point point0 = pointSampleList_PointSampleListCursor0.position;
      assertNull(point0);
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(2034);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(2034, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      realPointSampleList1.add(realPoint1, realCursor0);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      assertEquals(3678, realPoint1.numDimensions());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(2034, realPointSampleList1.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      assertNotSame(realPoint1, realPoint0);
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList_RealPointSampleListCursor0.forEachRemaining(consumer0);
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.getFloatPosition(1234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      realPointSampleList0.realMin(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList1);
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPoint realPoint0 = realPointSampleList1.minAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(0, realPoint0.numDimensions());
      
      realPointSampleList1.add(realPoint0, realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0, realPoint0.numDimensions());
      
      int int0 = realPointSampleList1.numDimensions();
      assertEquals(0, int0);
      assertEquals(1L, realPointSampleList1.size());
      assertEquals(0, realPointSampleList1.numDimensions());
      
      RealPointSampleList realPointSampleList2 = (RealPointSampleList)realPointSampleList0.iterationOrder();
      assertNotNull(realPointSampleList2);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(0L, realPointSampleList2.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(3678);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3678, realPointSampleList1.numDimensions());
      
      RealPointSampleList<Integer> realPointSampleList2 = new RealPointSampleList<Integer>(3678);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2270;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2270);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(2270, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertEquals(2270, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.cursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      RealPoint realPoint1 = realPointSampleList0.maxAsRealPoint();
      assertTrue(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertEquals(2270, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      realPointSampleList0.lastIndex = 4544;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      
      Spliterator<Object> spliterator0 = realPointSampleList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      
      RealCursor<Object> realCursor1 = realPointSampleList0.cursor();
      assertFalse(realCursor1.equals((Object)realCursor0));
      assertNotNull(realCursor1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertTrue(realCursor1.hasNext());
      assertNotSame(realCursor1, realCursor0);
      
      java.util.Iterator<Object> iterator0 = realPointSampleList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      
      RealPoint realPoint2 = realPointSampleList0.minAsRealPoint();
      assertFalse(realPoint2.equals((Object)realPoint1));
      assertFalse(realPoint2.equals((Object)realPoint0));
      assertNotNull(realPoint2);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertEquals(2270, realPoint2.numDimensions());
      assertNotSame(realPoint2, realPoint1);
      assertNotSame(realPoint2, realPoint0);
      
      double[] doubleArray1 = realPointSampleList0.minAsDoubleArray();
      assertEquals(2270, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2270, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        realPointSampleList0.forEach(consumer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = realPointSampleList0.max;
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor1);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor1.hasNext());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      realPointSampleList_RealPointSampleListCursor1.remove();
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor1.hasNext());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      
      RealPointSampleList<Point> realPointSampleList1 = new RealPointSampleList<Point>(1256);
      assertNotNull(realPointSampleList1);
      assertEquals(1256, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      RealPointSampleList realPointSampleList1 = (RealPointSampleList)realPointSampleList0.iterationOrder();
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList<Object> realPointSampleList2 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList2);
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(0L, realPointSampleList2.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      realPointSampleList0.lastIndex = 0;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(doubleArray0, false);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, realPoint0.numDimensions());
      
      boolean boolean0 = realPoint0.equals(realPointSampleList1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(3, realPoint0.numDimensions());
      
      realPointSampleList2.add(realPoint0, realPointSampleList0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(1L, realPointSampleList2.size());
      assertEquals(3, realPoint0.numDimensions());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 970.1119639302;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      boolean boolean1 = realPointSampleList_RealPointSampleListCursor0.hasNext();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.remove();
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPointSampleList<Point> realPointSampleList3 = new RealPointSampleList<Point>(0);
      assertNotNull(realPointSampleList3);
      assertEquals(0L, realPointSampleList3.size());
      assertEquals(0, realPointSampleList3.numDimensions());
      
      RealPoint realPoint1 = realPointSampleList3.minAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList3.size());
      assertEquals(0, realPointSampleList3.numDimensions());
      assertEquals(0, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList2.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor1);
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(1L, realPointSampleList2.size());
      assertTrue(realPointSampleList_RealPointSampleListCursor1.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor1.getFloatPosition(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3678;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      Spliterator<Object> spliterator0 = realPointSampleList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.minAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint1 = realPointSampleList0.minAsRealPoint();
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      double double0 = new Integer(3678);
      assertEquals(3678, double0, 0.01);
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(3678);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3678;
      floatArray0[1] = (float) 3678;
      floatArray0[2] = (float) 3678;
      floatArray0[3] = (float) 3678;
      floatArray0[4] = (float) 3678;
      floatArray0[5] = (float) 3678;
      floatArray0[6] = (float) 3678;
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(238);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(238, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 238;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 238;
      RealPointSampleList<Point> realPointSampleList1 = new RealPointSampleList<Point>(238);
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(238, realPointSampleList1.numDimensions());
      
      RealCursor<Point> realCursor0 = realPointSampleList0.cursor();
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList1));
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(238, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      assertNotSame(realPointSampleList0, realPointSampleList1);
      
      int int0 = realPointSampleList1.numDimensions();
      assertFalse(realPointSampleList1.equals((Object)realPointSampleList0));
      assertEquals(238, int0);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(238, realPointSampleList1.numDimensions());
      assertNotSame(realPointSampleList1, realPointSampleList0);
      
      RealPointSampleList<Object> realPointSampleList2 = new RealPointSampleList<Object>(238);
      assertNotNull(realPointSampleList2);
      assertEquals(0L, realPointSampleList2.size());
      assertEquals(238, realPointSampleList2.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList2.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      RealPointSampleList realPointSampleList1 = (RealPointSampleList)realPointSampleList0.iterationOrder();
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList<Object> realPointSampleList2 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList2);
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(0L, realPointSampleList2.size());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      realPointSampleList0.lastIndex = 0;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(doubleArray0, false);
      assertEquals(3, doubleArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, realPoint0.numDimensions());
      
      realPointSampleList2.add(realPoint0, realPointSampleList0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(1L, realPointSampleList2.size());
      assertEquals(3, realPoint0.numDimensions());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 970.1119639302;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList2.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(1L, realPointSampleList2.size());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      realPointSampleList_RealPointSampleListCursor0.jumpFwd(0);
      assertEquals(0, realPointSampleList2.numDimensions());
      assertEquals(1L, realPointSampleList2.size());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      RealPointSampleList<Integer> realPointSampleList3 = new RealPointSampleList<Integer>(1255);
      assertFalse(realPointSampleList3.equals((Object)realPointSampleList0));
      assertNotNull(realPointSampleList3);
      assertEquals(0L, realPointSampleList3.size());
      assertEquals(1255, realPointSampleList3.numDimensions());
      
      long long0 = realPointSampleList0.size();
      assertFalse(realPointSampleList0.equals((Object)realPointSampleList3));
      assertEquals(0L, long0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertNotSame(realPointSampleList0, realPointSampleList3);
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin((-2957));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2957 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2, realPointSampleList0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(2, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.jumpFwd(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 3678;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.minAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray1 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor1 = realPointSampleList0.localizingCursor();
      assertFalse(realCursor1.equals((Object)realCursor0));
      assertNotNull(realCursor1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor1.hasNext());
      assertNotSame(realCursor1, realCursor0);
      
      RealPoint realPoint1 = realPointSampleList0.minAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.jumpFwd((-1133L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(1467);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(1467);
      assertNotNull(realPointSampleList1);
      assertEquals(0L, realPointSampleList1.size());
      assertEquals(1467, realPointSampleList1.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList1.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      RealPoint realPoint0 = RealPoint.wrap(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, realPoint0.numDimensions());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      double[] doubleArray1 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertNotSame(doubleArray1, doubleArray0);
      
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      Point point0 = Point.wrap(longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      
      realPointSampleList0.add(realPoint0, point0);
      assertEquals(4, doubleArray0.length);
      assertEquals(6, longArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(4, realPoint0.numDimensions());
      assertNotSame(doubleArray0, doubleArray1);
      
      RealCursor<Point> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertTrue(realCursor0.hasNext());
      
      Point point1 = realPointSampleList0.firstElement();
      assertNotNull(point1);
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(6, point1.numDimensions());
      assertSame(point1, point0);
      
      int int1 = 0;
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList1);
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealCursor<Integer> realCursor1 = realPointSampleList1.localizingCursor();
      assertNotNull(realCursor1);
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      assertFalse(realCursor1.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList1.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.jumpFwd(0L);
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPointSampleList<Integer> realPointSampleList1 = new RealPointSampleList<Integer>(3678);
      assertNotNull(realPointSampleList1);
      assertEquals(3678, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      RealPointSampleList<Integer> realPointSampleList2 = new RealPointSampleList<Integer>(1953);
      assertFalse(realPointSampleList2.equals((Object)realPointSampleList1));
      assertNotNull(realPointSampleList2);
      assertEquals(1953, realPointSampleList2.numDimensions());
      assertEquals(0L, realPointSampleList2.size());
      
      Integer integer0 = new Integer(1246);
      assertNotNull(integer0);
      assertEquals(1246, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList_RealPointSampleListCursor0.forEachRemaining(consumer0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.jumpFwd(0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPoint0.numDimensions());
      
      realPointSampleList_RealPointSampleListCursor0.reset();
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.positionAsRealPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[2];
      Spliterator<Object> spliterator0 = realPointSampleList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      realPointSampleList0.lastIndex = 0;
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      realPointSampleList0.realMax(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      java.util.Iterator<Object> iterator0 = realPointSampleList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1393);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1393, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1393;
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier((Supplier<Object>) null, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(realPointSample0);
      assertArrayEquals(new double[] {1393.0}, doubleArray0, 0.01);
      assertEquals(1, realPointSample0.numDimensions());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1393;
      intArray0[1] = 1393;
      intArray0[2] = 1393;
      intArray0[3] = 1393;
      intArray0[4] = 1393;
      intArray0[5] = 1393;
      intArray0[6] = 1393;
      Point point0 = new Point(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new int[] {1393, 1393, 1393, 1393, 1393, 1393, 1393}, intArray0);
      assertEquals(7, point0.numDimensions());
      
      realPointSample0.move((Localizable) point0);
      assertEquals(1, doubleArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new double[] {2786.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1393, 1393, 1393, 1393, 1393, 1393, 1393}, intArray0);
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(7, point0.numDimensions());
      
      RealPointSample<Object> realPointSample1 = realPointSample0.copy();
      assertEquals(1, doubleArray0.length);
      assertNotNull(realPointSample1);
      assertArrayEquals(new double[] {2786.0}, doubleArray0, 0.01);
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(1, realPointSample1.numDimensions());
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      
      realPointSampleList0.realMax((RealPositionable) realPointSample1);
      assertEquals(1, doubleArray0.length);
      assertFalse(realPointSample0.equals((Object)realPointSample1));
      assertFalse(realPointSample1.equals((Object)realPointSample0));
      assertArrayEquals(new double[] {2786.0}, doubleArray0, 0.01);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1393, realPointSampleList0.numDimensions());
      assertEquals(1, realPointSample0.numDimensions());
      assertEquals(1, realPointSample1.numDimensions());
      assertNotSame(realPointSample0, realPointSample1);
      assertNotSame(realPointSample1, realPointSample0);
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1393, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1393, realPointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.fwd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1279;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1279);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(1279, realPoint0.numDimensions());
      
      int int1 = 0;
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      realPointSampleList0.add(realPoint0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(1279, realPoint0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1279, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      int int2 = 0;
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      assertNotNull(pointSampleList0);
      assertEquals(0, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      assertNotNull(pointSampleList_PointSampleListCursor0);
      assertEquals(0, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      assertEquals(0, pointSampleList_PointSampleListCursor0.numDimensions());
      
      Cursor<Object> cursor0 = pointSampleList_PointSampleListCursor0.copy();
      assertNotNull(cursor0);
      assertEquals(0, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      assertEquals(0, pointSampleList_PointSampleListCursor0.numDimensions());
      assertFalse(cursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPoint0.move((Localizable) cursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(722);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(722, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = new double[0];
      realPointSampleList0.lastIndex = 722;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(722, realPointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2963;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(2963);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(2963, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2963;
      doubleArray0[1] = (double) 2963;
      doubleArray0[2] = (double) 2963;
      doubleArray0[3] = (double) 2963;
      doubleArray0[4] = (double) 2963;
      doubleArray0[5] = (double) 2963;
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1929);
      assertNotNull(realPointSampleList0);
      assertEquals(1929, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPoint realPoint0 = new RealPoint(613);
      assertNotNull(realPoint0);
      assertEquals(613, realPoint0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.add(realPoint0, realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 613 out of bounds for length 613
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(1);
      assertNotNull(realPoint0);
      assertEquals(1, realPoint0.numDimensions());
      
      realPointSampleList0.add(realPoint0, realPoint0);
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(1, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(56);
      assertNotNull(realPointSampleList0);
      assertEquals(56, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPoint realPoint0 = realPointSampleList0.minAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(56, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(56, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(194);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(194, realPointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin(194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 194 out of bounds for length 194
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3678;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.maxAsDoubleArray();
      assertEquals(3678, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertFalse(realCursor0.hasNext());
      
      RealPoint realPoint1 = realPointSampleList0.minAsRealPoint();
      assertFalse(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3678, realPointSampleList0.numDimensions());
      assertEquals(3678, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMin(3678);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3678 out of bounds for length 3678
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1456);
      assertNotNull(realPointSampleList0);
      assertEquals(1456, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealCursor<Integer> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(1456, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realCursor0.hasNext());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      int int0 = 953;
      RealPoint realPoint0 = new RealPoint(953);
      assertNotNull(realPoint0);
      assertEquals(953, realPoint0.numDimensions());
      
      int int1 = realPoint0.numDimensions();
      assertTrue(int1 == int0);
      assertEquals(953, int1);
      assertEquals(953, realPoint0.numDimensions());
      
      String string0 = realPoint0.toString();
      assertNotNull(string0);
      assertEquals(953, realPoint0.numDimensions());
      
      realPointSampleList0.add(realPoint0, realPoint0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(1L, realPointSampleList0.size());
      assertEquals(953, realPoint0.numDimensions());
      
      realPointSampleList0.add(realPoint0, (Object) null);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      assertEquals(953, realPoint0.numDimensions());
      
      double[] doubleArray0 = realPointSampleList0.minAsDoubleArray();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      
      RealPointSampleList realPointSampleList1 = (RealPointSampleList)realPointSampleList0.iterationOrder();
      assertNotNull(realPointSampleList1);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList1.numDimensions());
      assertEquals(2L, realPointSampleList1.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPoint realPoint1 = (RealPoint)realPointSampleList_RealPointSampleListCursor0.next();
      assertNotNull(realPoint1);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(2L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertTrue(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(953, realPoint1.numDimensions());
      assertSame(realPoint1, realPoint0);
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3149);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3149, realPointSampleList0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3149, realPointSampleList0.numDimensions());
      assertEquals(3149, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealCursor<Object> realCursor0 = realPointSampleList_RealPointSampleListCursor0.copyCursor();
      assertNotNull(realCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(3149, realPointSampleList0.numDimensions());
      assertEquals(3149, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertFalse(realCursor0.hasNext());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = (-1);
      realPointSampleList0.lastIndex = (-1);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      realPointSampleList_RealPointSampleListCursor0.sample = (Object) realPointSampleList0;
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.reset();
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      realPointSampleList_RealPointSampleListCursor0.forEachRemaining(consumer0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      int int2 = realPointSampleList_RealPointSampleListCursor0.numDimensions();
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      boolean boolean0 = realPointSampleList_RealPointSampleListCursor0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor1);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor1.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor1.hasNext());
      
      int int3 = (-1348);
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor1.getFloatPosition((-1348));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(1467);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1467, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      realPointSampleList_RealPointSampleListCursor0.reset();
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1467, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(1467);
      assertNotNull(realPointSampleList0);
      assertEquals(1467, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1467, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.localize(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      assertNotNull(realPointSampleList0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealCursor<Object> realCursor0 = realPointSampleList0.localizingCursor();
      assertNotNull(realCursor0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realCursor0.hasNext());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.minAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(0, realPoint0.numDimensions());
      
      RealCursor<Object> realCursor1 = realPointSampleList_RealPointSampleListCursor0.copy();
      assertFalse(realCursor1.equals((Object)realCursor0));
      assertNotNull(realCursor1);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realCursor1.hasNext());
      assertNotSame(realCursor1, realCursor0);
      
      RealCursor<Object> realCursor2 = realPointSampleList_RealPointSampleListCursor0.copy();
      assertFalse(realCursor2.equals((Object)realCursor1));
      assertFalse(realCursor2.equals((Object)realCursor0));
      assertNotNull(realCursor2);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realCursor2.hasNext());
      assertNotSame(realCursor2, realCursor1);
      assertNotSame(realCursor2, realCursor0);
      
      java.util.Iterator<Object> iterator0 = realPointSampleList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[0];
      RealPoint realPoint1 = RealPoint.wrap(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(realPoint1.equals((Object)realPoint0));
      assertNotNull(realPoint1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, realPoint1.numDimensions());
      assertNotSame(realPoint1, realPoint0);
      
      boolean boolean0 = realPointSampleList_RealPointSampleListCursor0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.firstElement();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      assertNotNull(realPointSampleList0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      int int0 = realPointSampleList0.numDimensions();
      assertEquals(2, int0);
      assertEquals(2, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(4925);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(4925, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(4925, realPointSampleList0.numDimensions());
      assertEquals(4925, realPoint0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.realMax(4925);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4925 out of bounds for length 4925
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3649);
      assertNotNull(realPointSampleList0);
      assertEquals(3649, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      long long0 = realPointSampleList0.size();
      assertEquals(0L, long0);
      assertEquals(3649, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(1);
      assertNotNull(realPointSampleList0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1, realPoint0.numDimensions());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      realPointSampleList0.forEach(consumer0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      long long0 = realPointSampleList0.size();
      assertEquals(0L, long0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      realPointSampleList_RealPointSampleListCursor0.sample = (Object) integer0;
      assertEquals(1, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(1, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.positionAsDoubleArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = null;
      try {
        realPointSampleList0 = new RealPointSampleList<Object>((-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -4
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = (-1044);
      RealPointSampleList<Object> realPointSampleList0 = null;
      try {
        realPointSampleList0 = new RealPointSampleList<Object>((-1044));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1044
         //
         verifyException("net.imglib2.RealPointSampleList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(238);
      assertNotNull(realPointSampleList0);
      assertEquals(238, realPointSampleList0.numDimensions());
      assertEquals(0L, realPointSampleList0.size());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 238;
      doubleArray0[1] = (double) 238;
      doubleArray0[2] = (double) 238;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 238;
      RealPoint realPoint0 = new RealPoint(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(realPoint0);
      assertArrayEquals(new double[] {238.0, 238.0, 238.0, 0.0, 238.0}, doubleArray0, 0.01);
      assertEquals(5, realPoint0.numDimensions());
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 238;
      longArray0[1] = (long) 238;
      longArray0[2] = (long) 238;
      longArray0[3] = (long) 238;
      longArray0[4] = (long) 238;
      longArray0[5] = 0L;
      longArray0[6] = (long) 238;
      longArray0[7] = (long) 238;
      Point point0 = Point.wrap(longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {238L, 238L, 238L, 238L, 238L, 0L, 238L, 238L}, longArray0);
      assertEquals(8, point0.numDimensions());
      
      // Undeclared exception!
      try { 
        realPointSampleList0.add(realPoint0, point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 1279;
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1279);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      
      RealPoint realPoint0 = realPointSampleList0.maxAsRealPoint();
      assertNotNull(realPoint0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      assertEquals(1279, realPoint0.numDimensions());
      
      Integer integer0 = new Integer(4);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      int int1 = 0;
      double[] doubleArray0 = realPointSampleList0.minAsDoubleArray();
      assertEquals(1279, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      
      realPointSampleList0.lastIndex = 4;
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1279, realPointSampleList0.numDimensions());
      
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(4);
      assertNotNull(realPointSampleList1);
      assertEquals(4, realPointSampleList1.numDimensions());
      assertEquals(0L, realPointSampleList1.size());
      
      // Undeclared exception!
      try { 
        realPointSampleList1.realMax((RealPositionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RealPointSampleList<Point> realPointSampleList0 = new RealPointSampleList<Point>(1467);
      assertNotNull(realPointSampleList0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      assertNotNull(realPointSampleList_RealPointSampleListCursor0);
      assertEquals(0L, realPointSampleList0.size());
      assertEquals(1467, realPointSampleList0.numDimensions());
      assertEquals(1467, realPointSampleList_RealPointSampleListCursor0.numDimensions());
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(3678);
      realPointSampleList0.maxAsDoubleArray();
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      realPointSampleList_RealPointSampleListCursor0.reset();
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList0.new RealPointSampleListCursor();
      // Undeclared exception!
      try { 
        realPointSampleList_RealPointSampleListCursor1.getFloatPosition(1234);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSampleList$RealPointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(63);
      RealPoint realPoint0 = realPointSampleList0.minAsRealPoint();
      realPointSampleList0.add(realPoint0, realPoint0);
      assertEquals(63, realPointSampleList0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(2);
      RealPointSampleList realPointSampleList1 = (RealPointSampleList)realPointSampleList0.iterationOrder();
      assertEquals(2, realPointSampleList1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList0.new RealPointSampleListCursor();
      int int0 = realPointSampleList_RealPointSampleListCursor0.numDimensions();
      assertFalse(realPointSampleList_RealPointSampleListCursor0.hasNext());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(0);
      realPointSampleList0.iterationOrder();
      RealPointSampleList<Object> realPointSampleList1 = new RealPointSampleList<Object>(0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      realPointSampleList0.lastIndex = 0;
      RealPoint realPoint0 = new RealPoint(doubleArray0, false);
      realPointSampleList1.add(realPoint0, realPointSampleList0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 970.1119639302;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      realPointSampleList1.realMin(doubleArray1);
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor0 = realPointSampleList1.new RealPointSampleListCursor();
      assertEquals(1L, realPointSampleList1.size());
      
      realPointSampleList_RealPointSampleListCursor0.fwd();
      realPointSampleList_RealPointSampleListCursor0.getFloatPosition(0);
      RealPointSampleList.RealPointSampleListCursor realPointSampleList_RealPointSampleListCursor1 = realPointSampleList0.new RealPointSampleListCursor();
      int int0 = realPointSampleList_RealPointSampleListCursor1.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(16);
      // Undeclared exception!
      try { 
        realPointSampleList0.firstElement();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      RealPointSampleList<Object> realPointSampleList0 = new RealPointSampleList<Object>(0);
      realPointSampleList0.iterator();
      realPointSampleList0.lastIndex = (-1);
      realPointSampleList0.iterator();
      // Undeclared exception!
      try { 
        realPointSampleList0.firstElement();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      RealPointSampleList<Integer> realPointSampleList0 = new RealPointSampleList<Integer>(1504);
      realPointSampleList0.iterator();
      assertEquals(1504, realPointSampleList0.numDimensions());
  }
}
