/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:30:23 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomAccess_ESTest extends RandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(supplier0).get();
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 9);
      Object object0 = pointSample0.setPositionAndGet((Localizable) pointSample0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[2];
      Integer integer0 = new Integer((-5962));
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      Supplier<Object> supplier0 = pointSample0.sampleSupplier;
      int[] intArray0 = new int[3];
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier0, intArray0);
      Object object0 = pointSample1.setPositionAndGet(intArray0);
      assertEquals((-5962), object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      long[] longArray0 = new long[3];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) supplier0, longArray0);
      long[] longArray1 = new long[7];
      Object object0 = pointSample0.setPositionAndGet(longArray1);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0, false);
      Object object1 = pointSample0.setPositionAndGet(longArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      long[] longArray0 = new long[4];
      PointSample<Object> pointSample0 = PointSample.wrap(object0, longArray0);
      int[] intArray0 = new int[8];
      Object object1 = pointSample0.setPositionAndGet(intArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      int[] intArray0 = new int[4];
      Point point0 = new Point(intArray0);
      Object object0 = pointSample0.setPositionAndGet((Localizable) point0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier((Supplier<Object>) null, longArray0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[15];
      Integer integer0 = new Integer((-138));
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2266));
      int[] intArray0 = new int[4];
      Point point0 = new Point(intArray0);
      long[] longArray0 = new long[9];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet((Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[9];
      Point point0 = new Point(intArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0, false);
      Object object1 = pointSample0.setPositionAndGet((Localizable) point0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) supplier0, longArray0);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      long[] longArray0 = new long[0];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      Object object0 = pointSample0.setPositionAndGet(intArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[3];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      long[] longArray1 = new long[2];
      // Undeclared exception!
      try { 
        pointSample0.setPositionAndGet(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[0];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      Object object0 = pointSample0.setPositionAndGet(longArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[15];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) null, longArray0);
      RandomAccess<Object> randomAccess0 = pointSample0.copyRandomAccess();
      assertNotNull(randomAccess0);
  }
}
