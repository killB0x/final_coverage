/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:55:13 GMT 2022
 */

package net.imglib2.position;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.AbstractRealInterval;
import net.imglib2.FinalInterval;
import net.imglib2.FinalRealInterval;
import net.imglib2.KDTree;
import net.imglib2.RealInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.position.FunctionRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionRealRandomAccessible_ESTest extends FunctionRealRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, biConsumer0, supplier0);
      double[] doubleArray0 = new double[7];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0);
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess0 = functionRealRandomAccessible0.realRandomAccess((RealInterval) abstractRealInterval0);
      assertEquals(0, functionRealRandomAccessible_RealFunctionRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<KDTree.KDTreeCursor> supplier0 = (Supplier<KDTree.KDTreeCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<KDTree.KDTreeCursor> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<KDTree.KDTreeCursor>(3155, biConsumer0, supplier0);
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess0 = functionRealRandomAccessible0.realRandomAccess((RealInterval) finalInterval0);
      assertEquals(3155, functionRealRandomAccessible_RealFunctionRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(1, (BiConsumer<RealLocalizable, ? super Object>) null, supplier0);
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess0 = functionRealRandomAccessible0.realRandomAccess();
      assertEquals(1, functionRealRandomAccessible_RealFunctionRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(2147483639, (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      double[] doubleArray0 = new double[6];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.wrap(doubleArray0, doubleArray0);
      // Undeclared exception!
      functionRealRandomAccessible0.realRandomAccess((RealInterval) finalRealInterval0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(0, (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      // Undeclared exception!
      try { 
        functionRealRandomAccessible0.realRandomAccess((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRealRandomAccessible$RealFunctionRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(Integer.MAX_VALUE, (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      // Undeclared exception!
      functionRealRandomAccessible0.realRandomAccess();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(44, (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      // Undeclared exception!
      try { 
        functionRealRandomAccessible0.realRandomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRealRandomAccessible$RealFunctionRealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>((-31), (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      // Undeclared exception!
      try { 
        functionRealRandomAccessible0.realRandomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -31
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<KDTree.KDTreeCursor> supplier0 = (Supplier<KDTree.KDTreeCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<KDTree.KDTreeCursor> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<KDTree.KDTreeCursor>(0, biConsumer0, supplier0);
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess0 = functionRealRandomAccessible0.realRandomAccess();
      assertEquals(0, functionRealRandomAccessible_RealFunctionRealRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>(690, biConsumer0, supplier0);
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess0 = functionRealRandomAccessible0.new RealFunctionRealRandomAccess();
      FunctionRealRandomAccessible.RealFunctionRealRandomAccess functionRealRandomAccessible_RealFunctionRealRandomAccess1 = functionRealRandomAccessible_RealFunctionRealRandomAccess0.copy();
      assertNotSame(functionRealRandomAccessible_RealFunctionRealRandomAccess1, functionRealRandomAccessible_RealFunctionRealRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionRealRandomAccessible<Object> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<Object>((-3542), (BiConsumer<RealLocalizable, ? super Object>) null, (Supplier<Object>) null);
      // Undeclared exception!
      try { 
        functionRealRandomAccessible0.realRandomAccess((RealInterval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3542
         //
         verifyException("net.imglib2.AbstractRealLocalizable", e);
      }
  }
}
