/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:56:54 GMT 2022
 */

package net.imglib2.position.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPointSample;
import net.imglib2.position.transform.Round;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Round_ESTest extends Round_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1060L;
      Point point0 = new Point(longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {1060L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0, point0);
      assertEquals(7, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {1060L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, point0.numDimensions());
      assertEquals(7, round0.numDimensions());
      
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        round0.move(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[7];
      Point point0 = new Point(longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0, point0);
      assertEquals(7, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, point0.numDimensions());
      assertEquals(7, round0.numDimensions());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      // Undeclared exception!
      try { 
        round0.move(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-2114L);
      Point point0 = new Point(longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, (-2114L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(6, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, (-2114L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      assertEquals(6, round0.numDimensions());
      
      float[] floatArray0 = new float[8];
      round0.move(floatArray0);
      assertEquals(6, longArray0.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new long[] {0L, (-2114L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, point0.numDimensions());
      assertEquals(6, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[6];
      Point point0 = new Point(longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(6, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, point0.numDimensions());
      assertEquals(6, round0.numDimensions());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2114L);
      round0.move(floatArray0);
      assertEquals(6, longArray0.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {(-2114.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, point0.numDimensions());
      assertEquals(6, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(5, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      assertEquals(5, round0.numDimensions());
      
      round0.move((RealLocalizable) point0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      assertEquals(5, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1552);
      assertNotNull(pointSampleList0);
      assertEquals(1552, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      Point point0 = pointSampleList0.dimensionsAsPoint();
      assertNotNull(point0);
      assertEquals(1552, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1552, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(1552, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1552, point0.numDimensions());
      assertEquals(1552, round0.numDimensions());
      
      round0.move((double) 0, 0);
      assertEquals(1552, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1552, point0.numDimensions());
      assertEquals(1552, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[6] = 4300L;
      Point point0 = new Point(longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 4300L}, longArray0);
      assertEquals(7, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0, point0);
      assertEquals(7, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 4300L}, longArray0);
      assertEquals(7, point0.numDimensions());
      assertEquals(7, round0.numDimensions());
      
      round0.move(0.5, 6);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 4300L}, longArray0);
      assertEquals(7, point0.numDimensions());
      assertEquals(7, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PointSampleList<RealPointSample<Object>> pointSampleList0 = new PointSampleList<RealPointSample<Object>>(1077);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1077, pointSampleList0.numDimensions());
      
      Point point0 = pointSampleList0.minAsPoint();
      assertNotNull(point0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1077, pointSampleList0.numDimensions());
      assertEquals(1077, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1077, pointSampleList0.numDimensions());
      assertEquals(1077, point0.numDimensions());
      assertEquals(1077, round0.numDimensions());
      
      round0.move((-6.7420397F), 1056);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1077, pointSampleList0.numDimensions());
      assertEquals(1077, point0.numDimensions());
      assertEquals(1077, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      
      Point point0 = pointSampleList0.dimensionsAsPoint();
      assertNotNull(point0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      assertEquals(1, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(1, round0.numDimensions());
      
      round0.setPosition(1.0F, 0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(1, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = Round.round(1260.2F);
      assertEquals(1260L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = Round.round(0.0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      Point point0 = Point.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0, point0);
      assertEquals(1, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, point0.numDimensions());
      assertEquals(1, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.setPosition((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[] floatArray0 = new float[1];
      long[] longArray0 = new long[19];
      Point point0 = new Point(longArray0);
      assertEquals(19, longArray0.length);
      assertNotNull(point0);
      assertEquals(19, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(19, longArray0.length);
      assertNotNull(round0);
      assertEquals(19, point0.numDimensions());
      assertEquals(19, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.setPosition(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[13];
      Point point0 = Point.wrap(longArray0);
      assertEquals(13, longArray0.length);
      assertNotNull(point0);
      assertEquals(13, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(13, longArray0.length);
      assertNotNull(round0);
      assertEquals(13, point0.numDimensions());
      assertEquals(13, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.setPosition((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      Point point0 = Point.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(1, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, point0.numDimensions());
      assertEquals(1, round0.numDimensions());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        round0.setPosition(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Point point0 = new Point(1576);
      assertNotNull(point0);
      assertEquals(1576, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(1576, point0.numDimensions());
      assertEquals(1576, round0.numDimensions());
      
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1576);
      assertNotNull(pointSampleList0);
      assertEquals(1576, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      assertNotNull(pointSampleList_PointSampleListCursor0);
      assertEquals(1576, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1576, pointSampleList_PointSampleListCursor0.numDimensions());
      assertFalse(pointSampleList_PointSampleListCursor0.hasNext());
      
      // Undeclared exception!
      try { 
        round0.setPosition((RealLocalizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[0];
      Point point0 = Point.wrap(longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, point0.numDimensions());
      
      Point point1 = new Point(811);
      assertNotNull(point1);
      assertEquals(811, point1.numDimensions());
      assertFalse(point1.equals((Object)point0));
      
      Round<Point> round0 = new Round<Point>(point0, point1);
      assertEquals(0, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, point0.numDimensions());
      assertEquals(811, point1.numDimensions());
      assertEquals(811, round0.numDimensions());
      assertFalse(point0.equals((Object)point1));
      assertFalse(point1.equals((Object)point0));
      
      // Undeclared exception!
      try { 
        round0.setPosition((RealLocalizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(5, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      assertEquals(5, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.setPosition((-1.0), 1974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1974 out of bounds for length 5
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        Round.round(floatArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Round.round(doubleArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        Round.round(doubleArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        Round.round((RealLocalizable) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = new Point(3);
      assertNotNull(point0);
      assertEquals(3, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(3, point0.numDimensions());
      assertEquals(3, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        Round.round((RealLocalizable) round0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.position.transform.AbstractPositionableTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = new Point(longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(5, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      assertEquals(5, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[1];
      long[] longArray0 = new long[19];
      Point point0 = new Point(longArray0);
      assertEquals(19, longArray0.length);
      assertNotNull(point0);
      assertEquals(19, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(19, longArray0.length);
      assertNotNull(round0);
      assertEquals(19, point0.numDimensions());
      assertEquals(19, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(5, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, point0.numDimensions());
      assertEquals(5, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[3];
      Point point0 = Point.wrap(longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0, point0);
      assertEquals(3, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, point0.numDimensions());
      assertEquals(3, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      Point point0 = new Point(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, point0.numDimensions());
      
      Point point1 = new Point(2937);
      assertNotNull(point1);
      assertEquals(2937, point1.numDimensions());
      assertFalse(point1.equals((Object)point0));
      
      Round<Point> round0 = new Round<Point>(point1);
      assertNotNull(round0);
      assertEquals(2937, point1.numDimensions());
      assertEquals(2937, round0.numDimensions());
      assertFalse(point1.equals((Object)point0));
      
      // Undeclared exception!
      try { 
        round0.move((RealLocalizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Point point0 = new Point(1);
      assertNotNull(point0);
      assertEquals(1, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertNotNull(round0);
      assertEquals(1, point0.numDimensions());
      assertEquals(1, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move((float) 1, (-275));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -275 out of bounds for length 1
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[0];
      Point point0 = Point.wrap(longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, point0.numDimensions());
      
      Round<Point> round0 = new Round<Point>(point0);
      assertEquals(0, longArray0.length);
      assertNotNull(round0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, point0.numDimensions());
      assertEquals(0, round0.numDimensions());
      
      // Undeclared exception!
      try { 
        round0.move((double) 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Point point0 = new Point(29);
      assertNotNull(point0);
      assertEquals(29, point0.numDimensions());
      
      Round<Point> round0 = null;
      try {
        round0 = new Round<Point>((RealLocalizable) null, point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[1];
      Point point0 = Point.wrap(longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, point0.numDimensions());
      
      Point point1 = new Point(0);
      assertNotNull(point1);
      assertEquals(0, point1.numDimensions());
      assertFalse(point1.equals((Object)point0));
      
      Round<Point> round0 = null;
      try {
        round0 = new Round<Point>(point0, point1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Round<Point> round0 = null;
      try {
        round0 = new Round<Point>((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.transform.AbstractPositionableTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = Round.round((float) 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = Round.round((-1543.32));
      assertEquals((-1543L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = Round.round(1748.88);
      assertEquals(1749L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PointSampleList<RealPointSample<Object>> pointSampleList0 = new PointSampleList<RealPointSample<Object>>(1077);
      Point point0 = pointSampleList0.minAsPoint();
      Round<Point> round0 = new Round<Point>(point0);
      double[] doubleArray0 = point0.positionAsDoubleArray();
      round0.setPosition(doubleArray0);
      assertEquals(1077, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PointSampleList<RealPointSample<Object>> pointSampleList0 = new PointSampleList<RealPointSample<Object>>(3062);
      Point point0 = pointSampleList0.minAsPoint();
      Round<Point> round0 = new Round<Point>(point0);
      round0.setPosition((RealLocalizable) point0);
      round0.move((RealLocalizable) point0);
      round0.move((RealLocalizable) point0);
      // Undeclared exception!
      round0.move((RealLocalizable) point0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[2];
      Point point0 = new Point(longArray0);
      double[] doubleArray0 = point0.positionAsDoubleArray();
      Round<Point> round0 = new Round<Point>(point0);
      round0.move(doubleArray0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[2];
      Point point0 = Point.wrap(longArray0);
      Round<Point> round0 = new Round<Point>(point0);
      round0.move((double) 0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PointSampleList<RealPointSample<Object>> pointSampleList0 = new PointSampleList<RealPointSample<Object>>(1077);
      Point point0 = pointSampleList0.minAsPoint();
      Round<Point> round0 = new Round<Point>(point0);
      round0.move((-1.0F), 1056);
      assertEquals(1077, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[1];
      Point point0 = new Point(longArray0);
      Round<Point> round0 = new Round<Point>(point0);
      round0.move(1687.02F, 0);
      assertEquals(1, round0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[3];
      Point point0 = Point.wrap(longArray0);
      Round.round((RealLocalizable) point0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[] floatArray0 = new float[5];
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        Round.round(floatArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Round.round(floatArray0, (long[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[7];
      double[] doubleArray0 = new double[5];
      Round.round(doubleArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = Round.round((-1058.588F));
      assertEquals((-1059L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[] floatArray0 = new float[1];
      long[] longArray0 = new long[1];
      Point point0 = new Point(longArray0);
      Round<Point> round0 = new Round<Point>(point0);
      round0.setPosition(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      Round<Point> round0 = new Round<Point>(point0);
      round0.setPosition((-1612.56947694565), 1);
      assertArrayEquals(new long[] {0L, (-1613L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[3];
      Point point0 = Point.wrap(longArray0);
      Round<Point> round0 = new Round<Point>(point0);
      // Undeclared exception!
      try { 
        round0.setPosition(1.0F, (-2348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2348 out of bounds for length 3
         //
         verifyException("net.imglib2.position.transform.Round", e);
      }
  }
}
