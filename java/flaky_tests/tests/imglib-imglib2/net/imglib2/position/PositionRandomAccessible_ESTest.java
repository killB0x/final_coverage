/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:20:00 GMT 2022
 */

package net.imglib2.position;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.position.PositionRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PositionRandomAccessible_ESTest extends PositionRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(2310, 0);
      PositionRandomAccessible.PositionRandomAccess positionRandomAccessible_PositionRandomAccess0 = positionRandomAccessible0.new PositionRandomAccess();
      positionRandomAccessible_PositionRandomAccess0.get();
      assertEquals(2310, positionRandomAccessible_PositionRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(31, 31);
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      positionRandomAccessible0.randomAccess((Interval) finalInterval0);
      assertEquals(31, positionRandomAccessible0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(0, 0);
      int int0 = positionRandomAccessible0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(67, 67);
      int int0 = positionRandomAccessible0.numDimensions();
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(2147483639, 2147483639);
      // Undeclared exception!
      positionRandomAccessible0.randomAccess((Interval) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(Integer.MAX_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      positionRandomAccessible0.randomAccess();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible((-1620), (-1620));
      // Undeclared exception!
      try { 
        positionRandomAccessible0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1620
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(0, 0);
      PositionRandomAccessible.PositionRandomAccess positionRandomAccessible_PositionRandomAccess0 = positionRandomAccessible0.new PositionRandomAccess();
      positionRandomAccessible_PositionRandomAccess0.copy();
      assertEquals(0, positionRandomAccessible0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible(67, 67);
      positionRandomAccessible0.randomAccess();
      assertEquals(67, positionRandomAccessible0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible((-195), 84);
      int int0 = positionRandomAccessible0.numDimensions();
      assertEquals((-195), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PositionRandomAccessible positionRandomAccessible0 = new PositionRandomAccessible((-1620), (-1620));
      // Undeclared exception!
      try { 
        positionRandomAccessible0.randomAccess((Interval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1620
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }
}
