/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:42:40 GMT 2022
 */

package net.imglib2.position;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.position.FunctionRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionRandomAccessible_ESTest extends FunctionRandomAccessible_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<PointSampleList.PointSampleListCursor> supplier0 = (Supplier<PointSampleList.PointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<PointSampleList.PointSampleListCursor> functionRandomAccessible0 = new FunctionRandomAccessible<PointSampleList.PointSampleListCursor>(3230, biConsumer0, supplier0);
      long[] longArray0 = new long[7];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess((Interval) finalInterval0);
      assertEquals(3230, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<PointSample<Object>> supplier0 = (Supplier<PointSample<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<PointSample<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<PointSample<Object>>(0, biConsumer0, supplier0);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(0, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<PointSampleList.PointSampleListCursor> functionRandomAccessible0 = new FunctionRandomAccessible<PointSampleList.PointSampleListCursor>(Integer.MAX_VALUE, biConsumer0, (Supplier<PointSampleList.PointSampleListCursor>) null);
      // Undeclared exception!
      functionRandomAccessible0.randomAccess((Interval) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionRandomAccessible<PointSampleList.PointSampleListCursor> functionRandomAccessible0 = new FunctionRandomAccessible<PointSampleList.PointSampleListCursor>(0, (BiConsumer<Localizable, ? super PointSampleList.PointSampleListCursor>) null, (Supplier<PointSampleList.PointSampleListCursor>) null);
      // Undeclared exception!
      try { 
        functionRandomAccessible0.randomAccess((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(Integer.MAX_VALUE, biConsumer0, (Supplier<Object>) null);
      // Undeclared exception!
      functionRandomAccessible0.randomAccess();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionRandomAccessible<PointSampleList.PointSampleListCursor> functionRandomAccessible0 = new FunctionRandomAccessible<PointSampleList.PointSampleListCursor>(0, (BiConsumer<Localizable, ? super PointSampleList.PointSampleListCursor>) null, (Supplier<PointSampleList.PointSampleListCursor>) null);
      // Undeclared exception!
      try { 
        functionRandomAccessible0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>((-1332), biConsumer0, supplier0);
      Supplier<Object> supplier1 = functionRandomAccessible0.typeSupplier;
      FunctionRandomAccessible<Object> functionRandomAccessible1 = new FunctionRandomAccessible<Object>(3230, biConsumer0, supplier1);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible1.new FunctionRandomAccess();
      assertEquals(3230, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>((-1332), biConsumer0, supplier0);
      Supplier<Object> supplier1 = functionRandomAccessible0.typeSupplier;
      FunctionRandomAccessible<Object> functionRandomAccessible1 = new FunctionRandomAccessible<Object>(3230, biConsumer0, supplier1);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible1.randomAccess();
      Object object0 = functionRandomAccessible_FunctionRandomAccess0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<PointSample<Object>> supplier0 = (Supplier<PointSample<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<PointSample<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<PointSample<Object>>(0, biConsumer0, supplier0);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess((Interval) null);
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess1 = functionRandomAccessible_FunctionRandomAccess0.copy();
      assertNotSame(functionRandomAccessible_FunctionRandomAccess0, functionRandomAccessible_FunctionRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionRandomAccessible<PointSampleList.PointSampleListCursor> functionRandomAccessible0 = new FunctionRandomAccessible<PointSampleList.PointSampleListCursor>((-1827), (BiConsumer<Localizable, ? super PointSampleList.PointSampleListCursor>) null, (Supplier<PointSampleList.PointSampleListCursor>) null);
      // Undeclared exception!
      try { 
        functionRandomAccessible0.randomAccess((Interval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1827
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionRandomAccessible<PointSample<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<PointSample<Object>>((-3362), (BiConsumer<Localizable, ? super PointSample<Object>>) null, (Supplier<PointSample<Object>>) null);
      // Undeclared exception!
      try { 
        functionRandomAccessible0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3362
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }
}
