/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:40:59 GMT 2022
 */

package net.imglib2.transform.integer.permutation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.transform.integer.permutation.PermutationTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PermutationTransform_ESTest extends PermutationTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[4] = (long) 1757;
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      int[] intArray0 = new int[0];
      boolean boolean0 = PermutationTransform.checkInterval(finalInterval0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1858);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      boolean boolean0 = PermutationTransform.checkInterval(finalInterval0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1), (-1));
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1102);
      RealPoint realPoint0 = pointSampleList0.maxAsRealPoint();
      Point point0 = pointSampleList0.minAsPoint();
      permutationTransform0.applyInverse((Positionable) realPoint0, (Localizable) point0);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals((-1), permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      long[] longArray0 = new long[5];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      PointSample<PermutationTransform> pointSample0 = PointSample.wrap(permutationTransform0, longArray0);
      permutationTransform0.applyInverse((Positionable) realPointSample0, (Localizable) pointSample0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      int[] intArray1 = new int[3];
      permutationTransform0.applyInverse(intArray0, intArray1);
      assertEquals(1, permutationTransform0.numTargetDimensions());
      assertEquals(1, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1), (-1));
      permutationTransform0.applyInverse(intArray0, intArray0);
      assertEquals((-1), permutationTransform0.numSourceDimensions());
      assertEquals((-1), permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      permutationTransform0.applyInverse(intArray0, intArray0);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 2, 1);
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[8];
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(longArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1), (-1));
      long[] longArray0 = new long[8];
      permutationTransform0.applyInverse(longArray0, longArray0);
      assertEquals((-1), permutationTransform0.numSourceDimensions());
      assertEquals((-1), permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      long[] longArray0 = new long[5];
      permutationTransform0.applyInverse(longArray0, longArray0);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      permutationTransform0.apply((Localizable) pointSample0, (Positionable) pointSample0);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[10];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      int[] intArray1 = new int[2];
      permutationTransform0.apply(intArray0, intArray1);
      assertEquals(1, permutationTransform0.numTargetDimensions());
      assertEquals(1, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1), (-1));
      int[] intArray1 = new int[3];
      permutationTransform0.apply(intArray0, intArray1);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals((-1), permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1838, 1);
      permutationTransform0.apply(intArray0, intArray0);
      assertEquals(1838, permutationTransform0.numSourceDimensions());
      assertEquals(1, permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 2, 1);
      // Undeclared exception!
      try { 
        permutationTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, 1);
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[7];
      permutationTransform0.apply(longArray1, longArray0);
      assertEquals(0, permutationTransform0.numSourceDimensions());
      assertEquals(1, permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      long[] longArray0 = new long[5];
      permutationTransform0.apply(longArray0, longArray0);
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      PermutationTransform permutationTransform1 = permutationTransform0.inverse();
      int int0 = permutationTransform1.numTargetDimensions();
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, int0);
      assertEquals((-1), permutationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1659, 0);
      PermutationTransform permutationTransform1 = permutationTransform0.inverse();
      int int0 = permutationTransform1.numTargetDimensions();
      assertEquals(1659, int0);
      assertEquals(0, permutationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      int int0 = permutationTransform0.numSourceDimensions();
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[7];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1789569705));
      PermutationTransform permutationTransform1 = permutationTransform0.inverse();
      int int0 = permutationTransform1.numSourceDimensions();
      assertEquals((-1789569705), int0);
      assertEquals(0, permutationTransform1.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      PermutationTransform permutationTransform1 = permutationTransform0.inverse();
      PermutationTransform permutationTransform2 = permutationTransform1.inverse();
      assertEquals(0, permutationTransform1.numTargetDimensions());
      assertEquals((-1), permutationTransform0.numTargetDimensions());
      assertEquals((-1), permutationTransform2.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        PermutationTransform.checkInterval((Interval) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[2];
      Point point0 = Point.wrap(longArray0);
      Point point1 = new Point(intArray0);
      FinalInterval finalInterval0 = new FinalInterval(point0, point1);
      // Undeclared exception!
      try { 
        PermutationTransform.checkInterval(finalInterval0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 38, 38);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1045, 1045);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(intArray1, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[10];
      Point point0 = new Point(3596);
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 3596, 3596);
      permutationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      permutationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      // Undeclared exception!
      permutationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1045, 1045);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((Positionable) null, (Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 4043, 4043);
      Point point0 = new Point(4043);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1197), (-1197));
      // Undeclared exception!
      try { 
        permutationTransform0.apply((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      // Undeclared exception!
      try { 
        permutationTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1663, 1663);
      // Undeclared exception!
      try { 
        permutationTransform0.apply((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray1, 1, 1);
      // Undeclared exception!
      try { 
        permutationTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      Point point0 = new Point(1);
      // Undeclared exception!
      try { 
        permutationTransform0.apply((Localizable) point0, (Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.PermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 4043, 4043);
      Point point0 = new Point(4043);
      // Undeclared exception!
      try { 
        permutationTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PermutationTransform permutationTransform0 = null;
      try {
        permutationTransform0 = new PermutationTransform((int[]) null, 1998, 1998);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[29];
      intArray0[21] = 1875;
      PermutationTransform permutationTransform0 = null;
      try {
        permutationTransform0 = new PermutationTransform(intArray0, 0, 1875);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1875 out of bounds for length 29
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      boolean boolean0 = PermutationTransform.checkInterval(finalInterval0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(556);
      boolean boolean0 = PermutationTransform.checkInterval(pointSampleList0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      boolean boolean0 = PermutationTransform.checkInterval(finalInterval0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[2];
      Point point0 = new Point(3592);
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 3592, 3592);
      Point point1 = new Point(intArray0);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((Positionable) point0, (Localizable) point1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[17];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1997, 1997);
      Point point0 = new Point(intArray0);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1674, 1674);
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      permutationTransform0.applyInverse(intArray0, intArray0);
      assertEquals(1, permutationTransform0.numSourceDimensions());
      assertEquals(1, permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse(longArray0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[1];
      permutationTransform0.applyInverse(longArray0, longArray0);
      assertEquals(1, permutationTransform0.numTargetDimensions());
      assertEquals(1, permutationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[24];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1875, 1875);
      Point point0 = new Point(1875);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, intArray0);
      // Undeclared exception!
      try { 
        permutationTransform0.apply((Localizable) point0, (Positionable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1864, 1864);
      Point point0 = new Point(intArray0);
      // Undeclared exception!
      try { 
        permutationTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[1];
      Point point0 = Point.wrap(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) permutationTransform0, longArray0);
      permutationTransform0.apply((Localizable) point0, (Positionable) pointSample0);
      assertEquals(1, permutationTransform0.numSourceDimensions());
      assertEquals(1, permutationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        permutationTransform0.apply(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[10];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        permutationTransform0.apply(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[9];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 2246, 2246);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        permutationTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 2, 1);
      int int0 = permutationTransform0.numSourceDimensions();
      assertEquals(1, permutationTransform0.numTargetDimensions());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[18];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 1);
      PermutationTransform permutationTransform1 = permutationTransform0.inverse();
      assertEquals(1, permutationTransform1.numSourceDimensions());
      assertEquals(1, permutationTransform1.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, (-1));
      int int0 = permutationTransform0.numTargetDimensions();
      assertEquals(0, permutationTransform0.numSourceDimensions());
      assertEquals((-1), int0);
  }
}
