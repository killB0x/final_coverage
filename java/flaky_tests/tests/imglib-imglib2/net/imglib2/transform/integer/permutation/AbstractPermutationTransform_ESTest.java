/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:42:12 GMT 2022
 */

package net.imglib2.transform.integer.permutation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.transform.integer.permutation.AbstractPermutationTransform;
import net.imglib2.transform.integer.permutation.PermutationTransform;
import net.imglib2.transform.integer.permutation.SingleDimensionPermutationTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPermutationTransform_ESTest extends AbstractPermutationTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 279, 1);
      long long0 = permutationTransform0.applyInverseChecked(1);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, 0);
      long long0 = permutationTransform0.applyChecked(0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2460;
      boolean boolean0 = AbstractPermutationTransform.checkBijectivity(intArray0);
      assertArrayEquals(new int[] {2460, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 775, (-7952));
      int[] intArray1 = permutationTransform0.getLutCopy();
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      SingleDimensionPermutationTransform singleDimensionPermutationTransform0 = new SingleDimensionPermutationTransform(intArray0, 0, 0, 610);
      int[] intArray1 = singleDimensionPermutationTransform0.getInverseLutCopy();
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, 40);
      int int0 = permutationTransform0.applyInverse(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      SingleDimensionPermutationTransform singleDimensionPermutationTransform0 = new SingleDimensionPermutationTransform(intArray0, (-290), 2395, (-290));
      SingleDimensionPermutationTransform singleDimensionPermutationTransform1 = singleDimensionPermutationTransform0.inverse();
      int int0 = singleDimensionPermutationTransform1.apply(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractPermutationTransform.checkBijectivity((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-328), (-328));
      // Undeclared exception!
      try { 
        permutationTransform0.applyInverse((-328));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -328 out of bounds for length 3
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      SingleDimensionPermutationTransform singleDimensionPermutationTransform0 = new SingleDimensionPermutationTransform(intArray0, 0, 0, 0);
      // Undeclared exception!
      try { 
        singleDimensionPermutationTransform0.apply((-3186));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3186 out of bounds for length 4
         //
         verifyException("net.imglib2.transform.integer.permutation.AbstractPermutationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      SingleDimensionPermutationTransform singleDimensionPermutationTransform0 = new SingleDimensionPermutationTransform(intArray0, 0, 0, 0);
      int int0 = singleDimensionPermutationTransform0.apply(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = AbstractPermutationTransform.checkBijectivity(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = AbstractPermutationTransform.checkBijectivity(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 279, 1);
      long long0 = permutationTransform0.applyInverseChecked(279);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-328), (-328));
      long long0 = permutationTransform0.applyInverseChecked((-328));
      assertEquals((-9223372036854775807L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 0, 0);
      long long0 = permutationTransform0.applyInverseChecked(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 783, 783);
      long long0 = permutationTransform0.applyChecked(783);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-488), (-488));
      long long0 = permutationTransform0.applyChecked((-488));
      assertEquals((-9223372036854775807L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[1];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 244, (-1));
      int[] intArray1 = permutationTransform0.getInverseLutCopy();
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, 1, 0);
      int int0 = permutationTransform0.applyInverse(0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-1227), (-1));
      int[] intArray1 = permutationTransform0.getLutCopy();
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[8];
      PermutationTransform permutationTransform0 = new PermutationTransform(intArray0, (-321), 4);
      long long0 = permutationTransform0.applyChecked(1);
      assertEquals(0L, long0);
  }
}
