/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:43:48 GMT 2022
 */

package net.imglib2.transform.integer.shear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.transform.integer.BoundingBox;
import net.imglib2.transform.integer.shear.AbstractShearTransform;
import net.imglib2.transform.integer.shear.InverseShearTransform;
import net.imglib2.transform.integer.shear.ShearTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InverseShearTransform_ESTest extends InverseShearTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(35, 2180, 35);
      BoundingBox boundingBox0 = new BoundingBox(2180);
      // Undeclared exception!
      try { 
        inverseShearTransform0.transform(boundingBox0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2180 out of bounds for length 2180
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 35);
      BoundingBox boundingBox0 = new BoundingBox(119);
      BoundingBox boundingBox1 = inverseShearTransform0.transform(boundingBox0);
      assertSame(boundingBox1, boundingBox0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 35);
      // Undeclared exception!
      try { 
        inverseShearTransform0.getShear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, 0, 0);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0, shearTransform0);
      int[] intArray0 = new int[1];
      Point point0 = new Point(intArray0);
      PointSampleList<InverseShearTransform> pointSampleList0 = new PointSampleList<InverseShearTransform>(572);
      Point point1 = pointSampleList0.minAsPoint();
      inverseShearTransform0.apply((Localizable) point1, (Positionable) point0);
      assertEquals(0, inverseShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(1, 1, 2726);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1, shearTransform0);
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      inverseShearTransform0.apply(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, 0, (-571));
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[6];
      // Undeclared exception!
      try { 
        shearTransform0.applyInverse(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -571 out of bounds for length 8
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, (-2085));
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2085 out of bounds for length 8
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-1433), 0, (-1433));
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1433 out of bounds for length 3
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(1, 1, 2726);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1, shearTransform0);
      long[] longArray0 = new long[9];
      longArray0[1] = (long) 676;
      inverseShearTransform0.apply(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 35);
      BoundingBox boundingBox0 = new BoundingBox(19);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(boundingBox0.corner1, boundingBox0.corner2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 35 out of bounds for length 19
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 35);
      BoundingBox boundingBox0 = new BoundingBox(0);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(boundingBox0.corner1, boundingBox0.corner2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, (-899), 2120);
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -899 out of bounds for length 9
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      PointSampleList<InverseShearTransform> pointSampleList0 = new PointSampleList<InverseShearTransform>(5);
      BoundingBox boundingBox0 = new BoundingBox(pointSampleList0);
      inverseShearTransform0.transform(boundingBox0);
      BoundingBox boundingBox1 = inverseShearTransform0.transform(boundingBox0);
      assertSame(boundingBox0, boundingBox1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 0, 0);
      long[] longArray0 = inverseShearTransform0.getShear();
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-2841), (-2841), 0);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals(0, abstractShearTransform0.getReferenceDimension());
      assertEquals((-2841), abstractShearTransform0.getShearDimension());
      assertEquals((-2841), abstractShearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(161, 430, 161);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals(161, abstractShearTransform0.getReferenceDimension());
      assertEquals(430, abstractShearTransform0.getShearDimension());
      assertEquals(161, abstractShearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(2157, 0, (-25));
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals(0, abstractShearTransform0.getShearDimension());
      assertEquals(2157, abstractShearTransform0.numSourceDimensions());
      assertEquals((-25), abstractShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((long[]) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      Point point0 = new Point(0);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((Localizable) point0, (Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      int[] intArray0 = new int[5];
      Point point0 = new Point(intArray0);
      PointSampleList<InverseShearTransform> pointSampleList0 = new PointSampleList<InverseShearTransform>(0);
      Point point1 = pointSampleList0.minAsPoint();
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((Localizable) point0, (Positionable) point1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-1814), 0, 2004);
      Point point0 = new Point(2645);
      inverseShearTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(0, inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Point point0 = new Point(204);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(218, 218, 204);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(218);
      Point point1 = pointSampleList0.maxAsPoint();
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((Localizable) point1, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Point point0 = new Point(204);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(218, 218, 204);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(3, 3, 3);
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[0];
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(32, 32, 32);
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(3, 3, 3);
      int[] intArray0 = new int[8];
      inverseShearTransform0.apply(intArray0, intArray0);
      assertEquals(3, inverseShearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(17, 17, 17);
      long[] longArray0 = new long[32];
      long[] longArray1 = new long[4];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(40, 40, 40);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        inverseShearTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(17, 17, 17);
      long[] longArray0 = new long[32];
      inverseShearTransform0.apply(longArray0, longArray0);
      assertEquals(17, inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      // Undeclared exception!
      try { 
        inverseShearTransform0.transform((BoundingBox) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals(0, abstractShearTransform0.getReferenceDimension());
      assertEquals(0, abstractShearTransform0.numTargetDimensions());
      assertEquals(0, abstractShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-28), (-28), (-28));
      // Undeclared exception!
      try { 
        inverseShearTransform0.getShear();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -28
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }
}
