/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:02:47 GMT 2022
 */

package net.imglib2.transform.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.transform.integer.SequentializeTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequentializeTransform_ESTest extends SequentializeTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      double[] doubleArray0 = new double[4];
      RealPoint realPoint0 = new RealPoint(doubleArray0);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse((Positionable) realPoint0, (Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (-9223372036854775808L);
      longArray0[4] = (long) 2;
      longArray0[5] = 1L;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[7];
      sequentializeTransform0.applyInverse(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 2;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(intArray0, intArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[4];
      intArray0[1] = 2;
      sequentializeTransform0.applyInverse(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-2), 0}, intArray0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[2];
      sequentializeTransform0.applyInverse(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (-9223372036854775808L);
      longArray0[4] = (long) 2;
      longArray0[5] = 1L;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[2];
      sequentializeTransform0.applyInverse(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(longArray0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[5];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[7];
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(longArray1, longArray1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 2;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      Point point0 = new Point(longArray0);
      sequentializeTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      Point point0 = new Point(longArray0);
      Point point1 = new Point(1);
      sequentializeTransform0.apply((Localizable) point0, (Positionable) point1);
      assertEquals(1, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[5];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[7];
      Point point0 = new Point(longArray1);
      sequentializeTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      sequentializeTransform0.apply(intArray0, intArray0);
      assertEquals(1, sequentializeTransform0.numTargetDimensions());
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-14L);
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[4];
      sequentializeTransform0.apply(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[2];
      sequentializeTransform0.apply(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1L);
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      sequentializeTransform0.apply(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[10];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[2];
      sequentializeTransform0.apply(longArray0, longArray1);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[4];
      sequentializeTransform0.apply(longArray1, longArray1);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[0];
      SequentializeTransform sequentializeTransform0 = null;
      try {
        sequentializeTransform0 = new SequentializeTransform(longArray0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[5];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[6];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[6];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 3);
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[6];
      Point point0 = new Point(longArray0);
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply((Localizable) point0, (Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SequentializeTransform sequentializeTransform0 = null;
      try {
        sequentializeTransform0 = new SequentializeTransform((long[]) null, 861);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = null;
      try {
        sequentializeTransform0 = new SequentializeTransform(longArray0, (-2261));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      Point point0 = new Point(longArray0);
      sequentializeTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(2, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      Point point0 = new Point(longArray0);
      long[] longArray1 = new long[0];
      Point point1 = Point.wrap(longArray1);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse((Positionable) point0, (Localizable) point1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[6];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      Point point0 = new Point(2);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[5];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      Point point0 = new Point(longArray0);
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.transform.integer.SequentializeTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[2];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[6];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.applyInverse(longArray1, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[2];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      Point point0 = Point.wrap(longArray0);
      int[] intArray0 = new int[0];
      Point point1 = new Point(intArray0);
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply((Localizable) point0, (Positionable) point1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      Point point0 = new Point(1);
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[5];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        sequentializeTransform0.apply(longArray1, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = null;
      try {
        sequentializeTransform0 = new SequentializeTransform(longArray0, 31);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[3];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      sequentializeTransform0.inverse();
      assertEquals(1, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 1);
      int int0 = sequentializeTransform0.numSourceDimensions();
      assertEquals(4, int0);
      assertEquals(1, sequentializeTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[4];
      SequentializeTransform sequentializeTransform0 = new SequentializeTransform(longArray0, 2);
      int int0 = sequentializeTransform0.numTargetDimensions();
      assertEquals(2, int0);
  }
}
