/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 09:45:31 GMT 2022
 */

package net.imglib2.transform.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.transform.integer.Mixed;
import net.imglib2.transform.integer.MixedTransform;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.transform.integer.TranslationTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MixedTransform_ESTest extends MixedTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 585);
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      // Undeclared exception!
      try { 
        mixedTransform0.set(translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1);
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        mixedTransform0.set(translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      mixedTransform0.setTranslation(longArray0);
      mixedTransform0.preConcatenate((Mixed) translationTransform0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      mixedTransform0.setTranslation(longArray0);
      mixedTransform0.preConcatenate((Mixed) mixedTransform0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1);
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      // Undeclared exception!
      try { 
        mixedTransform0.preConcatenate((Mixed) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      mixedTransform0.concatenate((Mixed) translationTransform0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      mixedTransform0.concatenate((Mixed) translationTransform0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1468, 14);
      // Undeclared exception!
      try { 
        mixedTransform0.concatenate((Mixed) mixedTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      Supplier<MixedTransform> supplier0 = (Supplier<MixedTransform>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 1330;
      PointSample<MixedTransform> pointSample0 = new PointSample<MixedTransform>(supplier0, intArray0);
      Point point0 = pointSample0.positionAsPoint();
      mixedTransform0.apply((Localizable) pointSample0, (Positionable) point0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      int[] intArray0 = new int[7];
      intArray0[2] = 6;
      intArray0[6] = 6;
      mixedTransform0.setComponentMapping(intArray0);
      mixedTransform0.apply(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      mixedTransform0.apply(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      long[] longArray1 = new long[1];
      mixedTransform0.apply(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 445L;
      long[] longArray1 = new long[3];
      mixedTransform0.apply(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      int[] intArray0 = new int[3];
      mixedTransform0.getComponentMapping(intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(159, 159);
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        mixedTransform0.setInverseTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        mixedTransform0.setTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        mixedTransform0.getTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1373);
      SlicingTransform slicingTransform0 = new SlicingTransform(1373, 0);
      MixedTransform mixedTransform1 = mixedTransform0.concatenate((Mixed) slicingTransform0);
      mixedTransform1.preConcatenate((Mixed) slicingTransform0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      mixedTransform0.numSourceDimensions();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      mixedTransform0.numSourceDimensions();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1);
      mixedTransform0.getTranslation(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      mixedTransform0.setInverseTranslation(longArray0);
      mixedTransform0.getTranslation(0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 362);
      mixedTransform0.getComponentZero(2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1);
      boolean[] booleanArray0 = new boolean[16];
      mixedTransform0.setComponentZero(booleanArray0);
      mixedTransform0.getComponentZero(0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 1373);
      mixedTransform0.getComponentMapping(992);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1608, 4288);
      mixedTransform0.getComponentMapping(2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      mixedTransform0.getComponentInversion(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1380);
      mixedTransform0.getComponentInversion(1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform((-793), 0);
      mixedTransform0.concatenate((Mixed) slicingTransform0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.setTranslation((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      // Undeclared exception!
      try { 
        mixedTransform0.setInverseTranslation((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1113, 1113);
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentZero((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentMapping((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(696, 696);
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentInversion((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      // Undeclared exception!
      try { 
        mixedTransform0.set((Mixed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(6);
      // Undeclared exception!
      try { 
        mixedTransform0.set(translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform$InverseTranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(4945, 4945);
      assertEquals(4945, mixedTransform0.numSourceDimensions());
      
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) mixedTransform0);
      // Undeclared exception!
      mixedTransform0.preConcatenate((Mixed) mixedTransform1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.preConcatenate((Mixed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(1);
      // Undeclared exception!
      try { 
        mixedTransform0.preConcatenate((Mixed) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform$InverseTranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-1), 1);
      // Undeclared exception!
      try { 
        mixedTransform0.hasFullSourceMapping();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      mixedTransform0.setComponentMapping(intArray0);
      // Undeclared exception!
      try { 
        mixedTransform0.hasFullSourceMapping();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-1784), 1);
      // Undeclared exception!
      try { 
        mixedTransform0.getMatrix();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1783
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-1), 2121);
      // Undeclared exception!
      try { 
        mixedTransform0.getMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentZero((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(16, 16);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentMapping((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(221, 221);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentInversion((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(29, 5425);
      TranslationTransform translationTransform0 = new TranslationTransform(29);
      // Undeclared exception!
      mixedTransform0.concatenate((Mixed) translationTransform0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.concatenate((Mixed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(60, 60);
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(60);
      // Undeclared exception!
      try { 
        mixedTransform0.concatenate((Mixed) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform$InverseTranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      mixedTransform0.setComponentMapping(intArray0);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        mixedTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(5, 5);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      int[] intArray0 = new int[7];
      intArray0[3] = 1291;
      mixedTransform0.setComponentMapping(intArray0);
      // Undeclared exception!
      try { 
        mixedTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1291 out of bounds for length 7
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      Point point0 = new Point(6);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((Localizable) null, (Positionable) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      mixedTransform0.setComponentMapping(intArray0);
      Point point0 = new Point(1);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(2122, 2122);
      MixedTransform mixedTransform1 = new MixedTransform(2122, 4585);
      MixedTransform mixedTransform2 = new MixedTransform(2122, 4585);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MixedTransform mixedTransform0 = null;
      try {
        mixedTransform0 = new MixedTransform((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentInversion(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      mixedTransform0.getComponentInversion(booleanArray0);
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentMapping(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      int[] intArray0 = new int[1];
      mixedTransform0.getComponentMapping(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(713, 713);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentZero(713);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[4];
      mixedTransform0.getComponentZero(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(8, 8);
      // Undeclared exception!
      try { 
        mixedTransform0.getTranslation(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[1];
      mixedTransform0.getTranslation(longArray0);
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-1), 405);
      int int0 = mixedTransform0.numSourceDimensions();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(218, 0);
      boolean boolean0 = mixedTransform0.hasFullSourceMapping();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(16, 3047);
      boolean boolean0 = mixedTransform0.hasFullSourceMapping();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      double[][] doubleArray0 = mixedTransform0.getMatrix();
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 992);
      double[][] doubleArray0 = mixedTransform0.getMatrix();
      assertEquals(993, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      double[][] doubleArray0 = mixedTransform0.getMatrix();
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      MixedTransform mixedTransform1 = new MixedTransform(0, 2563);
      // Undeclared exception!
      try { 
        mixedTransform0.set(mixedTransform1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(2427, 2406);
      TranslationTransform translationTransform0 = new TranslationTransform(2406);
      // Undeclared exception!
      try { 
        mixedTransform0.set(translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      assertTrue(mixedTransform1.hasFullSourceMapping());
      assertEquals(1, mixedTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      MixedTransform mixedTransform0 = new MixedTransform((-388), 1);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      assertEquals((-388), mixedTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) mixedTransform0);
      assertTrue(mixedTransform1.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 3238);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) slicingTransform0);
      assertEquals(0, mixedTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(755, 758);
      // Undeclared exception!
      try { 
        mixedTransform0.preConcatenate((Mixed) mixedTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      MixedTransform mixedTransform1 = new MixedTransform(0, 2385);
      assertEquals(0, mixedTransform1.numSourceDimensions());
      
      MixedTransform mixedTransform2 = mixedTransform1.concatenate((Mixed) mixedTransform0);
      assertEquals(2385, mixedTransform2.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      MixedTransform mixedTransform0 = new MixedTransform((-388), 1);
      // Undeclared exception!
      try { 
        mixedTransform0.concatenate((Mixed) translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3096);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      mixedTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(1, mixedTransform0.numSourceDimensions());
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(5, 583);
      Point point0 = new Point(583);
      mixedTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(5, mixedTransform0.numSourceDimensions());
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 226);
      Point point0 = new Point(0);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(24, 24);
      Point point0 = new Point(5);
      // Undeclared exception!
      try { 
        mixedTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      mixedTransform0.setComponentInversion(booleanArray0);
      int[] intArray0 = new int[11];
      mixedTransform0.apply(intArray0, intArray0);
      assertEquals(1, mixedTransform0.numSourceDimensions());
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-2598), 1);
      int[] intArray0 = new int[8];
      mixedTransform0.apply(intArray0, intArray0);
      assertEquals((-2598), mixedTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-2598), 1);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mixedTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(634, 634);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        mixedTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      int[] intArray0 = new int[6];
      mixedTransform0.apply(intArray0, intArray0);
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(6, mixedTransform0.numSourceDimensions());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform((-35), 1);
      long[] longArray0 = new long[1];
      mixedTransform0.apply(longArray0, longArray0);
      assertEquals((-35), mixedTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[0];
      MixedTransform mixedTransform0 = new MixedTransform((-827), 1166);
      // Undeclared exception!
      try { 
        mixedTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        mixedTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(19, 19);
      boolean[] booleanArray0 = new boolean[8];
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentInversion(booleanArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentInversion(40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(26, 26);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentInversion(booleanArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(992, 992);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentMapping(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(2628, 2628);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentMapping(3150);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[5];
      MixedTransform mixedTransform0 = new MixedTransform(1157, 44);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentMapping(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        mixedTransform0.setComponentZero(booleanArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      boolean[] booleanArray0 = new boolean[0];
      mixedTransform0.setComponentZero(booleanArray0);
      assertEquals(0, mixedTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentZero(40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(16, 16);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        mixedTransform0.getComponentZero(booleanArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(0, 0);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        mixedTransform0.setInverseTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        mixedTransform0.setTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(2, 1);
      // Undeclared exception!
      try { 
        mixedTransform0.getTranslation(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1559, 1559);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        mixedTransform0.getTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(10, 10);
      assertEquals(10, mixedTransform0.numSourceDimensions());
      
      mixedTransform0.set(mixedTransform0);
      assertTrue(mixedTransform0.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      // Undeclared exception!
      try { 
        mixedTransform0.getTranslation((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(6, 6);
      assertEquals(6, mixedTransform0.numSourceDimensions());
      
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 6);
      MixedTransform mixedTransform1 = mixedTransform0.concatenate((Mixed) slicingTransform0);
      assertEquals(0, mixedTransform1.numSourceDimensions());
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(6, mixedTransform1.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(1, 1);
      mixedTransform0.getPreConcatenableClass();
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(1, mixedTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(40, 40);
      mixedTransform0.getConcatenableClass();
      assertTrue(mixedTransform0.hasFullSourceMapping());
      assertEquals(40, mixedTransform0.numSourceDimensions());
  }
}
