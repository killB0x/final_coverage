/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:53:19 GMT 2022
 */

package net.imglib2.transform.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.transform.integer.Translation;
import net.imglib2.transform.integer.TranslationTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TranslationTransform_ESTest extends TranslationTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      TranslationTransform translationTransform1 = translationTransform_InverseTranslationTransform0.concatenate((Translation) translationTransform0);
      assertEquals(1, translationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(1921);
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.preConcatenate((Translation) translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(0);
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.getTranslation(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.getTranslation(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[4];
      translationTransform_InverseTranslationTransform0.applyInverse(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(1);
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[5];
      translationTransform_InverseTranslationTransform0.applyInverse(longArray1, longArray0);
      assertEquals(1, translationTransform_InverseTranslationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      int[] intArray0 = new int[4];
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      int[] intArray1 = new int[5];
      translationTransform_InverseTranslationTransform0.apply(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Point point0 = new Point(longArray0);
      translationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(1, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      long[] longArray0 = new long[5];
      Point point0 = new Point(longArray0);
      translationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(0, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[7];
      translationTransform0.applyInverse(intArray0, intArray0);
      assertArrayEquals(new int[] {444, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[6];
      translationTransform0.applyInverse(intArray0, intArray1);
      assertEquals(1, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      int[] intArray0 = new int[0];
      translationTransform0.applyInverse(intArray0, intArray0);
      assertEquals(0, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[3] = (-4215L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      translationTransform_InverseTranslationTransform0.apply(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(1);
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[8];
      translationTransform_InverseTranslationTransform0.apply(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      long[] longArray0 = new long[6];
      translationTransform0.applyInverse(longArray0, longArray0);
      assertEquals(0, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(1229);
      TranslationTransform translationTransform1 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.set(translationTransform1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      TranslationTransform translationTransform1 = translationTransform0.concatenate((Translation) translationTransform_InverseTranslationTransform0);
      assertNotSame(translationTransform1, translationTransform0);
      assertEquals(1, translationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Point point0 = new Point(longArray0);
      translationTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(1, translationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(292);
      Point point0 = pointSampleList0.maxAsPoint();
      translationTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(292, point0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(0);
      long[] longArray0 = new long[2];
      PointSample<TranslationTransform> pointSample0 = PointSample.wrap(translationTransform0, longArray0);
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.applyInverse((Positionable) null, (Localizable) pointSample0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-444L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      int[] intArray0 = new int[8];
      translationTransform_InverseTranslationTransform0.applyInverse(intArray0, intArray0);
      assertArrayEquals(new int[] {(-444), 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      int[] intArray0 = new int[7];
      int[] intArray1 = new int[7];
      translationTransform0.apply(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      int[] intArray0 = new int[0];
      translationTransform0.apply(intArray0, intArray0);
      assertEquals(0, translationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-212L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      translationTransform0.apply(longArray0, longArray0);
      assertArrayEquals(new long[] {(-424L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        translationTransform0.setTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        translationTransform0.getTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(0);
      PointSampleList<TranslationTransform> pointSampleList0 = new PointSampleList<TranslationTransform>(0);
      Point point0 = pointSampleList0.minAsPoint();
      long[] longArray0 = point0.positionAsLongArray();
      translationTransform_InverseTranslationTransform0.getTranslation(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(3341);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      assertEquals(3341, translationTransform_InverseTranslationTransform0.numSourceDimensions());
      
      TranslationTransform translationTransform1 = translationTransform_InverseTranslationTransform0.concatenate((Translation) translationTransform0);
      assertEquals(3341, translationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform translationTransform1 = translationTransform0.preConcatenate((Translation) translationTransform0);
      assertNotSame(translationTransform1, translationTransform0);
      assertEquals(0, translationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long long0 = translationTransform0.getTranslation(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[6] = (long) 6;
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long long0 = translationTransform0.getTranslation(6);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-704L);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long long0 = translationTransform0.getTranslation(0);
      assertEquals((-704L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(0);
      TranslationTransform translationTransform1 = translationTransform0.concatenate((Translation) translationTransform_InverseTranslationTransform0);
      assertNotSame(translationTransform1, translationTransform0);
      assertEquals(0, translationTransform1.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.setTranslation((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(5616);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      translationTransform0.set(translationTransform_InverseTranslationTransform0);
      // Undeclared exception!
      translationTransform0.set(translationTransform_InverseTranslationTransform0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.set((Translation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform translationTransform1 = new TranslationTransform(3410);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(3410);
      // Undeclared exception!
      try { 
        translationTransform1.set(translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(4693);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationTransform translationTransform1 = translationTransform0.concatenate((Translation) translationTransform_InverseTranslationTransform0);
      translationTransform1.preConcatenate((Translation) translationTransform0);
      // Undeclared exception!
      translationTransform1.preConcatenate((Translation) translationTransform_InverseTranslationTransform0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.preConcatenate((Translation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(2541);
      TranslationTransform translationTransform1 = new TranslationTransform(2541);
      // Undeclared exception!
      try { 
        translationTransform1.preConcatenate((Translation) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.getTranslation((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(5400);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationTransform translationTransform1 = translationTransform0.preConcatenate((Translation) translationTransform_InverseTranslationTransform0);
      // Undeclared exception!
      translationTransform1.concatenate((Translation) translationTransform0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[12];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.concatenate((Translation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(2541);
      TranslationTransform translationTransform1 = new TranslationTransform(2541);
      // Undeclared exception!
      try { 
        translationTransform1.concatenate((Translation) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long[] longArray0 = new long[19];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[9];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[19];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Point point0 = new Point(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse((Positionable) null, (Localizable) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.apply((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[0];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.apply((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[2];
      Point point0 = new Point(longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.apply((Localizable) point0, (Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TranslationTransform translationTransform0 = null;
      try {
        translationTransform0 = new TranslationTransform((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TranslationTransform translationTransform0 = null;
      try {
        translationTransform0 = new TranslationTransform((-1822));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1822
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      double[][] doubleArray0 = translationTransform_InverseTranslationTransform0.getMatrix();
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[19];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Point point0 = new Point(longArray0);
      translationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(19, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      translationTransform0.applyInverse(longArray0, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform((-451));
      // Undeclared exception!
      try { 
        translationTransform0.concatenate((Translation) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        translationTransform0.apply(intArray0, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(4355);
      // Undeclared exception!
      try { 
        translationTransform0.getTranslation(4355);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(1);
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.concatenate((Translation) translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[11];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.getTranslation(35);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform((-772));
      // Undeclared exception!
      try { 
        translationTransform_InverseTranslationTransform0.getTranslation(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      int[] intArray0 = new int[0];
      Point point0 = new Point(intArray0);
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse((Positionable) pointSample0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[10];
      Point point0 = new Point(longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(1113);
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[2];
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform0.applyInverse(longArray1, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      double[][] doubleArray0 = translationTransform0.getMatrix();
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(2);
      // Undeclared exception!
      try { 
        translationTransform0.set(translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(649);
      // Undeclared exception!
      try { 
        translationTransform0.preConcatenate((Translation) translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[3];
      Point point0 = new Point(longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      float[] floatArray0 = new float[0];
      RealPoint realPoint0 = new RealPoint(floatArray0);
      // Undeclared exception!
      try { 
        translationTransform0.apply((Localizable) point0, (Positionable) realPoint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long[] longArray0 = new long[2];
      Point point0 = Point.wrap(longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(3107);
      // Undeclared exception!
      try { 
        translationTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[1];
      // Undeclared exception!
      try { 
        translationTransform0.apply(intArray0, intArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform0.apply(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long[] longArray0 = new long[16];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform0.apply(longArray1, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform0.setTranslation(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      translationTransform0.setTranslation(longArray0);
      assertEquals(2, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      // Undeclared exception!
      try { 
        translationTransform0.getTranslation(977);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationTransform0.getTranslation(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      translationTransform0.getTranslation(longArray0);
      assertEquals(1, translationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      Class<Translation> class0 = translationTransform_InverseTranslationTransform0.getPreConcatenableClass();
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      Point point0 = Point.wrap(longArray0);
      translationTransform_InverseTranslationTransform0.apply((Localizable) point0, (Positionable) point0);
      assertEquals(8, translationTransform_InverseTranslationTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      long[] longArray0 = new long[12];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse;
      assertEquals(12, translationTransform_InverseTranslationTransform0.numTargetDimensions());
      
      TranslationTransform translationTransform1 = translationTransform_InverseTranslationTransform0.preConcatenate((Translation) translationTransform0);
      assertEquals(12, translationTransform1.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(4290);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.new InverseTranslationTransform(4290);
      Class<Translation> class0 = translationTransform_InverseTranslationTransform0.getConcatenableClass();
      assertTrue(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      translationTransform_InverseTranslationTransform0.inverse();
      assertEquals(8, translationTransform_InverseTranslationTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(566);
      Class<Translation> class0 = translationTransform0.getPreConcatenableClass();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      Class<Translation> class0 = translationTransform0.getConcatenableClass();
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      long[] longArray0 = new long[9];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      Point point0 = new Point(longArray0);
      translationTransform_InverseTranslationTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(9, translationTransform_InverseTranslationTransform0.numSourceDimensions());
  }
}
