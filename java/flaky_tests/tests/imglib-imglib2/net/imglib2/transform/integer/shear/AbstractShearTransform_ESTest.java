/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:30:40 GMT 2022
 */

package net.imglib2.transform.integer.shear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.Positionable;
import net.imglib2.transform.integer.shear.AbstractShearTransform;
import net.imglib2.transform.integer.shear.InverseShearTransform;
import net.imglib2.transform.integer.shear.ShearTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractShearTransform_ESTest extends AbstractShearTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[6];
      // Undeclared exception!
      try { 
        inverseShearTransform0.applyInverse(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[1];
      inverseShearTransform0.applyInverse(longArray0, longArray1);
      assertEquals(1, inverseShearTransform0.getReferenceDimension());
      assertEquals(1, inverseShearTransform0.getShearDimension());
      assertEquals(1, inverseShearTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(126, 0, 126);
      int int0 = inverseShearTransform0.numSourceDimensions();
      assertEquals(126, int0);
      assertEquals(126, inverseShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      int[] intArray0 = new int[5];
      inverseShearTransform0.applyInverse(intArray0, intArray0);
      assertEquals(0, inverseShearTransform0.getReferenceDimension());
      assertEquals(0, inverseShearTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      Point point0 = new Point(pointSample0);
      inverseShearTransform0.applyInverse((Positionable) point0, (Localizable) point0);
      assertEquals(1, inverseShearTransform0.getReferenceDimension());
      assertEquals(1, inverseShearTransform0.numSourceDimensions());
      assertEquals(1, inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, 0, 0);
      int int0 = shearTransform0.numTargetDimensions();
      assertEquals(0, shearTransform0.getReferenceDimension());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      int int0 = inverseShearTransform0.numTargetDimensions();
      assertEquals(1, int0);
      assertEquals(1, inverseShearTransform0.getReferenceDimension());
      assertEquals(1, inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, 0, 0);
      int int0 = inverseShearTransform0.numSourceDimensions();
      assertEquals(0, int0);
      assertEquals(0, inverseShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-4381), (-4381), (-4381), (AbstractShearTransform) null);
      int int0 = inverseShearTransform0.numSourceDimensions();
      assertEquals((-4381), inverseShearTransform0.getShearDimension());
      assertEquals((-4381), int0);
      assertEquals((-4381), inverseShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      ShearTransform shearTransform0 = new ShearTransform(0, 0, (-3623), inverseShearTransform0);
      int int0 = shearTransform0.numDimensions();
      assertEquals(0, int0);
      assertEquals(1, inverseShearTransform0.getShearDimension());
      assertEquals((-3623), shearTransform0.getReferenceDimension());
      assertEquals(1, inverseShearTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(126, 0, 126);
      ShearTransform shearTransform0 = new ShearTransform(555, 555, (-1321), inverseShearTransform0);
      int int0 = shearTransform0.numDimensions();
      assertEquals(555, shearTransform0.getShearDimension());
      assertEquals(555, int0);
      assertEquals(126, inverseShearTransform0.numTargetDimensions());
      assertEquals((-1321), shearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-703), (-703), 2248);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.inverse();
      assertEquals((-703), abstractShearTransform0.getShearDimension());
      assertEquals((-703), abstractShearTransform0.numTargetDimensions());
      assertEquals(2248, abstractShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, 0, 0);
      AbstractShearTransform abstractShearTransform0 = shearTransform0.inverse();
      assertEquals(0, abstractShearTransform0.getReferenceDimension());
      assertEquals(0, abstractShearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.inverse();
      assertEquals(1, abstractShearTransform0.getReferenceDimension());
      assertEquals(1, abstractShearTransform0.numTargetDimensions());
      assertEquals(1, abstractShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, (-2326));
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.inverse();
      assertEquals((-2326), abstractShearTransform0.getReferenceDimension());
      assertEquals(1, abstractShearTransform0.getShearDimension());
      assertEquals(1, abstractShearTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, 0, 0);
      int int0 = shearTransform0.getShearDimension();
      assertEquals(0, int0);
      assertEquals(0, shearTransform0.getReferenceDimension());
      assertEquals(0, shearTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, (-1), 4261);
      int int0 = shearTransform0.getShearDimension();
      assertEquals((-1), int0);
      assertEquals(0, shearTransform0.numSourceDimensions());
      assertEquals(4261, shearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(1, 0, 1245);
      assertEquals(0, shearTransform0.getShearDimension());
      
      shearTransform0.getShear();
      assertEquals(1245, shearTransform0.getReferenceDimension());
      assertEquals(1, shearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform(0, (-3355), 0);
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-1669), 0, 0, shearTransform0);
      int int0 = inverseShearTransform0.getReferenceDimension();
      assertEquals((-3355), shearTransform0.getShearDimension());
      assertEquals(0, int0);
      assertEquals(0, shearTransform0.getReferenceDimension());
      assertEquals((-1669), inverseShearTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 0, (-747));
      int int0 = inverseShearTransform0.getReferenceDimension();
      assertEquals(0, inverseShearTransform0.getShearDimension());
      assertEquals((-747), int0);
      assertEquals(1, inverseShearTransform0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform((-1177), 1, (-1));
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(0, (-4516), 1, shearTransform0);
      inverseShearTransform0.copy();
      assertEquals((-1177), shearTransform0.numSourceDimensions());
      assertEquals(1, inverseShearTransform0.getReferenceDimension());
      assertEquals((-4516), inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-758), (-752), 0);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals((-752), inverseShearTransform0.getShearDimension());
      assertEquals(0, abstractShearTransform0.getReferenceDimension());
      assertEquals((-758), inverseShearTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      inverseShearTransform0.copy();
      assertEquals(1, inverseShearTransform0.numSourceDimensions());
      assertEquals(1, inverseShearTransform0.getShearDimension());
      assertEquals(1, inverseShearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 0, (-747));
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.copy();
      assertEquals(0, abstractShearTransform0.getShearDimension());
      assertEquals((-747), inverseShearTransform0.getReferenceDimension());
      assertEquals(1, inverseShearTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(2147483639, (-608), (-608));
      // Undeclared exception!
      inverseShearTransform0.getShear();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-10), (-10), (-10));
      // Undeclared exception!
      try { 
        inverseShearTransform0.getShear();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -10
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      // Undeclared exception!
      try { 
        inverseShearTransform0.getShear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      ShearTransform shearTransform0 = new ShearTransform(0, 0, (-3623), inverseShearTransform0);
      // Undeclared exception!
      try { 
        shearTransform0.applyInverse((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.InverseShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        inverseShearTransform0.applyInverse(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.transform.integer.shear.ShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-2324), (-2324), 0);
      Point point0 = new Point(0);
      // Undeclared exception!
      try { 
        inverseShearTransform0.applyInverse((Positionable) point0, (Localizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2324 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform((-1900), (-1900), (-1900));
      int int0 = shearTransform0.numDimensions();
      assertEquals((-1900), shearTransform0.getReferenceDimension());
      assertEquals((-1900), shearTransform0.getShearDimension());
      assertEquals((-1900), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      int int0 = inverseShearTransform0.getReferenceDimension();
      assertEquals(1, inverseShearTransform0.getShearDimension());
      assertEquals(1, int0);
      assertEquals(1, inverseShearTransform0.numTargetDimensions());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-4381), (-4381), (-4381), (AbstractShearTransform) null);
      AbstractShearTransform abstractShearTransform0 = inverseShearTransform0.inverse();
      assertEquals((-4381), inverseShearTransform0.getReferenceDimension());
      assertEquals((-4381), inverseShearTransform0.getShearDimension());
      assertNull(abstractShearTransform0);
      assertEquals((-4381), inverseShearTransform0.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShearTransform shearTransform0 = new ShearTransform((-257), 1, (-257));
      int int0 = shearTransform0.getShearDimension();
      assertEquals(1, int0);
      assertEquals((-257), shearTransform0.numSourceDimensions());
      assertEquals((-257), shearTransform0.getReferenceDimension());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform((-4381), (-4381), (-4381), (AbstractShearTransform) null);
      int int0 = inverseShearTransform0.numTargetDimensions();
      assertEquals((-4381), int0);
      assertEquals((-4381), inverseShearTransform0.getReferenceDimension());
      assertEquals((-4381), inverseShearTransform0.getShearDimension());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, (-2324));
      // Undeclared exception!
      try { 
        inverseShearTransform0.applyInverse((Positionable) null, (Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.ShearTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InverseShearTransform inverseShearTransform0 = new InverseShearTransform(1, 1, 1);
      // Undeclared exception!
      try { 
        inverseShearTransform0.applyInverse((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.integer.shear.ShearTransform", e);
      }
  }
}
