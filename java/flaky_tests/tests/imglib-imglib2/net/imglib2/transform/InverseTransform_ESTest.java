/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:56:25 GMT 2022
 */

package net.imglib2.transform;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.transform.InverseTransform;
import net.imglib2.transform.InvertibleTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InverseTransform_ESTest extends InverseTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[7];
      inverseTransform0.applyInverse(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[6];
      inverseTransform0.apply(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      Point point0 = new Point(0);
      RealPoint realPoint0 = point0.positionAsRealPoint();
      inverseTransform0.applyInverse((Positionable) realPoint0, (Localizable) point0);
      assertEquals(0, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numTargetDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(456).when(invertibleTransform0).numSourceDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numTargetDimensions();
      assertEquals(456, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numSourceDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(44).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numSourceDimensions();
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      InvertibleTransform invertibleTransform0 = inverseTransform0.inverse();
      assertNull(invertibleTransform0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      // Undeclared exception!
      try { 
        inverseTransform0.numTargetDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.InverseTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      long[] longArray0 = new long[9];
      // Undeclared exception!
      try { 
        inverseTransform0.applyInverse(longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.InverseTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        inverseTransform0.apply(longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.InverseTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      // Undeclared exception!
      try { 
        inverseTransform0.apply((Localizable) point0, (Positionable) point0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.InverseTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn((-1608)).when(invertibleTransform0).numSourceDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numTargetDimensions();
      assertEquals((-1608), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(invertibleTransform0).toString();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      InvertibleTransform invertibleTransform1 = inverseTransform0.inverse();
      assertFalse(invertibleTransform1.equals((Object)inverseTransform0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      long[] longArray0 = new long[2];
      inverseTransform0.apply((long[]) null, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn((-1608)).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      int int0 = inverseTransform0.numSourceDimensions();
      assertEquals((-1608), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InverseTransform inverseTransform0 = new InverseTransform((InvertibleTransform) null);
      double[] doubleArray0 = new double[7];
      RealPoint realPoint0 = RealPoint.wrap(doubleArray0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1316);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        inverseTransform0.applyInverse((Positionable) realPoint0, (Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.transform.InverseTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      long[] longArray0 = new long[2];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      inverseTransform0.apply((Localizable) pointSample0, (Positionable) pointSample0);
      assertEquals(2, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      long[] longArray0 = new long[2];
      inverseTransform0.applyInverse(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }
}
