/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:36:08 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      Fraction fraction1 = new Fraction();
      fraction0.denominator = 1524L;
      fraction1.div(fraction0);
      fraction0.mul(fraction1);
      long long0 = fraction0.mulCeil(246L);
      assertEquals(1524L, fraction0.getDenominator());
      assertEquals(246L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      Fraction fraction1 = fraction0.clone();
      fraction1.denominator = 639L;
      fraction1.div(fraction1);
      long long0 = fraction1.mulCeil((-4048L));
      assertEquals(408321L, fraction1.getDenominator());
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      fraction0.numerator = (-346L);
      fraction0.invert();
      long long0 = fraction0.mulCeil(1L);
      assertEquals(1L, fraction0.getNumerator());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      fraction0.numerator = 639L;
      long long0 = fraction0.mulCeil((-4048L));
      assertEquals(639.0, fraction0.getRatio(), 0.01);
      assertEquals((-2586672L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      fraction0.div(fraction0);
      assertEquals(0L, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      fraction0.mul(fraction0);
      assertEquals(0L, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      fraction0.numerator = (-1342L);
      fraction0.mul(fraction0);
      assertEquals(1800964L, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long long0 = fraction0.mulCeil(0L);
      assertEquals(0L, long0);
      assertEquals(1.0, fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      Fraction fraction1 = fraction0.clone();
      assertEquals(1L, fraction1.getNumerator());
      
      fraction1.numerator = 0L;
      double double0 = fraction1.getRatio();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((-444L), (-444L));
      fraction0.denominator = 2477L;
      double double0 = fraction0.getRatio();
      assertEquals((-0.17924909164311667), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      long long0 = fraction0.getNumerator();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1L), 496L);
      long long0 = fraction0.getNumerator();
      assertEquals((-1L), long0);
      assertEquals((-0.0020161290322580645), fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      long long0 = fraction0.getDenominator();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      fraction0.denominator = 0L;
      fraction0.invert();
      fraction0.clone();
      assertEquals(1L, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1L), 496L);
      Fraction fraction1 = fraction0.clone();
      assertEquals((-0.0020161290322580645), fraction1.getRatio(), 0.01);
      assertEquals((-0.0020161290322580645), fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      Fraction fraction1 = fraction0.clone();
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1L), (-368L));
      Fraction fraction1 = fraction0.clone();
      assertEquals(0.002717391304347826, fraction1.getRatio(), 0.01);
      assertEquals(0.002717391304347826, fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(0L, 0L);
      // Undeclared exception!
      try { 
        fraction0.mulCeil(0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      // Undeclared exception!
      try { 
        fraction0.div((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long long0 = fraction0.getNumerator();
      assertEquals(1.0, fraction0.getRatio(), 0.01);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long long0 = fraction0.getDenominator();
      assertEquals(1L, long0);
      assertEquals(1.0, fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      double double0 = fraction0.getRatio();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      Fraction fraction1 = fraction0.clone();
      assertEquals(1.0, fraction1.getRatio(), 0.01);
      
      fraction1.denominator = (-1L);
      long long0 = fraction1.getDenominator();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      // Undeclared exception!
      try { 
        fraction0.mul((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }
}
