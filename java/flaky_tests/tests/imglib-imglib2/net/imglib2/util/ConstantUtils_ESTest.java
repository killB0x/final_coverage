/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:05:08 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccessible;
import net.imglib2.util.ConstantUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConstantUtils_ESTest extends ConstantUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3584);
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(3584);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList1.new PointSampleListCursor();
      // Undeclared exception!
      ConstantUtils.constantRandomAccessibleInterval(pointSampleList_PointSampleListCursor0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantUtils constantUtils0 = new ConstantUtils();
      // Undeclared exception!
      try { 
        ConstantUtils.constantRandomAccessibleInterval((Object) constantUtils0, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.ConstantUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      // Undeclared exception!
      try { 
        ConstantUtils.constantRandomAccessibleInterval(integer0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5923);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      ConstantUtils.constantRandomAccessibleInterval(pointSampleList_PointSampleListCursor0, 0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConstantUtils constantUtils0 = new ConstantUtils();
      // Undeclared exception!
      try { 
        ConstantUtils.constantRandomAccessibleInterval((Object) constantUtils0, (-1368), (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConstantUtils constantUtils0 = new ConstantUtils();
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      // Undeclared exception!
      try { 
        ConstantUtils.constantRandomAccessibleInterval((Object) constantUtils0, 172, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object object0 = new Object();
      RandomAccessible<Object> randomAccessible0 = ConstantUtils.constantRandomAccessible(object0, (-176));
      assertNotNull(randomAccessible0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ConstantUtils constantUtils0 = new ConstantUtils();
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = ConstantUtils.constantRandomAccessibleInterval((Object) constantUtils0, 0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      RandomAccessibleInterval<Integer> randomAccessibleInterval0 = ConstantUtils.constantRandomAccessibleInterval(integer0, (Interval) pointSampleList0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Object object0 = new Object();
      RealRandomAccessible<Object> realRandomAccessible0 = ConstantUtils.constantRealRandomAccessible(object0, (-1176));
      assertNotNull(realRandomAccessible0);
  }
}
