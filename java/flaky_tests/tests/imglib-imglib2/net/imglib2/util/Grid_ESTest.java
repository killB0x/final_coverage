/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:37:44 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Cursor;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.Positionable;
import net.imglib2.util.Grid;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Grid_ESTest extends Grid_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[7];
      longArray1[0] = (-9223372036854775808L);
      long[] longArray2 = new long[4];
      longArray2[0] = (-1520L);
      Grid grid0 = new Grid(longArray0, longArray1, longArray2);
      String string0 = grid0.toString();
      assertEquals("Grid( dims = (0), cellDims = (-9223372036854775808, 0, 0, 0, 0, 0, 0), offset = (0) )", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      long[] longArray1 = new long[3];
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      grid0.getCellPosition(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1877L);
      longArray0[1] = 2L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellMin(2147483639, (-1877L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2147483639 out of bounds for length 2
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.getCellDimension(0, (-1L));
      assertEquals(997L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2763L;
      long[] longArray1 = new long[8];
      longArray1[0] = (-751L);
      Grid grid0 = new Grid(longArray0, longArray1, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      Point point0 = grid_CellIntervals0.maxAsPoint();
      grid_CellIntervals0.getAt((Localizable) point0);
      assertEquals(0L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-9223372036854775775L);
      longArray0[0] = 2805L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      Point point0 = grid_CellIntervals0.maxAsPoint();
      grid_CellIntervals0.getAt((Localizable) point0);
      assertEquals(2L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-41L);
      longArray1[5] = (-41L);
      longArray1[6] = (-41L);
      Grid grid0 = new Grid(longArray0, longArray1);
      grid0.getCellGridPositionFlat(1342L, longArray1);
      grid0.getCellDimensions(longArray1, longArray0, longArray0);
      assertArrayEquals(new long[] {0L, (-41L), (-41L), (-41L), (-41L), (-41L), (-820L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-41L);
      longArray1[5] = (-41L);
      longArray1[6] = (-41L);
      Grid grid0 = new Grid(longArray0, longArray1);
      grid0.getCellGridPositionFlat(1342L, longArray1);
      grid0.getCellDimensions(longArray1, longArray1, longArray0);
      assertArrayEquals(new long[] {(-41L), 41L, 41L, 41L, 41L, 41L, (-41L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2777L;
      long[] longArray1 = new long[3];
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      grid0.getCellPosition(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      grid0.getCellDimensions(longArray0, longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      long[] longArray1 = new long[3];
      longArray1[0] = (-9223372036854775808L);
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      grid0.getCellDimensions(2769L, longArray1, longArray0);
      assertArrayEquals(new long[] {421L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {2348L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      long[] longArray1 = new long[3];
      longArray1[0] = (-9223372036854775808L);
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      grid0.getCellDimensions((-2399L), longArray1, longArray1);
      assertArrayEquals(new long[] {(-5117L), 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-9223372036854775808L);
      Grid grid0 = new Grid(longArray0, longArray1);
      assertEquals(1, grid0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 910L;
      longArray0[1] = 1L;
      longArray0[2] = 2616L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      grid_CellIntervals0.randomAccess();
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      long long0 = grid_CellIntervals0.min(1749);
      assertEquals(0L, long0);
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1123L);
      Grid grid0 = new Grid(longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      Cursor<Interval> cursor0 = grid_CellIntervals0.cursor();
      assertEquals(1L, grid_CellIntervals0.size());
      assertTrue(cursor0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid grid1 = new Grid(grid0);
      assertEquals(1, grid1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[26];
      longArray1[0] = (-34L);
      longArray1[1] = (-34L);
      longArray1[2] = (-34L);
      longArray1[3] = (-34L);
      longArray1[4] = (-34L);
      longArray1[5] = (-34L);
      longArray1[6] = (-34L);
      Grid grid0 = new Grid(longArray0, longArray1);
      long long0 = grid0.imgDimension(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.imgDimension(0);
      assertEquals(2769L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1123L);
      Grid grid0 = new Grid(longArray0, longArray0);
      long long0 = grid0.imgDimension(0);
      assertEquals((-1123L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.gridDimension(0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.getCellMin(0, 2L);
      assertEquals(5538L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-48L);
      longArray1[1] = (-48L);
      longArray1[2] = (-48L);
      longArray1[3] = (-48L);
      longArray1[4] = (-48L);
      longArray1[5] = (-48L);
      longArray1[6] = (-48L);
      Grid grid0 = new Grid(longArray0, longArray1);
      long long0 = grid0.getCellMin(2, 1L);
      assertEquals((-48L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 910L;
      longArray0[1] = 910L;
      longArray0[2] = 2616L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.cellDimension(0);
      assertEquals(910L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1123L);
      Grid grid0 = new Grid(longArray0, longArray0);
      long long0 = grid0.cellDimension(0);
      assertEquals((-1123L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1056L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.imgDimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1069L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.imgDimensions(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.gridDimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2793L);
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.gridDimensions(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 973L;
      Grid grid0 = new Grid(longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellPosition(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.getCellPosition(longArray1, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellPosition(longArray0, (Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0);
      long[] longArray1 = new long[0];
      Point point0 = Point.wrap(longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellPosition(longArray1, (Positionable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellInterval(longArray0, longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.getCellInterval(longArray1, longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-28L);
      Grid grid0 = new Grid(longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellGridPositionFlat((-28L), (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1064L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.getCellGridPositionFlat(1064L, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[5];
      longArray1[0] = 1621L;
      long[] longArray2 = new long[8];
      longArray2[0] = (-1152L);
      longArray2[1] = 1621L;
      longArray2[2] = 1621L;
      longArray2[3] = 1621L;
      longArray2[4] = (-1152L);
      Grid grid0 = new Grid(longArray1, longArray2);
      // Undeclared exception!
      try { 
        grid0.getCellGridPositionFlat(2085L, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1056L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellDimensions(longArray0, (long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.getCellDimensions(longArray0, longArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1014L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.getCellDimensions(1014L, longArray1, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellDimension((-2857), 2769L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2857 out of bounds for length 1
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.cellDimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        grid0.cellDimensions(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-41L);
      Grid grid0 = new Grid(longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.cellDimension(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 11 out of bounds for length 1
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Grid grid0 = null;
      try {
        grid0 = new Grid((long[]) null, (long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[0];
      Grid grid0 = null;
      try {
        grid0 = new Grid(longArray0, longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[1];
      Grid grid0 = null;
      try {
        grid0 = new Grid(longArray0, longArray0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long[] longArray0 = new long[1];
      Grid grid0 = null;
      try {
        grid0 = new Grid(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[0];
      Grid grid0 = null;
      try {
        grid0 = new Grid(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      longArray1[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray1, longArray1);
      grid0.getCellInterval(longArray0, longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      long[] longArray1 = new long[3];
      Grid grid0 = new Grid(longArray0, longArray0, longArray1);
      grid0.getCellGridPositionFlat((-1L), longArray1);
      Grid grid1 = new Grid(longArray0, longArray1, longArray0);
      grid1.getCellDimensions(2670L, longArray0, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-2670L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-2565L);
      longArray1[5] = (-41L);
      longArray1[6] = (-2565L);
      Grid grid0 = new Grid(longArray0, longArray1);
      String string0 = grid0.toString();
      assertEquals("Grid( dims = (0, 0, 0, 0, 0, 0, 0), cellDims = (-41, -41, -41, -41, -2565, -41, -2565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), offset = (0, 0, 0, 0, 0, 0, 0) )", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[2];
      longArray1[0] = 4360L;
      Grid grid1 = new Grid(longArray0, longArray0, longArray1);
      boolean boolean0 = grid0.equals(grid1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2772L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = new long[5];
      longArray1[0] = 2772L;
      Grid grid1 = new Grid(longArray0, longArray1);
      boolean boolean0 = grid0.equals(grid1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      grid0.gridDimensions(longArray0);
      Grid grid1 = new Grid(longArray0, longArray0, longArray0);
      boolean boolean0 = grid0.equals(grid1);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      boolean boolean0 = grid0.equals(grid0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2805L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      Point point0 = grid_CellIntervals0.maxAsPoint();
      Interval interval0 = grid_CellIntervals0.getAt((Localizable) point0);
      boolean boolean0 = grid0.equals(interval0);
      assertEquals(1L, grid_CellIntervals0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      grid0.gridDimensions(longArray0);
      Point point0 = new Point(longArray0);
      grid0.getCellPosition(longArray0, (Positionable) point0);
      assertArrayEquals(new long[] {1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      longArray1[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray1, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      Point point0 = grid_CellIntervals0.dimensionsAsPoint();
      grid0.getCellPosition(longArray1, (Positionable) point0);
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long long0 = grid0.getCellMin(0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-51L);
      long[] longArray1 = new long[1];
      Grid grid0 = new Grid(longArray1, longArray0);
      long long0 = grid0.getCellDimension(0, 1L);
      assertEquals(51L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      longArray1[0] = 997L;
      Grid grid0 = new Grid(longArray0, longArray1, longArray0);
      long long0 = grid0.getCellDimension(0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-51L);
      Grid grid0 = new Grid(longArray0, longArray0);
      long long0 = grid0.getCellDimension(0, 1L);
      assertEquals((-51L), long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[4];
      longArray1[0] = (-5L);
      Grid grid0 = new Grid(longArray0, longArray1, longArray0);
      grid0.getCellGridPositionFlat(1L, longArray1);
      grid0.getCellInterval(longArray1, longArray1, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-41L);
      longArray1[5] = (-41L);
      longArray1[6] = (-41L);
      Grid grid0 = new Grid(longArray0, longArray1);
      grid0.getCellInterval(longArray1, longArray0, longArray1);
      assertArrayEquals(new long[] {1681L, 1681L, 1681L, 1681L, 1681L, 1681L, 1681L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-41L);
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-41L);
      longArray1[5] = (-41L);
      longArray1[6] = (-41L);
      Grid grid0 = new Grid(longArray0, longArray1);
      grid0.getCellPosition(longArray0, longArray1);
      grid0.getCellDimensions(longArray1, longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 41L, 41L, 41L, 41L, 41L, 41L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1345L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.getCellDimensions(1345L, longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      grid0.cellDimensions(longArray0);
      assertArrayEquals(new long[] {1043L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[24];
      longArray1[0] = (-41L);
      longArray1[1] = (-41L);
      longArray1[2] = (-41L);
      longArray1[3] = (-41L);
      longArray1[4] = (-2565L);
      longArray1[5] = (-41L);
      longArray1[6] = (-2565L);
      Grid grid0 = new Grid(longArray0, longArray1);
      grid0.imgDimensions(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      grid_CellIntervals0.iterator();
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      grid_CellIntervals0.firstElement();
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2789L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      long long0 = grid_CellIntervals0.size();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1926L);
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      grid_CellIntervals0.iterationOrder();
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      Cursor<Interval> cursor0 = grid_CellIntervals0.localizingCursor();
      assertTrue(cursor0.hasNext());
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.cellIntervals();
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      grid_CellIntervals0.randomAccess((Interval) finalInterval0);
      assertEquals(1L, grid_CellIntervals0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      int int0 = grid0.numDimensions();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1032L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = grid0.getGridDimensions();
      assertArrayEquals(new long[] {1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 101L;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      long[] longArray1 = grid0.getImgDimensions();
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0);
      long[] longArray1 = grid0.getCellDimensions();
      assertArrayEquals(new long[] {2769L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[11];
      longArray1[0] = (-9223372036854775744L);
      Grid grid0 = new Grid(longArray0, longArray1, longArray0);
      long long0 = grid0.cellDimension(2);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[7];
      longArray1[0] = 209L;
      Grid grid0 = new Grid(longArray0, longArray1);
      String string0 = grid0.toString();
      assertEquals("Grid( dims = (0), cellDims = (209, 0, 0, 0, 0, 0, 0), offset = (0) )", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2769L;
      Grid grid0 = new Grid(longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.gridDimension(2146646422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2146646422 out of bounds for length 1
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1123L);
      Grid grid0 = new Grid(longArray0, longArray0);
      grid0.hashCode();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1926L);
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        grid0.imgDimension(2145884628);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2145884628 out of bounds for length 1
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Grid grid0 = null;
      try {
        grid0 = new Grid((Grid) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      long[] longArray0 = new long[7];
      Grid grid0 = null;
      try {
        grid0 = new Grid(longArray0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Grid", e);
      }
  }
}
