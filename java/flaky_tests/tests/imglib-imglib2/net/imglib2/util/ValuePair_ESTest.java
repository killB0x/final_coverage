/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:11:05 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import net.imglib2.util.ValuePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ValuePair_ESTest extends ValuePair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>(integer0, integer0);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>(integer0, valuePair0);
      valuePair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair1 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      valuePair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      Integer integer0 = valuePair0.getB();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair1 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      ValuePair<Integer, Integer> valuePair2 = valuePair1.getA();
      assertSame(valuePair0, valuePair2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      boolean boolean0 = valuePair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      Integer integer0 = valuePair1.getA();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair2 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      boolean boolean0 = valuePair1.equals(valuePair2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      boolean boolean0 = valuePair0.equals(valuePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair1 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair2 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      boolean boolean0 = valuePair1.equals(valuePair2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair1 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      boolean boolean0 = valuePair0.equals(valuePair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair2 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      Object object0 = valuePair1.getB();
      assertNotNull(object0);
      
      boolean boolean0 = valuePair2.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<ValuePair<Integer, Integer>, Integer> valuePair1 = new ValuePair<ValuePair<Integer, Integer>, Integer>(valuePair0, (Integer) null);
      Integer integer0 = new Integer(0);
      boolean boolean0 = valuePair1.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1275);
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>(integer0, integer0);
      boolean boolean0 = valuePair0.equals(valuePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      valuePair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValuePair<Integer, Integer> valuePair0 = new ValuePair<Integer, Integer>((Integer) null, (Integer) null);
      ValuePair<Integer, ValuePair<Integer, Integer>> valuePair1 = new ValuePair<Integer, ValuePair<Integer, Integer>>((Integer) null, valuePair0);
      Object object0 = valuePair1.getB();
      assertNotNull(object0);
      
      boolean boolean0 = valuePair1.equals(object0);
      assertFalse(boolean0);
  }
}
