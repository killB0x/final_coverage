/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:56:22 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;
import net.imglib2.Dimensions;
import net.imglib2.IterableInterval;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.histogram.BinMapper1d;
import net.imglib2.histogram.HistogramNd;
import net.imglib2.img.Img;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.ImgView;
import net.imglib2.img.NativeImg;
import net.imglib2.img.basictypeaccess.LongAccess;
import net.imglib2.type.BooleanType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.IntegerType;
import net.imglib2.type.numeric.RealType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.util.FlatCollections;
import net.imglib2.view.IterableRandomAccessibleInterval;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlatCollections_ESTest extends FlatCollections_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = (RandomAccessibleInterval<UnsignedIntType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      PointSampleList<Boolean> pointSampleList0 = new PointSampleList<Boolean>(0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FlatCollections.collection((IterableInterval<Boolean>) pointSampleList0, function0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomAccess<UnsignedIntType> randomAccess0 = (RandomAccess<UnsignedIntType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(randomAccess0).get();
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = (RandomAccessibleInterval<UnsignedIntType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(15, 0, 0, 15, 1983).when(randomAccessibleInterval0).numDimensions();
      doReturn(1L, (long)15, (long)1983, (long)1983, (-397L)).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn(randomAccess0, randomAccess0).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<UnsignedIntType> imgFactory0 = (ImgFactory<UnsignedIntType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<UnsignedIntType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<UnsignedIntType> img1 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img0);
      IterableRandomAccessibleInterval<UnsignedIntType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<UnsignedIntType>) img1);
      FlatCollections.longCollection(iterableRandomAccessibleInterval0);
      Img<UnsignedIntType> img2 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img1);
      FlatCollections.doubleList(img2);
      FlatCollections.doubleList(img1);
      FlatCollections.integerList(iterableRandomAccessibleInterval0);
      FlatCollections.integerList(img1);
      FlatCollections.longList(iterableRandomAccessibleInterval0);
      // Undeclared exception!
      FlatCollections.doubleCollection(img1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomAccess<UnsignedIntType> randomAccess0 = (RandomAccess<UnsignedIntType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccess<UnsignedIntType> randomAccess1 = (RandomAccess<UnsignedIntType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = (RandomAccessibleInterval<UnsignedIntType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(31, 31, 31, Integer.MAX_VALUE).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, (-1902L), (-1902L), (-4726L), 1487L).when(randomAccessibleInterval0).dimension(anyInt());
      ImgFactory<UnsignedIntType> imgFactory0 = (ImgFactory<UnsignedIntType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<UnsignedIntType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<UnsignedIntType> img1 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img0);
      IterableRandomAccessibleInterval<UnsignedIntType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<UnsignedIntType>) img1);
      // Undeclared exception!
      FlatCollections.longCollection(iterableRandomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Function<UnsignedIntType, UnsignedIntType> function0 = (Function<UnsignedIntType, UnsignedIntType>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FlatCollections.collection((IterableInterval<UnsignedIntType>) null, function0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomAccess<UnsignedIntType> randomAccess0 = (RandomAccess<UnsignedIntType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = (RandomAccessibleInterval<UnsignedIntType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn((-946), 781, 1611).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)781, (long)1611, 63L, (-1702L), 1283L).when(randomAccessibleInterval0).dimension(anyInt());
      ImgFactory<UnsignedIntType> imgFactory0 = (ImgFactory<UnsignedIntType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<UnsignedIntType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<UnsignedIntType> img1 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img0);
      Img<UnsignedIntType> img2 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img1);
      // Undeclared exception!
      try { 
        FlatCollections.doubleList(img2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative size: -3026493396814398981
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = (RandomAccessibleInterval<UnsignedIntType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<UnsignedIntType> imgFactory0 = (ImgFactory<UnsignedIntType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<UnsignedIntType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<UnsignedIntType> img1 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img0);
      IterableRandomAccessibleInterval<UnsignedIntType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<UnsignedIntType>) img1);
      FlatCollections.longCollection(iterableRandomAccessibleInterval0);
      Img<UnsignedIntType> img2 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img1);
      FlatCollections.doubleList(img2);
      FlatCollections.doubleList(img1);
      FlatCollections.integerList(iterableRandomAccessibleInterval0);
      FlatCollections.integerList(img1);
      FlatCollections.longList(iterableRandomAccessibleInterval0);
      FlatCollections.doubleCollection(img1);
      FlatCollections.floatList(img1);
      Function<UnsignedIntType, UnsignedIntType> function0 = (Function<UnsignedIntType, UnsignedIntType>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<UnsignedIntType>) img2, function0);
      IterableRandomAccessibleInterval<UnsignedIntType> iterableRandomAccessibleInterval1 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<UnsignedIntType>) img1);
      FlatCollections.integerCollection(iterableRandomAccessibleInterval1);
      FlatCollections.floatList(iterableRandomAccessibleInterval1);
      FlatCollections.floatList(img0);
      FlatCollections.integerCollection(iterableRandomAccessibleInterval1);
      FlatCollections.integerCollection(iterableRandomAccessibleInterval0);
      FlatCollections.doubleCollection(img0);
      FlatCollections.integerList(iterableRandomAccessibleInterval1);
      FlatCollections.floatCollection(iterableRandomAccessibleInterval0);
      FlatCollections.floatCollection(img1);
      FlatCollections.bigIntegerCollection(img1);
      Img<UnsignedIntType> img3 = ImgView.wrap((RandomAccessibleInterval<UnsignedIntType>) img0);
      FlatCollections.doubleList(img3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomAccess<Boolean> randomAccess0 = (RandomAccess<Boolean>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      RandomAccess<BitType> randomAccess1 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(13, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)13, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      // Undeclared exception!
      try { 
        FlatCollections.doubleCollection(iterableRandomAccessibleInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size too large: 302875106592253
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomAccess<BitType> randomAccess0 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccess<BitType> randomAccess1 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(2493, 2493, (-85), 2143145297, 2143145297).when(randomAccessibleInterval0).numDimensions();
      doReturn((-904L), (-904L), 2147483647L, (long)2493, (long)2143145297).when(randomAccessibleInterval0).dimension(anyInt());
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      ImgFactory<BitType> imgFactory1 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      FlatCollections.doubleCollection(img0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0, imgFactory1);
      Img<BitType> img2 = ImgView.wrap((RandomAccessibleInterval<BitType>) img1);
      // Undeclared exception!
      FlatCollections.booleanList(img2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomAccess<BitType> randomAccess0 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccess<BitType> randomAccess1 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(2493, 2493, (-85), 2143145297, 2143145297).when(randomAccessibleInterval0).numDimensions();
      doReturn((-904L), (-904L), 2147483647L, (long)2493, (long)2143145297).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).min(anyInt());
      doReturn(randomAccess0).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      ImgFactory<BitType> imgFactory1 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0, imgFactory1);
      Img<BitType> img2 = ImgView.wrap((RandomAccessibleInterval<BitType>) img1);
      FlatCollections.booleanList(img2);
      // Undeclared exception!
      FlatCollections.floatList(img0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.floatList((RandomAccessibleInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAccessibleInterval<List<LongType>> randomAccessibleInterval0 = (RandomAccessibleInterval<List<LongType>>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<List<LongType>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      RandomAccessibleInterval<Boolean> randomAccessibleInterval1 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessibleInterval1).numDimensions();
      doReturn(0L).when(randomAccessibleInterval1).dimension(anyInt());
      Function<Boolean, BinMapper1d<LongType>> function0 = (Function<Boolean, BinMapper1d<LongType>>) mock(Function.class, new ViolatedAssumptionAnswer());
      List<BinMapper1d<LongType>> list0 = FlatCollections.list(randomAccessibleInterval1, function0);
      HistogramNd<LongType> histogramNd0 = null;
      try {
        histogramNd0 = new HistogramNd<LongType>(iterableRandomAccessibleInterval0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BinMapper1d<LongType>> function0 = (Function<Boolean, BinMapper1d<LongType>>) mock(Function.class, new ViolatedAssumptionAnswer());
      List<BinMapper1d<LongType>> list0 = FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      PointSampleList<List<LongType>> pointSampleList0 = new PointSampleList<List<LongType>>(67);
      HistogramNd<LongType> histogramNd0 = null;
      try {
        histogramNd0 = new HistogramNd<LongType>(pointSampleList0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(48);
      pointSampleList0.dimensionsAsPoint();
      // Undeclared exception!
      try { 
        FlatCollections.floatCollection(pointSampleList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size too large: 281474976710656
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(35);
      PointSampleList<BitType> pointSampleList1 = new PointSampleList<BitType>(0);
      PointSampleList<BitType> pointSampleList2 = new PointSampleList<BitType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.bigIntegerCollection(pointSampleList2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(85);
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img1);
      FlatCollections.bigIntegerCollection(iterableRandomAccessibleInterval0);
      FlatCollections.doubleCollection(img1);
      FlatCollections.doubleList(img0);
      Collection<Float> collection0 = FlatCollections.floatCollection(pointSampleList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IterableInterval<BitType> iterableInterval0 = null;
      // Undeclared exception!
      try { 
        FlatCollections.booleanCollection((IterableInterval<? extends BooleanType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(1755, Integer.MAX_VALUE).when(randomAccessibleInterval0).numDimensions();
      doReturn(905L, 905L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BitType> function0 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img1);
      FlatCollections.bigIntegerCollection(iterableRandomAccessibleInterval0);
      FlatCollections.bigIntegerList(img0);
      FlatCollections.bigIntegerList(iterableRandomAccessibleInterval0);
      FlatCollections.longCollection(iterableRandomAccessibleInterval0);
      FlatCollections.booleanList(img1);
      FlatCollections.longList(iterableRandomAccessibleInterval0);
      FlatCollections.bigIntegerList(img1);
      FlatCollections.bigIntegerList(iterableRandomAccessibleInterval0);
      FlatCollections.booleanCollection(img0);
      FlatCollections.longCollection(img0);
      FlatCollections.booleanList(img1);
      FlatCollections.doubleCollection(img0);
      PointSampleList<Boolean> pointSampleList0 = new PointSampleList<Boolean>(1208);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) pointSampleList0, function0);
      Function<Boolean, BitType> function1 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) pointSampleList0, function1);
      FlatCollections.booleanCollection(iterableRandomAccessibleInterval0);
      Img<BitType> img2 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      FlatCollections.integerList(img2);
      FlatCollections.collection((IterableInterval<Boolean>) pointSampleList0, (Function<Boolean, Boolean>) null);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval1 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img0);
      Function<BitType, BitType> function2 = (Function<BitType, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      List<BitType> list0 = FlatCollections.list((RandomAccessibleInterval<BitType>) iterableRandomAccessibleInterval1, function2);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(71, 71, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)71, (long)71, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      RandomAccessibleInterval<BitType> randomAccessibleInterval1 = null;
      // Undeclared exception!
      try { 
        FlatCollections.longList(randomAccessibleInterval1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PointSampleList<UnsignedIntType> pointSampleList0 = new PointSampleList<UnsignedIntType>(40);
      // Undeclared exception!
      try { 
        FlatCollections.integerCollection(pointSampleList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size too large: 1099511627776
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomAccess<Boolean> randomAccess0 = (RandomAccess<Boolean>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(913, 2146285275).when(randomAccessibleInterval0).numDimensions();
      doReturn(2147483647L, (long)2146285275, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      FlatCollections.collection((IterableInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-1);
      RandomAccess<Boolean> randomAccess0 = (RandomAccess<Boolean>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = null;
      // Undeclared exception!
      try { 
        FlatCollections.integerList((RandomAccessibleInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(12, 12).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)12, (long)12, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BitType> function0 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      int int0 = 0;
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(int0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      pointSampleList0.realMax(doubleArray0);
      // Undeclared exception!
      try { 
        FlatCollections.longCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(35);
      pointSampleList0.numDimensions();
      // Undeclared exception!
      try { 
        FlatCollections.booleanCollection(pointSampleList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size too large: 34359738368
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.bigIntegerList((RandomAccessibleInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomAccess<BitType> randomAccess0 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccess<BitType> randomAccess1 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, (-3280), 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)(-3280), 2147483647L, 2147483647L, (-688L), (-3463L)).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn(randomAccess0, randomAccess1, randomAccess0, randomAccess1, (RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      FlatCollections.floatCollection(img0);
      RandomAccessibleInterval<Boolean> randomAccessibleInterval1 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessibleInterval1).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval1).dimension(anyInt());
      doReturn((RandomAccess) null, (RandomAccess) null).when(randomAccessibleInterval1).randomAccess();
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval1);
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, (Function<Boolean, BitType>) null);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      ImgFactory<BitType> imgFactory1 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img2 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0, imgFactory1);
      IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img1);
      FlatCollections.bigIntegerList(img2);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      FlatCollections.collection((IterableInterval<Boolean>) iterableRandomAccessibleInterval0, (Function<Boolean, BitType>) null);
      Function<Boolean, Boolean> function1 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function1);
      FlatCollections.booleanList(img0);
      FlatCollections.doubleCollection(img2);
      FlatCollections.bigIntegerCollection(img2);
      FlatCollections.bigIntegerCollection(img2);
      FlatCollections.longCollection(img1);
      FlatCollections.bigIntegerList(img1);
      FlatCollections.integerCollection(img2);
      List<Long> list0 = FlatCollections.longList(img0);
      assertFalse(list0.contains((-688L)));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(67);
      FlatCollections.bigIntegerCollection(pointSampleList0);
      FlatCollections.longCollection(pointSampleList0);
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<BitType>) iterableRandomAccessibleInterval0, imgFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.bigIntegerCollection((IterableInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(12, 12).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)12, (long)12, (long)12, (long)12, (long)12).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BitType> function0 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Size too large: 8916100448256
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomAccess<BitType> randomAccess0 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(12, 12, 12).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)2143145297, (long)12, (-1L), (long)12, 11390625L).when(randomAccessibleInterval0).dimension(anyInt());
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      // Undeclared exception!
      try { 
        FlatCollections.bigIntegerCollection(img1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative size: -5343746458813171839
         //
         verifyException("net.imglib2.util.FlatCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(1533, 64).when(randomAccessibleInterval0).numDimensions();
      doReturn((long)64, 2147483647L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BitType> function0 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      int int0 = 0;
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(int0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      pointSampleList0.realMax(doubleArray0);
      // Undeclared exception!
      try { 
        FlatCollections.longCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 67;
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(67);
      FlatCollections.bigIntegerCollection(pointSampleList0);
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = null;
      // Undeclared exception!
      try { 
        FlatCollections.booleanList((RandomAccessibleInterval<? extends BooleanType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img1);
      List<Boolean> list0 = FlatCollections.booleanList(iterableRandomAccessibleInterval0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.list((RandomAccessibleInterval<LongType>) null, (Function<LongType, BinMapper1d<LongType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PointSampleList<Boolean> pointSampleList0 = new PointSampleList<Boolean>(1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      Dimensions.verifyAllPositive(intArray0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) pointSampleList0, function0);
      IterableInterval<BitType> iterableInterval0 = null;
      // Undeclared exception!
      try { 
        FlatCollections.longCollection((IterableInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.floatCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.floatCollection((IterableInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FlatCollections flatCollections0 = new FlatCollections();
      RandomAccess<BitType> randomAccess0 = (RandomAccess<BitType>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        FlatCollections.floatCollection((IterableInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FlatCollections flatCollections0 = new FlatCollections();
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.floatCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = null;
      // Undeclared exception!
      try { 
        FlatCollections.doubleList((RandomAccessibleInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.doubleList((RandomAccessibleInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.doubleCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.doubleCollection((IterableInterval<? extends RealType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PointSampleList<UnsignedIntType> pointSampleList0 = new PointSampleList<UnsignedIntType>(0);
      // Undeclared exception!
      try { 
        FlatCollections.longCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.longCollection((IterableInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, BitType> function0 = (Function<Boolean, BitType>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      pointSampleList0.realMax(doubleArray0);
      // Undeclared exception!
      try { 
        FlatCollections.longCollection(pointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.collection((IterableInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      RandomAccessibleInterval<BitType> randomAccessibleInterval1 = null;
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<BitType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomAccessibleInterval<BitType> randomAccessibleInterval0 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((RandomAccess) null, (RandomAccess) null, (RandomAccess) null, (RandomAccess) null).when(randomAccessibleInterval0).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval0, imgFactory0);
      Img<BitType> img1 = ImgView.wrap((RandomAccessibleInterval<BitType>) img0);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img1);
      Collection<Integer> collection0 = FlatCollections.integerCollection(iterableRandomAccessibleInterval0);
      Collection<Integer> collection1 = FlatCollections.integerCollection(img1);
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.integerCollection((IterableInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PointSampleList<BitType> pointSampleList0 = new PointSampleList<BitType>(67);
      Collection<Boolean> collection0 = FlatCollections.booleanCollection(pointSampleList0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomAccessibleInterval<Boolean> randomAccessibleInterval0 = (RandomAccessibleInterval<Boolean>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessibleInterval0).numDimensions();
      doReturn(0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      IterableRandomAccessibleInterval<Boolean> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create(randomAccessibleInterval0);
      Function<Boolean, Boolean> function0 = (Function<Boolean, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      FlatCollections.list((RandomAccessibleInterval<Boolean>) iterableRandomAccessibleInterval0, function0);
      RandomAccessibleInterval<BitType> randomAccessibleInterval1 = (RandomAccessibleInterval<BitType>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessibleInterval1).numDimensions();
      doReturn(0L, 0L, 0L).when(randomAccessibleInterval1).dimension(anyInt());
      doReturn((RandomAccess) null).when(randomAccessibleInterval1).randomAccess();
      ImgFactory<BitType> imgFactory0 = (ImgFactory<BitType>) mock(ImgFactory.class, new ViolatedAssumptionAnswer());
      Img<BitType> img0 = ImgView.wrap(randomAccessibleInterval1, imgFactory0);
      IterableRandomAccessibleInterval<BitType> iterableRandomAccessibleInterval1 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<BitType>) img0);
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<BitType>) iterableRandomAccessibleInterval1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.longList((RandomAccessibleInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.longList((RandomAccessibleInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        FlatCollections.integerList((RandomAccessibleInterval<? extends IntegerType<?>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
