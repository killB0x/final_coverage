/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 09:35:41 GMT 2022
 */

package net.imglib2.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.AbstractRealInterval;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.FinalRealInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPoint;
import net.imglib2.util.Intervals;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Intervals_ESTest extends Intervals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equalDimensions((Dimensions) finalInterval0, (Dimensions) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      double[] doubleArray0 = new double[6];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(abstractRealInterval0);
      assertEquals(6, abstractRealInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) abstractRealInterval0, (-1817.0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, longArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(6, abstractRealInterval0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval1);
      assertEquals(9, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval1, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (-2106L));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      double[] doubleArray0 = new double[9];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(4, finalRealInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalRealInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, longArray0.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(4, finalRealInterval0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long[] longArray0 = new long[30];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(30, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(30, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = new FinalInterval(longArray0);
      assertEquals(30, longArray0.length);
      assertNotNull(finalInterval1);
      assertEquals(30, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((Interval) finalInterval1, (Interval) finalInterval0);
      assertEquals(30, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(30, finalInterval0.numDimensions());
      assertEquals(30, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-3261L);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, (-3261L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (Dimensions) finalInterval0);
      assertArrayEquals(new long[] {0L, (-3261L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = finalInterval1.equals(finalInterval0);
      assertArrayEquals(new long[] {0L, (-3261L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = finalInterval0.equals(finalInterval1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long[] longArray0 = new long[19];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertEquals(19, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(19, finalInterval0.numDimensions());
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-523L);
      FinalInterval finalInterval1 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {(-523L), 0L, 0L}, longArray1);
      assertEquals(19, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(finalInterval1);
      assertEquals(19, finalInterval1.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval0, (RealInterval) finalInterval1);
      assertArrayEquals(new long[] {(-523L), 0L, 0L}, longArray1);
      assertEquals(19, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(19, finalInterval0.numDimensions());
      assertEquals(19, finalInterval1.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.addDimension(finalInterval0, (-9223372036854775808L), 1L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PointSampleList<PointSample<Object>> pointSampleList0 = new PointSampleList<PointSample<Object>>(903);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(903, pointSampleList0.numDimensions());
      
      Point point0 = pointSampleList0.minAsPoint();
      assertNotNull(point0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(903, pointSampleList0.numDimensions());
      assertEquals(903, point0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval(point0, point0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(903, pointSampleList0.numDimensions());
      assertEquals(903, point0.numDimensions());
      assertEquals(903, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.contains((Interval) finalInterval0, (Interval) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(903, pointSampleList0.numDimensions());
      assertEquals(903, point0.numDimensions());
      assertEquals(903, finalInterval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      RealInterval realInterval0 = Intervals.scale(finalInterval0, (-1L));
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(realInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, realInterval0.numDimensions());
      
      Interval interval0 = Intervals.largestContainedInterval(realInterval0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(interval0);
      assertNotSame(finalInterval0, interval0);
      assertNotSame(interval0, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, realInterval0.numDimensions());
      assertEquals(2, interval0.numDimensions());
      assertFalse(interval0.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.contains((Interval) finalInterval0, interval0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, interval0);
      assertNotSame(interval0, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, realInterval0.numDimensions());
      assertEquals(2, interval0.numDimensions());
      assertFalse(finalInterval0.equals((Object)interval0));
      assertFalse(interval0.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(6);
      assertNotNull(pointSampleList0);
      assertEquals(6, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Interval) pointSampleList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 3L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      
      Point point0 = new Point(longArray0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(point0);
      assertEquals(9, point0.numDimensions());
      
      RealPoint realPoint0 = new RealPoint(point0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(realPoint0);
      assertEquals(9, point0.numDimensions());
      assertEquals(9, realPoint0.numDimensions());
      
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) realPoint0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, point0.numDimensions());
      assertEquals(9, realPoint0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 184L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 184L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      Point point0 = finalInterval0.dimensionsAsPoint();
      assertArrayEquals(new long[] {0L, 184L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(point0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, point0.numDimensions());
      
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) point0);
      assertArrayEquals(new long[] {0L, 184L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      Point point0 = new Point(1);
      assertNotNull(point0);
      assertEquals(1, point0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 3L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      
      Point point0 = Point.wrap(longArray0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(point0);
      assertEquals(9, point0.numDimensions());
      
      boolean boolean0 = Intervals.contains((Interval) finalInterval0, (Localizable) point0);
      assertArrayEquals(new long[] {3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, point0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2985L;
      FinalInterval finalInterval1 = Intervals.addDimension(finalInterval0, 2985L, (-1L));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      Point point0 = Point.wrap(longArray1);
      assertArrayEquals(new long[] {2985L}, longArray1);
      assertEquals(1, longArray1.length);
      assertNotNull(point0);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, point0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
      
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point0);
      assertArrayEquals(new long[] {2985L}, longArray1);
      assertEquals(1, longArray1.length);
      assertNotNull(pointSample0);
      assertEquals(1, point0.numDimensions());
      assertEquals(1, pointSample0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
      
      point0.move((Localizable) pointSample0);
      assertArrayEquals(new long[] {5970L}, longArray1);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, point0.numDimensions());
      assertEquals(1, pointSample0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = Intervals.contains((Interval) finalInterval1, (Localizable) point0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {5970L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[3];
      Point point0 = new Point(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(point0);
      assertEquals(3, point0.numDimensions());
      
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(7, finalInterval0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[2] = 753L;
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 753L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      RealInterval realInterval0 = Intervals.scale(finalInterval0, 666.2851458);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 753L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(realInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, realInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = Intervals.isEmpty(realInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 753L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, realInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 184L;
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {184L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = Intervals.isEmpty((Interval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {184L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      RealInterval realInterval0 = Intervals.scale(finalInterval0, 184L);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(realInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, realInterval0.numDimensions());
      
      double[] doubleArray0 = new double[2];
      FinalRealInterval finalRealInterval0 = Intervals.createMinMaxReal(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertNotSame(finalRealInterval0, realInterval0);
      assertEquals(1, finalRealInterval0.numDimensions());
      assertFalse(finalRealInterval0.equals((Object)realInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.union((RealInterval) finalRealInterval0, realInterval0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.addDimension(finalInterval0, 1L, 1806L);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      FinalRealInterval finalRealInterval0 = new FinalRealInterval(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, finalRealInterval0.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((RealInterval) finalRealInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.union((Interval) finalInterval1, (Interval) finalInterval0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.addDimension(finalInterval0, 2147483647L, (-186L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(5, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((Interval) finalInterval0, (Interval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(3, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.intersect((RealInterval) finalInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.intersect((Interval) finalInterval0, (Interval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-846L);
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {(-846L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.translate((Interval) finalInterval0, longArray0);
      assertArrayEquals(new long[] {(-846L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.rotate(finalInterval0, 1, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.zeroMin(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalRealInterval finalRealInterval0 = Intervals.unionUnsafe((RealInterval) finalInterval0, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.unionUnsafe((Interval) finalInterval0, (Interval) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalRealInterval finalRealInterval0 = Intervals.union((RealInterval) finalInterval0, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.union((Interval) finalInterval0, (Interval) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      long[] longArray1 = finalInterval0.maxAsLongArray();
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval1 = Intervals.translateInverse(finalInterval0, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.translate((Interval) finalInterval0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.translate((Interval) finalInterval0, 2402L, 2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      String string0 = Intervals.toString((Interval) finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals("[() -- () = ]", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      String string0 = Intervals.toString((Dimensions) finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.rotate(finalInterval0, 0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[7];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.permuteAxes(finalInterval0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3L;
      long long0 = Intervals.numElements(longArray0);
      assertArrayEquals(new long[] {3L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 568L;
      longArray0[1] = 689L;
      longArray0[2] = 691L;
      longArray0[3] = 9223372036854775807L;
      longArray0[4] = 1L;
      long long0 = Intervals.numElements(longArray0);
      assertArrayEquals(new long[] {568L, 689L, 691L, 9223372036854775807L, 1L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-270424232L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2476;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 396;
      long long0 = Intervals.numElements(intArray0);
      assertArrayEquals(new int[] {2476, 1, 1, 396}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(980496L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 723;
      intArray0[1] = 1998;
      intArray0[2] = 3709;
      intArray0[3] = 31;
      intArray0[4] = 1;
      intArray0[5] = 2574;
      intArray0[6] = 40;
      intArray0[7] = 782;
      intArray0[8] = 12;
      long long0 = Intervals.numElements(intArray0);
      assertArrayEquals(new int[] {723, 1998, 3709, 31, 1, 2574, 40, 782, 12}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-5545158292181954304L), long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(373);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(373, pointSampleList0.numDimensions());
      
      long long0 = Intervals.numElements((Dimensions) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(373, pointSampleList0.numDimensions());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-9223372036854775808L);
      longArray0[3] = (-399L);
      longArray0[5] = 1697L;
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {(-9223372036854775808L), 0L, 0L, (-399L), 0L, 1697L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      long long0 = Intervals.numElements((Dimensions) finalInterval0);
      assertArrayEquals(new long[] {(-9223372036854775808L), 0L, 0L, (-399L), 0L, 1697L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals((-675804L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.moveAxis(finalInterval0, (-1), (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      long[] longArray1 = Intervals.minAsLongArray(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      int[] intArray0 = Intervals.minAsIntArray(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(0, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PointSampleList<Intervals> pointSampleList0 = new PointSampleList<Intervals>(40);
      assertNotNull(pointSampleList0);
      assertEquals(40, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      double[] doubleArray0 = Intervals.minAsDoubleArray(pointSampleList0);
      assertEquals(40, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(40, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      double[] doubleArray0 = Intervals.minAsDoubleArray(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, longArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      long[] longArray1 = Intervals.maxAsLongArray(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      int[] intArray0 = Intervals.maxAsIntArray(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(0, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.intersect((Interval) finalInterval0, (Interval) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.hyperSlice(finalInterval0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      double[] doubleArray0 = Intervals.maxAsDoubleArray(finalInterval1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, longArray0.length);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (Dimensions) finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (-3578L), 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (long) (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.addDimension(finalInterval0, 0L, (-1433L));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equalDimensions((Interval) finalInterval1, (Interval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(4, finalRealInterval0.numDimensions());
      
      Interval interval0 = Intervals.largestContainedInterval(finalRealInterval0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(interval0);
      assertEquals(4, finalRealInterval0.numDimensions());
      assertEquals(4, interval0.numDimensions());
      
      long[] longArray0 = Intervals.dimensionsAsLongArray(interval0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L}, longArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray0);
      assertEquals(4, finalRealInterval0.numDimensions());
      assertEquals(4, interval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      long[] longArray1 = Intervals.dimensionsAsLongArray(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      int[] intArray0 = Intervals.dimensionsAsIntArray(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(0, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = Intervals.createMinSizeReal(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalRealInterval finalRealInterval0 = Intervals.intersect((RealInterval) finalInterval0, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FinalRealInterval finalRealInterval0 = Intervals.createMinMaxReal(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(0, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.zeroMin((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(6, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.zeroMin(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4910);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4910, pointSampleList0.numDimensions());
      
      boolean boolean0 = Intervals.contains((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4910, pointSampleList0.numDimensions());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.unionUnsafe((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((RealInterval) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((RealInterval) finalInterval0, (RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((Interval) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.union((RealInterval) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[50];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(50, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(50, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.union((RealInterval) finalInterval0, (RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.union((Interval) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[20];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(20, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(20, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.union((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        Intervals.translateInverse((Interval) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = Intervals.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.translateInverse(finalInterval0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5172);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5172, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      Intervals.translate((Interval) pointSampleList0, (long[]) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        Intervals.translate((Interval) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(53);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(53, pointSampleList0.numDimensions());
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Intervals.translate((Interval) pointSampleList0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5570, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      Intervals.translate((Interval) pointSampleList0, (long) 5570, (-202));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.translate((Interval) null, (long) 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.toString((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.toString((RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.toString((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.toString((Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5350);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5350, pointSampleList0.numDimensions());
      
      Interval interval0 = Intervals.smallestContainingInterval(pointSampleList0);
      assertNotNull(interval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5350, pointSampleList0.numDimensions());
      assertEquals(5350, interval0.numDimensions());
      
      // Undeclared exception!
      Intervals.toString((Dimensions) interval0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.toString((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(6, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.toString((Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4309);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4309, pointSampleList0.numDimensions());
      
      boolean boolean0 = Intervals.contains((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4309, pointSampleList0.numDimensions());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.smallestContainingInterval(pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.smallestContainingInterval((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[18];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(18, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(18, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.smallestContainingInterval(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.scale((RealInterval) null, (-1351.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.scale(finalInterval0, 1.7976931348623157E308);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(5570, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.rotate(pointSampleList0, 5570, 5570);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.rotate((Interval) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4948);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4948, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval((Interval) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4948, pointSampleList0.numDimensions());
      assertEquals(4948, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.positions(finalInterval0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.positions((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Localizables", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.positions(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4305);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4305, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (long) 4305);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4305, pointSampleList0.numDimensions());
      assertEquals(4305, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.permuteAxes(pointSampleList0, 4305, 4305);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.permuteAxes((Interval) null, 1556, 1556);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.numElements((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        Intervals.numElements(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.numElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        Intervals.numElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2854);
      assertNotNull(pointSampleList0);
      assertEquals(2854, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (Dimensions) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(2854, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2854, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.numElements((Dimensions) finalInterval0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.numElements((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.numElements((Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.moveAxis((Interval) null, 1089, 1089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(9);
      assertNotNull(pointSampleList0);
      assertEquals(9, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.moveAxis(pointSampleList0, (-2430), 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.moveAxis(finalInterval0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4322);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4322, pointSampleList0.numDimensions());
      
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(4322);
      assertNotNull(pointSampleList1);
      assertEquals(0L, pointSampleList1.size());
      assertEquals(4322, pointSampleList1.numDimensions());
      assertFalse(pointSampleList1.equals((Object)pointSampleList0));
      
      // Undeclared exception!
      Intervals.minAsLongArray(pointSampleList1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.minAsLongArray((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3328);
      assertNotNull(pointSampleList0);
      assertEquals(3328, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      FinalInterval finalInterval0 = Intervals.intersect((Interval) pointSampleList0, (Interval) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(3328, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3328, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.minAsIntArray(finalInterval0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.minAsIntArray((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4308);
      assertNotNull(pointSampleList0);
      assertEquals(4308, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (long) 4308);
      assertNotNull(finalInterval0);
      assertEquals(4308, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4308, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.maxAsLongArray(pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.maxAsLongArray((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(5, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.maxAsLongArray(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2472);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      
      Interval interval0 = Intervals.smallestContainingInterval(pointSampleList0);
      assertNotNull(interval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      assertEquals(2472, interval0.numDimensions());
      
      FinalInterval finalInterval0 = Intervals.intersect(interval0, (Interval) pointSampleList0);
      assertNotNull(finalInterval0);
      assertNotSame(interval0, finalInterval0);
      assertNotSame(finalInterval0, interval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      assertEquals(2472, interval0.numDimensions());
      assertEquals(2472, finalInterval0.numDimensions());
      assertTrue(finalInterval0.equals((Object)interval0));
      
      // Undeclared exception!
      Intervals.maxAsIntArray(finalInterval0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.maxAsIntArray((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.maxAsIntArray(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.maxAsDoubleArray((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(abstractRealInterval0);
      assertEquals(8, abstractRealInterval0.numDimensions());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        Intervals.maxAsDoubleArray(abstractRealInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.AbstractRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4036);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4036, pointSampleList0.numDimensions());
      
      boolean boolean0 = Intervals.equals((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4036, pointSampleList0.numDimensions());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.largestContainedInterval(pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.largestContainedInterval((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.largestContainedInterval(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.isEmpty((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.isEmpty((RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.isEmpty((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[24];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(24, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.isEmpty((Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4322);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4322, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (long) 4322);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4322, pointSampleList0.numDimensions());
      assertEquals(4322, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.invertAxis(pointSampleList0, 78);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.invertAxis((Interval) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3288);
      assertNotNull(pointSampleList0);
      assertEquals(3288, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.invertAxis(pointSampleList0, 3288);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3288 out of bounds for length 3288
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5546);
      assertNotNull(pointSampleList0);
      assertEquals(5546, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.intersect((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.intersect((RealInterval) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(14, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(14, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.intersect((RealInterval) finalInterval0, (RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(5570, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.intersect((Interval) pointSampleList0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.intersect((Interval) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(6, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.intersect((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4391);
      assertNotNull(pointSampleList0);
      assertEquals(4391, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      boolean boolean0 = Intervals.contains((Interval) pointSampleList0, (Interval) pointSampleList0);
      assertEquals(4391, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.hyperSlice(pointSampleList0, 4391);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.hyperSlice((Interval) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(0, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.hyperSlice(pointSampleList0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3);
      assertNotNull(pointSampleList0);
      assertEquals(3, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.hyperSlice(pointSampleList0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3870);
      assertNotNull(pointSampleList0);
      assertEquals(3870, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      PointSampleList<Object> pointSampleList1 = new PointSampleList<Object>(3870);
      assertNotNull(pointSampleList1);
      assertEquals(0L, pointSampleList1.size());
      assertEquals(3870, pointSampleList1.numDimensions());
      assertFalse(pointSampleList1.equals((Object)pointSampleList0));
      
      long[] longArray0 = new long[4];
      // Undeclared exception!
      Intervals.expand((Interval) pointSampleList0, longArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(36);
      assertNotNull(pointSampleList0);
      assertEquals(36, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) pointSampleList0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FinalDimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) finalInterval0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.FinalDimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(5570, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.expand((Interval) pointSampleList0, (Dimensions) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) null, (Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[18];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(18, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(18, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      assertEquals(18, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(9, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) finalInterval0, (Dimensions) finalInterval1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) null, 1L, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3);
      assertNotNull(pointSampleList0);
      assertEquals(3, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) pointSampleList0, (long) 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(5570, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.expand((Interval) pointSampleList0, (long) 5570);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.expand((Interval) finalInterval0, (-2179L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(7019);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(7019, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      Intervals.equals((RealInterval) pointSampleList0, (RealInterval) pointSampleList0, (double) 7019);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.equals((RealInterval) null, (RealInterval) null, 1795.5298);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[16];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(16, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(16, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval0, 2.147483647E9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5570, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      Intervals.equals((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.equals((RealInterval) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2952);
      assertNotNull(pointSampleList0);
      assertEquals(2952, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      boolean boolean0 = Intervals.contains((Interval) pointSampleList0, (Interval) pointSampleList0);
      assertEquals(2952, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.equals((Interval) pointSampleList0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.equals((Interval) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[19];
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(19, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(19, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.equals((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.equalDimensions((Interval) null, (Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.equalDimensions((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5570);
      assertNotNull(pointSampleList0);
      assertEquals(5570, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.equalDimensions((Dimensions) pointSampleList0, (Dimensions) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.equalDimensions((Dimensions) null, (Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.equalDimensions((Dimensions) finalInterval0, (Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Point point0 = new Point(32);
      assertNotNull(point0);
      assertEquals(32, point0.numDimensions());
      
      Supplier<Intervals> supplier0 = (Supplier<Intervals>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Intervals> pointSample0 = new PointSample<Intervals>(supplier0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(pointSample0);
      assertEquals(7, pointSample0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval(point0, pointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(32, point0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(32, finalInterval0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.dimensionsAsLongArray(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.dimensionsAsIntArray((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.dimensionsAsIntArray(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.createMinSize((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FinalInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.createMinMax((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FinalInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(4, finalInterval0.numDimensions());
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Intervals intervals0 = new Intervals();
      assertNotNull(intervals0);
      
      PointSample<Object> pointSample0 = PointSample.wrap((Object) intervals0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(pointSample0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, pointSample0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) pointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5359);
      assertNotNull(pointSampleList0);
      assertEquals(5359, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.contains((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[12];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(12, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(12, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealInterval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) null, (Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Point point0 = Point.wrap(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(point0);
      assertNotSame(longArray0, longArray1);
      assertEquals(3, point0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Localizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5377);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(5377, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      Intervals.contains((Interval) pointSampleList0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[24];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(24, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(finalInterval0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(24, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3090);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3090, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = Intervals.intersect((Interval) pointSampleList0, (Interval) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(3090, pointSampleList0.numDimensions());
      assertEquals(3090, finalInterval0.numDimensions());
      
      // Undeclared exception!
      Intervals.addDimension(finalInterval0, 3090, 3090);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.addDimension((Interval) null, (-1699L), (-1699L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        Intervals.addDimension(finalInterval0, (-496L), (-42L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4322);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4322, pointSampleList0.numDimensions());
      
      boolean boolean0 = Intervals.equalDimensions((Dimensions) pointSampleList0, (Dimensions) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(4322, pointSampleList0.numDimensions());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.dimensionsAsIntArray(pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      FinalRealInterval finalRealInterval0 = Intervals.createMinSizeReal(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(finalRealInterval0);
      assertEquals(4, finalRealInterval0.numDimensions());
      
      boolean boolean0 = Intervals.isEmpty((RealInterval) finalRealInterval0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, finalRealInterval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[] longArray0 = new long[7];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.isEmpty((Interval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(3, finalInterval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.dimensionsAsLongArray((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.minAsDoubleArray((RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(abstractRealInterval0);
      assertEquals(8, abstractRealInterval0.numDimensions());
      
      double[] doubleArray1 = Intervals.maxAsDoubleArray(abstractRealInterval0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, abstractRealInterval0.numDimensions());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[10];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(10, finalInterval0.numDimensions());
      
      String string0 = Intervals.toString((Dimensions) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray0.length);
      assertNotNull(string0);
      assertEquals(10, finalInterval0.numDimensions());
      assertEquals("1x1x1x1x1x1x1x1x1x1", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4965);
      assertNotNull(pointSampleList0);
      assertEquals(4965, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      String string0 = Intervals.toString((RealInterval) pointSampleList0);
      assertNotNull(string0);
      assertEquals(4965, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      
      String string0 = finalInterval0.toString();
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(string0);
      assertEquals(8, finalInterval0.numDimensions());
      assertEquals("FinalInterval [(0, 0, 0, 0, 0, 0, 0, 0) -- (0, 0, 0, 0, 0, 0, 0, 0) = 1x1x1x1x1x1x1x1]", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      int[] intArray0 = Intervals.maxAsIntArray(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(4, longArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(2, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3542);
      assertNotNull(pointSampleList0);
      assertEquals(3542, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      int[] intArray0 = Intervals.minAsIntArray(pointSampleList0);
      assertEquals(3542, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(3542, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      Intervals.unionUnsafe((Interval) pointSampleList0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      
      int[] intArray0 = Intervals.dimensionsAsIntArray(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(8, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long[] longArray0 = new long[20];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(20, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(20, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertEquals(20, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(20, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equalDimensions((Dimensions) finalInterval1, (Dimensions) finalInterval0);
      assertEquals(20, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(20, finalInterval0.numDimensions());
      assertEquals(20, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equalDimensions((Dimensions) finalInterval0, (Dimensions) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long[] longArray0 = new long[50];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(50, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(50, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertEquals(50, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(50, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval1, 0.0);
      assertEquals(50, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(50, finalInterval0.numDimensions());
      assertEquals(50, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(1, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval0, (-1011.18697089984));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, finalInterval0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval1, (double) 1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[50];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(50, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(50, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval0, 0.0);
      assertEquals(50, longArray0.length);
      assertEquals(50, finalInterval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      RandomAccessibleInterval<Localizable> randomAccessibleInterval0 = Intervals.positions(finalInterval1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(randomAccessibleInterval0);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      FinalInterval finalInterval2 = Intervals.union((Interval) finalInterval0, (Interval) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval2);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval0, finalInterval2);
      assertNotSame(finalInterval1, finalInterval0);
      assertNotSame(finalInterval1, finalInterval2);
      assertNotSame(finalInterval2, finalInterval0);
      assertNotSame(finalInterval2, finalInterval1);
      assertEquals(8, finalInterval0.numDimensions());
      assertEquals(8, finalInterval1.numDimensions());
      assertEquals(8, finalInterval2.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(finalInterval2.equals((Object)finalInterval1));
      assertTrue(finalInterval2.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) randomAccessibleInterval0, (RealInterval) finalInterval2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval0, finalInterval2);
      assertNotSame(finalInterval1, finalInterval0);
      assertNotSame(finalInterval1, finalInterval2);
      assertNotSame(finalInterval2, finalInterval0);
      assertNotSame(finalInterval2, finalInterval1);
      assertEquals(8, finalInterval0.numDimensions());
      assertEquals(8, finalInterval1.numDimensions());
      assertEquals(8, finalInterval2.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertTrue(finalInterval0.equals((Object)finalInterval2));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(finalInterval1.equals((Object)finalInterval2));
      assertFalse(finalInterval2.equals((Object)finalInterval1));
      assertTrue(finalInterval2.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[61];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(61, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(61, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (Dimensions) finalInterval0);
      assertEquals(61, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(61, finalInterval0.numDimensions());
      assertEquals(61, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval0, (RealInterval) finalInterval1);
      assertEquals(61, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(61, finalInterval0.numDimensions());
      assertEquals(61, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((RealInterval) finalInterval1, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((Interval) finalInterval0, (Interval) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      assertEquals(8, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2472);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (long) 2472);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      assertEquals(2472, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((Interval) finalInterval0, (Interval) pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2472, pointSampleList0.numDimensions());
      assertEquals(2472, finalInterval0.numDimensions());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.hyperSlice(finalInterval0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.equals((Interval) finalInterval0, (Interval) finalInterval1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(1, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(8, finalInterval0.numDimensions());
      
      boolean boolean0 = Intervals.equals((Interval) finalInterval0, (Interval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, finalInterval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = Intervals.numElements(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int[] intArray0 = new int[9];
      long long0 = Intervals.numElements(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(3, finalInterval0.numDimensions());
      
      long long0 = Intervals.numElements((Dimensions) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      
      finalInterval0.dimensions(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.translateInverse(finalInterval0, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval1, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, (-1L));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval1, (RealInterval) finalInterval0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(finalInterval0, finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(2, finalInterval1.numDimensions());
      assertFalse(finalInterval0.equals((Object)finalInterval1));
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[15];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertEquals(15, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(15, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      assertEquals(15, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(7, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4965);
      assertNotNull(pointSampleList0);
      assertEquals(4965, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      boolean boolean0 = Intervals.contains((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
      assertEquals(4965, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      Intervals.toString((RealInterval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long[] longArray0 = new long[11];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(11, longArray0.length);
      assertNotNull(finalInterval0);
      assertEquals(11, finalInterval0.numDimensions());
      
      FinalInterval finalInterval1 = FinalInterval.createMinMax(longArray0);
      assertEquals(11, longArray0.length);
      assertNotNull(finalInterval1);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(5, finalInterval1.numDimensions());
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Interval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4170);
      Intervals.contains((Interval) pointSampleList0, (Interval) pointSampleList0);
      // Undeclared exception!
      Intervals.toString((Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2808);
      Point point0 = pointSampleList0.maxAsPoint();
      boolean boolean0 = Intervals.contains((RealInterval) pointSampleList0, (RealLocalizable) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      Point point0 = Point.wrap(longArray0);
      // Undeclared exception!
      try { 
        Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      Intervals intervals0 = new Intervals();
      PointSample<Object> pointSample0 = PointSample.wrap((Object) intervals0, longArray0);
      boolean boolean0 = Intervals.contains((RealInterval) finalInterval0, (RealLocalizable) pointSample0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1);
      Point point0 = pointSampleList0.maxAsPoint();
      boolean boolean0 = Intervals.contains((Interval) pointSampleList0, (Localizable) point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[16];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      Point point0 = new Point(longArray0);
      // Undeclared exception!
      try { 
        Intervals.contains((Interval) finalInterval0, (Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      Point point0 = Point.wrap(longArray0);
      boolean boolean0 = Intervals.contains((Interval) finalInterval0, (Localizable) point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FinalRealInterval finalRealInterval0 = Intervals.union((RealInterval) finalInterval0, (RealInterval) finalInterval0);
      assertEquals(2, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long[] longArray0 = new long[15];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        Intervals.union((RealInterval) finalInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(4933);
      Interval interval0 = Intervals.smallestContainingInterval(abstractRealInterval0);
      // Undeclared exception!
      Intervals.union((RealInterval) interval0, (RealInterval) interval0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(66);
      FinalInterval finalInterval0 = Intervals.addDimension(pointSampleList0, 66, 66);
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((RealInterval) finalInterval0, (RealInterval) pointSampleList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4910);
      FinalRealInterval finalRealInterval0 = Intervals.unionUnsafe((RealInterval) pointSampleList0, (RealInterval) pointSampleList0);
      assertEquals(4910, finalRealInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5350);
      // Undeclared exception!
      Intervals.union((Interval) pointSampleList0, (Interval) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      long[] longArray0 = new long[8];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        Intervals.union((Interval) finalInterval0, (Interval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3542);
      FinalInterval finalInterval0 = Intervals.unionUnsafe((Interval) pointSampleList0, (Interval) pointSampleList0);
      assertEquals(3542, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      long[] longArray0 = new long[10];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      FinalInterval finalInterval1 = Intervals.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        Intervals.intersect((RealInterval) finalInterval0, (RealInterval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(40);
      Point point0 = pointSampleList0.maxAsPoint();
      AbstractRealInterval abstractRealInterval0 = new AbstractRealInterval(point0, point0);
      FinalRealInterval finalRealInterval0 = Intervals.intersect((RealInterval) abstractRealInterval0, (RealInterval) abstractRealInterval0);
      assertEquals(40, finalRealInterval0.numDimensions());
      
      FinalRealInterval finalRealInterval1 = Intervals.union((RealInterval) finalRealInterval0, (RealInterval) pointSampleList0);
      assertTrue(finalRealInterval1.equals((Object)finalRealInterval0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = Intervals.createMinMax(longArray0);
      FinalInterval finalInterval1 = new FinalInterval(longArray0, longArray0);
      // Undeclared exception!
      try { 
        Intervals.intersect((Interval) finalInterval0, (Interval) finalInterval1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1);
      // Undeclared exception!
      try { 
        Intervals.rotate(pointSampleList0, 1, 601);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 601 out of bounds for length 1
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(66);
      FinalInterval finalInterval0 = Intervals.moveAxis(pointSampleList0, 66, 66);
      assertEquals(66, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3828);
      Intervals.hyperSlice(pointSampleList0, 1525);
      // Undeclared exception!
      Intervals.moveAxis(pointSampleList0, 1525, 1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4823);
      FinalInterval finalInterval0 = Intervals.addDimension(pointSampleList0, 4823, 4823);
      // Undeclared exception!
      try { 
        Intervals.unionUnsafe((Interval) finalInterval0, (Interval) pointSampleList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4322);
      FinalInterval finalInterval0 = Intervals.expand((Interval) pointSampleList0, (long) 4322);
      // Undeclared exception!
      Intervals.expand((Interval) finalInterval0, (long) 4322, 2762);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.createMinSizeReal((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FinalRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4322);
      FinalInterval finalInterval0 = Intervals.invertAxis(pointSampleList0, 78);
      assertEquals(4322, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4305);
      // Undeclared exception!
      try { 
        Intervals.permuteAxes(pointSampleList0, 4305, 4305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4305 out of bounds for length 4305
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2488);
      FinalInterval finalInterval0 = Intervals.zeroMin(pointSampleList0);
      boolean boolean0 = Intervals.contains((Interval) pointSampleList0, (Interval) finalInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intervals.createMinMaxReal((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.FinalRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4965);
      RealInterval realInterval0 = Intervals.scale(pointSampleList0, 4965);
      assertEquals(4965, realInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4948);
      long[] longArray0 = Intervals.minAsLongArray(pointSampleList0);
      // Undeclared exception!
      Intervals.translateInverse(pointSampleList0, longArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(39);
      Interval interval0 = Intervals.smallestContainingInterval(pointSampleList0);
      boolean boolean0 = Intervals.equalDimensions(interval0, interval0);
      assertEquals(39, interval0.numDimensions());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long[] longArray0 = new long[50];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      FinalInterval finalInterval1 = Intervals.expand((Interval) finalInterval0, longArray0);
      assertNotSame(finalInterval1, finalInterval0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(4308);
      long[] longArray0 = Intervals.maxAsLongArray(pointSampleList0);
      assertEquals(4308, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(373);
      // Undeclared exception!
      try { 
        Intervals.translate((Interval) pointSampleList0, (long) 373, 373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 373 out of bounds for length 373
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }
}
