/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:43:13 GMT 2022
 */

package net.imglib2.loops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.PointSampleList;
import net.imglib2.loops.IntervalChunks;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalChunks_ESTest extends IntervalChunks_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2147483647L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 2147483647L;
      IntervalChunks.suggestChunkSize(longArray0, 2147483647L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[0];
      IntervalChunks.suggestChunkSize(longArray0, 2146464901);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 9223372036854775807L;
      longArray0[1] = 9223372036854775807L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      IntervalChunks.generateGrid(finalInterval0, longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1010L;
      longArray0[1] = 18L;
      longArray0[2] = 1099L;
      longArray0[3] = 1357L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      IntervalChunks.generateGrid(finalInterval0, longArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalChunks.divideAndRoundUp(0L, 2460L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalChunks.divideAndRoundUp(5L, 5L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalChunks.divideAndRoundUp(3L, 9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalChunks.suggestChunkSize((long[]) null, 1522L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        IntervalChunks.suggestChunkSize(longArray0, 562L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-21L);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.generateGrid(finalInterval0, longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[12];
      // Undeclared exception!
      try { 
        IntervalChunks.generateGrid((Interval) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.generateGrid(finalInterval0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.generateGrid(finalInterval0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalChunks.divideAndRoundUp(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(169);
      // Undeclared exception!
      IntervalChunks.chunkInterval(pointSampleList0, 169);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.chunkInterval(finalInterval0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalChunks.chunkInterval((Interval) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.chunkInterval(finalInterval0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      // Undeclared exception!
      try { 
        IntervalChunks.chunkInterval(finalInterval0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        IntervalChunks.divideAndRoundUp(2653L, (-407L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[5];
      // Undeclared exception!
      try { 
        IntervalChunks.suggestChunkSize(longArray0, (-2226L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.IntervalChunks", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntervalChunks intervalChunks0 = new IntervalChunks();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(12);
      List<Interval> list0 = IntervalChunks.chunkInterval(pointSampleList0, 12);
      assertEquals(16, list0.size());
  }
}
