/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:43:12 GMT 2022
 */

package net.imglib2.loops;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Stack;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import net.imglib2.Interval;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.loops.LoopBuilder;
import net.imglib2.parallel.DefaultTaskExecutor;
import net.imglib2.parallel.TaskExecutor;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.SubsampleIntervalView;
import net.imglib2.view.iteration.SlicingCursor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LoopBuilder_ESTest extends LoopBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[9];
      LinkedHashSet<PlanarImg<Unsigned12BitType, DoubleBufferAccess>> linkedHashSet0 = new LinkedHashSet<PlanarImg<Unsigned12BitType, DoubleBufferAccess>>();
      ListImg<PlanarImg<Unsigned12BitType, DoubleBufferAccess>> listImg0 = new ListImg<PlanarImg<Unsigned12BitType, DoubleBufferAccess>>(linkedHashSet0, longArray0);
      LoopBuilder<Consumer<PlanarImg<Unsigned12BitType, DoubleBufferAccess>>> loopBuilder0 = LoopBuilder.setImages((RandomAccessibleInterval<PlanarImg<Unsigned12BitType, DoubleBufferAccess>>) listImg0);
      assertNotNull(loopBuilder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[] randomAccessibleIntervalArray0 = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[]) Array.newInstance(RandomAccessibleInterval.class, 2);
      Stack<RandomAccessibleInterval<Delayed>> stack0 = new Stack<RandomAccessibleInterval<Delayed>>();
      long[] longArray0 = new long[6];
      ListImg<RandomAccessibleInterval<Delayed>> listImg0 = new ListImg<RandomAccessibleInterval<Delayed>>(stack0, longArray0);
      randomAccessibleIntervalArray0[0] = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>) listImg0;
      IntervalView<RandomAccessibleInterval<Delayed>> intervalView0 = new IntervalView<RandomAccessibleInterval<Delayed>>(listImg0, longArray0, longArray0);
      randomAccessibleIntervalArray0[1] = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>) intervalView0;
      Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>> function0 = (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(net.imglib2.loops.LoopBuilder.Chunk.class));
      SlicingCursor<Delayed> slicingCursor0 = LoopBuilder.runOnChunkUsingRandomAccesses((RandomAccessibleInterval[]) randomAccessibleIntervalArray0, (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) function0, (Interval) randomAccessibleIntervalArray0[1]);
      assertNull(slicingCursor0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[8];
      ListImg<RandomAccessibleInterval<PointSampleList.PointSampleListCursor>> listImg0 = new ListImg<RandomAccessibleInterval<PointSampleList.PointSampleListCursor>>(longArray0, (RandomAccessibleInterval<PointSampleList.PointSampleListCursor>) null);
      HashSet<PointSampleList.PointSampleListCursor> hashSet0 = new HashSet<PointSampleList.PointSampleListCursor>();
      ListImg<PointSampleList.PointSampleListCursor> listImg1 = new ListImg<PointSampleList.PointSampleListCursor>(hashSet0, longArray0);
      long[] longArray1 = new long[9];
      IntervalView<PointSampleList.PointSampleListCursor> intervalView0 = new IntervalView<PointSampleList.PointSampleListCursor>((RandomAccessible<PointSampleList.PointSampleListCursor>) null, longArray1, longArray0);
      // Undeclared exception!
      try { 
        LoopBuilder.setImages((RandomAccessibleInterval<RandomAccessibleInterval<PointSampleList.PointSampleListCursor>>) listImg0, (RandomAccessibleInterval<PointSampleList.PointSampleListCursor>) listImg1, (RandomAccessibleInterval<PointSampleList.PointSampleListCursor>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoopBuilder.setImages((RandomAccessibleInterval<UnsignedVariableBitLengthType>) null, (RandomAccessibleInterval<UnsignedVariableBitLengthType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[5];
      ForkJoinTask<PointSampleList.PointSampleListCursor> forkJoinTask0 = (ForkJoinTask<PointSampleList.PointSampleListCursor>) mock(ForkJoinTask.class, new ViolatedAssumptionAnswer());
      ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>> listImg0 = new ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>>(longArray0, forkJoinTask0);
      LinkedBlockingDeque<LongArray> linkedBlockingDeque0 = new LinkedBlockingDeque<LongArray>();
      ListImg<LongArray> listImg1 = new ListImg<LongArray>(linkedBlockingDeque0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg1, (-1632L));
      IntervalView<ForkJoinTask<PointSampleList.PointSampleListCursor>> intervalView0 = new IntervalView<ForkJoinTask<PointSampleList.PointSampleListCursor>>(listImg0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        LoopBuilder.setImages((RandomAccessibleInterval<ForkJoinTask<PointSampleList.PointSampleListCursor>>) intervalView0, (RandomAccessibleInterval<LongArray>) subsampleIntervalView0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LoopBuilder, image dimensions do not match: [1, 1, 1, 1, 1], [0, 0, 0, 0, 0].
         //
         verifyException("net.imglib2.loops.LoopBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[9];
      ForkJoinTask<PointSampleList.PointSampleListCursor> forkJoinTask0 = (ForkJoinTask<PointSampleList.PointSampleListCursor>) mock(ForkJoinTask.class, new ViolatedAssumptionAnswer());
      ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>> listImg0 = new ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>>(longArray0, forkJoinTask0);
      LinkedBlockingDeque<LongArray> linkedBlockingDeque0 = new LinkedBlockingDeque<LongArray>();
      ListImg<LongArray> listImg1 = new ListImg<LongArray>(linkedBlockingDeque0, longArray0);
      long[] longArray1 = new long[8];
      IntervalView<ForkJoinTask<PointSampleList.PointSampleListCursor>> intervalView0 = new IntervalView<ForkJoinTask<PointSampleList.PointSampleListCursor>>(listImg0, longArray0, longArray1);
      // Undeclared exception!
      try { 
        LoopBuilder.setImages((RandomAccessibleInterval<ForkJoinTask<PointSampleList.PointSampleListCursor>>) intervalView0, (RandomAccessibleInterval<LongArray>) listImg1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 8 out of bounds for length 8
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[] randomAccessibleIntervalArray0 = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[]) Array.newInstance(RandomAccessibleInterval.class, 2);
      Stack<RandomAccessibleInterval<Delayed>> stack0 = new Stack<RandomAccessibleInterval<Delayed>>();
      long[] longArray0 = new long[6];
      longArray0[2] = (-621L);
      ListImg<RandomAccessibleInterval<Delayed>> listImg0 = new ListImg<RandomAccessibleInterval<Delayed>>(stack0, longArray0);
      randomAccessibleIntervalArray0[0] = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>) listImg0;
      IntervalView<RandomAccessibleInterval<Delayed>> intervalView0 = new IntervalView<RandomAccessibleInterval<Delayed>>(listImg0, longArray0, longArray0);
      randomAccessibleIntervalArray0[1] = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>) intervalView0;
      SlicingCursor<Delayed> slicingCursor0 = (SlicingCursor<Delayed>) mock(SlicingCursor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(slicingCursor0).toString();
      Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>> function0 = (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(slicingCursor0).when(function0).apply(any(net.imglib2.loops.LoopBuilder.Chunk.class));
      SlicingCursor<Delayed> slicingCursor1 = LoopBuilder.runOnChunkUsingRandomAccesses((RandomAccessibleInterval[]) randomAccessibleIntervalArray0, (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) function0, (Interval) randomAccessibleIntervalArray0[1]);
      assertEquals(0, slicingCursor1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[] randomAccessibleIntervalArray0 = (RandomAccessibleInterval<RandomAccessibleInterval<Delayed>>[]) Array.newInstance(RandomAccessibleInterval.class, 2);
      Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>> function0 = (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) mock(Function.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        LoopBuilder.runOnChunkUsingRandomAccesses((RandomAccessibleInterval[]) randomAccessibleIntervalArray0, (Function<LoopBuilder.Chunk<SlicingCursor<Delayed>>, SlicingCursor<Delayed>>) function0, (Interval) randomAccessibleIntervalArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.loops.LoopBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[9];
      ForkJoinTask<PointSampleList.PointSampleListCursor> forkJoinTask0 = (ForkJoinTask<PointSampleList.PointSampleListCursor>) mock(ForkJoinTask.class, new ViolatedAssumptionAnswer());
      ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>> listImg0 = new ListImg<ForkJoinTask<PointSampleList.PointSampleListCursor>>(longArray0, forkJoinTask0);
      LinkedBlockingDeque<LongArray> linkedBlockingDeque0 = new LinkedBlockingDeque<LongArray>();
      ListImg<LongArray> listImg1 = new ListImg<LongArray>(linkedBlockingDeque0, longArray0);
      LoopBuilder<BiConsumer<ForkJoinTask<PointSampleList.PointSampleListCursor>, LongArray>> loopBuilder0 = LoopBuilder.setImages((RandomAccessibleInterval<ForkJoinTask<PointSampleList.PointSampleListCursor>>) listImg0, (RandomAccessibleInterval<LongArray>) listImg1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      DefaultTaskExecutor defaultTaskExecutor0 = new DefaultTaskExecutor(forkJoinPool0);
      LoopBuilder<BiConsumer<ForkJoinTask<PointSampleList.PointSampleListCursor>, LongArray>> loopBuilder1 = loopBuilder0.multiThreaded((TaskExecutor) defaultTaskExecutor0);
      assertSame(loopBuilder1, loopBuilder0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        LoopBuilder.setImages((RandomAccessibleInterval<Cell<Cell>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }
}
