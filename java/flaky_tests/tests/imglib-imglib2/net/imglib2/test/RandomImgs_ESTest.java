/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:59:09 GMT 2022
 */

package net.imglib2.test;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.Img;
import net.imglib2.img.NativeImg;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.IntAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.sparse.FloatNtree;
import net.imglib2.img.sparse.LongNtree;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.img.sparse.NtreeImgFactory;
import net.imglib2.test.RandomImgs;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.numeric.complex.ComplexFloatType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileLongType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.util.Fraction;
import net.imglib2.view.IntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomImgs_ESTest extends RandomImgs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2971);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2971;
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      ListImg<VolatileUnsignedIntType> listImg0 = new ListImg<VolatileUnsignedIntType>(longArray0, volatileUnsignedIntType0);
      // Undeclared exception!
      try { 
        randomImgs0.randomize((RandomAccessibleInterval<VolatileUnsignedIntType>) listImg0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Randomization of type: class net.imglib2.type.volatiles.VolatileUnsignedIntType is not supported.
         //
         verifyException("net.imglib2.test.RandomImgs", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(0);
      // Undeclared exception!
      try { 
        randomImgs0.randomize((NtreeImg<DoubleType, LongNtree>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[10];
      RandomImgs randomImgs0 = RandomImgs.seed(0);
      long[] longArray1 = new long[0];
      IntervalView<VolatileUnsignedLongType> intervalView0 = new IntervalView<VolatileUnsignedLongType>((RandomAccessible<VolatileUnsignedLongType>) null, longArray0, longArray1);
      // Undeclared exception!
      try { 
        randomImgs0.randomize((RandomAccessibleInterval<VolatileUnsignedLongType>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[10];
      RandomImgs randomImgs0 = RandomImgs.seed((-406));
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType(1530L);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(unsigned12BitType0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 15;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) 15;
      longArray0[3] = (long) 15;
      longArray0[4] = (long) 15;
      longArray0[5] = (long) 15;
      longArray0[6] = (long) 15;
      RandomImgs randomImgs0 = RandomImgs.seed(0);
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType(0L);
      Unsigned12BitType unsigned12BitType1 = unsigned12BitType0.copy();
      // Undeclared exception!
      randomImgs0.nextImage(unsigned12BitType1, longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((-3597.40443538), (-874.062657));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(complexDoubleType0, longArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Randomization of type: class net.imglib2.type.numeric.complex.ComplexDoubleType is not supported.
         //
         verifyException("net.imglib2.test.RandomImgs", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1472);
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(1472, false);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType(volatileIntArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1472;
      longArray0[1] = (long) 1472;
      longArray0[2] = (long) 1472;
      longArray0[3] = (long) 1472;
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(volatileARGBType0, longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 4694952902656 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(65536);
      ARGBType aRGBType0 = new ARGBType(81);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 81;
      longArray0[1] = (long) 65536;
      longArray0[2] = (long) 81;
      // Undeclared exception!
      randomImgs0.nextImage(aRGBType0, longArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1710);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        randomImgs0.nextImage((ComplexFloatType) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(3120);
      VolatileLongType volatileLongType0 = new VolatileLongType(3120);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3120;
      longArray0[1] = (long) 3120;
      longArray0[2] = (long) 3120;
      longArray0[3] = (long) 3120;
      longArray0[4] = (long) 3120;
      longArray0[5] = (long) 3120;
      longArray0[6] = (long) 3120;
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(volatileLongType0, longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1342177280
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2930);
      VolatileByteType volatileByteType0 = new VolatileByteType();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2930;
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(volatileByteType0, longArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.img.basictypeaccess.array.ByteArray cannot be cast to class net.imglib2.img.basictypeaccess.volatiles.VolatileByteAccess (net.imglib2.img.basictypeaccess.array.ByteArray and net.imglib2.img.basictypeaccess.volatiles.VolatileByteAccess are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @765a83c6)
         //
         verifyException("net.imglib2.type.volatiles.VolatileByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2935;
      longArray0[1] = (long) 2935;
      longArray0[2] = (long) 2935;
      longArray0[3] = 2935L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      RandomImgs randomImgs0 = RandomImgs.seed(0);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(nativeBoolType0, (Interval) finalInterval0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 74204872350625 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(33);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 33;
      longArray0[1] = (long) 33;
      longArray0[2] = (long) 33;
      longArray0[3] = (long) 33;
      longArray0[4] = (long) 33;
      longArray0[5] = (long) 33;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      // Undeclared exception!
      randomImgs0.nextImage(nativeBoolType0, (Interval) finalInterval0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2920);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage((UnsignedVariableBitLengthType) null, (Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3365;
      longArray0[1] = (long) 3365;
      longArray0[2] = (long) 3365;
      longArray0[3] = (long) 3365;
      longArray0[4] = (long) 3365;
      longArray0[5] = (long) 3365;
      longArray0[6] = (long) 3365;
      longArray0[7] = (long) 3365;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      RandomImgs randomImgs0 = RandomImgs.seed(673);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(nativeBoolType0, (Interval) finalInterval0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -431990047
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractBooleanArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[10];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      RandomImgs randomImgs0 = RandomImgs.seed((-4250));
      VolatileLongType volatileLongType0 = new VolatileLongType((-4250));
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(volatileLongType0, (Interval) finalInterval0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.img.basictypeaccess.array.LongArray cannot be cast to class net.imglib2.img.basictypeaccess.volatiles.VolatileLongAccess (net.imglib2.img.basictypeaccess.array.LongArray and net.imglib2.img.basictypeaccess.volatiles.VolatileLongAccess are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @765a83c6)
         //
         verifyException("net.imglib2.type.volatiles.VolatileLongType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray1, longArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      RandomImgs randomImgs0 = RandomImgs.seed((-3281));
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(nativeBoolType0, (Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2906);
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      UnsignedVariableBitLengthType unsignedVariableBitLengthType0 = new UnsignedVariableBitLengthType((-1068L), 4);
      RandomAccessibleInterval<UnsignedVariableBitLengthType> randomAccessibleInterval0 = randomImgs0.nextImage(unsignedVariableBitLengthType0, (Interval) finalInterval0);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(nativeBoolType0, (Interval) randomAccessibleInterval0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Randomization of type: class net.imglib2.type.logic.NativeBoolType is not supported.
         //
         verifyException("net.imglib2.test.RandomImgs", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(12);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 0.0F);
      Fraction fraction0 = new Fraction();
      NtreeImg<FloatType, FloatNtree> ntreeImg0 = new NtreeImg<FloatType, FloatNtree>(floatNtree0, longArray0, fraction0);
      FloatType floatType0 = new FloatType(ntreeImg0);
      // Undeclared exception!
      randomImgs0.nextImage(floatType0, longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(920);
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      ARGBType aRGBType0 = new ARGBType(920);
      RandomAccessibleInterval<ARGBType> randomAccessibleInterval0 = randomImgs0.nextImage(aRGBType0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1196);
      LongType longType0 = new LongType();
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      RandomAccessibleInterval<LongType> randomAccessibleInterval0 = randomImgs0.nextImage(longType0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2941);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(255L);
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      RandomAccessibleInterval<UnsignedIntType> randomAccessibleInterval0 = randomImgs0.nextImage(unsignedIntType0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1);
      IntType intType0 = new IntType((NativeImg<?, ? extends IntAccess>) null);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Img<IntType> img0 = randomImgs0.nextImage(intType0, longArray0);
      assertNotNull(img0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1196);
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      UnsignedShortType unsignedShortType0 = new UnsignedShortType(1196);
      RandomAccessibleInterval<UnsignedShortType> randomAccessibleInterval0 = randomImgs0.nextImage(unsignedShortType0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(486);
      ShortType shortType0 = new ShortType();
      LongType longType0 = new LongType(486);
      NtreeImgFactory<LongType> ntreeImgFactory0 = new NtreeImgFactory<LongType>(longType0);
      int[] intArray0 = new int[2];
      intArray0[0] = 486;
      intArray0[1] = 486;
      NtreeImg<LongType, ?> ntreeImg0 = ntreeImgFactory0.create(intArray0);
      // Undeclared exception!
      randomImgs0.nextImage(shortType0, (Interval) ntreeImg0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(1, false);
      ByteType byteType0 = new ByteType(volatileByteArray0);
      Img<ByteType> img0 = randomImgs0.nextImage(byteType0, longArray0);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      RandomAccessibleInterval<UnsignedLongType> randomAccessibleInterval0 = randomImgs0.nextImage(unsignedLongType0, (Interval) img0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1710);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1710;
      int[] intArray0 = new int[2];
      intArray0[0] = 1710;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction();
      LazyCellImg.Get<Cell<DoubleAccess>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleAccess>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<DoubleType, DoubleAccess> lazyCellImg0 = new LazyCellImg<DoubleType, DoubleAccess>(cellGrid0, fraction0, lazyCellImg_Get0);
      DoubleType doubleType0 = new DoubleType(lazyCellImg0);
      RandomAccessibleInterval<DoubleType> randomAccessibleInterval0 = randomImgs0.nextImage(doubleType0, (Interval) lazyCellImg0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      RandomImgs randomImgs0 = RandomImgs.seed(1);
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(1);
      RandomAccessibleInterval<UnsignedByteType> randomAccessibleInterval0 = randomImgs0.nextImage(unsignedByteType0, (Interval) finalInterval0);
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(1710);
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[2];
      intArray0[0] = 1710;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction();
      LazyCellImg.Get<Cell<DoubleAccess>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleAccess>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<DoubleType, DoubleAccess> lazyCellImg0 = new LazyCellImg<DoubleType, DoubleAccess>(cellGrid0, fraction0, lazyCellImg_Get0);
      DoubleType doubleType0 = new DoubleType(lazyCellImg0);
      // Undeclared exception!
      try { 
        randomImgs0.nextImage(doubleType0, (Interval) lazyCellImg0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomImgs randomImgs0 = RandomImgs.seed(2971);
      long[] longArray0 = new long[1];
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      ListImg<VolatileUnsignedIntType> listImg0 = new ListImg<VolatileUnsignedIntType>(longArray0, volatileUnsignedIntType0);
      // Undeclared exception!
      try { 
        randomImgs0.randomize((RandomAccessibleInterval<VolatileUnsignedIntType>) listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
