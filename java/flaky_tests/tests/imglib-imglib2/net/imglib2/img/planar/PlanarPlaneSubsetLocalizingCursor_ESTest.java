/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:49:42 GMT 2022
 */

package net.imglib2.img.planar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import net.imglib2.FinalInterval;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.planar.PlanarPlaneSubsetLocalizingCursor;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlanarPlaneSubsetLocalizingCursor_ESTest extends PlanarPlaneSubsetLocalizingCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<DirtyVolatileFloatArray> linkedList0 = new LinkedList<DirtyVolatileFloatArray>();
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[7];
      longArray0[2] = 4918L;
      PlanarImg<VolatileFloatType, DirtyVolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, DirtyVolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(volatileFloatArray0);
      planarImg0.setLinkedType(volatileFloatType0);
      PlanarPlaneSubsetLocalizingCursor<VolatileFloatType> planarPlaneSubsetLocalizingCursor0 = null;
      try {
        planarPlaneSubsetLocalizingCursor0 = new PlanarPlaneSubsetLocalizingCursor<VolatileFloatType>(planarImg0, planarImg0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.img.planar.PlanarPlaneSubsetLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<DirtyVolatileFloatArray> linkedList0 = new LinkedList<DirtyVolatileFloatArray>();
      long[] longArray0 = new long[3];
      ARGBType aRGBType0 = new ARGBType();
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      PlanarImg<VolatileFloatType, DirtyVolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, DirtyVolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      planarImg0.setLinkedType(volatileFloatType0);
      long[] longArray1 = new long[7];
      longArray1[0] = 332L;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray1, longArray1);
      PlanarPlaneSubsetLocalizingCursor<VolatileFloatType> planarPlaneSubsetLocalizingCursor0 = null;
      try {
        planarPlaneSubsetLocalizingCursor0 = new PlanarPlaneSubsetLocalizingCursor<VolatileFloatType>(planarImg0, finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<DirtyVolatileFloatArray> linkedList0 = new LinkedList<DirtyVolatileFloatArray>();
      long[] longArray0 = new long[3];
      Fraction fraction0 = new Fraction();
      PlanarImg<VolatileFloatType, DirtyVolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, DirtyVolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      planarImg0.setLinkedType(volatileFloatType0);
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      PlanarPlaneSubsetLocalizingCursor<VolatileFloatType> planarPlaneSubsetLocalizingCursor0 = null;
      try {
        planarPlaneSubsetLocalizingCursor0 = new PlanarPlaneSubsetLocalizingCursor<VolatileFloatType>(planarImg0, finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(2773, false);
      PlanarImg<VolatileFloatType, DirtyVolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      planarImg0.setLinkedType(volatileFloatType0);
      PlanarPlaneSubsetLocalizingCursor<VolatileFloatType> planarPlaneSubsetLocalizingCursor0 = null;
      try {
        planarPlaneSubsetLocalizingCursor0 = new PlanarPlaneSubsetLocalizingCursor<VolatileFloatType>(planarImg0, planarImg0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.img.planar.PlanarPlaneSubsetLocalizingCursor", e);
      }
  }
}
