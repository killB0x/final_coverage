/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:38:55 GMT 2022
 */

package net.imglib2.img.planar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import net.imglib2.Dimensions;
import net.imglib2.FinalDimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.planar.PlanarImgFactory;
import net.imglib2.type.label.BasePairCharType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.type.volatiles.VolatileIntType;
import net.imglib2.type.volatiles.VolatileLongType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PlanarImgFactory_ESTest extends PlanarImgFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitType bitType0 = new BitType(true);
      PlanarImgFactory<BitType> planarImgFactory0 = new PlanarImgFactory<BitType>(bitType0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      PlanarImg<BitType, ?> planarImg0 = planarImgFactory0.create(longArray0, bitType0);
      assertEquals(1, planarImg0.numSlices());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('R');
      PlanarImgFactory<BasePairCharType> planarImgFactory0 = new PlanarImgFactory<BasePairCharType>(basePairCharType0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'R';
      longArray0[1] = (long) 'R';
      PlanarImg<BasePairCharType, ?> planarImg0 = planarImgFactory0.create(longArray0);
      assertEquals(6724L, planarImg0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      PlanarImgFactory<DoubleType> planarImgFactory0 = new PlanarImgFactory<DoubleType>(doubleType0);
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      PlanarImg<DoubleType, ?> planarImg0 = planarImgFactory0.create(intArray0);
      assertEquals(32L, planarImg0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(64);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      VolatileLongType volatileLongType0 = new VolatileLongType(longBufferAccess0);
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>(volatileLongType0);
      PointSampleList<DirtyFloatArray> pointSampleList0 = new PointSampleList<DirtyFloatArray>(2495);
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      PlanarImg<VolatileLongType, ?> planarImg0 = planarImgFactory0.create((Dimensions) finalInterval0);
      assertEquals(0, planarImg0.numSlices());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      PlanarImgFactory<NativeBoolType> planarImgFactory0 = new PlanarImgFactory<NativeBoolType>(nativeBoolType0);
      PointSampleList<DirtyFloatArray> pointSampleList0 = new PointSampleList<DirtyFloatArray>(1);
      Point point0 = pointSampleList0.maxAsPoint();
      FinalInterval finalInterval0 = new FinalInterval(point0, point0);
      PlanarImg<NativeBoolType, ?> planarImg0 = planarImgFactory0.create((Dimensions) finalInterval0);
      assertEquals(1, planarImg0.numSlices());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlanarImgFactory<DoubleType> planarImgFactory0 = new PlanarImgFactory<DoubleType>();
      PlanarImgFactory<VolatileUnsignedByteType> planarImgFactory1 = new PlanarImgFactory<VolatileUnsignedByteType>();
      try { 
        planarImgFactory1.imgFactory((Object) planarImgFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.planar.PlanarImgFactory: net.imglib2.img.planar.PlanarImgFactory does not implement NativeType.
         //
         verifyException("net.imglib2.img.planar.PlanarImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlanarImgFactory<IntType> planarImgFactory0 = new PlanarImgFactory<IntType>();
      long[] longArray0 = new long[0];
      IntType intType0 = new IntType(1);
      // Undeclared exception!
      try { 
        planarImgFactory0.create(longArray0, intType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      PlanarImgFactory<VolatileUnsignedShortType> planarImgFactory0 = new PlanarImgFactory<VolatileUnsignedShortType>(volatileUnsignedShortType0);
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 3547L;
      longArray0[3] = 916L;
      // Undeclared exception!
      planarImgFactory0.create(longArray0, volatileUnsignedShortType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(1, false);
      VolatileIntType volatileIntType0 = new VolatileIntType(dirtyVolatileIntArray0);
      PlanarImgFactory<VolatileIntType> planarImgFactory0 = new PlanarImgFactory<VolatileIntType>(volatileIntType0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 3237;
      longArray0[4] = 63L;
      longArray0[5] = (long) 3237;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      // Undeclared exception!
      planarImgFactory0.create(longArray0, volatileIntType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>();
      long[] longArray0 = new long[1];
      longArray0[0] = 4294967295L;
      VolatileLongType volatileLongType0 = new VolatileLongType(0L);
      // Undeclared exception!
      try { 
        planarImgFactory0.create(longArray0, volatileLongType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolatileLongType volatileLongType0 = new VolatileLongType();
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>(volatileLongType0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        planarImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(63);
      PlanarImgFactory<VolatileUnsignedIntType> planarImgFactory0 = new PlanarImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 63;
      longArray0[1] = 1310L;
      longArray0[2] = (long) 63;
      longArray0[3] = (long) 63;
      longArray0[4] = (long) 63;
      longArray0[5] = (long) 63;
      longArray0[6] = (long) 63;
      longArray0[7] = (long) 63;
      longArray0[8] = (long) 63;
      // Undeclared exception!
      planarImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(377);
      PlanarImgFactory<VolatileUnsignedIntType> planarImgFactory0 = new PlanarImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 377;
      longArray0[1] = (long) 377;
      longArray0[2] = (long) 377;
      longArray0[3] = (long) 377;
      longArray0[4] = (long) 377;
      longArray0[5] = (long) 377;
      longArray0[6] = (long) 377;
      longArray0[7] = (long) 377;
      longArray0[8] = (long) 377;
      // Undeclared exception!
      try { 
        planarImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2032524919
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      PlanarImgFactory<VolatileFloatType> planarImgFactory0 = new PlanarImgFactory<VolatileFloatType>(volatileFloatType0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        planarImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('R');
      PlanarImgFactory<BasePairCharType> planarImgFactory0 = new PlanarImgFactory<BasePairCharType>(basePairCharType0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) 'R';
      intArray0[5] = (int) 'R';
      // Undeclared exception!
      planarImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(568);
      PlanarImgFactory<VolatileUnsignedIntType> planarImgFactory0 = new PlanarImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType0);
      int[] intArray0 = new int[6];
      intArray0[0] = 568;
      intArray0[1] = 568;
      intArray0[2] = 568;
      intArray0[3] = 568;
      intArray0[4] = 568;
      intArray0[5] = 568;
      // Undeclared exception!
      planarImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatType floatType0 = new FloatType();
      PlanarImgFactory<FloatType> planarImgFactory0 = new PlanarImgFactory<FloatType>(floatType0);
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      // Undeclared exception!
      try { 
        planarImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('/');
      PlanarImgFactory<BasePairCharType> planarImgFactory0 = new PlanarImgFactory<BasePairCharType>(basePairCharType0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) '/';
      longArray0[2] = (long) '/';
      longArray0[3] = (long) '/';
      longArray0[4] = (long) '/';
      longArray0[5] = (long) '/';
      FinalDimensions finalDimensions0 = FinalDimensions.wrap(longArray0);
      // Undeclared exception!
      planarImgFactory0.create((Dimensions) finalDimensions0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BitType bitType0 = new BitType(true);
      PlanarImgFactory<BitType> planarImgFactory0 = new PlanarImgFactory<BitType>(bitType0);
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      // Undeclared exception!
      try { 
        planarImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VolatileLongType volatileLongType0 = new VolatileLongType();
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>(volatileLongType0);
      ImgFactory<Object> imgFactory0 = planarImgFactory0.imgFactory((Object) volatileLongType0);
      assertNotNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>((VolatileLongType) null);
      // Undeclared exception!
      try { 
        planarImgFactory0.imgFactory((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.planar.PlanarImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlanarImgFactory<DoubleType> planarImgFactory0 = new PlanarImgFactory<DoubleType>();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        planarImgFactory0.create(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.planar.PlanarImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlanarImgFactory<NativeBoolType> planarImgFactory0 = new PlanarImgFactory<NativeBoolType>();
      // Undeclared exception!
      try { 
        planarImgFactory0.create((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlanarImgFactory<FloatType> planarImgFactory0 = new PlanarImgFactory<FloatType>();
      FloatType floatType0 = new FloatType();
      // Undeclared exception!
      try { 
        planarImgFactory0.create((long[]) null, floatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlanarImgFactory<DoubleType> planarImgFactory0 = new PlanarImgFactory<DoubleType>();
      // Undeclared exception!
      try { 
        planarImgFactory0.create((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.planar.PlanarImgFactory", e);
      }
  }
}
