/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:26:23 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyCharArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyCharArray_ESTest extends DirtyCharArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      char[] charArray0 = new char[4];
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(charArray0);
      dirtyCharArray0.setValue(0, '2');
      boolean boolean0 = dirtyCharArray0.isDirty();
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(0);
      DirtyCharArray dirtyCharArray1 = dirtyCharArray0.createArray(0);
      assertEquals(0, dirtyCharArray1.getArrayLength());
      assertFalse(dirtyCharArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      char[] charArray0 = new char[4];
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(charArray0);
      // Undeclared exception!
      try { 
        dirtyCharArray0.createArray((-42));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -42
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = null;
      try {
        dirtyCharArray0 = new DirtyCharArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(1656);
      assertFalse(dirtyCharArray0.isDirty());
      
      dirtyCharArray0.setDirty();
      assertTrue(dirtyCharArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      char[] charArray0 = new char[4];
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(charArray0);
      boolean boolean0 = dirtyCharArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray((char[]) null);
      // Undeclared exception!
      try { 
        dirtyCharArray0.setValue(0, '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(1656);
      // Undeclared exception!
      try { 
        dirtyCharArray0.setValue(1656, 'Z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1656 out of bounds for length 1656
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(1656);
      assertFalse(dirtyCharArray0.isDirty());
      
      dirtyCharArray0.setDirty(true);
      assertTrue(dirtyCharArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(825);
      DirtyCharArray dirtyCharArray1 = dirtyCharArray0.createArray(825);
      assertFalse(dirtyCharArray1.isDirty());
      assertEquals(825, dirtyCharArray1.getArrayLength());
  }
}
