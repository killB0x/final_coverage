/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:21:44 GMT 2022
 */

package net.imglib2.img.basictypeaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import net.imglib2.img.basictypeaccess.AccessFlags;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AccessFlags_ESTest extends AccessFlags_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(3045);
      Set<AccessFlags> set0 = AccessFlags.ofAccess(dirtyFloatArray0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.valueOf("VOLATILE");
      assertEquals(AccessFlags.VOLATILE, accessFlags0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessFlags.setOf((AccessFlags[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.AccessFlags", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<AccessFlags> set0 = AccessFlags.fromBooleansDirtyVolatile(false, false);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Set<AccessFlags> set0 = AccessFlags.fromBooleansDirtyVolatile(true, true);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Set<AccessFlags> set0 = AccessFlags.fromBooleansDirtyVolatile(false, true);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.VOLATILE;
      AccessFlags[] accessFlagsArray0 = new AccessFlags[2];
      accessFlagsArray0[0] = accessFlags0;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlagsArray0);
      assertEquals(1, set0.size());
      assertTrue(set0.contains(accessFlags0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set<AccessFlags> set0 = AccessFlags.fromBooleansDirtyVolatile(true, false);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccessFlags[] accessFlagsArray0 = AccessFlags.values();
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlagsArray0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.DIRTY;
      AccessFlags accessFlags1 = AccessFlags.VOLATILE;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags1, accessFlags0);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.DIRTY;
      AccessFlags accessFlags1 = AccessFlags.VOLATILE;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags0, accessFlags1);
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.VOLATILE;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags0, accessFlags0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.DIRTY;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags0);
      assertTrue(set0.contains(accessFlags0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.VOLATILE;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags0);
      assertTrue(set0.contains(accessFlags0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Set<AccessFlags> set0 = AccessFlags.setOf();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessFlags accessFlags0 = AccessFlags.DIRTY;
      Set<AccessFlags> set0 = AccessFlags.setOf(accessFlags0, accessFlags0);
      Set<AccessFlags> set1 = AccessFlags.ofAccess(set0);
      assertEquals(1, set0.size());
      assertTrue(set1.isEmpty());
  }
}
