/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:19:15 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyShortArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyShortArray_ESTest extends DirtyShortArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[5];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      assertFalse(dirtyShortArray0.isDirty());
      
      dirtyShortArray0.setDirty();
      boolean boolean0 = dirtyShortArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      DirtyShortArray dirtyShortArray1 = dirtyShortArray0.createArray((short)0);
      assertFalse(dirtyShortArray0.isDirty());
      assertFalse(dirtyShortArray1.isDirty());
      assertEquals(0, dirtyShortArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      short[] shortArray0 = new short[0];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      // Undeclared exception!
      try { 
        dirtyShortArray0.setValue(1, (short)1305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      // Undeclared exception!
      try { 
        dirtyShortArray0.createArray((-261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -261
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = null;
      try {
        dirtyShortArray0 = new DirtyShortArray((-2216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2216
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      boolean boolean0 = dirtyShortArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      DirtyShortArray dirtyShortArray1 = dirtyShortArray0.createArray(1460);
      assertEquals(1460, dirtyShortArray1.getArrayLength());
      assertFalse(dirtyShortArray1.isDirty());
      assertFalse(dirtyShortArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      dirtyShortArray0.setValue(0, (short)1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      short[] shortArray0 = new short[3];
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(shortArray0);
      assertFalse(dirtyShortArray0.isDirty());
      
      dirtyShortArray0.setDirty(true);
      assertTrue(dirtyShortArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray((short[]) null);
      // Undeclared exception!
      try { 
        dirtyShortArray0.setValue(5337, (short)4036);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(0);
      assertFalse(dirtyShortArray0.isDirty());
  }
}
