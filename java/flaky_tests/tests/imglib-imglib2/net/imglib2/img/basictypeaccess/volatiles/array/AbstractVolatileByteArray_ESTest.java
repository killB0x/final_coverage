/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:24:45 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractVolatileByteArray_ESTest extends AbstractVolatileByteArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray((byte[]) null, true);
      assertTrue(dirtyVolatileByteArray0.isValid());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(1, true);
      boolean boolean0 = dirtyVolatileByteArray0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(0, false);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray(0);
      assertEquals(0, dirtyVolatileByteArray1.getArrayLength());
      assertTrue(dirtyVolatileByteArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(1476, true);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray(1476);
      assertEquals(1476, dirtyVolatileByteArray1.getArrayLength());
      assertTrue(dirtyVolatileByteArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(0, false);
      // Undeclared exception!
      try { 
        dirtyVolatileByteArray0.createArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(1, false);
      boolean boolean0 = dirtyVolatileByteArray0.isValid();
      assertFalse(boolean0);
  }
}
