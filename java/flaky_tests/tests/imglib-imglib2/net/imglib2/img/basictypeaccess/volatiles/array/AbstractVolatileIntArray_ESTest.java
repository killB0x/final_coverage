/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:58:42 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractVolatileIntArray_ESTest extends AbstractVolatileIntArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[7];
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(intArray0, false);
      boolean boolean0 = volatileIntArray0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(0, true);
      VolatileIntArray volatileIntArray1 = volatileIntArray0.createArray(1);
      assertTrue(volatileIntArray1.isValid());
      assertEquals(1, volatileIntArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[7];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, true);
      DirtyVolatileIntArray dirtyVolatileIntArray1 = dirtyVolatileIntArray0.createArray(0);
      assertTrue(dirtyVolatileIntArray1.isValid());
      assertEquals(0, dirtyVolatileIntArray1.getArrayLength());
      assertTrue(dirtyVolatileIntArray0.isValid());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(0, true);
      boolean boolean0 = volatileIntArray0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(0, true);
      // Undeclared exception!
      try { 
        volatileIntArray0.createArray((-1857));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1857
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }
}
