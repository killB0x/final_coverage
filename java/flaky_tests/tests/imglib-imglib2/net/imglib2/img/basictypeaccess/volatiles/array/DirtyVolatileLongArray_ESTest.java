/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:31:58 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileLongArray_ESTest extends DirtyVolatileLongArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, false);
      assertFalse(dirtyVolatileLongArray0.isDirty());
      
      dirtyVolatileLongArray0.dirty = true;
      boolean boolean0 = dirtyVolatileLongArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(619, true);
      DirtyVolatileLongArray dirtyVolatileLongArray1 = dirtyVolatileLongArray0.createArray(619, true);
      assertEquals(619, dirtyVolatileLongArray1.getArrayLength());
      assertTrue(dirtyVolatileLongArray1.isValid());
      assertFalse(dirtyVolatileLongArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[3];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      DirtyVolatileLongArray dirtyVolatileLongArray1 = dirtyVolatileLongArray0.createArray(0, false);
      assertFalse(dirtyVolatileLongArray1.isValid());
      assertFalse(dirtyVolatileLongArray0.isDirty());
      assertEquals(0, dirtyVolatileLongArray1.getArrayLength());
      assertFalse(dirtyVolatileLongArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray((long[]) null, false);
      // Undeclared exception!
      try { 
        dirtyVolatileLongArray0.setValue((-1152), (-561L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(619, true);
      // Undeclared exception!
      try { 
        dirtyVolatileLongArray0.setValue(619, 619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 619 out of bounds for length 619
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(619, true);
      // Undeclared exception!
      try { 
        dirtyVolatileLongArray0.createArray((-1680), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1680
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = null;
      try {
        dirtyVolatileLongArray0 = new DirtyVolatileLongArray((-1704), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1704
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[3];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      boolean boolean0 = dirtyVolatileLongArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      assertFalse(dirtyVolatileLongArray0.isDirty());
      
      dirtyVolatileLongArray0.setDirty(true);
      assertTrue(dirtyVolatileLongArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[3];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      DirtyVolatileLongArray dirtyVolatileLongArray1 = dirtyVolatileLongArray0.createArray(895, false);
      assertFalse(dirtyVolatileLongArray1.isDirty());
      
      dirtyVolatileLongArray1.setDirty(true);
      assertTrue(dirtyVolatileLongArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[3];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      assertFalse(dirtyVolatileLongArray0.isDirty());
      
      dirtyVolatileLongArray0.setValue(0, 0L);
      assertTrue(dirtyVolatileLongArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(0, false);
      assertFalse(dirtyVolatileLongArray0.isDirty());
      
      dirtyVolatileLongArray0.setDirty();
      assertTrue(dirtyVolatileLongArray0.isDirty());
  }
}
