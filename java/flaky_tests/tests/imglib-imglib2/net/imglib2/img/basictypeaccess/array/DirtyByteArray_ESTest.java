/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:14:04 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyByteArray_ESTest extends DirtyByteArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(1);
      assertFalse(dirtyByteArray0.isDirty());
      
      dirtyByteArray0.setDirty(true);
      assertTrue(dirtyByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(byteArray0);
      dirtyByteArray0.setValue(0, (byte) (-105));
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(dirtyByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(71);
      dirtyByteArray0.dirty = true;
      boolean boolean0 = dirtyByteArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(byteArray0);
      DirtyByteArray dirtyByteArray1 = dirtyByteArray0.createArray(1);
      assertFalse(dirtyByteArray0.isDirty());
      assertFalse(dirtyByteArray1.isDirty());
      assertEquals(1, dirtyByteArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(448);
      // Undeclared exception!
      try { 
        dirtyByteArray0.setValue(448, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 448 out of bounds for length 448
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(471);
      // Undeclared exception!
      try { 
        dirtyByteArray0.createArray((-403));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -403
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = null;
      try {
        dirtyByteArray0 = new DirtyByteArray((-403));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -403
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(1204);
      assertFalse(dirtyByteArray0.isDirty());
      
      dirtyByteArray0.setDirty();
      assertTrue(dirtyByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(0);
      DirtyByteArray dirtyByteArray1 = dirtyByteArray0.createArray(0);
      assertEquals(0, dirtyByteArray1.getArrayLength());
      assertFalse(dirtyByteArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray((byte[]) null);
      boolean boolean0 = dirtyByteArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray((byte[]) null);
      // Undeclared exception!
      try { 
        dirtyByteArray0.setValue(1, (byte)69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyByteArray", e);
      }
  }
}
