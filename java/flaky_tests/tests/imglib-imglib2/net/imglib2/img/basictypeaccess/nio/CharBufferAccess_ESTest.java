/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:41:33 GMT 2022
 */

package net.imglib2.img.basictypeaccess.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import net.imglib2.img.basictypeaccess.nio.CharBufferAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CharBufferAccess_ESTest extends CharBufferAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharBuffer charBuffer1 = charBufferAccess0.duplicateBuffer(charBuffer0);
      assertFalse(charBuffer1.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0, false);
      assertEquals(2, charBufferAccess0.getNumBytesPerEntity());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance(charBuffer0, true);
      assertTrue(charBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance((CharBuffer) null, false);
      assertFalse(charBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      ByteBuffer byteBuffer0 = charBufferAccess0.allocateByteBuffer(359, false);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(charBufferAccess1.isValid());
      assertEquals(2, charBufferAccess0.getNumBytesPerEntity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(charBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2816);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(charBuffer0, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2541);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance(byteBuffer0, false);
      assertFalse(charBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBufferAccess charBufferAccess0 = CharBufferAccess.fromByteBuffer(byteBuffer0, true);
      char char0 = charBufferAccess0.getValue((byte)0);
      assertTrue(charBufferAccess0.isValid());
      assertEquals('\u00FF', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = CharBufferAccess.fromByteBuffer(byteBuffer0, false);
      assertFalse(charBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(345, true);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.allocate(345, false, true);
      assertTrue(charBufferAccess1.isValid());
      assertEquals(345, charBufferAccess1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.allocate(0, true, false);
      assertEquals(2, charBufferAccess1.getNumBytesPerEntity());
      assertTrue(charBufferAccess1.isDirect());
      assertFalse(charBufferAccess1.isValid());
      assertEquals(0, charBufferAccess1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      CharBufferAccess charBufferAccess1 = charBufferAccess0.newInstance(charBuffer1, true);
      // Undeclared exception!
      try { 
        charBufferAccess1.setValues(charBufferAccess0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(0);
      CharBufferAccess charBufferAccess1 = new CharBufferAccess(1, true);
      // Undeclared exception!
      try { 
        charBufferAccess0.setValues(charBufferAccess1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.setValues(charBufferAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 1, 1);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(charBuffer1);
      // Undeclared exception!
      try { 
        charBufferAccess0.setValue((-2111), 'f');
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.setValue(2, 'E');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.getValue((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(2394);
      // Undeclared exception!
      try { 
        charBufferAccess0.getValue(2394);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2394
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.duplicateBuffer((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = null;
      try {
        charBufferAccess0 = new CharBufferAccess((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = null;
      try {
        charBufferAccess0 = new CharBufferAccess((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = null;
      try {
        charBufferAccess0 = new CharBufferAccess((-908), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-908 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = null;
      try {
        charBufferAccess0 = new CharBufferAccess((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharBufferAccess.fromByteBuffer((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      int int0 = charBufferAccess0.getNumBytesPerEntity();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.newInstance((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.CharBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess();
      // Undeclared exception!
      try { 
        charBufferAccess0.allocate((-36), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-36 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(345, true);
      char char0 = charBufferAccess0.getValue(0);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      CharBuffer charBuffer0 = charBufferAccess0.setValues(charBufferAccess0);
      assertEquals(0, charBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(0);
      // Undeclared exception!
      try { 
        charBufferAccess0.setValue(0, '>');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(345, true);
      charBufferAccess0.setValue(0, '1');
      char char0 = charBufferAccess0.getValue(0);
      assertEquals('1', char0);
  }
}
