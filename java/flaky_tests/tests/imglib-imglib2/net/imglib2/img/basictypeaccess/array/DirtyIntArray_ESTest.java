/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:21:39 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyIntArray_ESTest extends DirtyIntArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[6];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      dirtyIntArray0.setDirty();
      assertTrue(dirtyIntArray0.isDirty());
      
      dirtyIntArray0.setDirty(false);
      assertFalse(dirtyIntArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[6];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      dirtyIntArray0.setValue(1, 221);
      assertArrayEquals(new int[] {0, 221, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[9];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      assertFalse(dirtyIntArray0.isDirty());
      
      dirtyIntArray0.setDirty();
      boolean boolean0 = dirtyIntArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[4];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      DirtyIntArray dirtyIntArray1 = dirtyIntArray0.createArray(0);
      assertEquals(0, dirtyIntArray1.getArrayLength());
      assertFalse(dirtyIntArray1.isDirty());
      assertFalse(dirtyIntArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(1);
      DirtyIntArray dirtyIntArray1 = dirtyIntArray0.createArray(1);
      assertEquals(1, dirtyIntArray1.getArrayLength());
      assertFalse(dirtyIntArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(1);
      // Undeclared exception!
      try { 
        dirtyIntArray0.setValue(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = null;
      try {
        dirtyIntArray0 = new DirtyIntArray((-2044));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2044
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray((int[]) null);
      // Undeclared exception!
      try { 
        dirtyIntArray0.setValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int[] intArray0 = new int[9];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      boolean boolean0 = dirtyIntArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray((int[]) null);
      // Undeclared exception!
      try { 
        dirtyIntArray0.createArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }
}
