/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:29:13 GMT 2022
 */

package net.imglib2.img.basictypeaccess.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloatBufferAccess_ESTest extends FloatBufferAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[] floatArray0 = new float[4];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(byteBuffer0, false);
      FloatBufferAccess floatBufferAccess2 = floatBufferAccess1.allocate(0);
      assertEquals(4, floatBufferAccess2.getNumBytesPerEntity());
      assertEquals(0, floatBufferAccess2.getArrayLength());
      assertFalse(floatBufferAccess1.isValid());
      assertFalse(floatBufferAccess2.isValid());
      assertTrue(floatBufferAccess2.isDirect());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0, false);
      assertEquals(1, floatBufferAccess0.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[6];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0, true);
      assertFalse(floatBufferAccess0.isDirect());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[4];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      floatBufferAccess0.setValue(0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, false);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      FloatBuffer floatBuffer0 = byteBuffer0.asFloatBuffer();
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(floatBuffer0, false);
      assertFalse(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance((FloatBuffer) null, true);
      assertTrue(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(947);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(byteBuffer0, false);
      assertFalse(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 823.501F;
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      float float0 = floatBufferAccess0.getValue(0);
      assertEquals(823.501F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      floatBufferAccess0.getValue(0);
      assertFalse(floatBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(276);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, true);
      assertTrue(floatBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, false);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.allocate(0, false, true);
      assertEquals(0, floatBufferAccess1.getArrayLength());
      assertTrue(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.setValues(floatBufferAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.setValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.newInstance((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.getValue((-1056));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(4);
      // Undeclared exception!
      try { 
        floatBufferAccess0.getValue(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloatBufferAccess.fromByteBuffer((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.duplicateBuffer((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      // Undeclared exception!
      try { 
        floatBufferAccess0.allocate((-1433), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1433 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = null;
      try {
        floatBufferAccess0 = new FloatBufferAccess((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = null;
      try {
        floatBufferAccess0 = new FloatBufferAccess((-190), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-190 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = null;
      try {
        floatBufferAccess0 = new FloatBufferAccess((-190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-190 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      int int0 = floatBufferAccess0.getNumBytesPerEntity();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0);
      assertEquals(4, floatBufferAccess0.getNumBytesPerEntity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(276);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.allocate(1, false, false);
      // Undeclared exception!
      try { 
        floatBufferAccess0.setValues(floatBufferAccess1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.FloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      floatBufferAccess0.getValue(0);
      assertFalse(floatBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.newInstance(floatBuffer0, false);
      assertFalse(floatBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = null;
      try {
        floatBufferAccess0 = new FloatBufferAccess((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      floatBufferAccess0.setValues(floatBufferAccess0);
      assertFalse(floatBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      FloatBuffer floatBuffer1 = floatBufferAccess0.duplicateBuffer(floatBuffer0);
      assertEquals(0, floatBuffer1.position());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      FloatBufferAccess floatBufferAccess1 = floatBufferAccess0.allocate(25, true, true);
      assertEquals(4, floatBufferAccess0.getNumBytesPerEntity());
      assertTrue(floatBufferAccess1.isValid());
      assertEquals(25, floatBufferAccess1.getArrayLength());
      assertTrue(floatBufferAccess1.isDirect());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1);
      // Undeclared exception!
      try { 
        floatBufferAccess0.setValue(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
