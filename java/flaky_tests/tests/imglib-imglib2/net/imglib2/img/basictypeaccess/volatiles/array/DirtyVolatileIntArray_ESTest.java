/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:34:04 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileIntArray_ESTest extends DirtyVolatileIntArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, true);
      dirtyVolatileIntArray0.setDirty(false);
      assertFalse(dirtyVolatileIntArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, true);
      DirtyVolatileIntArray dirtyVolatileIntArray1 = dirtyVolatileIntArray0.createArray(1015, false);
      assertFalse(dirtyVolatileIntArray1.isDirty());
      assertFalse(dirtyVolatileIntArray0.isDirty());
      assertFalse(dirtyVolatileIntArray1.isValid());
      assertEquals(1015, dirtyVolatileIntArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(0, false);
      DirtyVolatileIntArray dirtyVolatileIntArray1 = dirtyVolatileIntArray0.createArray(0, false);
      assertFalse(dirtyVolatileIntArray1.isDirty());
      assertFalse(dirtyVolatileIntArray1.isValid());
      assertEquals(0, dirtyVolatileIntArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray((int[]) null, false);
      // Undeclared exception!
      try { 
        dirtyVolatileIntArray0.setValue(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(0, true);
      // Undeclared exception!
      try { 
        dirtyVolatileIntArray0.setValue((-37), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -37 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = null;
      try {
        dirtyVolatileIntArray0 = new DirtyVolatileIntArray((-1085), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1085
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, false);
      boolean boolean0 = dirtyVolatileIntArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, false);
      dirtyVolatileIntArray0.setValue(0, 564);
      assertArrayEquals(new int[] {564, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(dirtyVolatileIntArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(intArray0, false);
      assertFalse(dirtyVolatileIntArray0.isDirty());
      
      dirtyVolatileIntArray0.setDirty();
      boolean boolean0 = dirtyVolatileIntArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(445, true);
      assertFalse(dirtyVolatileIntArray0.isDirty());
      
      dirtyVolatileIntArray0.setDirty(true);
      assertTrue(dirtyVolatileIntArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(0, false);
      // Undeclared exception!
      try { 
        dirtyVolatileIntArray0.createArray((-1282), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1282
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirtyVolatileIntArray dirtyVolatileIntArray0 = new DirtyVolatileIntArray(1645, true);
      DirtyVolatileIntArray dirtyVolatileIntArray1 = dirtyVolatileIntArray0.createArray(1645, true);
      assertTrue(dirtyVolatileIntArray1.isValid());
      assertEquals(1645, dirtyVolatileIntArray1.getArrayLength());
      assertFalse(dirtyVolatileIntArray1.isDirty());
  }
}
