/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:51:53 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileCharArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileCharArray_ESTest extends DirtyVolatileCharArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      assertFalse(dirtyVolatileCharArray0.isDirty());
      
      dirtyVolatileCharArray0.setDirty(true);
      assertTrue(dirtyVolatileCharArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      dirtyVolatileCharArray0.setDirty();
      assertTrue(dirtyVolatileCharArray0.isDirty());
      
      dirtyVolatileCharArray0.setDirty(false);
      assertFalse(dirtyVolatileCharArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      DirtyVolatileCharArray dirtyVolatileCharArray1 = dirtyVolatileCharArray0.createArray(102, false);
      dirtyVolatileCharArray1.setValue(0, 'B');
      assertFalse(dirtyVolatileCharArray0.isDirty());
      assertTrue(dirtyVolatileCharArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(charArray0, true);
      DirtyVolatileCharArray dirtyVolatileCharArray1 = dirtyVolatileCharArray0.createArray(0, true);
      // Undeclared exception!
      try { 
        dirtyVolatileCharArray1.setValue(0, '8');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      // Undeclared exception!
      try { 
        dirtyVolatileCharArray0.createArray((-2294), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2294
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = null;
      try {
        dirtyVolatileCharArray0 = new DirtyVolatileCharArray((-3103), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3103
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      assertFalse(dirtyVolatileCharArray0.isDirty());
      
      dirtyVolatileCharArray0.setDirty();
      boolean boolean0 = dirtyVolatileCharArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray(0, false);
      boolean boolean0 = dirtyVolatileCharArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DirtyVolatileCharArray dirtyVolatileCharArray0 = new DirtyVolatileCharArray((char[]) null, true);
      // Undeclared exception!
      try { 
        dirtyVolatileCharArray0.setValue((-77), 'n');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileCharArray", e);
      }
  }
}
