/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:12:27 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileDoubleArray_ESTest extends DirtyVolatileDoubleArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(342, true);
      boolean boolean0 = dirtyVolatileDoubleArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray1 = dirtyVolatileDoubleArray0.createArray(2093, true);
      assertFalse(dirtyVolatileDoubleArray0.isDirty());
      assertTrue(dirtyVolatileDoubleArray1.isValid());
      assertEquals(2093, dirtyVolatileDoubleArray1.getArrayLength());
      assertFalse(dirtyVolatileDoubleArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, false);
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray1 = dirtyVolatileDoubleArray0.createArray(0, false);
      assertEquals(0, dirtyVolatileDoubleArray1.getArrayLength());
      assertFalse(dirtyVolatileDoubleArray1.isDirty());
      assertFalse(dirtyVolatileDoubleArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(342, true);
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray1 = dirtyVolatileDoubleArray0.createArray(342, false);
      dirtyVolatileDoubleArray1.setDirty(true);
      assertTrue(dirtyVolatileDoubleArray1.isDirty());
      assertFalse(dirtyVolatileDoubleArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray((double[]) null, true);
      // Undeclared exception!
      try { 
        dirtyVolatileDoubleArray0.setValue(792, 792);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(598, true);
      // Undeclared exception!
      try { 
        dirtyVolatileDoubleArray0.setValue(598, 598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 598 out of bounds for length 598
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray((double[]) null, false);
      // Undeclared exception!
      try { 
        dirtyVolatileDoubleArray0.createArray((-70), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -70
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = null;
      try {
        dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray((-70), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -70
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(342, true);
      assertFalse(dirtyVolatileDoubleArray0.isDirty());
      
      dirtyVolatileDoubleArray0.setValue(0, (-636.813577));
      assertTrue(dirtyVolatileDoubleArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(342, true);
      assertFalse(dirtyVolatileDoubleArray0.isDirty());
      
      dirtyVolatileDoubleArray0.setDirty(true);
      boolean boolean0 = dirtyVolatileDoubleArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray((double[]) null, true);
      assertFalse(dirtyVolatileDoubleArray0.isDirty());
      
      dirtyVolatileDoubleArray0.setDirty();
      assertTrue(dirtyVolatileDoubleArray0.isDirty());
  }
}
