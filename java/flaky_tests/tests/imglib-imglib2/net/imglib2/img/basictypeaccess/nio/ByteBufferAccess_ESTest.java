/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:49:58 GMT 2022
 */

package net.imglib2.img.basictypeaccess.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteBufferAccess_ESTest extends ByteBufferAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(0, false);
      byte[] byteArray0 = new byte[5];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBufferAccess0.duplicateBuffer(byteBuffer0);
      assertNotSame(byteBuffer0, byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess((ByteBuffer) null, false);
      ByteBufferAccess byteBufferAccess1 = byteBufferAccess0.newInstance((ByteBuffer) null, false);
      assertFalse(byteBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)90;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, false);
      byte byte0 = byteBufferAccess0.getValue((byte)1);
      assertEquals((byte)90, byte0);
      assertFalse(byteBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-62);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, true);
      byte byte0 = byteBufferAccess0.getValue((byte)1);
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, true);
      ByteBufferAccess byteBufferAccess1 = byteBufferAccess0.newInstance(byteBuffer0, false);
      assertFalse(byteBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer((ByteBuffer) null, false);
      assertFalse(byteBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(1022);
      ByteBufferAccess byteBufferAccess1 = new ByteBufferAccess(1022);
      byteBufferAccess1.setValues(byteBufferAccess0);
      // Undeclared exception!
      try { 
        byteBufferAccess0.setValues(byteBufferAccess1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      // Undeclared exception!
      try { 
        byteBufferAccess0.setValues(byteBufferAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ByteBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      // Undeclared exception!
      try { 
        byteBufferAccess0.setValue(0, (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ByteBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(1);
      // Undeclared exception!
      try { 
        byteBufferAccess0.setValue(1, (byte)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      // Undeclared exception!
      try { 
        byteBufferAccess0.getValue((-4641));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ByteBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = null;
      try {
        byteBufferAccess0 = new ByteBufferAccess((-4866), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-4866 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = null;
      try {
        byteBufferAccess0 = new ByteBufferAccess((-219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-219 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2054);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, true);
      byteBufferAccess0.setValue(0, (byte)0);
      assertTrue(byteBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, true);
      ByteBufferAccess byteBufferAccess1 = byteBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(byteBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, true);
      int int0 = byteBufferAccess0.getNumBytesPerEntity();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      // Undeclared exception!
      try { 
        byteBufferAccess0.duplicateBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ByteBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, false);
      byteBufferAccess0.getValue((byte)1);
      assertFalse(byteBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(0);
      // Undeclared exception!
      try { 
        byteBufferAccess0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
