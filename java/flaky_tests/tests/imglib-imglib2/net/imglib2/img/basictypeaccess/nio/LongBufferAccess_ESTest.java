/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:39:46 GMT 2022
 */

package net.imglib2.img.basictypeaccess.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LongBufferAccess_ESTest extends LongBufferAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.allocate((-1826), true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-14608 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(1664);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.allocate(1664, false, true);
      assertEquals(1664, longBufferAccess1.getArrayLength());
      assertTrue(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      long[] longArray0 = new long[2];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBuffer longBuffer1 = longBufferAccess0.duplicateBuffer(longBuffer0);
      assertNotSame(longBuffer1, longBuffer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0, false);
      assertFalse(longBufferAccess0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[7];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      longBufferAccess0.setValue((byte)1, 459L);
      assertArrayEquals(new long[] {0L, 459L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LongBuffer longBuffer0 = LongBuffer.allocate(0);
      LongBuffer longBuffer1 = longBuffer0.asReadOnlyBuffer();
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(longBuffer1, false);
      assertFalse(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(longBuffer0, false);
      assertFalse(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance((LongBuffer) null, true);
      assertTrue(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      LongBuffer longBuffer0 = byteBuffer0.asLongBuffer();
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(byteBuffer0, false);
      assertFalse(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(651);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(longBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-120);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(byteBuffer0, true);
      long long0 = longBufferAccess0.getValue((byte)0);
      assertEquals(38280596832649216L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      LongBufferAccess longBufferAccess0 = LongBufferAccess.fromByteBuffer(byteBuffer0, false);
      long[] longArray0 = new long[3];
      longArray0[1] = (-362L);
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(longBuffer0, false);
      long long0 = longBufferAccess1.getValue(1);
      assertFalse(longBufferAccess0.isValid());
      assertFalse(longBufferAccess1.isValid());
      assertEquals((-362L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      LongBufferAccess longBufferAccess1 = longBufferAccess0.allocate(1, false, false);
      assertFalse(longBufferAccess1.isValid());
      assertEquals(1, longBufferAccess1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      LongBufferAccess longBufferAccess1 = longBufferAccess0.allocate(0, true, true);
      assertEquals(8, longBufferAccess1.getNumBytesPerEntity());
      assertTrue(longBufferAccess1.isValid());
      assertEquals(0, longBufferAccess1.getArrayLength());
      assertTrue(longBufferAccess1.isDirect());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.setValues(longBufferAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.setValue((-395), (-395));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.getValue((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(1);
      // Undeclared exception!
      try { 
        longBufferAccess0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LongBufferAccess.fromByteBuffer((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.duplicateBuffer((LongBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = null;
      try {
        longBufferAccess0 = new LongBufferAccess((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = null;
      try {
        longBufferAccess0 = new LongBufferAccess((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = null;
      try {
        longBufferAccess0 = new LongBufferAccess((-347), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-347 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = null;
      try {
        longBufferAccess0 = new LongBufferAccess((-2051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-2051 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      // Undeclared exception!
      try { 
        longBufferAccess0.newInstance((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.LongBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      int int0 = longBufferAccess0.getNumBytesPerEntity();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBufferAccess longBufferAccess0 = LongBufferAccess.fromByteBuffer(byteBuffer0, true);
      assertTrue(longBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(1528, false);
      // Undeclared exception!
      try { 
        longBufferAccess0.allocate((-1137), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1137 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(1926);
      LongBuffer longBuffer0 = longBufferAccess0.setValues(longBufferAccess0);
      assertFalse(longBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(byteBuffer0);
      LongBufferAccess longBufferAccess1 = new LongBufferAccess(1, false);
      // Undeclared exception!
      try { 
        longBufferAccess0.setValues(longBufferAccess1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(8);
      // Undeclared exception!
      try { 
        longBufferAccess0.setValue(8, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(1528, false);
      long long0 = longBufferAccess0.getValue(330);
      assertEquals(0L, long0);
  }
}
