/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:28:23 GMT 2022
 */

package net.imglib2.img.basictypeaccess.nio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleBufferAccess_ESTest extends DoubleBufferAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.allocate(0, true, false);
      assertEquals(8, doubleBufferAccess1.getNumBytesPerEntity());
      assertTrue(doubleBufferAccess1.isDirect());
      assertEquals(0, doubleBufferAccess1.getArrayLength());
      assertFalse(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1264);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0, true);
      assertFalse(doubleBufferAccess0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(1, true);
      assertTrue(doubleBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, false);
      doubleBufferAccess0.setValue(1, 1.0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3964);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      DoubleBuffer doubleBuffer0 = byteBuffer0.asDoubleBuffer();
      DoubleBuffer doubleBuffer1 = doubleBuffer0.asReadOnlyBuffer();
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(doubleBuffer1, true);
      assertTrue(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance((DoubleBuffer) null, false);
      assertFalse(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4064);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(byteBuffer0, true);
      assertTrue(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(byteBuffer0, false);
      assertFalse(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0);
      double double0 = doubleBufferAccess0.getValue(1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      double double0 = doubleBufferAccess0.getValue(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1264);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, true);
      assertTrue(doubleBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      assertFalse(doubleBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1639);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      assertFalse(doubleBufferAccess0.isValid());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(0);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.allocate(0, false, false);
      assertEquals(0, doubleBufferAccess1.getArrayLength());
      assertFalse(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(425);
      DoubleBufferAccess doubleBufferAccess1 = new DoubleBufferAccess(3106);
      // Undeclared exception!
      try { 
        doubleBufferAccess0.setValues(doubleBufferAccess1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapDoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.setValues(doubleBufferAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.setValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.getValue(74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(1);
      // Undeclared exception!
      try { 
        doubleBufferAccess0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapDoubleBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.duplicateBuffer((DoubleBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.allocate((-19), false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-19 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = null;
      try {
        doubleBufferAccess0 = new DoubleBufferAccess((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = null;
      try {
        doubleBufferAccess0 = new DoubleBufferAccess((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = null;
      try {
        doubleBufferAccess0 = new DoubleBufferAccess((-20), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-20 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = null;
      try {
        doubleBufferAccess0 = new DoubleBufferAccess((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-1 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleBufferAccess.fromByteBuffer((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3964);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      int int0 = doubleBufferAccess0.getNumBytesPerEntity();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3964);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.allocate(3964, false, true);
      assertTrue(doubleBufferAccess1.isValid());
      assertEquals(3964, doubleBufferAccess1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(11);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(11);
      DoubleBuffer doubleBuffer0 = byteBuffer0.asDoubleBuffer();
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(doubleBuffer0, false);
      assertFalse(doubleBufferAccess1.isValid());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      // Undeclared exception!
      try { 
        doubleBufferAccess0.newInstance((ByteBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0);
      double double0 = doubleBufferAccess0.getValue(1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleBuffer doubleBuffer0 = DoubleBuffer.wrap(doubleArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0);
      // Undeclared exception!
      try { 
        doubleBufferAccess0.setValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3964);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      DoubleBuffer doubleBuffer0 = byteBuffer0.asDoubleBuffer();
      DoubleBuffer doubleBuffer1 = doubleBufferAccess0.duplicateBuffer(doubleBuffer0);
      assertEquals(495, doubleBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(425);
      DoubleBuffer doubleBuffer0 = doubleBufferAccess0.setValues(doubleBufferAccess0);
      assertEquals(0, doubleBuffer0.remaining());
  }
}
