/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:41:50 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyLongArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyLongArray_ESTest extends DirtyLongArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      assertFalse(dirtyLongArray0.isDirty());
      
      dirtyLongArray0.setDirty(true);
      assertTrue(dirtyLongArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray((long[]) null);
      // Undeclared exception!
      try { 
        dirtyLongArray0.setValue(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      DirtyLongArray dirtyLongArray1 = dirtyLongArray0.createArray(0);
      // Undeclared exception!
      try { 
        dirtyLongArray1.setValue(0, 1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(1);
      // Undeclared exception!
      try { 
        dirtyLongArray0.createArray((-402));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -402
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = null;
      try {
        dirtyLongArray0 = new DirtyLongArray((-2826));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2826
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      boolean boolean0 = dirtyLongArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      assertFalse(dirtyLongArray0.isDirty());
      
      dirtyLongArray0.setValue(0, 1L);
      assertTrue(dirtyLongArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      assertFalse(dirtyLongArray0.isDirty());
      
      dirtyLongArray0.setDirty();
      boolean boolean0 = dirtyLongArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(820);
      DirtyLongArray dirtyLongArray1 = dirtyLongArray0.createArray(820);
      assertFalse(dirtyLongArray1.isDirty());
      assertEquals(820, dirtyLongArray1.getArrayLength());
  }
}
