/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:50:28 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyFloatArray_ESTest extends DirtyFloatArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(0);
      dirtyFloatArray0.dirty = true;
      dirtyFloatArray0.setDirty(false);
      assertFalse(dirtyFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(0);
      dirtyFloatArray0.dirty = true;
      boolean boolean0 = dirtyFloatArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1713);
      DirtyFloatArray dirtyFloatArray1 = dirtyFloatArray0.createArray(1006);
      assertEquals(1006, dirtyFloatArray1.getArrayLength());
      assertFalse(dirtyFloatArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray((float[]) null);
      // Undeclared exception!
      try { 
        dirtyFloatArray0.setValue((-20), (-20));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(857);
      // Undeclared exception!
      try { 
        dirtyFloatArray0.setValue(857, 857);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 857 out of bounds for length 857
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1713);
      // Undeclared exception!
      try { 
        dirtyFloatArray0.createArray((-2361));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2361
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = null;
      try {
        dirtyFloatArray0 = new DirtyFloatArray((-3784));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3784
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1713);
      DirtyFloatArray dirtyFloatArray1 = dirtyFloatArray0.createArray(0);
      assertEquals(0, dirtyFloatArray1.getArrayLength());
      assertFalse(dirtyFloatArray1.isDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1713);
      assertFalse(dirtyFloatArray0.isDirty());
      
      dirtyFloatArray0.setDirty();
      assertTrue(dirtyFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1713);
      assertFalse(dirtyFloatArray0.isDirty());
      
      dirtyFloatArray0.setValue(0, 1713.0F);
      assertTrue(dirtyFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[] floatArray0 = new float[0];
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(floatArray0);
      boolean boolean0 = dirtyFloatArray0.isDirty();
      assertFalse(boolean0);
  }
}
