/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:10:11 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VolatileFloatArray_ESTest extends VolatileFloatArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      VolatileFloatArray volatileFloatArray1 = volatileFloatArray0.createArray(0, true);
      assertTrue(volatileFloatArray1.isValid());
      assertEquals(0, volatileFloatArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      VolatileFloatArray volatileFloatArray1 = volatileFloatArray0.createArray(1, false);
      assertFalse(volatileFloatArray1.isValid());
      assertEquals(1, volatileFloatArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = null;
      try {
        volatileFloatArray0 = new VolatileFloatArray((-1268), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1268
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      float[] floatArray0 = new float[0];
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(floatArray0, false);
      assertFalse(volatileFloatArray0.isValid());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      // Undeclared exception!
      try { 
        volatileFloatArray0.createArray((-775), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -775
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }
}
