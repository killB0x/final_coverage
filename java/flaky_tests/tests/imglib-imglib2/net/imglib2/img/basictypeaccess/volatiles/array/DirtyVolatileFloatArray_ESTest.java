/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:18:29 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileFloatArray_ESTest extends DirtyVolatileFloatArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray((float[]) null, false);
      assertFalse(dirtyVolatileFloatArray0.isDirty());
      
      dirtyVolatileFloatArray0.setDirty(true);
      assertTrue(dirtyVolatileFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[] floatArray0 = new float[3];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      dirtyVolatileFloatArray0.setValue(0, 1558.1F);
      assertArrayEquals(new float[] {1558.1F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(dirtyVolatileFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[] floatArray0 = new float[3];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      assertFalse(dirtyVolatileFloatArray0.isDirty());
      
      dirtyVolatileFloatArray0.dirty = true;
      boolean boolean0 = dirtyVolatileFloatArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, false);
      DirtyVolatileFloatArray dirtyVolatileFloatArray1 = dirtyVolatileFloatArray0.createArray(0, true);
      assertFalse(dirtyVolatileFloatArray1.isDirty());
      assertEquals(0, dirtyVolatileFloatArray1.getArrayLength());
      assertTrue(dirtyVolatileFloatArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, false);
      DirtyVolatileFloatArray dirtyVolatileFloatArray1 = dirtyVolatileFloatArray0.createArray(0, false);
      assertFalse(dirtyVolatileFloatArray1.isDirty());
      assertEquals(0, dirtyVolatileFloatArray1.getArrayLength());
      assertFalse(dirtyVolatileFloatArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, true);
      // Undeclared exception!
      try { 
        dirtyVolatileFloatArray0.createArray((-1774), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1774
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = null;
      try {
        dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray((-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[] floatArray0 = new float[3];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      assertFalse(dirtyVolatileFloatArray0.isDirty());
      
      dirtyVolatileFloatArray0.setDirty();
      assertTrue(dirtyVolatileFloatArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[] floatArray0 = new float[3];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      boolean boolean0 = dirtyVolatileFloatArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[] floatArray0 = new float[6];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      DirtyVolatileFloatArray dirtyVolatileFloatArray1 = dirtyVolatileFloatArray0.createArray(1, false);
      assertFalse(dirtyVolatileFloatArray1.isDirty());
      assertFalse(dirtyVolatileFloatArray0.isDirty());
      assertFalse(dirtyVolatileFloatArray1.isValid());
      assertEquals(1, dirtyVolatileFloatArray1.getArrayLength());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray((float[]) null, false);
      // Undeclared exception!
      try { 
        dirtyVolatileFloatArray0.setValue((-3697), (-3697));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(995, false);
      // Undeclared exception!
      try { 
        dirtyVolatileFloatArray0.setValue(995, 995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 995 out of bounds for length 995
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray", e);
      }
  }
}
