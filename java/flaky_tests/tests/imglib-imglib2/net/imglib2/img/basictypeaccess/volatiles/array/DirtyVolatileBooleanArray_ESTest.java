/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:14:30 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileBooleanArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileBooleanArray_ESTest extends DirtyVolatileBooleanArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(1597, true);
      assertFalse(dirtyVolatileBooleanArray0.isDirty());
      
      dirtyVolatileBooleanArray0.setValue(624, false);
      assertTrue(dirtyVolatileBooleanArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(1597, true);
      dirtyVolatileBooleanArray0.dirty = true;
      boolean boolean0 = dirtyVolatileBooleanArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(booleanArray0, true);
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray1 = dirtyVolatileBooleanArray0.createArray(0, true);
      // Undeclared exception!
      try { 
        dirtyVolatileBooleanArray1.setValue(0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileBooleanArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(0, false);
      // Undeclared exception!
      try { 
        dirtyVolatileBooleanArray0.createArray((-336), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -336
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractBooleanArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = null;
      try {
        dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray((-1), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractBooleanArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(1597, true);
      boolean boolean0 = dirtyVolatileBooleanArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(1597, true);
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray1 = dirtyVolatileBooleanArray0.createArray(1597, false);
      assertFalse(dirtyVolatileBooleanArray1.isDirty());
      assertEquals(1597, dirtyVolatileBooleanArray1.getArrayLength());
      assertFalse(dirtyVolatileBooleanArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(0, true);
      assertFalse(dirtyVolatileBooleanArray0.isDirty());
      
      dirtyVolatileBooleanArray0.setDirty();
      assertTrue(dirtyVolatileBooleanArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray(booleanArray0, false);
      assertFalse(dirtyVolatileBooleanArray0.isDirty());
      
      dirtyVolatileBooleanArray0.setDirty(true);
      assertTrue(dirtyVolatileBooleanArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DirtyVolatileBooleanArray dirtyVolatileBooleanArray0 = new DirtyVolatileBooleanArray((boolean[]) null, true);
      // Undeclared exception!
      try { 
        dirtyVolatileBooleanArray0.setValue(0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileBooleanArray", e);
      }
  }
}
