/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:34:45 GMT 2022
 */

package net.imglib2.img.basictypeaccess.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyDoubleArray_ESTest extends DirtyDoubleArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      assertFalse(dirtyDoubleArray0.isDirty());
      
      dirtyDoubleArray0.setDirty(true);
      boolean boolean0 = dirtyDoubleArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(1348);
      // Undeclared exception!
      try { 
        dirtyDoubleArray0.createArray((-1125));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1125
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = null;
      try {
        dirtyDoubleArray0 = new DirtyDoubleArray((-36));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -36
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      assertFalse(dirtyDoubleArray0.isDirty());
      
      dirtyDoubleArray0.setDirty();
      assertTrue(dirtyDoubleArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      dirtyDoubleArray0.setValue(0, (-1570.431147));
      assertArrayEquals(new double[] {(-1570.431147), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      DirtyDoubleArray dirtyDoubleArray1 = dirtyDoubleArray0.createArray(0);
      // Undeclared exception!
      try { 
        dirtyDoubleArray1.setValue(0, 1827.6918491074);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray((double[]) null);
      // Undeclared exception!
      try { 
        dirtyDoubleArray0.setValue(59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(3250);
      boolean boolean0 = dirtyDoubleArray0.isDirty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(1139);
      DirtyDoubleArray dirtyDoubleArray1 = dirtyDoubleArray0.createArray(1139);
      assertEquals(1139, dirtyDoubleArray1.getArrayLength());
      assertFalse(dirtyDoubleArray1.isDirty());
  }
}
