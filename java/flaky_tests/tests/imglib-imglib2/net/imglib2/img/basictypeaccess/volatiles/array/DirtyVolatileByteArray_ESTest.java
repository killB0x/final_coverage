/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:59:20 GMT 2022
 */

package net.imglib2.img.basictypeaccess.volatiles.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DirtyVolatileByteArray_ESTest extends DirtyVolatileByteArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      assertFalse(dirtyVolatileByteArray0.isDirty());
      
      dirtyVolatileByteArray0.setDirty(true);
      assertTrue(dirtyVolatileByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray((int) (byte)94, false);
      assertFalse(dirtyVolatileByteArray1.isDirty());
      assertEquals(94, dirtyVolatileByteArray1.getArrayLength());
      assertFalse(dirtyVolatileByteArray0.isDirty());
      assertFalse(dirtyVolatileByteArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, true);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray((int) (byte)0, true);
      assertFalse(dirtyVolatileByteArray0.isDirty());
      assertEquals(0, dirtyVolatileByteArray1.getArrayLength());
      assertFalse(dirtyVolatileByteArray1.isDirty());
      assertTrue(dirtyVolatileByteArray1.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray((byte[]) null, true);
      // Undeclared exception!
      try { 
        dirtyVolatileByteArray0.setValue(2780, (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      // Undeclared exception!
      try { 
        dirtyVolatileByteArray0.setValue((-3457), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3457 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(2376, true);
      // Undeclared exception!
      try { 
        dirtyVolatileByteArray0.createArray((-1036), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1036
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = null;
      try {
        dirtyVolatileByteArray0 = new DirtyVolatileByteArray((-1036), true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1036
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      assertFalse(dirtyVolatileByteArray0.isDirty());
      
      dirtyVolatileByteArray0.setDirty();
      boolean boolean0 = dirtyVolatileByteArray0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      assertFalse(dirtyVolatileByteArray0.isDirty());
      
      dirtyVolatileByteArray0.setValue((byte)0, (byte)0);
      assertTrue(dirtyVolatileByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray(568, true);
      assertEquals(568, dirtyVolatileByteArray1.getArrayLength());
      assertTrue(dirtyVolatileByteArray1.isValid());
      assertFalse(dirtyVolatileByteArray1.isDirty());
      assertFalse(dirtyVolatileByteArray0.isDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, false);
      boolean boolean0 = dirtyVolatileByteArray0.isDirty();
      assertFalse(boolean0);
  }
}
