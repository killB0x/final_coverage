/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:23:09 GMT 2022
 */

package net.imglib2.img;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPointSample;
import net.imglib2.img.Img;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.NativeImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.BooleanAccess;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileLongArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.planar.PlanarImgFactory;
import net.imglib2.img.sparse.FloatNtree;
import net.imglib2.img.sparse.NtreeImgFactory;
import net.imglib2.type.label.BasePairBitType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileIntType;
import net.imglib2.type.volatiles.VolatileLongType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImgFactory_ESTest extends ImgFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      ((ImgFactory)arrayImgFactory0).cache((BitType) null);
      ((ImgFactory)arrayImgFactory0).cache((BitType) null);
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(84);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      VolatileIntType volatileIntType0 = new VolatileIntType();
      VolatileIntType volatileIntType1 = volatileIntType0.copy();
      ImgFactory<VolatileIntType> imgFactory0 = listImgFactory0.imgFactory(volatileIntType1);
      int[] intArray0 = new int[4];
      intArray0[0] = 84;
      intArray0[1] = 84;
      intArray0[2] = 84;
      intArray0[3] = 84;
      // Undeclared exception!
      imgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      long[] longArray0 = new long[2];
      longArray0[0] = 4095L;
      longArray0[1] = 197L;
      // Undeclared exception!
      listImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 606;
      Integer integer0 = new Integer(606);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 606;
      longArray0[1] = (long) 606;
      longArray0[2] = (long) 606;
      // Undeclared exception!
      listImgFactory0.create(longArray0, integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell0);
      PointSampleList<VolatileDoubleType> pointSampleList0 = new PointSampleList<VolatileDoubleType>(954);
      Point point0 = pointSampleList0.minAsPoint();
      FinalInterval finalInterval0 = new FinalInterval(point0, point0);
      Cell<Object> cell1 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      listImgFactory0.create((Dimensions) finalInterval0, cell1);
      // Undeclared exception!
      try { 
        listImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell0);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      FinalInterval finalInterval0 = new FinalInterval(pointSample0, pointSample0);
      listImgFactory0.create(supplier0, (Dimensions) finalInterval0);
      // Undeclared exception!
      try { 
        listImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      long[] longArray0 = new long[1];
      Object object0 = new Object();
      listImgFactory0.imgFactory(object0);
      longArray0[0] = 4294967295L;
      // Undeclared exception!
      try { 
        listImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      doReturn((-5)).when(cell0).numDimensions();
      Cell<Object> cell1 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell1);
      Cell<Object> cell2 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(cell2).when(supplier0).get();
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, (Dimensions) cell0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -5
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cell0).numDimensions();
      Cell<Object> cell1 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell1);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, (Dimensions) cell0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        listImgFactory0.create(intArray0, (Cell<Object>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = new UnsignedShortType(1);
      UnsignedShortType unsignedShortType1 = unsignedShortType0.createVariable();
      UnsignedShortType unsignedShortType2 = unsignedShortType1.copy();
      NtreeImgFactory<UnsignedShortType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedShortType>(unsignedShortType2);
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell0);
      Cell<Object> cell1 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(cell1).toString();
      ListImgFactory<Cell<Object>> listImgFactory1 = new ListImgFactory<Cell<Object>>(cell1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      Img<Cell<Object>> img0 = listImgFactory1.create(longArray0);
      assertEquals(1L, img0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      // Undeclared exception!
      try { 
        arrayImgFactory0.imgFactory((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[0];
      Cell<Object> cell0 = null;
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create(longArray0, (Cell<Object>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cell<Object> cell0 = null;
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 50;
      intArray0[1] = 4422;
      intArray0[2] = 31;
      int int0 = 976;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 31;
      longArray0[1] = (long) 31;
      longArray0[2] = (long) 31;
      longArray0[3] = (long) 4422;
      longArray0[4] = (long) 976;
      longArray0[5] = (long) 4422;
      longArray0[6] = (long) 50;
      longArray0[7] = (long) 4422;
      longArray0[8] = (long) 976;
      // Undeclared exception!
      listImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      float[] floatArray0 = new float[9];
      long[] longArray0 = new long[7];
      longArray0[0] = 947L;
      longArray0[1] = 1L;
      longArray0[2] = (-1173L);
      longArray0[3] = (-1293L);
      longArray0[4] = (-1605L);
      longArray0[5] = 1508L;
      longArray0[6] = (-593L);
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, (-3684.0642F));
      FloatNtree floatNtree1 = floatNtree0.createInstance(longArray0);
      floatNtree1.getValue(0);
      ListImgFactory<FloatNtree> listImgFactory0 = new ListImgFactory<FloatNtree>(floatNtree1);
      // Undeclared exception!
      listImgFactory0.create(longArray0, floatNtree0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1105L;
      longArray0[1] = 1L;
      Integer integer0 = new Integer((-1));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1105L;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1105L;
      floatArray0[3] = (float) (-1);
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier0, floatArray0);
      listImg0.min((Positionable) realPointSample0);
      ListImgFactory<Object> listImgFactory0 = listImg0.factory();
      listImgFactory0.create((Dimensions) listImg0);
      UnsignedIntType unsignedIntType0 = new UnsignedIntType((-1L));
      UnsignedIntType unsignedIntType1 = unsignedIntType0.duplicateTypeOnSameNativeImg();
      ArrayImgFactory<UnsignedIntType> arrayImgFactory0 = new ArrayImgFactory<UnsignedIntType>(unsignedIntType1);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1441);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 31;
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-1441, -1, -1, -1, -1, 31, -1]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1812);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1812;
      intArray0[1] = 1812;
      intArray0[2] = 1812;
      intArray0[3] = 1812;
      intArray0[4] = 1812;
      intArray0[5] = 1812;
      intArray0[6] = 1812;
      intArray0[7] = 1812;
      intArray0[8] = 1812;
      // Undeclared exception!
      try { 
        listImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1802240000
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[14];
      Cell<Object> cell0 = (Cell<Object>) mock(Cell.class, new ViolatedAssumptionAnswer());
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>(cell0);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      int[] intArray0 = new int[2];
      intArray0[0] = 2114;
      intArray0[1] = 2782;
      // Undeclared exception!
      listImgFactory0.create(supplier0, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1812);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-214);
      intArray0[3] = 1812;
      intArray0[4] = 1812;
      intArray0[5] = 1812;
      intArray0[6] = 1812;
      Img<Integer> img0 = listImgFactory0.create(supplier0, intArray0);
      ImgFactory<Object> imgFactory0 = listImgFactory0.imgFactory((Object) integer0);
      LinkedList<FloatBufferAccess> linkedList0 = new LinkedList<FloatBufferAccess>();
      ARGBType aRGBType0 = new ARGBType();
      aRGBType0.mul(1815.6707341559097);
      aRGBType0.getEntitiesPerPixel();
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(1812);
      UnsignedIntType unsignedIntType1 = unsignedIntType0.createVariable();
      Integer integer1 = new Integer(1812);
      imgFactory0.create((Dimensions) img0, (Object) integer1);
      ListImgFactory<Object> listImgFactory1 = new ListImgFactory<Object>(aRGBType0);
      Integer integer2 = new Integer((-144));
      listImgFactory1.imgFactory((Object) integer2);
      CellImgFactory<UnsignedIntType> cellImgFactory0 = null;
      try {
        cellImgFactory0 = new CellImgFactory<UnsignedIntType>(unsignedIntType1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -214, 0, 1812, 1812, 1812, 1812]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VolatileLongType volatileLongType0 = new VolatileLongType();
      VolatileLongType volatileLongType1 = volatileLongType0.copy();
      PlanarImgFactory<VolatileLongType> planarImgFactory0 = new PlanarImgFactory<VolatileLongType>(volatileLongType1);
      ImgFactory<Object> imgFactory0 = planarImgFactory0.imgFactory((Object) volatileLongType1);
      Integer integer0 = new Integer((-530));
      // Undeclared exception!
      try { 
        imgFactory0.create((long[]) null, (Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Integer cannot be cast to class net.imglib2.type.NativeType (java.lang.Integer is in module java.base of loader 'bootstrap'; net.imglib2.type.NativeType is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @692b42b4)
         //
         verifyException("net.imglib2.img.planar.PlanarImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      Integer integer0 = new Integer(1);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      listImgFactory0.create(longArray0, integer0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        listImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [1, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      ListImgFactory<Object> listImgFactory0 = new ListImgFactory<Object>(object0);
      int[] intArray0 = new int[8];
      intArray0[0] = 900;
      intArray0[1] = (-835);
      intArray0[2] = 0;
      intArray0[3] = 347;
      intArray0[4] = 1;
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      long[] longArray0 = new long[1];
      longArray0[0] = (-2820L);
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2820
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      VolatileUnsignedIntType volatileUnsignedIntType1 = volatileUnsignedIntType0.duplicateTypeOnSameNativeImg();
      VolatileUnsignedIntType volatileUnsignedIntType2 = volatileUnsignedIntType1.createVariable();
      VolatileUnsignedIntType volatileUnsignedIntType3 = volatileUnsignedIntType2.copy();
      ArrayImgFactory<VolatileUnsignedIntType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType3);
      long[] longArray0 = new long[9];
      longArray0[1] = (-988L);
      long long0 = (-381L);
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) finalInterval0, volatileUnsignedIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -988, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      VolatileUnsignedIntType volatileUnsignedIntType1 = volatileUnsignedIntType0.duplicateTypeOnSameNativeImg();
      VolatileUnsignedIntType volatileUnsignedIntType2 = volatileUnsignedIntType1.createVariable();
      VolatileUnsignedIntType volatileUnsignedIntType3 = volatileUnsignedIntType2.copy();
      ArrayImgFactory<VolatileUnsignedIntType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType3);
      long[] longArray0 = new long[9];
      longArray0[0] = 1787L;
      longArray0[1] = (-988L);
      long long0 = (-381L);
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) finalInterval0, volatileUnsignedIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [1787, -988, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[15];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1426);
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1426
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[1];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1855);
      Integer integer0 = new Integer((-1855));
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1855);
      longArray0[1] = 459L;
      longArray0[2] = (long) (-1855);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1855);
      intArray0[1] = (-1855);
      intArray0[2] = (-1855);
      intArray0[3] = (-1855);
      intArray0[4] = (-1855);
      intArray0[5] = (-1855);
      intArray0[6] = (-1855);
      // Undeclared exception!
      listImgFactory0.create(intArray0, (Integer) (-1855));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      Integer integer0 = new Integer(0);
      try { 
        arrayImgFactory0.imgFactory((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.array.ArrayImgFactory: java.lang.Integer does not implement NativeType.
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      Integer integer0 = new Integer(1);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      intArray0[3] = 1;
      Integer integer1 = new Integer(1);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer1);
      listImgFactory0.create(intArray0, (Integer) 1);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(1, true);
      // Undeclared exception!
      try { 
        volatileIntArray0.createArray((-2356), false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2356
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VolatileShortType volatileShortType0 = new VolatileShortType((short)0);
      VolatileShortType volatileShortType1 = volatileShortType0.copy();
      volatileShortType1.createVariable();
      Integer integer0 = Integer.getInteger((String) null, (int) (short)0);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      listImgFactory0.create(supplier0, longArray0);
      Integer integer1 = Integer.getInteger((String) null, 0);
      listImgFactory0.create(longArray0, integer1);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(64);
      NtreeImgFactory<VolatileUnsignedByteType> ntreeImgFactory0 = new NtreeImgFactory<VolatileUnsignedByteType>(volatileUnsignedByteType0);
      Integer integer2 = new Integer(0);
      ImgFactory<Object> imgFactory0 = ntreeImgFactory0.imgFactory((Object) volatileUnsignedByteType0);
      assertNotNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      Supplier<Cell<Object>> supplier0 = (Supplier<Cell<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        listImgFactory0.create(supplier0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      CellImgFactory<BasePairBitType> cellImgFactory0 = new CellImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[9];
      longArray0[0] = 3183L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-2714L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 1723L;
      longArray0[7] = (-13L);
      longArray0[8] = 0L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -1, 1723, -13]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1812;
      Integer integer0 = new Integer(1812);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1812;
      longArray0[1] = (long) 1812;
      longArray0[2] = (long) 1812;
      // Undeclared exception!
      listImgFactory0.create(supplier1, longArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[15];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      listImgFactory0.create(longArray0, (Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((Supplier<Cell<Object>>) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[1];
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(0);
      NtreeImgFactory<UnsignedByteType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedByteType>(unsignedByteType0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ntreeImgFactory0.create(intArray0, unsignedByteType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[1];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((Supplier<Cell<Object>>) null, (Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((Dimensions) null, (Cell<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(1812);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier0).get();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-214);
      intArray0[2] = 1812;
      intArray0[3] = 1812;
      intArray0[4] = 1812;
      intArray0[5] = 1812;
      intArray0[6] = 1812;
      Img<Integer> img0 = listImgFactory0.create(supplier0, intArray0);
      ImgFactory<Object> imgFactory0 = listImgFactory0.imgFactory((Object) integer0);
      ARGBType aRGBType0 = new ARGBType();
      aRGBType0.getEntitiesPerPixel();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      Img<Object> img1 = imgFactory0.create(supplier1, (Dimensions) img0);
      assertEquals(0L, img1.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[15];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 641;
      intArray0[1] = (-356);
      // Undeclared exception!
      try { 
        listImgFactory0.create(intArray0, (Cell<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -228196
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[4];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(0);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      listImgFactory0.create(intArray0, (Integer) 0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ARGBType aRGBType0 = new ARGBType();
      ARGBType aRGBType1 = aRGBType0.createVariable();
      PlanarImgFactory<ARGBType> planarImgFactory0 = new PlanarImgFactory<ARGBType>(aRGBType1);
      IntBufferAccess intBufferAccess0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)11, 67);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[0];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[15];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((long[]) null, (Cell<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.create((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VolatileShortType volatileShortType0 = null;
      ListImgFactory<VolatileShortType> listImgFactory0 = new ListImgFactory<VolatileShortType>((VolatileShortType) null);
      long[] longArray0 = new long[6];
      longArray0[0] = 2147483647L;
      longArray0[1] = (-1L);
      longArray0[2] = 3623L;
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      listImgFactory0.create(longArray0, (VolatileShortType) null);
      listImgFactory0.imgFactory((Object) null);
      int[] intArray0 = new int[0];
      int int0 = 85;
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(85, true);
      VolatileIntType volatileIntType0 = new VolatileIntType(volatileIntArray0);
      // Undeclared exception!
      try { 
        volatileIntType0.compareTo((VolatileIntType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeBoolType nativeBoolType0 = new NativeBoolType(false);
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>(nativeBoolType0);
      ImgFactory<Object> imgFactory0 = arrayImgFactory0.imgFactory((Object) nativeBoolType0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(nativeBoolType0).when(supplier0).get();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        imgFactory0.create(supplier0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      ((ImgFactory)arrayImgFactory0).cache((BitType) null);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      BitType bitType0 = new BitType(dirtyVolatileLongArray0);
      Fraction fraction0 = bitType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
      VolatileLongType volatileLongType0 = new VolatileLongType(3510L);
      CellImgFactory<VolatileLongType> cellImgFactory0 = new CellImgFactory<VolatileLongType>(volatileLongType0);
      PlanarImgFactory<ARGBType> planarImgFactory0 = new PlanarImgFactory<ARGBType>((ARGBType) null);
      planarImgFactory0.type();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      ((ImgFactory)planarImgFactory0).cache((ARGBType) null);
      intArray0[0] = 9;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 1;
      intArray0[5] = 9;
      intArray0[6] = 9;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 541;
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(541);
      NtreeImgFactory<VolatileUnsignedByteType> ntreeImgFactory0 = new NtreeImgFactory<VolatileUnsignedByteType>(volatileUnsignedByteType0);
      Supplier<VolatileUnsignedByteType> supplier0 = (Supplier<VolatileUnsignedByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedByteType0).when(supplier0).get();
      ImgFactory<VolatileUnsignedByteType> imgFactory0 = ntreeImgFactory0.imgFactory(supplier0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 541;
      longArray0[1] = (long) 541;
      Integer integer0 = new Integer(541);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(supplier1).get();
      try { 
        imgFactory0.imgFactory(supplier1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.sparse.NtreeImgFactory: java.lang.Integer does not implement NativeType.
         //
         verifyException("net.imglib2.img.sparse.NtreeImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      BitType bitType0 = new BitType(dirtyVolatileLongArray0);
      dirtyVolatileLongArray0.createArray(9);
      Fraction fraction0 = bitType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
      VolatileLongType volatileLongType0 = new VolatileLongType(1);
      CellImgFactory<VolatileLongType> cellImgFactory0 = new CellImgFactory<VolatileLongType>(volatileLongType0);
      ImgFactory<Object> imgFactory0 = cellImgFactory0.imgFactory((Object) volatileLongType0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(fraction0).when(supplier0).get();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 9;
      dirtyVolatileLongArray0.createArray(1);
      intArray0[2] = 9;
      // Undeclared exception!
      try { 
        imgFactory0.create(supplier0, intArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.util.Fraction cannot be cast to class net.imglib2.type.NativeType (net.imglib2.util.Fraction and net.imglib2.type.NativeType are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @692b42b4)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long[] longArray0 = new long[2];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        listImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      BitType bitType0 = new BitType(dirtyVolatileLongArray0);
      int int0 = 9;
      dirtyVolatileLongArray0.createArray(9);
      Fraction fraction0 = bitType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
      VolatileLongType volatileLongType0 = new VolatileLongType(3510L);
      CellImgFactory<VolatileLongType> cellImgFactory0 = new CellImgFactory<VolatileLongType>(volatileLongType0);
      ARGBType aRGBType0 = null;
      PlanarImgFactory<ARGBType> planarImgFactory0 = new PlanarImgFactory<ARGBType>((ARGBType) null);
      planarImgFactory0.type();
      // Undeclared exception!
      try { 
        cellImgFactory0.imgFactory((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 541;
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(541);
      NtreeImgFactory<VolatileUnsignedByteType> ntreeImgFactory0 = new NtreeImgFactory<VolatileUnsignedByteType>(volatileUnsignedByteType0);
      Supplier<VolatileUnsignedByteType> supplier0 = (Supplier<VolatileUnsignedByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedByteType0).when(supplier0).get();
      ImgFactory<VolatileUnsignedByteType> imgFactory0 = ntreeImgFactory0.imgFactory(supplier0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 541;
      longArray0[1] = (long) 541;
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      // Undeclared exception!
      try { 
        imgFactory0.imgFactory(supplier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, true);
      BitType bitType0 = new BitType(dirtyVolatileLongArray0);
      dirtyVolatileLongArray0.createArray(9);
      Fraction fraction0 = bitType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
      VolatileLongType volatileLongType0 = new VolatileLongType(1);
      CellImgFactory<VolatileLongType> cellImgFactory0 = new CellImgFactory<VolatileLongType>(volatileLongType0);
      ImgFactory<Object> imgFactory0 = cellImgFactory0.imgFactory((Object) volatileLongType0);
      VolatileLongArray volatileLongArray0 = new VolatileLongArray(longArray0, true);
      VolatileLongType volatileLongType1 = new VolatileLongType(volatileLongArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileLongType1).when(supplier0).get();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 9;
      intArray0[2] = 9;
      imgFactory0.create(supplier0, intArray0);
      Object object0 = imgFactory0.type();
      assertSame(volatileLongType0, object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(1);
      ArrayImgFactory<VolatileUnsignedIntType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      arrayImgFactory0.create(intArray0);
      int int0 = (-1883);
      Integer integer0 = new Integer((-1883));
      try { 
        arrayImgFactory0.imgFactory(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.array.ArrayImgFactory: java.lang.Integer does not implement NativeType.
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[10];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      // Undeclared exception!
      try { 
        listImgFactory0.imgFactory((Supplier<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 1;
      UnsignedShortType unsignedShortType0 = new UnsignedShortType(1);
      UnsignedShortType unsignedShortType1 = unsignedShortType0.createVariable();
      UnsignedShortType unsignedShortType2 = unsignedShortType1.copy();
      NtreeImgFactory<UnsignedShortType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedShortType>(unsignedShortType2);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      unsignedShortType2.setReal((double) 1);
      // Undeclared exception!
      try { 
        ntreeImgFactory0.imgFactory(supplier0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[15];
      ListImgFactory<Cell<Object>> listImgFactory0 = new ListImgFactory<Cell<Object>>((Cell<Object>) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-775);
      intArray0[1] = 1882;
      // Undeclared exception!
      try { 
        listImgFactory0.create((Supplier<Cell<Object>>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.ImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0, (BitType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[0];
      NativeBoolType nativeBoolType0 = new NativeBoolType((NativeImg<?, ? extends BooleanAccess>) null);
      NativeBoolType nativeBoolType1 = nativeBoolType0.createVariable();
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>(nativeBoolType1);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0, nativeBoolType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(1812);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>(integer0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-214);
      intArray0[2] = 1812;
      intArray0[3] = 1812;
      intArray0[4] = 1812;
      intArray0[5] = 1812;
      intArray0[6] = 1812;
      listImgFactory0.create(supplier0, intArray0);
      listImgFactory0.imgFactory((Object) integer0);
      LinkedList<FloatBufferAccess> linkedList0 = new LinkedList<FloatBufferAccess>();
      ARGBType aRGBType0 = new ARGBType();
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      PlanarImg<VolatileUnsignedLongType, FloatBufferAccess> planarImg0 = null;
      try {
        planarImg0 = new PlanarImg<VolatileUnsignedLongType, FloatBufferAccess>(linkedList0, (long[]) null, fraction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer.getInteger((String) null);
      ListImgFactory<Integer> listImgFactory0 = new ListImgFactory<Integer>((Integer) null);
      Object object0 = new Object();
      ImgFactory<Object> imgFactory0 = listImgFactory0.imgFactory(object0);
      imgFactory0.imgFactory((Object) listImgFactory0);
      ArrayImgFactory<Unsigned4BitType> arrayImgFactory0 = new ArrayImgFactory<Unsigned4BitType>((Unsigned4BitType) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      nativeBoolType0.getPowerDouble();
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>(nativeBoolType0);
      CellImgFactory<NativeBoolType> cellImgFactory0 = new CellImgFactory<NativeBoolType>(nativeBoolType0);
      try { 
        cellImgFactory0.imgFactory((Object) arrayImgFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.cell.CellImgFactory: net.imglib2.img.array.ArrayImgFactory does not implement NativeType.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>((BitType) null);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }
}
