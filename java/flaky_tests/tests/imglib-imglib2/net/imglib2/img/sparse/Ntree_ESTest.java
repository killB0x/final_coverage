/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:53:46 GMT 2022
 */

package net.imglib2.img.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import net.imglib2.img.sparse.Ntree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ntree_ESTest extends Ntree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      ntree1.createNodeWithValue(longArray0, integer1);
      Integer integer2 = new Integer((-373));
      ntree1.createNodeWithValue(longArray0, integer2);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.getNode(longArray0);
      ntree0.root = ntree_NtreeNode1;
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree0.createNode(longArray0);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree0);
      ntree2.getNode(longArray0);
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = new Ntree.NtreeNode<Object>(ntree_NtreeNode2, ntree2);
      Integer integer3 = new Integer((-373));
      ntree_NtreeNode4.setValue(integer3);
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 3);
      ntree_NtreeNodeArray0[0] = ntree_NtreeNode4;
      ntree_NtreeNodeArray0[1] = ntree_NtreeNode4;
      ntree_NtreeNodeArray0[2] = ntree_NtreeNode2;
      ntree_NtreeNode4.setChildren(ntree_NtreeNodeArray0);
      ntree_NtreeNode4.getValue();
      ntree_NtreeNode4.setValue(ntree_NtreeNode1);
      ntree2.mergeUpwards(ntree0.root);
      ntree_NtreeNode3.getValue();
      Ntree.NtreeNode<Integer> ntree_NtreeNode5 = new Ntree.NtreeNode<Integer>(ntree0.root, integer2);
      ntree2.mergeUpwards(ntree_NtreeNode5);
      ntree_NtreeNode0.setChildren((Ntree.NtreeNode<Integer>[]) null);
      Ntree<Integer> ntree3 = new Ntree<Integer>(ntree0);
      // Undeclared exception!
      try { 
        ntree3.createNodeWithValue(longArray0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      int int0 = (-1904);
      Integer integer0 = new Integer((-1893));
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1904);
      longArray0[1] = (long) (-1904);
      longArray0[2] = (long) (-1904);
      longArray0[3] = (long) (-1904);
      longArray0[4] = (long) (-1904);
      longArray0[5] = (long) (-1904);
      longArray0[6] = (long) (-1904);
      longArray0[7] = (long) (-1904);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer((-1893));
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.createNodeWithValue(longArray0, integer1);
      ntree1.mergeUpwards(ntree_NtreeNode1);
      int int1 = 28;
      Integer integer2 = new Integer(1217);
      // Undeclared exception!
      ntree0.createNodeWithValue(longArray0, integer2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 204L;
      Integer integer0 = new Integer((-404));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      ntree1.createNodeWithValue(longArray0, integer1);
      Integer integer2 = new Integer((-373));
      ntree1.createNodeWithValue(longArray0, integer2);
      ntree1.getRootNode();
      ntree0.getNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      long[] longArray1 = new long[6];
      longArray1[0] = 1510L;
      longArray1[1] = (long) 0;
      longArray1[2] = (-2178L);
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray1, integer0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.createNodeWithValue(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      ntree1.mergeUpwards(ntree_NtreeNode0);
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Integer integer1 = new Integer(2147481654);
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = new Ntree.NtreeNode<Object>(ntree_NtreeNode1, integer1);
      ntree_NtreeNode2.hasChildren();
      // Undeclared exception!
      try { 
        ntree0.createNode((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1947L);
      longArray0[1] = 131072L;
      longArray0[2] = 285L;
      longArray0[3] = 1L;
      longArray0[4] = 1707L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = (-574L);
      Integer integer0 = new Integer((-1201));
      Integer integer1 = Integer.getInteger("net.imglib2.img.sparse.Ntree", integer0);
      Integer integer2 = Integer.getInteger("8]MJa", integer1);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer2);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      int int0 = (-1);
      long[] longArray1 = new long[0];
      Integer integer3 = new Integer((-1));
      // Undeclared exception!
      try { 
        ntree1.createNodeWithValue(longArray1, integer3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3551);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3551;
      longArray0[4] = (long) 3551;
      longArray0[3] = 45L;
      longArray0[4] = 45L;
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      ntree1.getNode(longArray0);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(3551);
      ntree2.createNodeWithValue(longArray0, integer1);
      ntree2.createNodeWithValue(longArray0, integer0);
      Integer integer2 = new Integer(2127);
      Integer integer3 = new Integer(2127);
      ntree0.createNodeWithValue(longArray0, integer3);
      ntree0.getRootNode();
      long[] longArray1 = new long[4];
      longArray1[0] = 45L;
      longArray1[2] = (long) 2127;
      longArray1[3] = (long) 2127;
      // Undeclared exception!
      try { 
        ntree0.getNode(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer.valueOf((-373));
      Integer integer0 = new Integer((-3850));
      Integer integer1 = new Integer((-373));
      Integer integer2 = new Integer((-373));
      long[] longArray0 = new long[5];
      longArray0[0] = 205L;
      longArray0[1] = 205L;
      longArray0[2] = (long) (-3850);
      longArray0[3] = 205L;
      longArray0[4] = (long) (-3850);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer2);
      Integer integer3 = new Integer((-3850));
      ntree0.createNodeWithValue(longArray0, integer3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3551);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3551;
      longArray0[1] = (long) (-2718);
      longArray0[4] = (long) 3551;
      longArray0[3] = 45L;
      longArray0[4] = 45L;
      Integer integer1 = new Integer(1);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer1);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      ntree1.getNode(longArray0);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree0);
      Integer integer2 = new Integer(3551);
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree2.createNodeWithValue(longArray0, integer2);
      ntree1.createNode(longArray0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree0.getRootNode();
      ntree1.createNode(longArray0);
      ntree_NtreeNode1.hasChildren();
      ntree2.mergeUpwards(ntree_NtreeNode2);
      ntree0.createNodeWithValue(longArray0, integer0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree2.getNode(longArray0);
      ntree1.getRootNode();
      ntree_NtreeNode3.hasChildren();
      Ntree<Integer> ntree3 = new Ntree<Integer>(ntree1);
      ntree3.createNode(longArray0);
      Object object0 = new Object();
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, object0);
      Object object1 = new Object();
      ntree_NtreeNode4.setValue(ntree0);
      ntree0.createNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 165L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      ntree1.createNodeWithValue(longArray0, integer1);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      Integer integer0 = new Integer((-2718));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.root;
      ntree0.root = ntree_NtreeNode0;
      ntree1.createNodeWithValue(longArray0, integer0);
      ntree1.createNode(longArray0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree1.createNode(longArray0);
      ntree1.root = ntree_NtreeNode1;
      ntree_NtreeNode1.hasChildren();
      ntree1.getRootNode();
      long[] longArray1 = new long[6];
      longArray1[0] = 45L;
      longArray1[1] = 45L;
      longArray1[2] = 45L;
      longArray1[3] = 45L;
      longArray1[4] = 45L;
      ntree1.createNodeWithValue(longArray0, integer0);
      longArray1[5] = 45L;
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree1.root;
      ntree1.getRootNode();
      ntree0.root.hasChildren();
      ntree1.createNode(longArray0);
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode5 = new Ntree.NtreeNode<Object>(ntree_NtreeNode4, ntree_NtreeNode2);
      ntree0.createNode(longArray1);
      Object object0 = new Object();
      ntree_NtreeNode5.hasChildren();
      long[] longArray2 = new long[1];
      longArray2[0] = 708L;
      ntree1.createNodeWithValue(longArray2, integer0);
      ntree0.createNodeWithValue(longArray1, integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      ntree0.createNodeWithValue(longArray0, integer0);
      Integer integer2 = new Integer(1);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree1);
      int int0 = (-1492);
      Integer integer3 = new Integer((-1492));
      // Undeclared exception!
      ntree2.createNodeWithValue(longArray0, integer3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-1893));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, (Integer) null);
      // Undeclared exception!
      try { 
        ntree0.createNodeWithValue(longArray0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 2145L;
      longArray0[2] = 2200L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = 290L;
      longArray0[6] = 958L;
      Integer integer0 = new Integer(0);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      ntree0.createNode(longArray0);
      ntree0.createNodeWithValue(longArray0, integer0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.createNode(longArray0);
      ntree0.createNode(longArray0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.getNode(longArray0);
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode3 = new Ntree.NtreeNode<Object>(ntree_NtreeNode2, ntree_NtreeNode1);
      Ntree.NtreeNode<Integer> ntree_NtreeNode4 = ntree0.getNode(longArray0);
      Object object0 = ntree_NtreeNode4.getValue();
      ntree_NtreeNode3.setValue(object0);
      ntree0.getRootNode();
      ntree_NtreeNode0.getValue();
      Ntree.NtreeNode<Integer> ntree_NtreeNode5 = ntree0.mergeUpwards(ntree_NtreeNode4);
      ntree_NtreeNode5.setChildren((Ntree.NtreeNode<Integer>[]) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      Integer integer0 = new Integer((-2718));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.getNode(longArray0);
      ntree0.root = ntree_NtreeNode0;
      ntree1.createNodeWithValue(longArray0, integer0);
      ntree1.createNode(longArray0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree1.createNode(longArray0);
      ntree1.root = ntree_NtreeNode1;
      ntree_NtreeNode1.hasChildren();
      ntree1.getRootNode();
      long[] longArray1 = new long[6];
      longArray1[0] = 45L;
      longArray1[1] = 45L;
      longArray1[2] = 45L;
      longArray1[3] = 45L;
      longArray1[4] = 45L;
      ntree1.createNodeWithValue(longArray0, integer0);
      longArray1[5] = 45L;
      ntree1.getNode(longArray1);
      ntree1.getRootNode();
      ntree0.root.hasChildren();
      ntree1.createNode(longArray0);
      Ntree.NtreeNode<Object> ntree_NtreeNode3 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = new Ntree.NtreeNode<Object>(ntree_NtreeNode3, ntree_NtreeNode2);
      Object object0 = new Object();
      ntree_NtreeNode4.setValue(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Integer integer1 = new Integer(2147480337);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      ntree1.createNode(longArray0);
      ntree0.createNode(longArray0);
      ntree1.createNodeWithValue(longArray0, integer0);
      ntree0.getRootNode();
      ntree0.getNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      ntree1.createNodeWithValue(longArray0, integer1);
      ntree1.createNode(longArray0);
      Integer integer2 = new Integer((-373));
      ntree1.createNodeWithValue(longArray0, integer2);
      ntree1.getRootNode();
      ntree1.getNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, ntree_NtreeNode0);
      Integer integer0 = new Integer((-1904));
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = new Ntree.NtreeNode<Object>(ntree_NtreeNode1, integer0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1904);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Integer integer1 = new Integer((-1904));
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree0.createNodeWithValue(longArray0, integer1);
      ntree0.mergeUpwards(ntree_NtreeNode3);
      ntree_NtreeNode2.hasChildren();
      // Undeclared exception!
      ntree0.createNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      longArray1[1] = 4194304L;
      longArray1[2] = 536870912L;
      longArray1[3] = 1L;
      longArray1[4] = (-1078L);
      longArray1[5] = 1024L;
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray1, (Integer) null);
      // Undeclared exception!
      try { 
        ntree0.createNode(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, ntree_NtreeNode0);
      Object object0 = new Object();
      ntree_NtreeNode1.setValue(object0);
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 4);
      ntree_NtreeNodeArray0[0] = ntree_NtreeNode1;
      Object object1 = new Object();
      ntree_NtreeNode1.setValue(object1);
      ntree_NtreeNodeArray0[1] = ntree_NtreeNode0;
      ntree_NtreeNodeArray0[2] = ntree_NtreeNode0;
      ntree_NtreeNodeArray0[3] = ntree_NtreeNode1;
      ntree_NtreeNode1.setChildren(ntree_NtreeNodeArray0);
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray1 = null;
      ntree_NtreeNode1.setChildren((Ntree.NtreeNode<Object>[]) null);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 2659L;
      ntree_NtreeNode1.setChildren(ntree_NtreeNodeArray0);
      longArray0[2] = 369L;
      ntree_NtreeNode1.setValue(ntree_NtreeNode1);
      ntree_NtreeNode1.setChildren((Ntree.NtreeNode<Object>[]) null);
      Integer integer0 = new Integer((-1));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      ntree0.createNode(longArray0);
      ntree0.createNode(longArray0);
      ntree0.createNode(longArray0);
      ntree0.createNode(longArray0);
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1893));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1904);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      ntree0.createNodeWithValue(longArray0, integer0);
      // Undeclared exception!
      ntree0.createNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1893));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1904);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Integer integer1 = new Integer((-1904));
      Integer integer2 = new Integer(468);
      // Undeclared exception!
      ntree0.createNodeWithValue(longArray0, integer2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(2147483643);
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 2147483643;
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray1, integer0);
      ntree0.createNodeWithValue(longArray0, integer0);
      ntree0.createNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(2147480345);
      assertEquals(2147480345, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      // Undeclared exception!
      ntree0.createNode(longArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      Integer integer0 = new Integer(20);
      assertEquals(20, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.getRootNode();
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      ntree0.createNodeWithValue(longArray0, integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      assertEquals((-373), (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      Integer integer1 = new Integer(28);
      assertEquals(28, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.createNodeWithValue(longArray0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
      
      Integer integer2 = new Integer((-373));
      assertEquals((-373), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, ntree_NtreeNode0);
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertNotNull(ntree_NtreeNode1);
      
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = new Ntree.NtreeNode<Object>(ntree_NtreeNode1, ntree_NtreeNode1);
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode1));
      assertNotNull(ntree_NtreeNode2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-966L);
      longArray0[1] = 0L;
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 8);
      ntree_NtreeNodeArray0[0] = ntree_NtreeNode0;
      ntree_NtreeNodeArray0[1] = ntree_NtreeNode0;
      ntree_NtreeNodeArray0[2] = ntree_NtreeNode1;
      ntree_NtreeNodeArray0[3] = ntree_NtreeNode2;
      ntree_NtreeNodeArray0[4] = ntree_NtreeNode2;
      ntree_NtreeNodeArray0[5] = ntree_NtreeNode0;
      ntree_NtreeNodeArray0[6] = ntree_NtreeNode1;
      ntree_NtreeNodeArray0[7] = ntree_NtreeNode0;
      ntree_NtreeNode2.setChildren(ntree_NtreeNodeArray0);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode1));
      assertEquals(8, ntree_NtreeNodeArray0.length);
      
      longArray0[2] = 1607L;
      Integer integer0 = new Integer((-281));
      assertEquals((-281), (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree1.getRootNode();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode3);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode4 = ntree0.mergeUpwards(ntree_NtreeNode3);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode3);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode4);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode5 = ntree1.mergeUpwards(ntree_NtreeNode4);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode5, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode5, ntree_NtreeNode4);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode5);
      
      ntree0.root = ntree_NtreeNode3;
      boolean boolean0 = ntree_NtreeNode2.hasChildren();
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertTrue(boolean0);
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode1));
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode6 = ntree1.mergeUpwards(ntree_NtreeNode4);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode5);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode6);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode7 = ntree1.mergeUpwards(ntree_NtreeNode4);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode4, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode7, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode7, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode7, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode7, ntree_NtreeNode3);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode7);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode8 = ntree1.getNode(longArray0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode6);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode8);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode9 = ntree0.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree0, ntree1);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode4);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode8);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode6);
      assertFalse(ntree0.equals((Object)ntree1));
      assertArrayEquals(new long[] {(-966L), 0L, 1607L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode9);
      
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray1 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 7);
      assertFalse(ntree_NtreeNodeArray1.equals((Object)ntree_NtreeNodeArray0));
      
      ntree_NtreeNodeArray1[0] = ntree_NtreeNode0;
      Ntree.NtreeNode<Object> ntree_NtreeNode10 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, (Object) null);
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode0));
      assertNotNull(ntree_NtreeNode10);
      
      ntree_NtreeNodeArray1[1] = ntree_NtreeNode10;
      ntree_NtreeNodeArray1[2] = ntree_NtreeNode0;
      ntree_NtreeNodeArray1[3] = ntree_NtreeNode0;
      ntree_NtreeNodeArray1[4] = ntree_NtreeNode0;
      ntree_NtreeNodeArray1[5] = ntree_NtreeNode1;
      ntree_NtreeNodeArray1[6] = ntree_NtreeNode1;
      ntree_NtreeNode0.setChildren(ntree_NtreeNodeArray1);
      assertNotSame(ntree_NtreeNodeArray1, ntree_NtreeNodeArray0);
      assertFalse(ntree_NtreeNodeArray1.equals((Object)ntree_NtreeNodeArray0));
      assertEquals(7, ntree_NtreeNodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.getNode(longArray0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1380L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree1.getNode(longArray0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode2);
      
      boolean boolean0 = ntree_NtreeNode2.hasChildren();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertFalse(boolean0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree1.mergeUpwards(ntree_NtreeNode2);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode2);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode3);
      
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode5 = new Ntree.NtreeNode<Object>(ntree_NtreeNode4, integer0);
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode4));
      assertNotNull(ntree_NtreeNode5);
      
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = ntree_NtreeNode5.getChildren();
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode4));
      assertNull(ntree_NtreeNodeArray0);
      
      boolean boolean1 = ntree_NtreeNode3.hasChildren();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode2);
      assertSame(ntree_NtreeNode3, ntree_NtreeNode0);
      assertFalse(boolean1);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ntree_NtreeNode5.setValue(ntree_NtreeNode2);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode4));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean2 = ntree_NtreeNode5.hasChildren();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode4));
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode6 = ntree0.mergeUpwards(ntree_NtreeNode2);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode2);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode6);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode7 = ntree0.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree_NtreeNode7, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode7, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode7, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode7, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode7, ntree_NtreeNode3);
      assertNotSame(ntree0, ntree1);
      assertFalse(ntree_NtreeNode7.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode7.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode7.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode7.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode7.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree0.equals((Object)ntree1));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode7);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode8 = ntree0.getRootNode();
      assertNotSame(ntree_NtreeNode8, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode8, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode8, ntree_NtreeNode0);
      assertSame(ntree_NtreeNode8, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode8, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode8, ntree_NtreeNode1);
      assertNotSame(ntree0, ntree1);
      assertFalse(ntree_NtreeNode8.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode8.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode8.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode8.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode8.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode8);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode9 = ntree0.getRootNode();
      assertSame(ntree_NtreeNode9, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode9, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode9, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode9, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode9, ntree_NtreeNode8);
      assertNotSame(ntree_NtreeNode9, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode9, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertFalse(ntree_NtreeNode9.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode9.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode9.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode9.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode9.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree0.equals((Object)ntree1));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode9);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode10 = ntree0.createNodeWithValue(longArray0, integer1);
      assertNotSame(ntree0, ntree1);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode0);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode9);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode8);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode1));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode10);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode11 = ntree1.mergeUpwards(ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode6, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode6, ntree_NtreeNode10);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode2);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode6, ntree_NtreeNode9);
      assertNotSame(ntree_NtreeNode6, ntree_NtreeNode8);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode11);
      assertSame(ntree_NtreeNode6, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(ntree_NtreeNode11, ntree_NtreeNode8);
      assertSame(ntree_NtreeNode11, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode11, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode11, ntree_NtreeNode10);
      assertNotSame(ntree_NtreeNode11, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode11, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode11, ntree_NtreeNode9);
      assertSame(ntree_NtreeNode11, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode11, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode8);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode3);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode11);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode9);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode10);
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode7));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode10));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode9));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode8));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(ntree_NtreeNode11.equals((Object)ntree_NtreeNode8));
      assertFalse(ntree_NtreeNode11.equals((Object)ntree_NtreeNode10));
      assertFalse(ntree_NtreeNode11.equals((Object)ntree_NtreeNode7));
      assertFalse(ntree_NtreeNode11.equals((Object)ntree_NtreeNode9));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode8));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode9));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode7));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode10));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode11);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode12 = ntree0.mergeUpwards(ntree_NtreeNode10);
      assertNotSame(ntree0, ntree1);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode7);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode6);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode0);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode12);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode9);
      assertSame(ntree_NtreeNode10, ntree_NtreeNode8);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode11);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode10, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode11);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode6);
      assertSame(ntree_NtreeNode12, ntree_NtreeNode7);
      assertSame(ntree_NtreeNode12, ntree_NtreeNode10);
      assertNotSame(ntree_NtreeNode12, ntree_NtreeNode2);
      assertSame(ntree_NtreeNode12, ntree_NtreeNode9);
      assertSame(ntree_NtreeNode12, ntree_NtreeNode8);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode11));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode10.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode11));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode6));
      assertFalse(ntree_NtreeNode12.equals((Object)ntree_NtreeNode2));
      assertArrayEquals(new long[] {(-1380L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(ntree_NtreeNode12);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = new Ntree.NtreeNode<Object>((Ntree.NtreeNode<Object>) null, (Object) null);
      assertNotNull(ntree_NtreeNode0);
      
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 2);
      ntree_NtreeNode0.setValue((Object) null);
      ntree_NtreeNodeArray0[0] = null;
      ntree_NtreeNodeArray0[1] = null;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ntree_NtreeNode0.setValue(integer0);
      ntree_NtreeNode0.setChildren(ntree_NtreeNodeArray0);
      assertEquals(2, ntree_NtreeNodeArray0.length);
      
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray1 = ntree_NtreeNode0.getChildren();
      assertEquals(2, ntree_NtreeNodeArray1.length);
      assertNotNull(ntree_NtreeNodeArray1);
      
      long[] longArray0 = null;
      Integer integer1 = null;
      Ntree<Integer> ntree0 = null;
      try {
        ntree0 = new Ntree<Integer>((long[]) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-402));
      assertEquals((-402), (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = null;
      try {
        ntree1 = new Ntree<Integer>((Ntree<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      assertEquals((-373), (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree1);
      
      Integer integer1 = new Integer(28);
      assertEquals(28, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.createNodeWithValue(longArray0, integer1);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
      
      Integer integer2 = new Integer((-373));
      assertEquals((-373), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.createNodeWithValue(longArray0, integer2);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree1.getRootNode();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(ntree_NtreeNode2.equals((Object)ntree_NtreeNode0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode2);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree0.getNode(longArray0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode3);
      
      ntree0.root = ntree_NtreeNode3;
      Ntree.NtreeNode<Object> ntree_NtreeNode4 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Integer> ntree_NtreeNode5 = ntree0.createNode(longArray0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode3);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode3));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode5);
      
      Object object0 = ntree_NtreeNode5.getValue();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode3);
      assertEquals((-373), object0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode3));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer2));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(object0);
      
      Ntree.NtreeNode<Object> ntree_NtreeNode6 = new Ntree.NtreeNode<Object>(ntree_NtreeNode4, object0);
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode3));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer2));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode4));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree_NtreeNode6);
      
      Integer integer3 = new Integer((-373));
      assertEquals((-373), (int)integer3);
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      ntree_NtreeNode6.setValue(integer3);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode3);
      assertTrue(integer3.equals((Object)object0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode3));
      assertTrue(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer2));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode4));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      
      ntree_NtreeNode6.setValue(ntree0.root);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode3, ntree_NtreeNode5);
      assertNotSame(ntree0.root, ntree_NtreeNode5);
      assertNotSame(ntree0.root, ntree_NtreeNode1);
      assertSame(ntree0.root, ntree_NtreeNode3);
      assertNotSame(ntree0.root, ntree_NtreeNode0);
      assertNotSame(ntree0.root, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode1);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode5, ntree_NtreeNode3);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode5));
      assertFalse(ntree0.root.equals((Object)ntree_NtreeNode5));
      assertFalse(ntree0.root.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree0.root.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree0.root.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode0));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode1));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode2));
      assertFalse(ntree_NtreeNode5.equals((Object)ntree_NtreeNode3));
      assertTrue(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer1));
      assertTrue(object0.equals((Object)integer2));
      assertFalse(ntree_NtreeNode6.equals((Object)ntree_NtreeNode4));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Integer integer4 = ntree_NtreeNode1.getValue();
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode5);
      assertSame(ntree_NtreeNode1, ntree_NtreeNode2);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode3);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertEquals((-373), (int)integer4);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)object0));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode5));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode3));
      assertFalse(ntree_NtreeNode1.equals((Object)ntree_NtreeNode0));
      assertArrayEquals(new long[] {205L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(integer4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.createNodeWithValue(longArray0, integer0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree_NtreeNode0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-202L);
      longArray0[1] = 1426L;
      longArray0[2] = (-2105L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 3331L;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotNull(ntree1);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = 0L;
      longArray1[2] = (-2105L);
      longArray1[3] = (long) 0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.createNodeWithValue(longArray1, integer1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2105L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(ntree_NtreeNode0);
      
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.mergeUpwards(ntree_NtreeNode0);
      assertSame(ntree_NtreeNode0, ntree_NtreeNode1);
      assertNotSame(longArray0, longArray1);
      assertSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2105L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(ntree_NtreeNode1);
      
      Integer integer2 = ntree_NtreeNode1.getValue();
      assertSame(ntree_NtreeNode0, ntree_NtreeNode1);
      assertNotSame(longArray0, longArray1);
      assertSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(longArray1, longArray0);
      assertEquals(0, (int)integer2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2105L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(integer2);
      
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode3 = new Ntree.NtreeNode<Object>(ntree_NtreeNode2, integer2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2105L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(ntree_NtreeNode3);
      
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 0);
      ntree_NtreeNode3.setChildren(ntree_NtreeNodeArray0);
      assertSame(ntree_NtreeNode0, ntree_NtreeNode1);
      assertNotSame(longArray0, longArray1);
      assertSame(ntree_NtreeNode1, ntree_NtreeNode0);
      assertNotSame(ntree0, ntree1);
      assertNotSame(ntree1, ntree0);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(ntree_NtreeNode3.equals((Object)ntree_NtreeNode2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(ntree0.equals((Object)ntree1));
      assertFalse(ntree1.equals((Object)ntree0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertArrayEquals(new long[] {(-202L), 1426L, (-2105L), 0L, 0L, 3331L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2105L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, ntree_NtreeNodeArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(ntree0);
      
      // Undeclared exception!
      try { 
        ntree0.mergeUpwards((Ntree.NtreeNode<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree$NtreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(2147480345);
      assertEquals(2147480345, (int)integer0);
      assertNotNull(integer0);
      
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree0);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      assertFalse(ntree1.equals((Object)ntree0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(ntree1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 205L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Integer integer1 = new Integer(28);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.createNodeWithValue(longArray0, integer1);
      Integer integer2 = new Integer((-373));
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree1.createNodeWithValue(longArray0, integer2);
      Ntree.NtreeNode<Integer>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Integer>[]) Array.newInstance(Ntree.NtreeNode.class, 1);
      ntree_NtreeNodeArray0[0] = ntree_NtreeNode1;
      ntree_NtreeNode0.setChildren(ntree_NtreeNodeArray0);
      ntree0.mergeUpwards(ntree_NtreeNodeArray0[0]);
      ntree0.mergeUpwards(ntree_NtreeNodeArray0[0]);
      Ntree<Integer> ntree2 = new Ntree<Integer>(ntree1);
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree2.createNode(longArray0);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree1.getRootNode();
      assertNotNull(ntree_NtreeNode0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[0];
      Integer integer0 = new Integer(0);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.mergeUpwards(ntree_NtreeNode0);
      assertNotNull(ntree_NtreeNode1);
      
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree1.createNodeWithValue(longArray0, integer0);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, ntree_NtreeNode0);
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = new Ntree.NtreeNode<Object>(ntree_NtreeNode1, ntree_NtreeNode1);
      Ntree.NtreeNode<Object>[] ntree_NtreeNodeArray0 = (Ntree.NtreeNode<Object>[]) Array.newInstance(Ntree.NtreeNode.class, 0);
      ntree_NtreeNode2.setChildren(ntree_NtreeNodeArray0);
      ntree_NtreeNode2.setValue(ntree_NtreeNode1);
      Object object0 = ntree_NtreeNode2.getValue();
      ntree_NtreeNode1.setValue(object0);
      Object object1 = new Object();
      ntree_NtreeNode1.setValue(object1);
      long[] longArray0 = new long[7];
      longArray0[0] = 3149L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      longArray0[6] = (-1678L);
      Integer integer0 = new Integer(0);
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Ntree<Integer> ntree1 = new Ntree<Integer>(ntree0);
      Ntree.NtreeNode<Integer> ntree_NtreeNode3 = ntree1.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode4 = ntree0.mergeUpwards(ntree_NtreeNode3);
      Ntree.NtreeNode<Integer> ntree_NtreeNode5 = new Ntree.NtreeNode<Integer>(ntree_NtreeNode4, integer0);
      // Undeclared exception!
      try { 
        ntree0.mergeUpwards(ntree_NtreeNode5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = null;
      Integer integer0 = new Integer(3198);
      Ntree<Integer> ntree0 = null;
      try {
        ntree0 = new Ntree<Integer>((long[]) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = null;
      Integer integer0 = null;
      Ntree<Integer> ntree0 = null;
      try {
        ntree0 = new Ntree<Integer>((long[]) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.Ntree", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 165L;
      Integer integer0 = new Integer((-373));
      Ntree<Integer> ntree0 = new Ntree<Integer>(longArray0, integer0);
      Integer integer1 = new Integer(28);
      Ntree.NtreeNode<Integer> ntree_NtreeNode0 = ntree0.createNodeWithValue(longArray0, integer1);
      Ntree.NtreeNode<Integer> ntree_NtreeNode1 = ntree0.getRootNode();
      Ntree.NtreeNode<Integer> ntree_NtreeNode2 = ntree0.getNode(longArray0);
      assertSame(ntree_NtreeNode2, ntree_NtreeNode0);
      assertNotSame(ntree_NtreeNode2, ntree_NtreeNode1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Ntree.NtreeNode<Object> ntree_NtreeNode0 = (Ntree.NtreeNode<Object>) mock(Ntree.NtreeNode.class, new ViolatedAssumptionAnswer());
      Ntree.NtreeNode<Object> ntree_NtreeNode1 = new Ntree.NtreeNode<Object>(ntree_NtreeNode0, ntree_NtreeNode0);
      Ntree.NtreeNode<Object> ntree_NtreeNode2 = new Ntree.NtreeNode<Object>(ntree_NtreeNode1, ntree_NtreeNode1);
      Object object0 = ntree_NtreeNode2.getValue();
      ntree_NtreeNode1.setValue(object0);
      Object object1 = new Object();
      ntree_NtreeNode1.setValue(object1);
      assertNotSame(ntree_NtreeNode1, ntree_NtreeNode2);
  }
}
