/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:25:40 GMT 2022
 */

package net.imglib2.img.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.img.basictypeaccess.BooleanAccess;
import net.imglib2.img.basictypeaccess.ByteAccess;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.IntAccess;
import net.imglib2.img.basictypeaccess.ShortAccess;
import net.imglib2.img.basictypeaccess.array.BooleanArray;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.DirtyBooleanArray;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.img.basictypeaccess.array.DirtyShortArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.array.FloatArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.array.ShortArray;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.nio.ShortBufferAccess;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.numeric.complex.ComplexFloatType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayImgs_ESTest extends ArrayImgs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = null;
      ByteArray byteArray0 = mock(ByteArray.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.bytes(byteArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1455.256274541;
      doubleArray0[1] = (-3168.2492178365);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 750.8801;
      doubleArray0[4] = (-1277.5376524778);
      doubleArray0[5] = (-1806.8);
      doubleArray0[6] = 1373.947869290093;
      doubleArray0[7] = 0.0;
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(doubleArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-4534.99);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2304.53232612);
      doubleArray0[5] = (-3868.2);
      doubleArray0[6] = 0.0;
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(doubleArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.floats((float[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = null;
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.bits(booleanAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LongArray longArray0 = new LongArray(7);
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 7;
      ArrayImgs.unsigned128Bits(longArray0, longArray1);
      ArrayImgs.unsigned4Bits(longArray0, longArray1);
      ArrayImgs.floats(longArray1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 7L;
      doubleArray0[1] = (double) 7L;
      doubleArray0[2] = (double) 7L;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7L;
      doubleArray0[6] = (double) 7L;
      doubleArray0[7] = (double) 7L;
      ArrayImgs.doubles(doubleArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = null;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 9.223372036854776E18;
      doubleArray0[1] = (-769.6544453928);
      doubleArray0[2] = (-818.21087);
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(doubleArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 31L;
      longArray0[1] = 193L;
      ArrayImgs.complexDoubles(longArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DirtyBooleanArray dirtyBooleanArray0 = mock(DirtyBooleanArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.bits(dirtyBooleanArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2840L;
      longArray0[1] = 1031L;
      longArray0[2] = 770L;
      longArray0[3] = 64L;
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 144293811200 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LongArray longArray0 = new LongArray(2754);
      int[] intArray0 = new int[1];
      intArray0[0] = 2754;
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 2754;
      longArray1[1] = (long) 2754;
      longArray1[2] = (long) 2754;
      longArray1[3] = (long) 2754;
      ArrayImgs.unsignedInts(intArray0, longArray1);
      long[] longArray2 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.bits(longArray0, longArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-31.6F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (-1634L);
      longArray0[1] = 1791L;
      longArray0[2] = (-993L);
      longArray0[3] = 12L;
      ArrayImg<ComplexFloatType, FloatArray> arrayImg0 = ArrayImgs.complexFloats(floatArray0, longArray0);
      assertEquals(4, arrayImg0.numDimensions());
      
      ByteAccess byteAccess0 = mock(ByteAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.bytes(byteAccess0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths((LongArray) null, 0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supports only bit depths between 1 and 64, can't take 0
         //
         verifyException("net.imglib2.type.AbstractBit64Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-1405);
      intArray0[2] = 17;
      intArray0[3] = 0;
      intArray0[4] = 1270;
      intArray0[5] = (-595);
      intArray0[6] = (-1160);
      intArray0[7] = 255;
      intArray0[8] = 642;
      // Undeclared exception!
      try { 
        ArrayImgs.ints(intArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.doubles((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      ArrayImgs.unsignedVariableBitLengths(1, longArray0);
      ArrayImgs.unsignedLongss(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 1251;
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1251);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.floats(dirtyFloatArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[8];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      DoubleBufferAccess doubleBufferAccess0 = mock(DoubleBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(doubleBufferAccess0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 1;
      longArray1[1] = (long) 1;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 1;
      longArray1[4] = (long) 1;
      longArray1[5] = (long) 1;
      longArray1[6] = (-2135L);
      ArrayImgs.floats(dirtyFloatArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LongArray longArray0 = null;
      int int0 = 511;
      long[] longArray1 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths((LongArray) null, 511, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.bytes(byteArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 476L;
      ArrayImgs.bytes(longArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ByteAccess byteAccess0 = mock(ByteAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[3];
      longArray1[0] = (-1337L);
      longArray1[1] = 31L;
      longArray1[2] = 63L;
      ArrayImgs.unsignedBytes(byteAccess0, longArray1);
      ArrayImgs.unsignedBytes((byte[]) null, longArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[0];
      DirtyIntArray dirtyIntArray0 = mock(DirtyIntArray.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(dirtyIntArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 128.0;
      doubleArray0[1] = (-4706.0);
      doubleArray0[2] = (-794.71);
      doubleArray0[3] = 1.0;
      long[] longArray0 = new long[1];
      longArray0[0] = (-1372L);
      ArrayImgs.doubles(doubleArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 867;
      intArray0[2] = (-2842);
      intArray0[3] = 364;
      intArray0[4] = 0;
      intArray0[5] = 3;
      intArray0[6] = (-1750);
      intArray0[7] = 1;
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.argbs(intArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 904.8368298495961;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 128.0;
      doubleArray0[4] = 3278.49307599601;
      doubleArray0[5] = 910.9097864706;
      doubleArray0[6] = 3644.332944096;
      doubleArray0[7] = 0.0;
      long[] longArray0 = new long[7];
      longArray0[0] = 2L;
      longArray0[1] = 3L;
      longArray0[2] = 12L;
      longArray0[3] = 5124L;
      longArray0[4] = 403L;
      longArray0[5] = (-653L);
      longArray0[6] = 593L;
      ArrayImgs.complexDoubles(doubleArray0, longArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1093;
      intArray0[1] = (-2061);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = (-725);
      intArray0[6] = (-1786);
      ArrayImgs.argbs(intArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[7];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)799;
      ArrayImgs.unsignedShorts(shortArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.bytes((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LongArray longArray0 = new LongArray(0);
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DirtyBooleanArray dirtyBooleanArray0 = mock(DirtyBooleanArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.booleans(dirtyBooleanArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = mock(IntBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (-2410L);
      longArray0[1] = 392L;
      longArray0[2] = (-682L);
      ArrayImgs.ints(intBufferAccess0, longArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1546;
      shortArray0[1] = (short) (-2452);
      shortArray0[2] = (short)1069;
      shortArray0[3] = (short)3561;
      ArrayImgs.unsignedShorts(shortArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = 5L;
      dirtyFloatArray0.setDirty();
      longArray0[1] = (-1185L);
      ArrayImgs.complexFloats(dirtyFloatArray0, longArray0);
      DirtyByteArray dirtyByteArray0 = mock(DirtyByteArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.bytes(dirtyByteArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = longArray1.createArray(1461);
      // Undeclared exception!
      try { 
        longArray2.setValue(1461, 5L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1461 out of bounds for length 1461
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 128L;
      longArray0[1] = 1987L;
      longArray0[2] = 1938L;
      longArray0[3] = 964L;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 475158653952 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 398.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 479.5392F;
      floatArray0[5] = 876.7041F;
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(floatArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.bytes((DirtyByteArray) null, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(15);
      long[] longArray2 = new long[7];
      longArray2[0] = (long) 15;
      longArray2[1] = (long) 15;
      longArray2[2] = (long) 15;
      longArray2[3] = (long) 15;
      longArray2[4] = (long) 15;
      longArray2[5] = (long) 15;
      longArray2[6] = (long) 15;
      ArrayImgs.unsignedLongs(longArray1, longArray2);
      int[] intArray0 = new int[6];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = 15;
      intArray0[3] = 15;
      intArray0[4] = 15;
      intArray0[5] = 15;
      ArrayImgs.argbs(intArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2712L);
      longArray0[1] = 999L;
      longArray0[2] = 568L;
      longArray0[3] = 12L;
      longArray0[4] = (-1300L);
      longArray0[5] = (-1537L);
      ArrayImgs.unsignedLongss(longArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LongArray longArray0 = new LongArray((long[]) null);
      longArray0.createArray(481);
      // Undeclared exception!
      try { 
        ArrayImgs.bits(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2551;
      intArray0[1] = (-3321);
      intArray0[2] = 0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (-355);
      intArray0[5] = 1;
      intArray0[6] = 2044;
      intArray0[7] = 648;
      intArray0[8] = 3947;
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.ints(intArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 4095L;
      longArray0[2] = 0L;
      longArray0[3] = (-3190L);
      longArray0[4] = 0L;
      longArray0[5] = 2147483647L;
      longArray0[6] = (-1519L);
      longArray0[7] = 1954L;
      longArray0[8] = 0L;
      LongArray longArray1 = new LongArray(longArray0);
      long[] longArray2 = new long[2];
      longArray2[0] = (-3190L);
      longArray2[1] = (-3190L);
      ArrayImgs.unsigned12Bits(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(byteArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(6, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts(shortArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = mock(IntBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (-1960L);
      longArray0[1] = 1540L;
      longArray0[2] = 4L;
      ArrayImgs.unsignedInts(intBufferAccess0, longArray0);
      int int0 = (-1469);
      LongArray longArray1 = null;
      try {
        longArray1 = new LongArray((-1469));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1469
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.booleans((BooleanArray) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[2];
      longArray1[0] = (-107L);
      longArray1[1] = (-85L);
      ArrayImgs.unsignedLongss(longArray1, longArray0);
      LongArray longArray2 = new LongArray(longArray0);
      ArrayImgs.unsigned4Bits(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.booleans((boolean[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[7];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[1];
      longArray1[0] = (-9223372036854775808L);
      ArrayImgs.doubles(doubleAccess0, longArray1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-9223372036854775808L);
      doubleArray0[1] = (double) (-9223372036854775808L);
      doubleArray0[2] = (double) (-9223372036854775808L);
      ArrayImgs.complexDoubles(doubleArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImgs.unsigned4Bits(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(0);
      long[] longArray2 = new long[1];
      longArray2[0] = (long) 0;
      ArrayImgs.unsigned4Bits(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      ArrayImgs.bytes(byteArray0, longArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      ArrayImgs.ints(intArray0, longArray0);
      ArrayImgs.longs(longArray0, longArray0);
      DirtyIntArray dirtyIntArray0 = mock(DirtyIntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.unsignedInts(dirtyIntArray0, longArray0);
      DirtyIntArray dirtyIntArray1 = mock(DirtyIntArray.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      ArrayImgs.argbs(dirtyIntArray1, longArray1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      ArrayImgs.doubles(doubleArray0, longArray1);
      LongArray longArray2 = new LongArray(0);
      longArray2.createArray((byte)0);
      longArray2.createArray(0);
      long[] longArray3 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned12Bits(longArray2, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ShortAccess shortAccess0 = mock(ShortAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts(shortAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-3111L);
      longArray0[1] = 15L;
      longArray0[2] = 1632L;
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImgs.unsigned12Bits(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      intArray0[1] = 2875;
      intArray0[2] = 0;
      intArray0[3] = 801;
      intArray0[4] = (-517);
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(intArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2393.5408157;
      doubleArray0[1] = 861.735757;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 693.44409945503;
      doubleArray0[4] = (-288.20655786);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(doubleArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      BooleanArray booleanArray0 = mock(BooleanArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.bits(booleanArray0, longArray0);
      longArray0[0] = 2295L;
      ArrayImgs.shorts(shortArray0, longArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 255L;
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 255L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 255L;
      doubleArray0[3] = (double) 255L;
      doubleArray0[4] = (double) 255L;
      ArrayImgs.complexDoubles(doubleArray0, longArray0);
      ArrayImgs.complexFloats(longArray0);
      IntAccess intAccess0 = mock(IntAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.ints(intAccess0, longArray0);
      ArrayImgs.doubles(doubleArray0, longArray0);
      LongArray longArray1 = new LongArray(0);
      longArray1.createArray(0);
      // Undeclared exception!
      try { 
        longArray1.setValue(0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2819L;
      longArray0[1] = 12L;
      longArray0[2] = 3215L;
      ArrayImgs.longs(longArray0);
      ArrayImgs.unsignedShorts(longArray0);
      ArrayImgs.booleans((boolean[]) null, longArray0);
      DirtyByteArray dirtyByteArray0 = mock(DirtyByteArray.class, new ViolatedAssumptionAnswer());
      ArrayImg<UnsignedByteType, DirtyByteArray> arrayImg0 = ArrayImgs.unsignedBytes(dirtyByteArray0, longArray0);
      assertEquals(108757020L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = mock(ShortBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      longArray0[0] = 3007L;
      ArrayImgs.unsignedShorts(shortBufferAccess0, longArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)64;
      ArrayImgs.unsignedBytes(byteArray0, longArray0);
      ArrayImgs.booleans(longArray0);
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-51);
      floatArray0[1] = (float) (byte) (-126);
      floatArray0[2] = (float) (byte)63;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      ArrayImgs.floats(floatArray0, longArray0);
      IntArray intArray0 = mock(IntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.unsignedInts(intArray0, longArray0);
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImg<ComplexFloatType, FloatArray> arrayImg0 = ArrayImgs.complexFloats(longArray0);
      assertEquals(1, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = mock(DirtyDoubleArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = 421L;
      longArray0[1] = 765L;
      longArray0[2] = 1L;
      ArrayImg<ComplexDoubleType, DirtyDoubleArray> arrayImg0 = ArrayImgs.complexDoubles(dirtyDoubleArray0, longArray0);
      assertEquals(322065L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LongArray longArray0 = new LongArray(0);
      DirtyDoubleArray dirtyDoubleArray0 = mock(DirtyDoubleArray.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      ArrayImgs.complexDoubles(dirtyDoubleArray0, longArray1);
      long[] longArray2 = new long[5];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = 681L;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      ArrayImg<Unsigned2BitType, LongArray> arrayImg0 = ArrayImgs.unsigned2Bits(longArray0, longArray2);
      assertEquals(5, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = longArray1.createArray(3);
      long[] longArray3 = new long[4];
      longArray3[0] = (long) 3;
      longArray3[1] = (long) 3;
      longArray3[2] = (long) 3;
      longArray3[3] = (long) 3;
      ArrayImgs.unsigned2Bits(longArray2, longArray3);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-2172L);
      longArray0[2] = 0L;
      longArray0[3] = 2732L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 578L;
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = longArray1.createArray(31);
      longArray1.createView(longArray2);
      long[] longArray3 = new long[2];
      longArray3[0] = (-2172L);
      longArray2.createView(longArray1);
      LongArray longArray4 = longArray1.createArray(31);
      LongArray longArray5 = longArray1.createArray(31);
      longArray3[1] = 0L;
      ArrayImgs.unsignedVariableBitLengths(longArray2, 31, longArray3);
      DoubleBufferAccess doubleBufferAccess0 = mock(DoubleBufferAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.complexDoubles(doubleBufferAccess0, longArray3);
      ArrayImgs.unsigned128Bits(longArray5, longArray3);
      ArrayImgs.unsignedVariableBitLengths(longArray4, 31, longArray3);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2172L);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      ArrayImgs.complexFloats(floatArray0, longArray0);
      ArrayImgs.unsignedShorts((short[]) null, longArray3);
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -2172, 0, 2732, 0, 0, 578]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[4];
      DirtyIntArray dirtyIntArray0 = mock(DirtyIntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.ints(dirtyIntArray0, longArray0);
      longArray0[0] = 2983L;
      longArray0[1] = (-2063L);
      longArray0[2] = 64L;
      longArray0[3] = 4294967295L;
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = ArrayImgs.unsignedShorts((short[]) null, longArray0);
      assertEquals((-1691579122608131520L), arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<BitType, LongArray> arrayImg0 = ArrayImgs.bits((LongArray) null, longArray0);
      assertEquals(6, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-357.6);
      doubleArray0[1] = (-2527.28490663);
      doubleArray0[2] = (-2162.448823383);
      long[] longArray0 = new long[8];
      longArray0[0] = 4874L;
      longArray0[1] = (-1924L);
      longArray0[2] = 733L;
      longArray0[3] = 2073L;
      longArray0[4] = 4095L;
      longArray0[5] = 1L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      ArrayImgs.complexDoubles(doubleArray0, longArray0);
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.bits(booleanAccess0, longArray0);
      long[] longArray1 = new long[3];
      longArray1[0] = 733L;
      longArray1[1] = (-1924L);
      longArray1[2] = 2073L;
      LongArray longArray2 = new LongArray(longArray1);
      LongArray longArray3 = longArray2.createArray(3);
      ArrayImg<BitType, LongArray> arrayImg0 = ArrayImgs.bits(longArray3, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned4Bits((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2013;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2013;
      longArray0[1] = (long) 2013;
      longArray0[2] = (long) 2013;
      longArray0[3] = (long) 2013;
      longArray0[4] = (long) 2013;
      longArray0[5] = (long) 2013;
      longArray0[6] = (long) 2013;
      longArray0[7] = (long) 2013;
      ArrayImg<ARGBType, IntArray> arrayImg0 = ArrayImgs.argbs(intArray0, longArray0);
      assertEquals(8, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned128Bits((LongArray) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)669;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-1113);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1530);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts(shortArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LongArray longArray0 = null;
      long[] longArray1 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs((LongArray) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.longs(longArray0, longArray0);
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = (-951L);
      longArray1[2] = (-1911L);
      longArray1[3] = 128L;
      longArray1[4] = 151L;
      longArray1[5] = (-2166L);
      longArray1[6] = 0L;
      longArray1[7] = 1267L;
      longArray1[8] = (-2430L);
      ArrayImgs.unsignedLongs(longArray1, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1514L;
      ArrayImgs.unsigned128Bits(longArray0);
      ArrayImg<Unsigned4BitType, LongArray> arrayImg0 = ArrayImgs.unsigned4Bits(longArray0);
      assertEquals(1514L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.longs((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      ArrayImgs.argbs((int[]) null, longArray0);
      double[] doubleArray0 = new double[0];
      ArrayImg<DoubleType, DoubleArray> arrayImg0 = ArrayImgs.doubles(doubleArray0, longArray0);
      assertEquals(6, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayImgs.doubles((double[]) null, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1046);
      intArray0[2] = (-1503);
      intArray0[3] = (-226);
      // Undeclared exception!
      try { 
        ArrayImgs.argbs(intArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.bits((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      int int0 = 231;
      intArray0[1] = 231;
      intArray0[2] = 31;
      intArray0[3] = (-494);
      intArray0[4] = 13;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 13;
      ArrayImgs.unsignedInts(intArray0, longArray0);
      LongArray longArray1 = null;
      try {
        longArray1 = new LongArray((-3528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3528
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-218L);
      longArray0[1] = (-218L);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImg<LongType, LongArray> arrayImg0 = ArrayImgs.longs(longArray1, longArray0);
      assertEquals(47524L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(shortArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)58;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)63;
      longArray0[1] = (long) (byte)63;
      longArray0[2] = (long) (byte)38;
      longArray0[3] = (long) (byte)58;
      longArray0[4] = (long) (byte)63;
      ArrayImgs.unsignedBytes(byteArray0, longArray0);
      ArrayImgs.shorts(longArray0);
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      ArrayImg<NativeBoolType, BooleanAccess> arrayImg0 = ArrayImgs.booleans(booleanAccess0, longArray0);
      assertEquals(551103588L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[4];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.argbs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 3646L;
      ArrayImgs.longs(longArray0, longArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 158;
      intArray0[2] = (-362);
      intArray0[3] = 10;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1319);
      intArray0[7] = (-1);
      intArray0[8] = 5946;
      ArrayImgs.argbs(intArray0, longArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)109;
      long[] longArray1 = new long[8];
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) 10;
      longArray1[2] = (long) 10;
      longArray1[3] = (long) 10;
      longArray1[4] = (long) 32;
      longArray1[5] = (long) (-362);
      longArray1[6] = (long) (-1319);
      longArray1[7] = 2685L;
      ArrayImg<ByteType, ByteArray> arrayImg0 = ArrayImgs.bytes(byteArray0, longArray1);
      assertEquals((-41024909760000L), arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      longArray0[0] = (-2000L);
      ArrayImgs.complexDoubles(doubleAccess0, longArray0);
      DirtyIntArray dirtyIntArray0 = mock(DirtyIntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.argbs(dirtyIntArray0, longArray0);
      long[] longArray1 = new long[7];
      longArray1[0] = (-2000L);
      longArray1[1] = (-693L);
      longArray1[2] = (-2000L);
      longArray1[3] = (-2000L);
      longArray1[4] = (-2000L);
      longArray1[5] = (-2000L);
      longArray1[6] = (-2000L);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-2000, -693, -2000, -2000, -2000, -2000, -2000]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[15];
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned4Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[20];
      ArrayImgs.longs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned4Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.longs(longArray0, longArray0);
      DirtyBooleanArray dirtyBooleanArray0 = mock(DirtyBooleanArray.class, new ViolatedAssumptionAnswer());
      ArrayImg<NativeBoolType, DirtyBooleanArray> arrayImg0 = ArrayImgs.bits(dirtyBooleanArray0, longArray0);
      assertEquals(1, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 9223372036854775807L;
      longArray0[1] = 9223372036854775807L;
      longArray0[2] = 12L;
      longArray0[3] = 1401L;
      longArray0[4] = 697L;
      longArray0[5] = 147L;
      // Undeclared exception!
      ArrayImgs.longs(longArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.argbs((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2L;
      ArrayImgs.shorts(longArray0);
      long[] longArray1 = new long[6];
      longArray1[0] = 2L;
      longArray1[1] = 2L;
      longArray1[2] = 2L;
      longArray1[3] = 555L;
      longArray1[4] = 2L;
      longArray1[5] = 2L;
      ArrayImgs.booleans(longArray1);
      ArrayImgs.unsigned128Bits((LongArray) null, longArray1);
      ArrayImg<ARGBType, IntArray> arrayImg0 = ArrayImgs.argbs(longArray1);
      FloatArray floatArray0 = new FloatArray(0);
      floatArray0.createView(arrayImg0);
      ArrayImgs.complexFloats(floatArray0, longArray0);
      ArrayImgs.unsigned128Bits((LongArray) null, longArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayImg<IntType, IntArray> arrayImg1 = ArrayImgs.ints(intArray0, longArray1);
      assertEquals(17760L, arrayImg1.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[9];
      longArray1[0] = 3L;
      longArray1[1] = (-3377L);
      longArray1[2] = (-2367L);
      longArray1[3] = 64L;
      longArray1[4] = (-643L);
      longArray1[5] = (-1250L);
      longArray1[6] = 2L;
      longArray1[7] = (-516L);
      longArray1[8] = (-4264L);
      ArrayImgs.longs(longArray0, longArray1);
      ByteAccess byteAccess0 = mock(ByteAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.unsignedBytes(byteAccess0, longArray1);
      // Undeclared exception!
      try { 
        ArrayImgs.bytes(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [3, -3377, -2367, 64, -643, -1250, 2, -516, -4264]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.floats(floatArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = (-64L);
      longArray0[0] = (-64L);
      longArray0[1] = (-64L);
      long long1 = 3001L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.doubles(doubleAccess0, longArray0);
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-64, -64, 3001]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[0];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(shortArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths((LongArray) null, (-1), longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supports only bit depths between 1 and 64, can't take -1
         //
         verifyException("net.imglib2.type.AbstractBit64Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      ArrayImgs.bits((BooleanArray) null, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[0] = (-1933L);
      longArray0[1] = 472L;
      ArrayImg<NativeBoolType, BooleanAccess> arrayImg0 = ArrayImgs.bits(booleanAccess0, longArray0);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[10];
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImg<Unsigned128BitType, LongArray> arrayImg0 = ArrayImgs.unsigned128Bits(longArray1, longArray0);
      assertEquals(10, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImgs.longs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(0);
      ArrayImg<Unsigned128BitType, LongArray> arrayImg0 = ArrayImgs.unsigned128Bits(longArray1, longArray0);
      assertEquals(3, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = 1315L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      ArrayImgs.ints((IntBufferAccess) null, longArray0);
      LongArray longArray1 = new LongArray(322);
      ArrayImgs.unsignedVariableBitLengths(longArray1, 14, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-64, 1315, 3001]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.longs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.bytes(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImgs.longs(longArray0, longArray0);
      float[] floatArray0 = new float[0];
      ArrayImgs.floats(floatArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.bytes(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[] longArray0 = new long[20];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayImg<NativeBoolType, BooleanArray> arrayImg0 = ArrayImgs.booleans(booleanArray0, longArray0);
      assertEquals(20, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.longs(longArray0, longArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayImgs.booleans(booleanArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.floats((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImg<Unsigned2BitType, LongArray> arrayImg0 = ArrayImgs.unsigned2Bits(longArray1, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = 1315L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.doubles(doubleAccess0, longArray0);
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      IntArray intArray0 = mock(IntArray.class, new ViolatedAssumptionAnswer());
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = longArray1.createArray(114);
      LongArray longArray3 = longArray2.createArray(0);
      ArrayImgs.unsigned2Bits(longArray3, longArray0);
      long[] longArray4 = new long[9];
      longArray4[0] = 1315L;
      longArray4[1] = (long) 239;
      longArray4[2] = 1315L;
      longArray4[3] = 3001L;
      longArray4[4] = (-64L);
      longArray4[5] = 1315L;
      longArray4[6] = (long) 239;
      longArray4[7] = (long) 239;
      longArray4[8] = 1315L;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(239, longArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supports only bit depths between 1 and 64, can't take 239
         //
         verifyException("net.imglib2.type.AbstractBit64Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[3];
      DoubleBufferAccess doubleBufferAccess0 = mock(DoubleBufferAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.complexDoubles(doubleBufferAccess0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImgs.longs(longArray1, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongArray longArray1 = new LongArray(1);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(longArray1, 1, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongArray longArray1 = new LongArray(1);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(longArray1, 1, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[] longArray0 = new long[8];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImg<UnsignedVariableBitLengthType, LongArray> arrayImg0 = ArrayImgs.unsignedVariableBitLengths(longArray1, 3, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(shortArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[21];
      longArray0[0] = (-223L);
      longArray0[1] = 647L;
      longArray0[2] = 0L;
      longArray0[3] = 105L;
      longArray0[4] = 1088L;
      longArray0[5] = 0L;
      longArray0[6] = 1327L;
      ArrayImg<UnsignedLongType, LongArray> arrayImg0 = ArrayImgs.unsignedLongss(longArray0, longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-223L);
      doubleArray0[1] = (double) 105L;
      doubleArray0[2] = (double) 105L;
      doubleArray0[3] = (double) 105L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 647L;
      doubleArray0[6] = (double) (-223L);
      doubleArray0[7] = 29.0;
      ArrayImgs.complexDoubles(doubleArray0, longArray0);
      LongArray longArray1 = new LongArray(2040);
      longArray1.createView(arrayImg0);
      ArrayImg<UnsignedLongType, LongArray> arrayImg1 = ArrayImgs.unsignedLongs(longArray1, longArray0);
      assertNotSame(arrayImg1, arrayImg0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1004L;
      ArrayImgs.bits(longArray0);
      long[] longArray1 = new long[2];
      longArray1[0] = 1004L;
      longArray1[1] = 1004L;
      ArrayImgs.booleans(longArray1);
      ArrayImgs.unsigned12Bits(longArray0);
      ArrayImgs.ints(longArray1);
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      dirtyFloatArray0.createArray(1);
      dirtyFloatArray0.createArray(1);
      ArrayImgs.floats(dirtyFloatArray0, longArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2519);
      shortArray0[1] = (short)574;
      shortArray0[2] = (short)1623;
      shortArray0[3] = (short)56;
      ArrayImgs.shorts(shortArray0, longArray0);
      ArrayImg<LongType, LongArray> arrayImg0 = ArrayImgs.longs(longArray1, longArray1);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = 1315L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      long[] longArray1 = new long[7];
      longArray1[0] = (-64L);
      longArray1[1] = 1315L;
      longArray1[2] = 1315L;
      longArray1[3] = 1315L;
      longArray1[4] = 1315L;
      longArray1[6] = 1315L;
      ArrayImg<IntType, IntBufferAccess> arrayImg0 = ArrayImgs.ints((IntBufferAccess) null, longArray1);
      LongArray longArray2 = new LongArray(844);
      LongArray longArray3 = longArray2.createArray(4);
      longArray3.createView(arrayImg0);
      ArrayImgs.unsigned12Bits(longArray3, longArray1);
      ArrayImgs.unsignedInts((IntBufferAccess) null, longArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 63;
      intArray0[1] = (-240);
      intArray0[2] = 844;
      intArray0[3] = 844;
      ArrayImgs.unsignedInts(intArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-64, 1315, 1315, 1315, 1315, 0, 1315]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = null;
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(doubleAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-35L);
      longArray0[1] = (-35L);
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.ints((IntBufferAccess) null, longArray0);
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<LongType, LongArray> arrayImg0 = ArrayImgs.longs(longArray0, longArray0);
      assertEquals(3, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, false);
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(floatBufferAccess0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[12];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      DirtyByteArray dirtyByteArray0 = mock(DirtyByteArray.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(dirtyByteArray0, longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-2968L);
      longArray0[1] = 0L;
      longArray0[2] = 1435L;
      longArray0[3] = 1362L;
      longArray0[4] = (-1159L);
      longArray0[5] = 4L;
      IntBufferAccess intBufferAccess0 = mock(IntBufferAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.argbs(intBufferAccess0, longArray0);
      DirtyByteArray dirtyByteArray0 = mock(DirtyByteArray.class, new ViolatedAssumptionAnswer());
      ArrayImg<ByteType, DirtyByteArray> arrayImg0 = ArrayImgs.bytes(dirtyByteArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[10];
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = new LongArray(14);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned128Bits((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongArray longArray1 = new LongArray(longArray0);
      long[] longArray2 = new long[2];
      longArray2[0] = 3001L;
      longArray2[1] = 3001L;
      ArrayImgs.longs(longArray0, longArray2);
      int int0 = 0;
      LongArray longArray3 = null;
      try {
        longArray3 = new LongArray((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[] longArray0 = new long[2];
      IntArray intArray0 = mock(IntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.argbs(intArray0, longArray0);
      IntArray intArray1 = mock(IntArray.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.argbs(intArray1, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongArray longArray1 = new LongArray(longArray0);
      IntBufferAccess intBufferAccess0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.argbs((IntBufferAccess) null, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<ARGBType, IntArray> arrayImg0 = ArrayImgs.argbs((int[]) null, longArray0);
      assertEquals(1, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-2968L);
      longArray0[1] = 0L;
      longArray0[2] = 1435L;
      longArray0[3] = 1362L;
      longArray0[4] = 1435L;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1509);
      intArray0[1] = 8;
      intArray0[2] = 0;
      ArrayImg<ARGBType, IntArray> arrayImg0 = ArrayImgs.argbs(intArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = 1315L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.shorts(dirtyShortArray0, longArray0);
      short[] shortArray0 = new short[0];
      ArrayImgs.shorts(shortArray0, longArray0);
      ArrayImg<LongType, LongArray> arrayImg0 = ArrayImgs.longs(longArray0, longArray0);
      assertEquals((-252564160L), arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[0];
      LongArray longArray2 = new LongArray(longArray1);
      LongArray longArray3 = longArray2.createArray(2041);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned12Bits(longArray3, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-2968L);
      longArray0[1] = 0L;
      longArray0[2] = 1435L;
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      ArrayImgs.ints((IntBufferAccess) null, longArray0);
      LongArray longArray1 = new LongArray(7);
      LongArray longArray2 = longArray1.createArray(7);
      ArrayImg<Unsigned12BitType, LongArray> arrayImg0 = ArrayImgs.unsigned12Bits(longArray2, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[0];
      LongArray longArray1 = new LongArray(longArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(byteArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = (-1485L);
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      ArrayImgs.ints((IntBufferAccess) null, longArray0);
      int int0 = (-1802);
      LongArray longArray1 = null;
      try {
        longArray1 = new LongArray((-1802));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1802
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[0];
      IntBufferAccess intBufferAccess0 = mock(IntBufferAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.ints(intBufferAccess0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = mock(DoubleBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(doubleBufferAccess0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DirtyBooleanArray dirtyBooleanArray0 = mock(DirtyBooleanArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 578L;
      longArray0[2] = (-3198L);
      longArray0[3] = 64L;
      longArray0[4] = 2L;
      ArrayImgs.booleans(dirtyBooleanArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 578, -3198, 64, 2]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 211L;
      longArray0[1] = (-118L);
      longArray0[2] = 2L;
      longArray0[3] = 2L;
      longArray0[4] = 1213L;
      ShortBufferAccess shortBufferAccess0 = mock(ShortBufferAccess.class, new ViolatedAssumptionAnswer());
      ArrayImg<UnsignedShortType, ShortBufferAccess> arrayImg0 = ArrayImgs.unsignedShorts(shortBufferAccess0, longArray0);
      assertEquals((-120805096L), arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[18];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      LongArray longArray1 = new LongArray(longArray0);
      ArrayImg<Unsigned12BitType, LongArray> arrayImg0 = ArrayImgs.unsigned12Bits(longArray1, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1629.0564F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1939.2544F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1471.0F);
      floatArray0[8] = 0.0F;
      FloatArray floatArray1 = new FloatArray(floatArray0);
      floatArray1.createArray(0);
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = longArray1.createArray(0);
      ArrayImg<Unsigned12BitType, LongArray> arrayImg0 = ArrayImgs.unsigned12Bits(longArray2, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-2968L);
      longArray0[1] = 0L;
      longArray0[2] = 1435L;
      longArray0[3] = 1362L;
      longArray0[4] = (-1159L);
      longArray0[5] = 4L;
      longArray0[6] = 0L;
      ArrayImgs.shorts(dirtyShortArray0, longArray0);
      short[] shortArray0 = new short[5];
      ArrayImgs.shorts(shortArray0, longArray0);
      ArrayImg<LongType, LongArray> arrayImg0 = ArrayImgs.longs(longArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-501);
      shortArray0[1] = (short) (-741);
      shortArray0[2] = (short)2256;
      shortArray0[4] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)1370;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-3200L);
      longArray0[3] = (long) (short)0;
      ArrayImgs.unsignedShorts(shortArray0, longArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      long[] longArray1 = new long[1];
      longArray1[0] = (-2219L);
      ArrayImg<FloatType, FloatArray> arrayImg0 = ArrayImgs.floats(floatArray0, longArray1);
      assertEquals(1, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 63L;
      longArray0[1] = 0L;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (-733.08F);
      FloatArray floatArray1 = new FloatArray(floatArray0);
      floatArray1.setValue(1, 0.0F);
      floatArray1.createArray(1);
      ArrayImgs.floats(floatArray1, longArray0);
      IntArray intArray0 = mock(IntArray.class, new ViolatedAssumptionAnswer());
      ArrayImgs.ints(intArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [63, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = 9223372036854775807L;
      longArray0[1] = 1844L;
      longArray0[2] = 1844L;
      ArrayImgs.booleans(booleanAccess0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3400336
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-851);
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(shortArray0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 156L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1361L);
      longArray0[4] = 1448L;
      longArray0[5] = 31L;
      longArray0[6] = (-1053L);
      long[] longArray1 = new long[5];
      longArray1[0] = 2642L;
      longArray1[1] = 31L;
      longArray1[2] = 31L;
      longArray1[3] = 156L;
      longArray1[4] = 31L;
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(longArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 24556840464 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[] longArray0 = new long[17];
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 156L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1361L);
      longArray0[4] = 1448L;
      longArray0[5] = 31L;
      longArray0[6] = (-1053L);
      ArrayImgs.complexFloats((FloatBufferAccess) null, longArray0);
      long[] longArray1 = new long[5];
      longArray1[0] = 2642L;
      longArray1[1] = 31L;
      longArray1[2] = 31L;
      longArray1[3] = 156L;
      longArray1[4] = 31L;
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(longArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 24556840464 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      IntAccess intAccess0 = mock(IntAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(intAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2204L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1905L);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-2204, 0, 0, -1905]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[] longArray0 = new long[12];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ByteArray byteArray0 = mock(ByteArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[8];
      longArray0[0] = 1782L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 481L;
      longArray0[4] = 4294967295L;
      longArray0[5] = 2986L;
      longArray0[6] = (-599L);
      longArray0[7] = (-2584L);
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes(byteArray0, longArray0);
      assertEquals(8, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BooleanAccess booleanAccess0 = mock(BooleanAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[0] = (-658L);
      longArray0[1] = 4095L;
      long long0 = 1844L;
      longArray0[2] = 1844L;
      long long1 = 9223372036854775807L;
      longArray0[3] = 9223372036854775807L;
      ArrayImgs.booleans(booleanAccess0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-658, 4095, 1844, 9223372036854775807]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supports only bit depths between 1 and 64, can't take 0
         //
         verifyException("net.imglib2.type.AbstractBit64Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedVariableBitLengths(129, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supports only bit depths between 1 and 64, can't take 129
         //
         verifyException("net.imglib2.type.AbstractBit64Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongss((long[]) null, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IntAccess intAccess0 = mock(IntAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      longArray0[0] = 1253L;
      ArrayImgs.ints(intAccess0, longArray0);
      long[] longArray1 = new long[4];
      longArray1[0] = 1253L;
      longArray1[1] = 1253L;
      longArray1[2] = (-773L);
      longArray1[3] = 1253L;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongss(longArray1, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-2968L);
      longArray0[1] = 0L;
      longArray0[2] = 1435L;
      longArray0[3] = 1362L;
      longArray0[4] = (-1159L);
      longArray0[5] = 4L;
      longArray0[6] = 0L;
      ArrayImgs.shorts(dirtyShortArray0, longArray0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-727);
      ArrayImgs.shorts(shortArray0, longArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes(byteArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[10];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      int[] intArray0 = new int[0];
      ArrayImg<UnsignedIntType, IntArray> arrayImg0 = ArrayImgs.unsignedInts(intArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3263);
      intArray0[1] = 126;
      intArray0[2] = 1554;
      intArray0[3] = 611;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 126;
      longArray0[1] = 0L;
      longArray0[2] = (long) 1554;
      longArray0[3] = (long) 611;
      longArray0[4] = (long) 126;
      longArray0[5] = (long) 126;
      longArray0[6] = (long) 611;
      ArrayImg<UnsignedIntType, IntArray> arrayImg0 = ArrayImgs.unsignedInts(intArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[15];
      ArrayImg<UnsignedIntType, IntAccess> arrayImg0 = ArrayImgs.unsignedInts((IntAccess) null, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[0];
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.complexFloats(floatArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1665L;
      longArray0[1] = (-9223372036854775808L);
      longArray0[2] = (-900L);
      longArray0[3] = (-1786L);
      longArray0[4] = 4L;
      longArray0[5] = 0L;
      ArrayImgs.complexFloats((float[]) null, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [1665, -9223372036854775808, -900, -1786, 4, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4634.4648);
      ArrayImg<ComplexDoubleType, DoubleArray> arrayImg0 = ArrayImgs.complexDoubles(doubleArray0, longArray0);
      assertEquals(6, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-223L);
      longArray0[1] = 647L;
      longArray0[2] = 0L;
      longArray0[3] = 105L;
      longArray0[4] = 1088L;
      longArray0[5] = 0L;
      longArray0[6] = 1327L;
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-223L);
      doubleArray0[1] = (double) 105L;
      doubleArray0[2] = (double) 105L;
      doubleArray0[3] = (double) 105L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 647L;
      doubleArray0[6] = (double) (-223L);
      doubleArray0[7] = 29.0;
      ArrayImg<ComplexDoubleType, DoubleArray> arrayImg0 = ArrayImgs.complexDoubles(doubleArray0, longArray0);
      assertEquals(7, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.floats(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayImgs.bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3508L);
      longArray0[1] = 201L;
      // Undeclared exception!
      try { 
        ArrayImgs.bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-3508, 201]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 63L;
      longArray0[1] = 0L;
      longArray0[2] = 2L;
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [63, 0, 2]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned2Bits((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImg<ARGBType, IntBufferAccess> arrayImg0 = ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      assertEquals(3, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongss(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-64L);
      longArray0[1] = 1315L;
      longArray0[2] = 3001L;
      ArrayImgs.longs(longArray0, longArray0);
      ArrayImgs.argbs((IntBufferAccess) null, longArray0);
      ArrayImgs.ints((IntBufferAccess) null, longArray0);
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      ArrayImgs.doubles(doubleAccess0, longArray0);
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedLongs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-64, 1315, 3001]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedShorts((short[]) null, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-501);
      shortArray0[1] = (short) (-741);
      shortArray0[2] = (short)2256;
      shortArray0[3] = (short) (-2871);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)1370;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-3200L);
      longArray0[3] = (long) (short)0;
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = ArrayImgs.unsignedShorts(shortArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned128Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 0L;
      longArray0[0] = 0L;
      long long1 = (-1015L);
      longArray0[1] = (-1015L);
      long long2 = (-825L);
      longArray0[2] = (-825L);
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned128Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -1015, -825]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) (byte) (-1);
      longArray0[8] = 63L;
      ArrayImg<ByteType, ByteArray> arrayImg0 = ArrayImgs.bytes(byteArray0, longArray0);
      assertEquals(9, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 407;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayImgs.ints(intArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.ints(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 1164L;
      longArray0[2] = 0L;
      longArray0[3] = 4L;
      long long0 = 725L;
      longArray0[4] = 725L;
      longArray0[5] = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        ArrayImgs.ints(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 1164, 0, 4, 725, -9223372036854775808]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.ints((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImg<UnsignedShortType, ShortBufferAccess> arrayImg0 = ArrayImgs.unsignedShorts((ShortBufferAccess) null, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = mock(DirtyShortArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-422L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      ArrayImgs.unsignedShorts(dirtyShortArray0, longArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)19;
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes(byteArray0, longArray0);
      assertEquals(4, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = mock(IntBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.ints(intBufferAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayImg<IntType, IntArray> arrayImg0 = ArrayImgs.ints(intArray0, longArray0);
      assertEquals(3, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<DoubleType, DoubleAccess> arrayImg0 = ArrayImgs.doubles((DoubleAccess) null, longArray0);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      ArrayImg<DoubleType, DoubleBufferAccess> arrayImg0 = ArrayImgs.doubles((DoubleBufferAccess) null, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[22];
      // Undeclared exception!
      try { 
        ArrayImgs.booleans(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.booleans(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      long[] longArray0 = new long[8];
      ArrayImg<FloatType, FloatArray> arrayImg0 = ArrayImgs.floats((float[]) null, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1629.0564F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1939.2544F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1471.0F);
      floatArray0[8] = 0.0F;
      FloatArray floatArray1 = new FloatArray(floatArray0);
      FloatArray floatArray2 = floatArray1.createArray(0);
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      ArrayImg<FloatType, FloatArray> arrayImg0 = ArrayImgs.floats(floatArray2, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      long[] longArray0 = new long[4];
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned12Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned12Bits(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsigned12Bits((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long[] longArray0 = new long[2];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedShorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 31L;
      longArray0[1] = (-844L);
      longArray0[2] = 0L;
      longArray0[3] = (-288L);
      longArray0[4] = 0L;
      longArray0[5] = 872L;
      longArray0[6] = (-1L);
      longArray0[7] = (-1380L);
      longArray0[8] = (-2433L);
      // Undeclared exception!
      try { 
        ArrayImgs.doubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [31, -844, 0, -288, 0, 872, -1, -1380, -2433]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[7];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      LongArray longArray1 = new LongArray(longArray0);
      longArray1.createView((Object) null);
      int int0 = 40;
      longArray1.createArray(40);
      longArray1.createArray(40);
      longArray1.createView((Object) null);
      ArrayImgs.longs(longArray1, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.shorts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1901L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-1901, 0, 1]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      long[] longArray0 = new long[14];
      // Undeclared exception!
      try { 
        ArrayImgs.complexDoubles(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte) (-101);
      longArray0[3] = (long) (byte)63;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 134L;
      longArray0[6] = (long) (byte)63;
      longArray0[7] = (long) (byte)0;
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes(byteArray0, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = mock(ByteBufferAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(byteBufferAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BooleanArray booleanArray0 = mock(BooleanArray.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 31L;
      longArray0[2] = 1448L;
      longArray0[3] = 362L;
      longArray0[4] = (-3095L);
      longArray0[5] = 1142L;
      longArray0[6] = (-386L);
      ArrayImgs.booleans(booleanArray0, longArray0);
      ByteBufferAccess byteBufferAccess0 = mock(ByteBufferAccess.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = null;
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedBytes(byteBufferAccess0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<NativeBoolType, DirtyBooleanArray> arrayImg0 = ArrayImgs.booleans((DirtyBooleanArray) null, longArray0);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.longs(longArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1191L);
      longArray0[1] = 12L;
      LongArray longArray1 = new LongArray(longArray0);
      LongArray longArray2 = new LongArray(0);
      longArray1.createView(longArray2);
      ArrayImgs.longs(longArray1, longArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes(byteArray0, longArray0);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long[] longArray0 = new long[10];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<UnsignedByteType, ByteArray> arrayImg0 = ArrayImgs.unsignedBytes((byte[]) null, longArray0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayImgs.unsignedLongs(longArray0, longArray0);
      ArrayImg<ByteType, ByteArray> arrayImg0 = ArrayImgs.bytes((byte[]) null, longArray0);
      assertEquals(2, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      short[] shortArray0 = new short[0];
      ArrayImg<ShortType, ShortArray> arrayImg0 = ArrayImgs.shorts(shortArray0, longArray0);
      assertEquals(1, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayImgs.unsignedLongss(longArray0, longArray0);
      ArrayImg<ByteType, ByteBufferAccess> arrayImg0 = ArrayImgs.bytes((ByteBufferAccess) null, longArray0);
      assertEquals(6, arrayImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)255;
      shortArray0[1] = (short) (-2159);
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short) (-2159);
      ArrayImgs.shorts(shortArray0, longArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)119;
      byteArray0[4] = (byte)119;
      ArrayImgs.bytes(byteArray0, longArray0);
      // Undeclared exception!
      try { 
        ArrayImgs.unsignedInts(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, -2159]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }
}
