/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:28:58 GMT 2022
 */

package net.imglib2.img.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.LinkedList;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.Positionable;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayLocalizingCursor;
import net.imglib2.img.array.ArrayLocalizingSubIntervalCursor;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.sparse.CharNtree;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractArrayLocalizingCursor_ESTest extends AbstractArrayLocalizingCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      long[] longArray0 = new long[7];
      Fraction fraction0 = new Fraction();
      LinkedList<VolatileFloatArray> linkedList0 = new LinkedList<VolatileFloatArray>();
      PlanarImg<VolatileFloatType, VolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, VolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(planarImg0);
      long[] longArray1 = new long[1];
      longArray1[0] = 3L;
      ArrayImg<VolatileFloatType, LongBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, LongBufferAccess>(longBufferAccess0, longArray1, fraction0);
      arrayImg0.setLinkedType(volatileFloatType0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.img.array.ArrayLocalizingCursor cannot be cast to class net.imglib2.img.planar.PlanarImg$PlanarContainerSampler (net.imglib2.img.array.ArrayLocalizingCursor and net.imglib2.img.planar.PlanarImg$PlanarContainerSampler are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @43d5c19f)
         //
         verifyException("net.imglib2.img.planar.PlanarImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      Fraction fraction0 = new Fraction();
      LongBufferAccess longBufferAccess1 = new LongBufferAccess();
      long[] longArray0 = new long[3];
      longArray0[0] = 15L;
      longArray0[1] = 4095L;
      longArray0[2] = 0L;
      ArrayImg<VolatileFloatType, LongBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, LongBufferAccess>(longBufferAccess1, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      arrayImg0.setLinkedType(volatileFloatType0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      long[] longArray0 = new long[10];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, LongBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, LongBufferAccess>(longBufferAccess0, longArray0, fraction0);
      LinkedList<VolatileFloatArray> linkedList0 = new LinkedList<VolatileFloatArray>();
      PlanarImg<VolatileFloatType, VolatileFloatArray> planarImg0 = new PlanarImg<VolatileFloatType, VolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(planarImg0);
      arrayImg0.setLinkedType(volatileFloatType0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      assertNotNull(longBufferAccess0);
      assertEquals(8, longBufferAccess0.getNumBytesPerEntity());
      assertEquals(0, longBufferAccess0.getArrayLength());
      assertFalse(longBufferAccess0.isDirect());
      assertFalse(longBufferAccess0.isValid());
      
      long[] longArray0 = new long[7];
      Fraction fraction0 = new Fraction();
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.getRatio(), 0.01);
      assertEquals(1L, fraction0.getNumerator());
      assertEquals(1L, fraction0.getDenominator());
      
      ArrayImg<VolatileFloatType, LongBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, LongBufferAccess>(longBufferAccess0, longArray0, fraction0);
      assertNotNull(arrayImg0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longBufferAccess0.getNumBytesPerEntity());
      assertEquals(0, longBufferAccess0.getArrayLength());
      assertFalse(longBufferAccess0.isDirect());
      assertFalse(longBufferAccess0.isValid());
      assertEquals(1.0, fraction0.getRatio(), 0.01);
      assertEquals(1L, fraction0.getNumerator());
      assertEquals(1L, fraction0.getDenominator());
      assertEquals(7, arrayImg0.numDimensions());
      assertEquals(0L, arrayImg0.size());
      
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      assertNotNull(volatileFloatType0);
      assertEquals(3.4028234663852886E38, volatileFloatType0.getMaxValue(), 0.01);
      assertTrue(volatileFloatType0.isValid());
      assertEquals((-3.4028234663852886E38), volatileFloatType0.getMinValue(), 0.01);
      assertEquals(1.401298464324817E-45, volatileFloatType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileFloatType0.getIndex());
      assertEquals(32, volatileFloatType0.getBitsPerPixel());
      
      arrayImg0.setLinkedType(volatileFloatType0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(8, longBufferAccess0.getNumBytesPerEntity());
      assertEquals(0, longBufferAccess0.getArrayLength());
      assertFalse(longBufferAccess0.isDirect());
      assertFalse(longBufferAccess0.isValid());
      assertEquals(1.0, fraction0.getRatio(), 0.01);
      assertEquals(1L, fraction0.getNumerator());
      assertEquals(1L, fraction0.getDenominator());
      assertEquals(7, arrayImg0.numDimensions());
      assertEquals(0L, arrayImg0.size());
      assertEquals(3.4028234663852886E38, volatileFloatType0.getMaxValue(), 0.01);
      assertTrue(volatileFloatType0.isValid());
      assertEquals((-3.4028234663852886E38), volatileFloatType0.getMinValue(), 0.01);
      assertEquals(1.401298464324817E-45, volatileFloatType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileFloatType0.getIndex());
      assertEquals(32, volatileFloatType0.getBitsPerPixel());
      
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2600L;
      longArray0[1] = 0L;
      CharNtree charNtree0 = new CharNtree(longArray0, longArray0, 'w');
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, CharNtree> arrayImg0 = new ArrayImg<VolatileFloatType, CharNtree>(charNtree0, longArray0, fraction0);
      Supplier<VolatileFloatType> supplier0 = (Supplier<VolatileFloatType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<VolatileFloatType> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      arrayImg0.max((Positionable) pointSample0);
      ArrayLocalizingSubIntervalCursor<VolatileFloatType> arrayLocalizingSubIntervalCursor0 = null;
      try {
        arrayLocalizingSubIntervalCursor0 = new ArrayLocalizingSubIntervalCursor<VolatileFloatType>(arrayImg0, (-3860), (-2051));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-598L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(longBuffer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-73);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      LongBufferAccess longBufferAccess1 = longBufferAccess0.newInstance(byteBuffer0, false);
      DoubleType doubleType0 = new DoubleType((byte)0);
      Fraction fraction0 = doubleType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, LongBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, LongBufferAccess>(longBufferAccess1, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayLocalizingCursor", e);
      }
  }
}
