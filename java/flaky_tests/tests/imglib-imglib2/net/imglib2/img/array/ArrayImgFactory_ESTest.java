/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:02:01 GMT 2022
 */

package net.imglib2.img.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import net.imglib2.Dimensions;
import net.imglib2.FinalDimensions;
import net.imglib2.FinalInterval;
import net.imglib2.PointSampleList;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.ShortAccess;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import net.imglib2.img.basictypeaccess.array.DirtyLongArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.type.label.BasePairBitType;
import net.imglib2.type.label.BasePairCharType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.type.volatiles.VolatileIntType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayImgFactory_ESTest extends ArrayImgFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[3];
      float[] floatArray0 = new float[2];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0, true);
      FloatType floatType0 = new FloatType(floatBufferAccess0);
      Fraction fraction0 = floatType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2129L);
      longArray0[1] = 49L;
      BasePairCharType basePairCharType0 = new BasePairCharType();
      Fraction fraction0 = basePairCharType0.getEntitiesPerPixel();
      ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      ArrayImgFactory<VolatileARGBType> arrayImgFactory0 = new ArrayImgFactory<VolatileARGBType>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)76;
      arrayImgFactory0.create(longArray0, volatileARGBType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1277);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1277;
      longArray0[1] = (long) 1277;
      longArray0[2] = (long) 1277;
      longArray0[3] = (long) 1277;
      longArray0[4] = (long) 1277;
      longArray0[5] = (long) 1277;
      longArray0[6] = 4L;
      VolatileARGBType volatileARGBType0 = new VolatileARGBType(1277);
      Fraction fraction0 = volatileARGBType0.getEntitiesPerPixel();
      ArrayImg<UnsignedByteType, DirtyFloatArray> arrayImg0 = new ArrayImg<UnsignedByteType, DirtyFloatArray>(dirtyFloatArray0, longArray0, fraction0);
      ArrayImgFactory<UnsignedByteType> arrayImgFactory0 = arrayImg0.factory();
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(2147483645);
      arrayImgFactory0.create(longArray0, unsignedByteType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType(46842661499305984L);
      ArrayImgFactory<Unsigned4BitType> arrayImgFactory0 = new ArrayImgFactory<Unsigned4BitType>(unsigned4BitType0);
      long[] longArray0 = new long[4];
      longArray0[0] = 46842661499305984L;
      longArray0[1] = 46842661499305984L;
      longArray0[2] = 46842661499305984L;
      longArray0[3] = 46842661499305984L;
      arrayImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(Integer.MAX_VALUE);
      ArrayImgFactory<VolatileUnsignedShortType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedShortType>(volatileUnsignedShortType0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) Integer.MAX_VALUE;
      longArray0[7] = (long) Integer.MAX_VALUE;
      arrayImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(986);
      BitType bitType0 = new BitType(dirtyLongArray0);
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>(bitType0);
      int[] intArray0 = new int[3];
      intArray0[0] = 986;
      intArray0[1] = 1476;
      intArray0[2] = 986;
      arrayImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatType floatType0 = new FloatType();
      ArrayImgFactory<FloatType> arrayImgFactory0 = new ArrayImgFactory<FloatType>(floatType0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1073741824;
      intArray0[1] = (int) (byte)53;
      intArray0[2] = (int) (byte)53;
      intArray0[3] = (int) (byte)53;
      intArray0[4] = 1073741824;
      intArray0[5] = 1073741824;
      intArray0[6] = (int) (byte)53;
      arrayImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirtyLongArray dirtyLongArray0 = new DirtyLongArray(986);
      BitType bitType0 = new BitType(dirtyLongArray0);
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>(bitType0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 986;
      longArray0[1] = (long) 986;
      longArray0[2] = (long) 986;
      ArrayImg<BitType, ?> arrayImg0 = arrayImgFactory0.create(longArray0);
      arrayImgFactory0.create((Dimensions) arrayImg0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType();
      ArrayImgFactory<Unsigned4BitType> arrayImgFactory0 = new ArrayImgFactory<Unsigned4BitType>(unsigned4BitType0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(3471);
      arrayImgFactory0.create((Dimensions) pointSampleList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      Fraction fraction0 = basePairBitType0.getEntitiesPerPixel();
      // Undeclared exception!
      try { 
        ArrayImgFactory.numEntitiesRangeCheck((long[]) null, fraction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[0];
      Fraction fraction0 = new Fraction(757L, 0L);
      // Undeclared exception!
      try { 
        ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayImgFactory<VolatileARGBType> arrayImgFactory0 = new ArrayImgFactory<VolatileARGBType>();
      ArrayImgFactory<Unsigned128BitType> arrayImgFactory1 = new ArrayImgFactory<Unsigned128BitType>();
      try { 
        arrayImgFactory1.imgFactory((Object) arrayImgFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.array.ArrayImgFactory: net.imglib2.img.array.ArrayImgFactory does not implement NativeType.
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>();
      long[] longArray0 = new long[2];
      longArray0[0] = 528L;
      longArray0[1] = 8034489L;
      BasePairBitType basePairBitType0 = new BasePairBitType();
      // Undeclared exception!
      arrayImgFactory0.create(longArray0, basePairBitType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayImgFactory<IntType> arrayImgFactory0 = new ArrayImgFactory<IntType>();
      long[] longArray0 = new long[3];
      longArray0[0] = 1L;
      longArray0[1] = 8449134815332331520L;
      longArray0[2] = 604L;
      IntType intType0 = new IntType();
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0, intType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -962183168
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      ArrayImgFactory<VolatileARGBType> arrayImgFactory0 = new ArrayImgFactory<VolatileARGBType>(volatileARGBType0);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FloatType floatType0 = new FloatType(0.0F);
      ArrayImgFactory<FloatType> arrayImgFactory0 = new ArrayImgFactory<FloatType>(floatType0);
      long[] longArray0 = new long[3];
      longArray0[0] = 1907L;
      longArray0[1] = 1069L;
      longArray0[2] = 9223372036854775807L;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 9223372036852737225 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FloatType floatType0 = new FloatType();
      ArrayImgFactory<FloatType> arrayImgFactory0 = new ArrayImgFactory<FloatType>(floatType0);
      long[] longArray0 = new long[5];
      longArray0[0] = 4779L;
      longArray0[1] = 2134L;
      longArray0[2] = 767L;
      longArray0[3] = 5829576029115854144L;
      longArray0[4] = 20661046784L;
      // Undeclared exception!
      arrayImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeBoolType nativeBoolType0 = new NativeBoolType(true);
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>(nativeBoolType0);
      long[] longArray0 = new long[4];
      longArray0[0] = 1733L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 64240L;
      longArray0[3] = 1977L;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1051965744
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractBooleanArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitType bitType0 = new BitType();
      ArrayImgFactory<BitType> arrayImgFactory0 = new ArrayImgFactory<BitType>(bitType0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2147483632;
      intArray0[1] = 2147483639;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 72057593199067139 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NativeBoolType nativeBoolType0 = new NativeBoolType(true);
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>(nativeBoolType0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = Integer.MAX_VALUE;
      // Undeclared exception!
      arrayImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntType intType0 = new IntType(2737);
      ArrayImgFactory<IntType> arrayImgFactory0 = new ArrayImgFactory<IntType>(intType0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2737;
      intArray0[1] = 2737;
      intArray0[2] = 3030;
      intArray0[3] = 2737;
      intArray0[4] = 2737;
      intArray0[5] = 2737;
      intArray0[6] = 2147483645;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1238551138
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ShortType shortType0 = new ShortType((ShortAccess) null);
      ArrayImgFactory<ShortType> arrayImgFactory0 = new ArrayImgFactory<ShortType>(shortType0);
      long[] longArray0 = new long[0];
      FinalDimensions finalDimensions0 = new FinalDimensions(longArray0);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) finalDimensions0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(2935.455F);
      ArrayImgFactory<VolatileFloatType> arrayImgFactory0 = new ArrayImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[2];
      longArray0[0] = 2147483647L;
      longArray0[1] = 980L;
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 2104533974060 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntType intType0 = new IntType(2147483645);
      ArrayImgFactory<IntType> arrayImgFactory0 = new ArrayImgFactory<IntType>(intType0);
      long[] longArray0 = new long[6];
      longArray0[3] = (long) 2147483645;
      longArray0[4] = (long) 2147483645;
      longArray0[5] = (long) 2147483645;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      // Undeclared exception!
      arrayImgFactory0.create((Dimensions) finalInterval0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(63);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleBufferAccess0);
      ArrayImgFactory<NativeARGBDoubleType> arrayImgFactory0 = new ArrayImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-56529955796702364L);
      Unsigned128BitType unsigned128BitType0 = new Unsigned128BitType();
      Fraction fraction0 = unsigned128BitType0.getEntitiesPerPixel();
      // Undeclared exception!
      try { 
        ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 113059911593404728 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      ArrayImgFactory<VolatileUnsignedLongType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedLongType>(volatileUnsignedLongType0);
      ImgFactory<Object> imgFactory0 = arrayImgFactory0.imgFactory((Object) volatileUnsignedLongType0);
      assertNotNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayImgFactory<NativeBoolType> arrayImgFactory0 = new ArrayImgFactory<NativeBoolType>();
      // Undeclared exception!
      try { 
        arrayImgFactory0.imgFactory((DirtyFloatArray) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasePairBitType basePairBitType0 = new BasePairBitType();
      ArrayImgFactory<BasePairBitType> arrayImgFactory0 = new ArrayImgFactory<BasePairBitType>(basePairBitType0);
      long[] longArray0 = new long[1];
      longArray0[0] = 1069584456723640832L;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0, basePairBitType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 50136771408920664 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[0];
      Fraction fraction0 = new Fraction();
      int int0 = ArrayImgFactory.numEntitiesRangeCheck(longArray0, fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayImgFactory<UnsignedByteType> arrayImgFactory0 = new ArrayImgFactory<UnsignedByteType>();
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      ArrayImgFactory<VolatileARGBType> arrayImgFactory0 = new ArrayImgFactory<VolatileARGBType>(volatileARGBType0);
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((long[]) null, volatileARGBType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      ArrayImgFactory<UnsignedLongType> arrayImgFactory0 = new ArrayImgFactory<UnsignedLongType>(unsignedLongType0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayImgFactory<Unsigned128BitType> arrayImgFactory0 = new ArrayImgFactory<Unsigned128BitType>();
      // Undeclared exception!
      try { 
        arrayImgFactory0.create((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayImgFactory<VolatileARGBType> arrayImgFactory0 = new ArrayImgFactory<VolatileARGBType>();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VolatileIntType volatileIntType0 = new VolatileIntType();
      ArrayImgFactory<VolatileIntType> arrayImgFactory0 = new ArrayImgFactory<VolatileIntType>(volatileIntType0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0, volatileIntType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }
}
