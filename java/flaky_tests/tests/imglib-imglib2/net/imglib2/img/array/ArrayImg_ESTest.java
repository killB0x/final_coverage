/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:41:06 GMT 2022
 */

package net.imglib2.img.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.FinalInterval;
import net.imglib2.FlatIterationOrder;
import net.imglib2.Interval;
import net.imglib2.PointSampleList;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.array.CharArray;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DirtyLongArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.VolatileFloatAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import net.imglib2.img.sparse.BooleanNtree;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.img.sparse.IntNtree;
import net.imglib2.img.sparse.LongNtree;
import net.imglib2.type.label.BasePairBitType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayImg_ESTest extends ArrayImg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[2] = (long) 1359;
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.C;
      BasePairBitType basePairBitType0 = new BasePairBitType(basePairBitType_Base0);
      Fraction fraction0 = basePairBitType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, DirtyDoubleArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyDoubleArray>(dirtyDoubleArray0, longArray0, fraction0);
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor((Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(0, true);
      long[] longArray0 = new long[1];
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.A;
      BasePairBitType basePairBitType0 = new BasePairBitType(basePairBitType_Base0);
      Fraction fraction0 = basePairBitType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, VolatileIntArray> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileIntArray>(volatileIntArray0, longArray0, fraction0);
      VolatileIntArray volatileIntArray1 = arrayImg0.update(basePairBitType_Base0);
      assertSame(volatileIntArray1, volatileIntArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction();
      IntNtree intNtree0 = new IntNtree(longArray0, longArray0, 20);
      ArrayImg<VolatileFloatType, IntNtree> arrayImg0 = new ArrayImg<VolatileFloatType, IntNtree>((Object) intNtree0, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.update(intNtree0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.img.sparse.IntNtree cannot be cast to class net.imglib2.img.sparse.NtreeImg$PositionProvider (net.imglib2.img.sparse.IntNtree and net.imglib2.img.sparse.NtreeImg$PositionProvider are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4aaf92c9)
         //
         verifyException("net.imglib2.img.sparse.NtreeAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, BooleanNtree> arrayImg0 = new ArrayImg<VolatileFloatType, BooleanNtree>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.supportsOptimizedCursor((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      ArrayImg<VolatileFloatType, BooleanNtree> arrayImg0 = new ArrayImg<VolatileFloatType, BooleanNtree>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.supportsOptimizedCursor(finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[7];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, DirtyLongArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyLongArray>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, FloatBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, FloatBufferAccess>((Object) null, longArray0, fraction0);
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor((Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction();
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      ArrayImg<VolatileFloatType, FloatBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, FloatBufferAccess>((Object) null, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      arrayImg0.setLinkedType(volatileFloatType0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor((Interval) finalInterval0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, DoubleNtree> arrayImg0 = new ArrayImg<VolatileFloatType, DoubleNtree>((DoubleNtree) null, longArray0, fraction0);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      // Undeclared exception!
      try { 
        arrayImg0.cursor((Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, VolatileFloatAccess> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileFloatAccess>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[19];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, VolatileIntArray> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileIntArray>((Object) null, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType((-1.0F));
      arrayImg0.setLinkedType(volatileFloatType0);
      // Undeclared exception!
      try { 
        arrayImg0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayImg<VolatileFloatType, DoubleNtree> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, DoubleNtree>((DoubleNtree) null, longArray0, (Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractNativeImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[0];
      ArrayImg<VolatileFloatType, DoubleNtree> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, DoubleNtree>((DoubleNtree) null, longArray0, fraction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[17];
      BooleanNtree booleanNtree0 = new BooleanNtree(longArray0, longArray0, true);
      Fraction fraction0 = new Fraction(0L, 0L);
      ArrayImg<VolatileFloatType, BooleanNtree> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, BooleanNtree>(booleanNtree0, longArray0, fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayImg<VolatileFloatType, IntArray> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, IntArray>((Object) null, longArray0, (Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractNativeImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[3];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, FloatBufferAccess> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, FloatBufferAccess>(fraction0, longArray0, fraction0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.util.Fraction cannot be cast to class net.imglib2.img.basictypeaccess.DataAccess (net.imglib2.util.Fraction and net.imglib2.img.basictypeaccess.DataAccess are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @4aaf92c9)
         //
         verifyException("net.imglib2.img.array.ArrayImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[0];
      ArrayImg<VolatileFloatType, LongNtree> arrayImg0 = null;
      try {
        arrayImg0 = new ArrayImg<VolatileFloatType, LongNtree>((Object) null, longArray0, fraction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(0, true);
      long[] longArray0 = new long[1];
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.A;
      BasePairBitType basePairBitType0 = new BasePairBitType(basePairBitType_Base0);
      Fraction fraction0 = basePairBitType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, VolatileIntArray> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileIntArray>(volatileIntArray0, longArray0, fraction0);
      ArrayImgFactory<VolatileFloatType> arrayImgFactory0 = arrayImg0.factory();
      assertNotNull(arrayImgFactory0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 51;
      longArray1[1] = (long) 51;
      BooleanNtree booleanNtree0 = new BooleanNtree(longArray1, longArray1, false);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      Fraction fraction0 = unsignedLongType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, BooleanNtree> arrayImg0 = new ArrayImg<VolatileFloatType, BooleanNtree>(booleanNtree0, longArray1, fraction0);
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      boolean boolean0 = arrayImg0.supportsOptimizedCursor(finalInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[17];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, BooleanNtree> arrayImg0 = new ArrayImg<VolatileFloatType, BooleanNtree>((Object) null, longArray0, fraction0);
      PointSampleList<VolatileFloatType> pointSampleList0 = new PointSampleList<VolatileFloatType>(21);
      boolean boolean0 = arrayImg0.supportsOptimizedCursor(pointSampleList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(1);
      long[] longArray0 = new long[2];
      ArrayImg<VolatileFloatType, DoubleBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, DoubleBufferAccess>((Object) dirtyDoubleArray0, longArray0, fraction0);
      PointSampleList<VolatileFloatType> pointSampleList0 = new PointSampleList<VolatileFloatType>(1812);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor((Interval) pointSampleList0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(3304);
      Fraction fraction0 = unsignedByteType0.getEntitiesPerPixel();
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 1;
      LongArray longArray1 = new LongArray(longArray0);
      long[] longArray2 = new long[3];
      longArray2[0] = (long) 3304;
      longArray2[1] = (long) 3304;
      ArrayImg<VolatileFloatType, LongArray> arrayImg0 = new ArrayImg<VolatileFloatType, LongArray>(longArray1, longArray2, fraction0);
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(19);
      ArrayImg<VolatileFloatType, DirtyDoubleArray> arrayImg1 = new ArrayImg<VolatileFloatType, DirtyDoubleArray>(dirtyDoubleArray0, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.cursor((Interval) arrayImg1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction();
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      ArrayImg<VolatileFloatType, DoubleNtree> arrayImg0 = new ArrayImg<VolatileFloatType, DoubleNtree>((DoubleNtree) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.cursor((Interval) finalInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(3304);
      Fraction fraction0 = unsignedByteType0.getEntitiesPerPixel();
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 1;
      long[] longArray1 = new long[4];
      ArrayImg<VolatileFloatType, LongArray> arrayImg0 = new ArrayImg<VolatileFloatType, LongArray>((LongArray) null, longArray1, fraction0);
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(19);
      ArrayImg<VolatileFloatType, DirtyDoubleArray> arrayImg1 = new ArrayImg<VolatileFloatType, DirtyDoubleArray>(dirtyDoubleArray0, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.cursor((Interval) arrayImg1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, FloatBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, FloatBufferAccess>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.update(fraction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[2];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, VolatileIntArray> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileIntArray>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VolatileIntArray volatileIntArray0 = new VolatileIntArray(1, false);
      long[] longArray0 = new long[7];
      BitType bitType0 = new BitType();
      Fraction fraction0 = bitType0.getEntitiesPerPixel();
      ArrayImg<VolatileFloatType, VolatileIntArray> arrayImg0 = new ArrayImg<VolatileFloatType, VolatileIntArray>(volatileIntArray0, longArray0, fraction0);
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(5, false);
      ArrayImg<VolatileFloatType, VolatileFloatArray> arrayImg1 = new ArrayImg<VolatileFloatType, VolatileFloatArray>(volatileFloatArray0, longArray0, fraction0);
      Object object0 = arrayImg1.subIntervalIterationOrder(arrayImg0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, DirtyDoubleArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyDoubleArray>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.AbstractArrayLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnsignedByteType unsignedByteType0 = new UnsignedByteType(3304);
      Fraction fraction0 = unsignedByteType0.getEntitiesPerPixel();
      long[] longArray0 = new long[5];
      ArrayImg<VolatileFloatType, LongArray> arrayImg0 = new ArrayImg<VolatileFloatType, LongArray>((LongArray) null, longArray0, fraction0);
      FlatIterationOrder flatIterationOrder0 = arrayImg0.iterationOrder();
      assertNotNull(flatIterationOrder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileFloatType, FloatBufferAccess> arrayImg0 = new ArrayImg<VolatileFloatType, FloatBufferAccess>((Object) null, longArray0, fraction0);
      ArrayImg<VolatileFloatType, CharArray> arrayImg1 = new ArrayImg<VolatileFloatType, CharArray>((Object) null, longArray0, fraction0);
      // Undeclared exception!
      try { 
        arrayImg1.randomAccess((Interval) arrayImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.array.ArrayRandomAccess", e);
      }
  }
}
