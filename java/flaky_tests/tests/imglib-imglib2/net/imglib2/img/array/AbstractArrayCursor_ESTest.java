/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:22:06 GMT 2022
 */

package net.imglib2.img.array;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import net.imglib2.img.array.ArrayCursor;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArraySubIntervalCursor;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileByteArray;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractArrayCursor_ESTest extends AbstractArrayCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      byte[] byteArray0 = new byte[4];
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(byteArray0, false);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 53;
      longArray0[1] = (long) (byte)40;
      longArray0[2] = (long) 53;
      longArray0[3] = (long) (byte)40;
      longArray0[4] = (long) (byte)6;
      longArray0[5] = (long) (byte)40;
      longArray0[6] = (long) (byte)6;
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayImg0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(66, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction(66, 66);
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      int[] intArray0 = new int[7];
      arrayCursor0.localize(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(49, false);
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[1];
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.fwd();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(79, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.hasNext();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(10, true);
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 10;
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.getIntPosition(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(53, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      // Undeclared exception!
      try { 
        arrayCursor0.getIntPosition(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(53, false);
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[7];
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.reset();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      byte[] byteArray0 = new byte[4];
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(byteArray0, false);
      long[] longArray0 = new long[7];
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      // Undeclared exception!
      try { 
        arrayCursor0.getIntPosition(2876);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(53, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArraySubIntervalCursor<VolatileByteType> arraySubIntervalCursor0 = new ArraySubIntervalCursor<VolatileByteType>(arrayImg0, 5, (-1));
      ArraySubIntervalCursor<VolatileByteType> arraySubIntervalCursor1 = new ArraySubIntervalCursor<VolatileByteType>(arraySubIntervalCursor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(53, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.jumpFwd(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(9985, true);
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 53;
      longArray0[1] = (long) 9985;
      longArray0[2] = (long) 53;
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      arrayImg0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(53, false);
      long[] longArray0 = new long[1];
      Fraction fraction0 = new Fraction();
      ArrayImg<VolatileByteType, VolatileByteArray> arrayImg0 = new ArrayImg<VolatileByteType, VolatileByteArray>(volatileByteArray0, longArray0, fraction0);
      VolatileByteType volatileByteType0 = new VolatileByteType(arrayImg0);
      arrayImg0.setLinkedType(volatileByteType0);
      ArrayCursor<VolatileByteType> arrayCursor0 = arrayImg0.cursor();
      arrayCursor0.toString();
      assertFalse(arrayCursor0.hasNext());
  }
}
