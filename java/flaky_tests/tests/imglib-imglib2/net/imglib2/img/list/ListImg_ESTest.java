/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:57:53 GMT 2022
 */

package net.imglib2.img.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.volatiles.VolatileFloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListImg_ESTest extends ListImg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = null;
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 2072L;
      longArray0[3] = (-1865L);
      longArray0[4] = (-814L);
      longArray0[5] = 6L;
      longArray0[6] = 9981L;
      longArray0[7] = (-2575L);
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, (VolatileFloatType) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        listImg0.set(int0, volatileFloatType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 64L;
      longArray0[1] = 4294967295L;
      longArray0[2] = 813L;
      longArray0[3] = 4294967295L;
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, volatileFloatType0);
      assertEquals((-446951476638912L), listImg0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 18L;
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, (VolatileFloatType) null);
      listImg0.set(0, volatileFloatType0);
      assertEquals(1, listImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 18L;
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      doReturn((VolatileFloatType) null, (VolatileFloatType) null, (VolatileFloatType) null, (VolatileFloatType) null, (VolatileFloatType) null).when(volatileFloatType0).createVariable();
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, volatileFloatType0);
      VolatileFloatType volatileFloatType1 = listImg0.get(8);
      assertNull(volatileFloatType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 18L;
      BoolType boolType0 = new BoolType(false);
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      BoolType boolType1 = listImg0.get(1);
      assertEquals(0.0, boolType1.getPhaseDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, (VolatileFloatType) null);
      // Undeclared exception!
      try { 
        listImg0.get((-1073741823));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 18L;
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(volatileFloatType0).toString();
      doReturn((VolatileFloatType) null).when(volatileFloatType0).createVariable();
      VolatileFloatType volatileFloatType1 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      doReturn(volatileFloatType0, volatileFloatType0, volatileFloatType0, volatileFloatType0, volatileFloatType0).when(volatileFloatType1).createVariable();
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, volatileFloatType1);
      // Undeclared exception!
      try { 
        listImg0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.list.ListImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, volatileFloatType0);
      ListImg<ListImg<VolatileFloatType>> listImg1 = null;
      try {
        listImg1 = new ListImg<ListImg<VolatileFloatType>>((long[]) null, listImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.AbstractImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 255L;
      longArray0[1] = (-382L);
      BoolType boolType0 = new BoolType(true);
      ListImg<BoolType> listImg0 = null;
      try {
        listImg0 = new ListImg<BoolType>(longArray0, boolType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -97410
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[0];
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = null;
      try {
        listImg0 = new ListImg<BoolType>(longArray0, boolType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      ListImg<BoolType> listImg1 = listImg0.copy();
      assertNotSame(listImg1, listImg0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, (VolatileFloatType) null);
      ListImg<VolatileFloatType> listImg1 = listImg0.copy();
      assertFalse(listImg1.equals((Object)listImg0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[2];
      ListImg<BoolType> listImg0 = null;
      try {
        listImg0 = new ListImg<BoolType>((Collection<BoolType>) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.list.ListImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 187L;
      longArray0[1] = 187L;
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, (VolatileFloatType) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      VolatileFloatType volatileFloatType0 = mock(VolatileFloatType.class, new ViolatedAssumptionAnswer());
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(longArray0, volatileFloatType0);
      // Undeclared exception!
      try { 
        listImg0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
