/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:13:08 GMT 2022
 */

package net.imglib2.img;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.Interval;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealLocalizable;
import net.imglib2.img.Img;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.ImgView;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.nio.ShortBufferAccess;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.sparse.ByteNtree;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.img.sparse.NtreeImgFactory;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.type.label.BasePairCharType;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ImgView_ESTest extends ImgView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3L;
      BoolType boolType0 = new BoolType(false);
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      ListImgFactory<BoolType> listImgFactory0 = new ListImgFactory<BoolType>(boolType0);
      ImgView<BoolType> imgView0 = new ImgView<BoolType>(listImg0, listImgFactory0);
      Cursor<BoolType> cursor0 = imgView0.localizingCursor((Interval) listImg0);
      assertNotNull(cursor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[3];
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType();
      ListImg<Unsigned4BitType> listImg0 = new ListImg<Unsigned4BitType>(longArray0, unsigned4BitType0);
      IterableRandomAccessibleInterval<Unsigned4BitType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<Unsigned4BitType>) listImg0);
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<Unsigned4BitType>) iterableRandomAccessibleInterval0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ByteType> supplier0 = (Supplier<ByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<ByteType> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ByteType>((short)372, biConsumer0, supplier0);
      RandomAccessibleOnRealRandomAccessible<ByteType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ByteType>(functionRealRandomAccessible0);
      IntervalView<ByteType> intervalView0 = new IntervalView<ByteType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      IterableRandomAccessibleInterval<ByteType> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<ByteType>) intervalView0);
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<ByteType>) iterableRandomAccessibleInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)372;
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      // Undeclared exception!
      try { 
        imgView0.cursor((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      SubsampleIntervalView<BoolType> subsampleIntervalView0 = new SubsampleIntervalView<BoolType>(listImg0, longArray0);
      ListImgFactory<BoolType> listImgFactory0 = new ListImgFactory<BoolType>(boolType0);
      ImgView<BoolType> imgView0 = new ImgView<BoolType>(subsampleIntervalView0, listImgFactory0);
      // Undeclared exception!
      try { 
        imgView0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[4];
      Fraction fraction0 = new Fraction();
      LinkedList<FloatBufferAccess> linkedList0 = new LinkedList<FloatBufferAccess>();
      PlanarImg<BasePairCharType, FloatBufferAccess> planarImg0 = new PlanarImg<BasePairCharType, FloatBufferAccess>(linkedList0, longArray0, fraction0);
      ArrayImg<BasePairCharType, PlanarImg<BasePairCharType, FloatBufferAccess>> arrayImg0 = new ArrayImg<BasePairCharType, PlanarImg<BasePairCharType, FloatBufferAccess>>(planarImg0, longArray0, fraction0);
      ArrayImgFactory<BasePairCharType> arrayImgFactory0 = arrayImg0.factory();
      ImgView<BasePairCharType> imgView0 = null;
      try {
        imgView0 = new ImgView<BasePairCharType>(planarImg0, arrayImgFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.planar.PlanarRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[7];
      ListImg<NativeBoolType> listImg0 = new ListImg<NativeBoolType>(longArray0, (NativeBoolType) null);
      ImgView<NativeBoolType> imgView0 = null;
      try {
        imgView0 = new ImgView<NativeBoolType>(listImg0, (ImgFactory<NativeBoolType>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(1);
      ShortType shortType0 = new ShortType(shortBufferAccess0);
      NtreeImgFactory<ShortType> ntreeImgFactory0 = new NtreeImgFactory<ShortType>(shortType0);
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<ShortType>) null, (ImgFactory<ShortType>) ntreeImgFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractWrappedRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)372;
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0, intArray0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      Cursor<ShortType> cursor0 = imgView0.localizingCursor();
      assertNotNull(cursor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[4];
      LinkedList<ByteType> linkedList0 = new LinkedList<ByteType>();
      ListImg<ByteType> listImg0 = new ListImg<ByteType>(linkedList0, longArray0);
      BasePairCharType basePairCharType0 = new BasePairCharType('m');
      CellImgFactory<BasePairCharType> cellImgFactory0 = new CellImgFactory<BasePairCharType>(basePairCharType0);
      ByteType byteType0 = new ByteType();
      ImgFactory<ByteType> imgFactory0 = cellImgFactory0.imgFactory(byteType0);
      Img<ByteType> img0 = ImgView.wrap((RandomAccessibleInterval<ByteType>) listImg0, imgFactory0);
      assertNotNull(img0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3141L;
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      SubsampleIntervalView<BoolType> subsampleIntervalView0 = new SubsampleIntervalView<BoolType>(listImg0, longArray0);
      Img<BoolType> img0 = ImgView.wrap((RandomAccessibleInterval<BoolType>) subsampleIntervalView0);
      assertNotNull(img0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      PriorityQueue<VolatileFloatType> priorityQueue0 = new PriorityQueue<VolatileFloatType>();
      ListImg<VolatileFloatType> listImg0 = new ListImg<VolatileFloatType>(priorityQueue0, longArray0);
      Img<VolatileFloatType> img0 = ImgView.wrap((RandomAccessibleInterval<VolatileFloatType>) listImg0);
      assertNotNull(img0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImgView.wrap((RandomAccessibleInterval<ByteType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[4];
      ByteNtree byteNtree0 = new ByteNtree(longArray0, longArray0, (byte)0);
      Fraction fraction0 = new Fraction();
      NtreeImg<BasePairCharType, ByteNtree> ntreeImg0 = new NtreeImg<BasePairCharType, ByteNtree>(byteNtree0, longArray0, fraction0);
      SubsampleIntervalView<BasePairCharType> subsampleIntervalView0 = new SubsampleIntervalView<BasePairCharType>(ntreeImg0, longArray0);
      LinkedList<FloatBufferAccess> linkedList0 = new LinkedList<FloatBufferAccess>();
      PlanarImg<BasePairCharType, FloatBufferAccess> planarImg0 = new PlanarImg<BasePairCharType, FloatBufferAccess>(linkedList0, longArray0, fraction0);
      ArrayImg<BasePairCharType, PlanarImg<BasePairCharType, FloatBufferAccess>> arrayImg0 = new ArrayImg<BasePairCharType, PlanarImg<BasePairCharType, FloatBufferAccess>>(planarImg0, longArray0, fraction0);
      ArrayImgFactory<BasePairCharType> arrayImgFactory0 = arrayImg0.factory();
      ImgView<BasePairCharType> imgView0 = new ImgView<BasePairCharType>(subsampleIntervalView0, arrayImgFactory0);
      // Undeclared exception!
      try { 
        imgView0.localizingCursor((Interval) arrayImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      ImgView<ShortType> imgView1 = new ImgView<ShortType>(imgView0, imgFactory0);
      Cursor<ShortType> cursor0 = imgView1.cursor((Interval) listImg0);
      assertNotNull(cursor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3140L;
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      SubsampleIntervalView<BoolType> subsampleIntervalView0 = new SubsampleIntervalView<BoolType>(listImg0, longArray0);
      ListImgFactory<BoolType> listImgFactory0 = new ListImgFactory<BoolType>(boolType0);
      ImgView<BoolType> imgView0 = new ImgView<BoolType>(listImg0, listImgFactory0);
      ImgView<BoolType> imgView1 = new ImgView<BoolType>(imgView0, listImgFactory0);
      Object object0 = imgView1.subIntervalIterationOrder(subsampleIntervalView0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)372;
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0, intArray0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      Object object0 = imgView0.subIntervalIterationOrder(listImg0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3123L;
      BoolType boolType0 = new BoolType();
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(longArray0, boolType0);
      ListImgFactory<BoolType> listImgFactory0 = new ListImgFactory<BoolType>(boolType0);
      ImgView<BoolType> imgView0 = new ImgView<BoolType>(listImg0, listImgFactory0);
      ImgView<BoolType> imgView1 = new ImgView<BoolType>(imgView0, listImgFactory0);
      boolean boolean0 = imgView1.supportsOptimizedCursor(imgView0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)372;
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0, intArray0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      boolean boolean0 = imgView0.supportsOptimizedCursor(listImg0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)372;
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0, intArray0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      Img<ShortType> img0 = imgView0.copy();
      assertNotNull(img0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1043L;
      ShortType shortType0 = new ShortType((short)372);
      ListImg<ShortType> listImg0 = new ListImg<ShortType>(longArray0, shortType0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0);
      ImgFactory<ShortType> imgFactory0 = cellImgFactory0.imgFactory(shortType0);
      ImgView<ShortType> imgView0 = new ImgView<ShortType>(listImg0, imgFactory0);
      Cursor<ShortType> cursor0 = imgView0.cursor();
      assertNotNull(cursor0);
  }
}
