/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:11:03 GMT 2022
 */

package net.imglib2.img;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.PointSampleList;
import net.imglib2.img.NativeImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileShortArray;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.planar.PlanarImgFactory;
import net.imglib2.img.sparse.NtreeImgFactory;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NativeImgFactory_ESTest extends NativeImgFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(67);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2157;
      intArray0[1] = 67;
      intArray0[2] = 991;
      intArray0[3] = 67;
      intArray0[4] = 67;
      intArray0[5] = 1438;
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0, intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 67;
      longArray0[1] = (long) 67;
      NativeImg<VolatileFloatType, ?> nativeImg0 = cellImgFactory0.create(longArray0, volatileFloatType0);
      assertEquals(4489L, nativeImg0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(1.0F);
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 123;
      NativeImg<VolatileFloatType, ?> nativeImg0 = cellImgFactory0.create(longArray0);
      assertEquals(123L, nativeImg0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      int[] intArray0 = new int[1];
      intArray0[0] = 27;
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0, intArray0);
      NativeImg<VolatileFloatType, ?> nativeImg0 = cellImgFactory0.create(intArray0);
      assertEquals(27L, nativeImg0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VolatileShortArray volatileShortArray0 = new VolatileShortArray(0, false);
      VolatileShortType volatileShortType0 = new VolatileShortType(volatileShortArray0);
      ArrayImgFactory<VolatileShortType> arrayImgFactory0 = new ArrayImgFactory<VolatileShortType>(volatileShortType0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(64);
      NativeImg<VolatileShortType, ?> nativeImg0 = arrayImgFactory0.create((Dimensions) pointSampleList0);
      assertEquals(0L, nativeImg0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[7];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      PlanarImgFactory<VolatileFloatType> planarImgFactory0 = new PlanarImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[4];
      int[] intArray0 = new int[5];
      intArray0[0] = (-2103);
      intArray0[1] = 11;
      intArray0[2] = (-113);
      intArray0[3] = (-1054);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      CellGrid.CellIntervals cellGrid_CellIntervals0 = cellGrid0.cellIntervals();
      NativeImg<VolatileFloatType, ?> nativeImg0 = planarImgFactory0.create((Dimensions) cellGrid_CellIntervals0);
      assertEquals(1L, nativeImg0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(834);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      NtreeImgFactory<VolatileFloatType> ntreeImgFactory0 = new NtreeImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ntreeImgFactory0.create(longArray0, volatileFloatType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      FloatBuffer floatBuffer0 = byteBuffer0.asFloatBuffer();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      ArrayImgFactory<VolatileFloatType> arrayImgFactory0 = new ArrayImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 15;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) 15;
      longArray0[3] = (long) 15;
      longArray0[4] = (long) 15;
      longArray0[5] = (long) 15;
      longArray0[6] = (long) 15;
      longArray0[7] = (long) 15;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0, volatileFloatType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 2562890625 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(787);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 787;
      longArray0[1] = (long) 787;
      longArray0[2] = (long) 787;
      longArray0[3] = (long) 787;
      longArray0[4] = (long) 787;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0, volatileFloatType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1217910897
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      CellImgFactory<NativeARGBDoubleType> cellImgFactory0 = new CellImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3402);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, false);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(byteBufferAccess0);
      ArrayImgFactory<VolatileUnsignedByteType> arrayImgFactory0 = new ArrayImgFactory<VolatileUnsignedByteType>(volatileUnsignedByteType0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 3402;
      longArray0[1] = (long) 3402;
      longArray0[2] = (long) 3402;
      longArray0[3] = (long) 3402;
      longArray0[4] = (long) 3402;
      longArray0[5] = (long) 3402;
      longArray0[6] = (long) 3402;
      longArray0[7] = (long) 3402;
      // Undeclared exception!
      try { 
        arrayImgFactory0.create(longArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Number of elements in ArrayImg too big, use for example CellImg instead: 8277419909537259776 > 2147483647
         //
         verifyException("net.imglib2.img.array.ArrayImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ARGBType aRGBType0 = new ARGBType(63);
      PlanarImgFactory<ARGBType> planarImgFactory0 = new PlanarImgFactory<ARGBType>(aRGBType0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 63;
      longArray0[1] = (long) 63;
      longArray0[2] = (long) 63;
      longArray0[3] = (long) 63;
      longArray0[4] = (long) 63;
      longArray0[5] = (long) 63;
      longArray0[6] = (long) 63;
      // Undeclared exception!
      planarImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      CellImgFactory<NativeARGBDoubleType> cellImgFactory0 = new CellImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(491, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      int[] intArray0 = new int[3];
      intArray0[0] = 491;
      intArray0[1] = 491;
      intArray0[2] = 491;
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0, intArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 491;
      longArray0[1] = (long) 491;
      longArray0[2] = (long) 491;
      longArray0[3] = (long) 491;
      longArray0[4] = 1008L;
      longArray0[5] = (long) 491;
      longArray0[6] = (long) 491;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(0.0F);
      NtreeImgFactory<VolatileFloatType> ntreeImgFactory0 = new NtreeImgFactory<VolatileFloatType>(volatileFloatType0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        ntreeImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0, 0, 0, 0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess();
      ARGBType aRGBType0 = new ARGBType(intBufferAccess0);
      CellImgFactory<ARGBType> cellImgFactory0 = new CellImgFactory<ARGBType>(aRGBType0);
      int[] intArray0 = new int[8];
      intArray0[0] = 56;
      intArray0[1] = 56;
      intArray0[2] = 56;
      intArray0[3] = 56;
      intArray0[4] = 56;
      intArray0[5] = 56;
      intArray0[6] = 56;
      intArray0[7] = 56;
      // Undeclared exception!
      cellImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      CellImgFactory<NativeARGBDoubleType> cellImgFactory0 = new CellImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(15);
      FloatBuffer floatBuffer0 = byteBuffer0.asFloatBuffer();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = 15;
      intArray0[3] = 15;
      intArray0[4] = 15;
      intArray0[5] = 15;
      intArray0[6] = 15;
      intArray0[7] = 15;
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>(volatileFloatType0, intArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      CellImgFactory<NativeARGBDoubleType> cellImgFactory0 = new CellImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      long[] longArray0 = new long[3];
      longArray0[0] = 720L;
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-719]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      CellImgFactory<NativeARGBDoubleType> cellImgFactory0 = new CellImgFactory<NativeARGBDoubleType>(nativeARGBDoubleType0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VolatileShortType volatileShortType0 = new VolatileShortType();
      NtreeImgFactory<VolatileShortType> ntreeImgFactory0 = new NtreeImgFactory<VolatileShortType>(volatileShortType0);
      // Undeclared exception!
      try { 
        ntreeImgFactory0.create((long[]) null, volatileShortType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }
}
