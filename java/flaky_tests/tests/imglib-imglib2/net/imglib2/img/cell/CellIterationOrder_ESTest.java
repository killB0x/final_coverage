/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:49:46 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.nio.ByteBuffer;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.CellIterationOrder;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.sparse.LongNtree;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellIterationOrder_ESTest extends CellIterationOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 67;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      LazyCellImg.Get<Cell<LongNtree>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<LongNtree>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileUnsignedLongType, LongNtree> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, LongNtree>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      CellIterationOrder cellIterationOrder0 = new CellIterationOrder(lazyCellImg0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 67;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      LazyCellImg.Get<Cell<LongNtree>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<LongNtree>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileUnsignedLongType, LongNtree> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, LongNtree>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(67);
      IntBufferAccess intBufferAccess0 = IntBufferAccess.fromByteBuffer(byteBuffer0, true);
      ARGBType aRGBType0 = new ARGBType(intBufferAccess0);
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      LazyCellImg<NativeBoolType, DirtyVolatileDoubleArray> lazyCellImg1 = new LazyCellImg<NativeBoolType, DirtyVolatileDoubleArray>(cellGrid0, fraction0, (LazyCellImg.Get<Cell<DirtyVolatileDoubleArray>>) null);
      CellIterationOrder cellIterationOrder0 = lazyCellImg1.iterationOrder();
      boolean boolean0 = cellIterationOrder0.equals(lazyCellImg0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[4];
      intArray0[0] = 40;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      LazyCellImg<NativeBoolType, DirtyVolatileDoubleArray> lazyCellImg0 = new LazyCellImg<NativeBoolType, DirtyVolatileDoubleArray>(cellGrid0, nativeBoolType0, (LazyCellImg.Get<Cell<DirtyVolatileDoubleArray>>) null);
      CellIterationOrder cellIterationOrder0 = lazyCellImg0.iterationOrder();
      boolean boolean0 = cellIterationOrder0.equals(cellIterationOrder0);
      assertTrue(boolean0);
  }
}
