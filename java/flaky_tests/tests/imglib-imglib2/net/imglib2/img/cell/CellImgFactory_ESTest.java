/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:41:46 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Dimensions;
import net.imglib2.FinalDimensions;
import net.imglib2.FinalInterval;
import net.imglib2.PointSampleList;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileShortArray;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.sparse.LongNtree;
import net.imglib2.img.sparse.Ntree;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellImgFactory_ESTest extends CellImgFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 12L;
      longArray0[1] = 12L;
      longArray0[2] = 12L;
      longArray0[3] = 12L;
      longArray0[4] = 12L;
      longArray0[5] = 12L;
      longArray0[6] = 12L;
      CellImgFactory.verifyDimensions(longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2499;
      intArray0[1] = 1;
      intArray0[2] = 10;
      intArray0[3] = 2628;
      CellImgFactory.verifyDimensions(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      CellImgFactory<DoubleType> cellImgFactory0 = new CellImgFactory<DoubleType>(doubleType0);
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      cellImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      CellImgFactory<VolatileDoubleType> cellImgFactory0 = new CellImgFactory<VolatileDoubleType>(volatileDoubleType0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2647;
      cellImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType(824L);
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>(unsigned12BitType0);
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      cellImgFactory0.create((Dimensions) finalInterval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[0];
      try { 
        CellImgFactory.verifyDimensions(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      try { 
        CellImgFactory.verifyDimensions(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>();
      CellImgFactory<Unsigned128BitType> cellImgFactory1 = new CellImgFactory<Unsigned128BitType>();
      try { 
        cellImgFactory1.imgFactory((Object) cellImgFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // net.imglib2.img.cell.CellImgFactory: net.imglib2.img.cell.CellImgFactory does not implement NativeType.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      Fraction fraction0 = new Fraction();
      // Undeclared exception!
      CellImgFactory.getCellDimensions(intArray0, 65501, fraction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      // Undeclared exception!
      try { 
        CellImgFactory.getCellDimensions((int[]) null, 18, fraction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      Fraction fraction0 = new Fraction();
      // Undeclared exception!
      try { 
        CellImgFactory.getCellDimensions(intArray0, (-6), fraction0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CellImgFactory<ShortType> cellImgFactory0 = new CellImgFactory<ShortType>();
      long[] longArray0 = new long[0];
      ShortType shortType0 = new ShortType((short)33);
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0, shortType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType(824L);
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>(unsigned12BitType0);
      long[] longArray0 = new long[3];
      longArray0[0] = 824L;
      longArray0[1] = 824L;
      longArray0[2] = 824L;
      // Undeclared exception!
      cellImgFactory0.create(longArray0, unsigned12BitType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2200;
      intArray0[1] = 2467;
      intArray0[2] = 40;
      intArray0[3] = 2203;
      CellImgFactory<DoubleType> cellImgFactory0 = new CellImgFactory<DoubleType>(intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2467;
      longArray0[1] = (long) 2203;
      longArray0[2] = (long) 2203;
      DoubleType doubleType0 = new DoubleType();
      // Undeclared exception!
      cellImgFactory0.create(longArray0, doubleType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FloatType floatType0 = new FloatType(1645.983F);
      int[] intArray0 = new int[1];
      intArray0[0] = 773;
      CellImgFactory<FloatType> cellImgFactory0 = new CellImgFactory<FloatType>(floatType0, intArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 773;
      longArray0[1] = (long) 773;
      longArray0[2] = (long) 773;
      longArray0[3] = 4L;
      longArray0[4] = (long) 773;
      longArray0[5] = (long) 773;
      longArray0[6] = (long) 773;
      longArray0[7] = (long) 773;
      longArray0[8] = (long) 773;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0, floatType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -436684924
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CellImgFactory<VolatileFloatType> cellImgFactory0 = new CellImgFactory<VolatileFloatType>();
      long[] longArray0 = new long[2];
      longArray0[0] = 2147483647L;
      longArray0[1] = 3649384835292831088L;
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(0.0F);
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0, volatileFloatType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -632055903
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3048;
      intArray0[1] = 2189;
      CellImgFactory<VolatileDoubleType> cellImgFactory0 = new CellImgFactory<VolatileDoubleType>(intArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3048;
      longArray0[1] = (long) 2189;
      longArray0[2] = (long) 2189;
      longArray0[3] = (long) 3048;
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0, volatileDoubleType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnsignedVariableBitLengthType unsignedVariableBitLengthType0 = new UnsignedVariableBitLengthType(8);
      CellImgFactory<UnsignedVariableBitLengthType> cellImgFactory0 = new CellImgFactory<UnsignedVariableBitLengthType>(unsignedVariableBitLengthType0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VolatileARGBType volatileARGBType0 = new VolatileARGBType(781);
      CellImgFactory<VolatileARGBType> cellImgFactory0 = new CellImgFactory<VolatileARGBType>(volatileARGBType0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 781;
      longArray0[1] = (long) 781;
      // Undeclared exception!
      cellImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      CellImgFactory<VolatileDoubleType> cellImgFactory0 = new CellImgFactory<VolatileDoubleType>(volatileDoubleType0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2647;
      longArray0[1] = (long) 2647;
      longArray0[2] = (long) 2647;
      longArray0[3] = (long) 2647;
      // Undeclared exception!
      cellImgFactory0.create(longArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess();
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType(longBufferAccess0);
      CellImgFactory<Unsigned4BitType> cellImgFactory0 = new CellImgFactory<Unsigned4BitType>(unsigned4BitType0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2447;
      longArray0[1] = (long) 2447;
      longArray0[2] = (long) 2447;
      longArray0[3] = (long) 2447;
      longArray0[4] = (long) 2447;
      longArray0[5] = (long) 2447;
      longArray0[6] = (long) 2447;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -740768451
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      int[] intArray0 = new int[1];
      intArray0[0] = 4082;
      CellImgFactory<VolatileDoubleType> cellImgFactory0 = new CellImgFactory<VolatileDoubleType>(volatileDoubleType0, intArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = 201L;
      longArray0[1] = (long) 4082;
      longArray0[2] = (long) 4082;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(38045L);
      CellImgFactory<UnsignedLongType> cellImgFactory0 = new CellImgFactory<UnsignedLongType>(unsignedLongType0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType((-787L));
      CellImgFactory<VolatileUnsignedLongType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedLongType>(volatileUnsignedLongType0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2774;
      intArray0[1] = 85;
      // Undeclared exception!
      cellImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(2568);
      CellImgFactory<VolatileUnsignedShortType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedShortType>(volatileUnsignedShortType0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2568;
      intArray0[1] = 2568;
      intArray0[2] = 2568;
      intArray0[3] = 2568;
      intArray0[4] = 2568;
      intArray0[5] = 2568;
      intArray0[6] = 2568;
      // Undeclared exception!
      cellImgFactory0.create(intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VolatileShortArray volatileShortArray0 = new VolatileShortArray(2697, true);
      UnsignedShortType unsignedShortType0 = new UnsignedShortType(volatileShortArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2697;
      intArray0[1] = 2697;
      intArray0[2] = 2697;
      intArray0[3] = 2697;
      intArray0[4] = 2697;
      intArray0[5] = 14;
      intArray0[6] = 2697;
      intArray0[7] = 2697;
      CellImgFactory<UnsignedShortType> cellImgFactory0 = new CellImgFactory<UnsignedShortType>(unsignedShortType0, intArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -7932514
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      CellImgFactory<UnsignedIntType> cellImgFactory0 = new CellImgFactory<UnsignedIntType>(unsignedIntType0);
      int[] intArray0 = new int[4];
      intArray0[0] = 9986;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 9983;
      intArray0[3] = 746;
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1058771809
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(840);
      int[] intArray0 = new int[6];
      intArray0[0] = 840;
      intArray0[1] = 840;
      intArray0[2] = 840;
      intArray0[3] = 840;
      intArray0[4] = 840;
      intArray0[5] = 840;
      CellImgFactory<VolatileUnsignedIntType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedIntType>(volatileUnsignedIntType0, intArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VolatileByteType volatileByteType0 = new VolatileByteType((byte) (-1));
      CellImgFactory<VolatileByteType> cellImgFactory0 = new CellImgFactory<VolatileByteType>(volatileByteType0);
      int[] intArray0 = new int[1];
      FinalDimensions finalDimensions0 = new FinalDimensions(intArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalDimensions0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = 1138L;
      longArray0[4] = 1L;
      longArray0[5] = 18750L;
      Ntree<Long> ntree0 = new Ntree<Long>(longArray0, (Long) longArray0[0]);
      LongNtree longNtree0 = new LongNtree(ntree0, longArray0);
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType(longNtree0);
      CellImgFactory<Unsigned4BitType> cellImgFactory0 = new CellImgFactory<Unsigned4BitType>(unsigned4BitType0);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      // Undeclared exception!
      cellImgFactory0.create((Dimensions) finalInterval0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType();
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>(unsigned12BitType0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 65501;
      longArray0[1] = (long) 65501;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 65501;
      longArray0[4] = (long) 65501;
      longArray0[5] = (long) 65501;
      longArray0[6] = (long) 65501;
      longArray0[7] = (long) 10;
      longArray0[8] = (long) 10;
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1247463375
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(byteBufferAccess0);
      CellImgFactory<VolatileUnsignedByteType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedByteType>(volatileUnsignedByteType0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(10);
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CellImgFactory<LongType> cellImgFactory0 = new CellImgFactory<LongType>();
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      CellImgFactory<NativeBoolType> cellImgFactory0 = null;
      try {
        cellImgFactory0 = new CellImgFactory<NativeBoolType>(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CellImgFactory<Unsigned4BitType> cellImgFactory0 = null;
      try {
        cellImgFactory0 = new CellImgFactory<Unsigned4BitType>((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteType byteType0 = new ByteType((byte)119);
      int[] intArray0 = new int[0];
      CellImgFactory<ByteType> cellImgFactory0 = null;
      try {
        cellImgFactory0 = new CellImgFactory<ByteType>(byteType0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Dimensions are zero length.
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnsignedByteType unsignedByteType0 = new UnsignedByteType();
      CellImgFactory<UnsignedByteType> cellImgFactory0 = null;
      try {
        cellImgFactory0 = new CellImgFactory<UnsignedByteType>(unsignedByteType0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CellImgFactory<VolatileUnsignedByteType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedByteType>();
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType();
      ImgFactory<Object> imgFactory0 = cellImgFactory0.imgFactory((Object) volatileUnsignedByteType0);
      assertNotNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CellImgFactory<UnsignedIntType> cellImgFactory0 = new CellImgFactory<UnsignedIntType>();
      long[] longArray0 = new long[1];
      longArray0[0] = 889L;
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(889L);
      cellImgFactory0.create(longArray0, unsignedIntType0);
      assertArrayEquals(new long[] {889L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      int[] intArray0 = new int[1];
      intArray0[0] = 931;
      try { 
        CellImgFactory.getCellDimensions(intArray0, 931, fraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of entities in cell too large. Use smaller cell size.
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[1];
      Fraction fraction0 = new Fraction();
      int[] intArray1 = CellImgFactory.getCellDimensions(intArray0, 1, fraction0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      int[] intArray0 = new int[15];
      // Undeclared exception!
      try { 
        CellImgFactory.getCellDimensions(intArray0, 0, fraction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        CellImgFactory.verifyDimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.exception.InvalidDimensionsException", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        CellImgFactory.verifyDimensions((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CellImgFactory<ByteType> cellImgFactory0 = new CellImgFactory<ByteType>();
      // Undeclared exception!
      try { 
        cellImgFactory0.create((long[]) null, (ByteType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CellImgFactory<UnsignedByteType> cellImgFactory0 = new CellImgFactory<UnsignedByteType>();
      // Undeclared exception!
      try { 
        cellImgFactory0.create((Dimensions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CellImgFactory<VolatileShortType> cellImgFactory0 = new CellImgFactory<VolatileShortType>();
      // Undeclared exception!
      try { 
        cellImgFactory0.create((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cellImgFactory0.create(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CellImgFactory<VolatileUnsignedByteType> cellImgFactory0 = new CellImgFactory<VolatileUnsignedByteType>((VolatileUnsignedByteType) null);
      // Undeclared exception!
      try { 
        cellImgFactory0.imgFactory((VolatileUnsignedByteType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellImgFactory", e);
      }
  }
}
