/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:58:02 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LazyCellImg_ESTest extends LazyCellImg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VolatileARGBType volatileARGBType0 = new VolatileARGBType();
      Fraction fraction0 = volatileARGBType0.getEntitiesPerPixel();
      LazyCellImg.Get<Cell<PlanarImg<VolatileUnsignedShortType, FloatBufferAccess>>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<PlanarImg<VolatileUnsignedShortType, FloatBufferAccess>>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileUnsignedShortType, PlanarImg<VolatileUnsignedShortType, FloatBufferAccess>> lazyCellImg0 = null;
      try {
        lazyCellImg0 = new LazyCellImg<VolatileUnsignedShortType, PlanarImg<VolatileUnsignedShortType, FloatBufferAccess>>((CellGrid) null, fraction0, lazyCellImg_Get0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.LazyCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[6];
      intArray0[0] = 1865;
      intArray0[1] = (-1);
      intArray0[2] = (-1063);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType();
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      Fraction fraction1 = new Fraction((-1063), 0L);
      fraction0.mul(fraction1);
      LazyCellImg.Get<Cell<PlanarImg<VolatileUnsignedLongType, DirtyByteArray>>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<PlanarImg<VolatileUnsignedLongType, DirtyByteArray>>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileUnsignedLongType, PlanarImg<VolatileUnsignedLongType, DirtyByteArray>> lazyCellImg0 = null;
      try {
        lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, PlanarImg<VolatileUnsignedLongType, DirtyByteArray>>(cellGrid0, fraction0, lazyCellImg_Get0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VolatileByteType volatileByteType0 = new VolatileByteType((byte) (-37));
      LazyCellImg.Get<Cell<PlanarImg<VolatileByteType, DirtyVolatileByteArray>>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<PlanarImg<VolatileByteType, DirtyVolatileByteArray>>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileByteType, PlanarImg<VolatileByteType, DirtyVolatileByteArray>> lazyCellImg0 = null;
      try {
        lazyCellImg0 = new LazyCellImg<VolatileByteType, PlanarImg<VolatileByteType, DirtyVolatileByteArray>>((CellGrid) null, volatileByteType0, lazyCellImg_Get0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.LazyCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[3];
      LazyCellImg.Get<Object> lazyCellImg_Get0 = (LazyCellImg.Get<Object>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg.LazyCells<Object> lazyCellImg_LazyCells0 = new LazyCellImg.LazyCells<Object>(longArray0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg_LazyCells0.factory();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.LazyCellImg$LazyCells", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[3];
      LazyCellImg.Get<Object> lazyCellImg_Get0 = (LazyCellImg.Get<Object>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg.LazyCells<Object> lazyCellImg_LazyCells0 = new LazyCellImg.LazyCells<Object>(longArray0, lazyCellImg_Get0);
      Object object0 = lazyCellImg_LazyCells0.get((-1L));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[6];
      LazyCellImg.Get<DirtyVolatileFloatArray> lazyCellImg_Get0 = (LazyCellImg.Get<DirtyVolatileFloatArray>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg.LazyCells<DirtyVolatileFloatArray> lazyCellImg_LazyCells0 = new LazyCellImg.LazyCells<DirtyVolatileFloatArray>(longArray0, lazyCellImg_Get0);
      float[] floatArray0 = new float[3];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      // Undeclared exception!
      try { 
        lazyCellImg_LazyCells0.set(849L, dirtyVolatileFloatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.LazyCellImg$LazyCells", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[3];
      LazyCellImg.Get<Object> lazyCellImg_Get0 = (LazyCellImg.Get<Object>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg.LazyCells<Object> lazyCellImg_LazyCells0 = new LazyCellImg.LazyCells<Object>(longArray0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg_LazyCells0.copy();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.LazyCellImg$LazyCells", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[4];
      intArray0[0] = (-1770);
      intArray0[1] = (-1770);
      intArray0[2] = (-1770);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      BitType bitType0 = new BitType();
      LazyCellImg<BitType, PlanarImg<BitType, DirtyVolatileDoubleArray>> lazyCellImg0 = new LazyCellImg<BitType, PlanarImg<BitType, DirtyVolatileDoubleArray>>(cellGrid0, bitType0, (LazyCellImg.Get<Cell<PlanarImg<BitType, DirtyVolatileDoubleArray>>>) null);
      // Undeclared exception!
      try { 
        lazyCellImg0.factory();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // not implemented yet
         //
         verifyException("net.imglib2.img.cell.LazyCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1770);
      intArray0[1] = (-1770);
      intArray0[2] = 7;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType();
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      LazyCellImg<VolatileUnsignedLongType, PlanarImg<VolatileUnsignedLongType, DirtyByteArray>> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, PlanarImg<VolatileUnsignedLongType, DirtyByteArray>>(cellGrid0, fraction0, (LazyCellImg.Get<Cell<PlanarImg<VolatileUnsignedLongType, DirtyByteArray>>>) null);
      assertEquals(3, lazyCellImg0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1770);
      intArray0[1] = (-1770);
      intArray0[2] = 7;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileByteType volatileByteType0 = new VolatileByteType();
      LazyCellImg<VolatileByteType, PlanarImg<VolatileByteType, DoubleArray>> lazyCellImg0 = new LazyCellImg<VolatileByteType, PlanarImg<VolatileByteType, DoubleArray>>(cellGrid0, volatileByteType0, (LazyCellImg.Get<Cell<PlanarImg<VolatileByteType, DoubleArray>>>) null);
      // Undeclared exception!
      try { 
        lazyCellImg0.copy();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // not implemented yet
         //
         verifyException("net.imglib2.img.cell.LazyCellImg", e);
      }
  }
}
