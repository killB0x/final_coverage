/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 09:12:55 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.sparse.ByteNtree;
import net.imglib2.type.volatiles.VolatileFloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellRandomAccess_ESTest extends CellRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-3315);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[1];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      ByteNtree byteNtree0 = new ByteNtree(longArray0, longArray0, (byte)47);
      Cell<ByteNtree> cell0 = new Cell<ByteNtree>(intArray0, longArray0, byteNtree0);
      LazyCellImg.Get<Cell<ByteNtree>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<ByteNtree>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, (Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, ByteNtree> lazyCellImg0 = new LazyCellImg<VolatileFloatType, ByteNtree>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.AbstractCellImg", e);
      }
  }
}
