/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:42:26 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.CellImg;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.cell.CellIterationOrder;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.img.list.ListImg;
import net.imglib2.type.label.BasePairCharType;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractCellImg_ESTest extends AbstractCellImg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3751L;
      int[] intArray0 = new int[8];
      intArray0[0] = (-483);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType((-483));
      Fraction fraction0 = volatileARGBType0.getEntitiesPerPixel();
      BasePairCharType basePairCharType0 = new BasePairCharType('$');
      CellImgFactory<BasePairCharType> cellImgFactory0 = new CellImgFactory<BasePairCharType>(basePairCharType0);
      ListImg<Cell<LongArray>> listImg0 = new ListImg<Cell<LongArray>>(longArray0, (Cell<LongArray>) null);
      CellImg<BasePairCharType, LongArray> cellImg0 = new CellImg<BasePairCharType, LongArray>(cellImgFactory0, cellGrid0, listImg0, fraction0);
      // Undeclared exception!
      try { 
        cellImg0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 112;
      intArray0[2] = 89;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(1167L);
      DoubleArray doubleArray0 = new DoubleArray(89);
      Cell<DoubleArray> cell0 = new Cell<DoubleArray>(intArray0, longArray0, doubleArray0);
      LazyCellImg.Get<Cell<DoubleArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileUnsignedLongType, DoubleArray> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, DoubleArray>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 89;
      intArray0[2] = 2;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(0L);
      long[] longArray1 = new long[8];
      double[] doubleArray0 = new double[4];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      Cell<DoubleArray> cell0 = new Cell<DoubleArray>(intArray0, longArray1, doubleArray1);
      LazyCellImg.Get<Cell<DoubleArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileUnsignedLongType, DoubleArray> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, DoubleArray>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 3751L;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType((-1));
      long[] longArray1 = new long[8];
      longArray1[0] = 3751L;
      longArray1[1] = 3751L;
      longArray1[2] = (-13L);
      longArray1[3] = (-13L);
      longArray1[4] = (long) (-1);
      longArray1[5] = 2328L;
      longArray1[6] = (long) (-1);
      longArray1[7] = (long) (-1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3751L;
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      Cell<DoubleArray> cell0 = new Cell<DoubleArray>(intArray0, longArray1, doubleArray1);
      LazyCellImg.Get<Cell<DoubleArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileUnsignedLongType, DoubleArray> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, DoubleArray>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg0.localizingCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[14];
      intArray0[0] = (-1);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      LazyCellImg.Get<Cell<DoubleArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileUnsignedLongType, DoubleArray> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, DoubleArray>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      // Undeclared exception!
      try { 
        lazyCellImg0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType((-717L));
      LazyCellImg.Get<Cell<DoubleArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DoubleArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      LazyCellImg<VolatileUnsignedLongType, DoubleArray> lazyCellImg0 = new LazyCellImg<VolatileUnsignedLongType, DoubleArray>(cellGrid0, volatileUnsignedLongType0, lazyCellImg_Get0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lazyCellImg0.update(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.imglib2.img.cell.AbstractCellImg$CellImgSampler (java.lang.Object is in module java.base of loader 'bootstrap'; net.imglib2.img.cell.AbstractCellImg$CellImgSampler is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @683917a3)
         //
         verifyException("net.imglib2.img.cell.AbstractCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      BasePairCharType basePairCharType0 = new BasePairCharType();
      CellImgFactory<BasePairCharType> cellImgFactory0 = new CellImgFactory<BasePairCharType>(basePairCharType0);
      ListImg<Cell<LongArray>> listImg0 = new ListImg<Cell<LongArray>>(longArray0, (Cell<LongArray>) null);
      NativeBoolType nativeBoolType0 = new NativeBoolType();
      Fraction fraction0 = nativeBoolType0.getEntitiesPerPixel();
      CellImg<BasePairCharType, LongArray> cellImg0 = new CellImg<BasePairCharType, LongArray>(cellImgFactory0, cellGrid0, listImg0, fraction0);
      CellIterationOrder cellIterationOrder0 = cellImg0.iterationOrder();
      assertNotNull(cellIterationOrder0);
  }
}
