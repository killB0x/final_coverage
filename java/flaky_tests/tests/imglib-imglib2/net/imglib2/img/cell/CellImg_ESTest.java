/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:29:54 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import net.imglib2.img.ImgFactory;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileIntArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileLongArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.CellImg;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellImg_ESTest extends CellImg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) 3;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType(3);
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      VolatileShortType volatileShortType0 = new VolatileShortType();
      CellImgFactory<VolatileShortType> cellImgFactory0 = new CellImgFactory<VolatileShortType>(volatileShortType0);
      CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>> cellImg0 = new CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>>(cellImgFactory0, cellGrid0, (ListImg<Cell<PlanarImg<VolatileShortType, VolatileLongArray>>>) null, fraction0);
      // Undeclared exception!
      try { 
        cellImg0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      long[] longArray0 = new long[1];
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType(0);
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      CellImgFactory<ARGBType> cellImgFactory0 = new CellImgFactory<ARGBType>(aRGBType0, intArray0);
      LinkedList<Cell<PlanarImg<ARGBType, DirtyVolatileIntArray>>> linkedList0 = new LinkedList<Cell<PlanarImg<ARGBType, DirtyVolatileIntArray>>>();
      ListImg<Cell<PlanarImg<ARGBType, DirtyVolatileIntArray>>> listImg0 = new ListImg<Cell<PlanarImg<ARGBType, DirtyVolatileIntArray>>>(linkedList0, longArray0);
      CellImg<ARGBType, PlanarImg<ARGBType, DirtyVolatileIntArray>> cellImg0 = new CellImg<ARGBType, PlanarImg<ARGBType, DirtyVolatileIntArray>>(cellImgFactory0, cellGrid0, listImg0, fraction0);
      ImgFactory<ARGBType> imgFactory0 = cellImg0.factory();
      assertNotNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      long[] longArray0 = new long[1];
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      VolatileShortType volatileShortType0 = new VolatileShortType((short) (-2773));
      CellImgFactory<VolatileShortType> cellImgFactory0 = new CellImgFactory<VolatileShortType>(volatileShortType0, intArray0);
      Fraction fraction0 = new Fraction(3, 0L);
      CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>> cellImg0 = null;
      try {
        cellImg0 = new CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>>(cellImgFactory0, cellGrid0, (ListImg<Cell<PlanarImg<VolatileShortType, VolatileLongArray>>>) null, fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      long[] longArray0 = new long[1];
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType(3);
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      LinkedList<Cell<PlanarImg<VolatileShortType, LongBufferAccess>>> linkedList0 = new LinkedList<Cell<PlanarImg<VolatileShortType, LongBufferAccess>>>();
      ListImg<Cell<PlanarImg<VolatileShortType, LongBufferAccess>>> listImg0 = new ListImg<Cell<PlanarImg<VolatileShortType, LongBufferAccess>>>(linkedList0, longArray0);
      CellImg<VolatileShortType, PlanarImg<VolatileShortType, LongBufferAccess>> cellImg0 = new CellImg<VolatileShortType, PlanarImg<VolatileShortType, LongBufferAccess>>((CellImgFactory<VolatileShortType>) null, cellGrid0, listImg0, fraction0);
      ImgFactory<VolatileShortType> imgFactory0 = cellImg0.factory();
      assertNull(imgFactory0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      long[] longArray0 = new long[1];
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      ARGBType aRGBType0 = new ARGBType();
      Fraction fraction0 = aRGBType0.getEntitiesPerPixel();
      VolatileShortType volatileShortType0 = new VolatileShortType();
      CellImgFactory<VolatileShortType> cellImgFactory0 = new CellImgFactory<VolatileShortType>(volatileShortType0);
      CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>> cellImg0 = new CellImg<VolatileShortType, PlanarImg<VolatileShortType, VolatileLongArray>>(cellImgFactory0, cellGrid0, (ListImg<Cell<PlanarImg<VolatileShortType, VolatileLongArray>>>) null, fraction0);
      // Undeclared exception!
      try { 
        cellImg0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [0]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }
}
