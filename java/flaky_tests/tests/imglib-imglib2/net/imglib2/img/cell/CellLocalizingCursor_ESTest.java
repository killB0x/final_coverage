/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:54:42 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Consumer;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.cell.Cell;
import net.imglib2.img.cell.CellGrid;
import net.imglib2.img.cell.CellLocalizingCursor;
import net.imglib2.img.cell.LazyCellImg;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CellLocalizingCursor_ESTest extends CellLocalizingCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, (Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      // Undeclared exception!
      try { 
        cellLocalizingCursor0.jumpFwd(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.AbstractCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = 1578;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction(1578, 1578);
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(1578, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, (Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      // Undeclared exception!
      try { 
        cellLocalizingCursor0.jumpFwd(712L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.AbstractCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.jumpFwd((-527));
      cellLocalizingCursor0.copyCursor();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction((-527), (-527));
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.copy();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[2];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0, (Cell<DirtyVolatileFloatArray>) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      // Undeclared exception!
      try { 
        cellLocalizingCursor0.jumpFwd(128L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction((-527), (-527));
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0, (Object) null).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.fwd();
      // Undeclared exception!
      try { 
        cellLocalizingCursor0.copyCursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.AbstractCellImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CellLocalizingCursor<VolatileDoubleType, Cell<VolatileDoubleType>> cellLocalizingCursor0 = null;
      try {
        cellLocalizingCursor0 = new CellLocalizingCursor<VolatileDoubleType, Cell<VolatileDoubleType>>((CellLocalizingCursor<VolatileDoubleType, Cell<VolatileDoubleType>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.CellLocalizingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = 1578;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction(1578, 1578);
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(1578, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor1 = new CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>>(cellLocalizingCursor0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction((-527), (-527));
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.reset();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = 1578;
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      Fraction fraction0 = new Fraction(1578, 1578);
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(1578, true);
      ArrayImg<VolatileFloatType, DirtyVolatileFloatArray> arrayImg0 = new ArrayImg<VolatileFloatType, DirtyVolatileFloatArray>(dirtyVolatileFloatArray0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(arrayImg0);
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.copy();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      // Undeclared exception!
      cellLocalizingCursor0.jumpFwd(128L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      cellLocalizingCursor0.jumpFwd((-4063L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cellLocalizingCursor0.forEachRemaining(consumer0);
      assertFalse(cellLocalizingCursor0.hasNext());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (-527);
      CellGrid cellGrid0 = new CellGrid(longArray0, intArray0);
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      Cell<DirtyVolatileFloatArray> cell0 = new Cell<DirtyVolatileFloatArray>(intArray0, longArray0, dirtyVolatileFloatArray0);
      LazyCellImg.Get<Cell<DirtyVolatileFloatArray>> lazyCellImg_Get0 = (LazyCellImg.Get<Cell<DirtyVolatileFloatArray>>) mock(LazyCellImg.Get.class, new ViolatedAssumptionAnswer());
      doReturn(cell0, cell0, cell0).when(lazyCellImg_Get0).get(anyLong());
      LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray> lazyCellImg0 = new LazyCellImg<VolatileFloatType, DirtyVolatileFloatArray>(cellGrid0, volatileFloatType0, lazyCellImg_Get0);
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor0 = lazyCellImg0.localizingCursor();
      CellLocalizingCursor<VolatileFloatType, Cell<DirtyVolatileFloatArray>> cellLocalizingCursor1 = cellLocalizingCursor0.copyCursor();
      assertFalse(cellLocalizingCursor1.hasNext());
  }
}
