/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:33:11 GMT 2022
 */

package net.imglib2.img.cell;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.cell.Cell;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cell_ESTest extends Cell_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 474);
      cell0.indexToGlobalPosition(2583, longArray0);
      Cell<Integer> cell1 = new Cell<Integer>(intArray0, longArray0, (Integer) intArray0[0]);
      cell1.indexToGlobalPosition(31, longArray0);
      assertArrayEquals(new long[] {2614L, 0L, 0L}, longArray0);
      assertEquals(0L, cell1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 474;
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 474);
      Cell<Object> cell1 = new Cell<Object>(intArray0, longArray0, cell0);
      long long0 = cell1.size();
      assertEquals(474L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2147483639;
      intArray0[1] = 1886;
      long[] longArray0 = new long[6];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, (Object) null);
      long long0 = cell0.size();
      assertEquals((-16974L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[7];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, (Object) null);
      int int0 = cell0.numDimensions();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[6];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[0]);
      long long0 = cell0.min(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 474;
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[0]);
      long long0 = cell0.min(0);
      assertEquals(474L, long0);
      assertEquals(0L, cell0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[7];
      longArray0[5] = (long) (-2643);
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, (Object) null);
      long long0 = cell0.min(5);
      assertEquals((-2643L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 3;
      long[] longArray0 = new long[8];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[1]);
      long long0 = cell0.max(1);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[13];
      int[] intArray0 = new int[8];
      intArray0[0] = 2147483639;
      intArray0[1] = 2147483639;
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[0]);
      long long0 = cell0.indexToGlobalPosition(1174, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 474;
      long[] longArray0 = new long[2];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) intArray0[0]);
      long long0 = cell0.indexToGlobalPosition(20, 0);
      assertEquals(474L, cell0.size());
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) (-1));
      long long0 = cell0.indexToGlobalPosition(1874, 0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2805;
      intArray0[1] = 2803;
      long[] longArray0 = new long[7];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[1]);
      cell0.max(longArray0);
      int int0 = cell0.globalPositionToIndex(longArray0);
      assertArrayEquals(new long[] {2804L, 2802L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7862414, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 474);
      cell0.indexToGlobalPosition(2583, longArray0);
      Cell<Integer> cell1 = new Cell<Integer>(intArray0, longArray0, (Integer) intArray0[0]);
      long[] longArray1 = cell0.dimensionsAsLongArray();
      int int0 = cell1.globalPositionToIndex(longArray1);
      assertArrayEquals(new long[] {2583L, 0L, 0L}, longArray0);
      assertEquals((-2583), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[6];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) null);
      Object object0 = cell0.getData();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[7];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[0]);
      Cell<Object> cell1 = new Cell<Object>(intArray0, longArray0, cell0);
      Cell cell2 = (Cell)cell1.getData();
      assertEquals(0L, cell2.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      long[] longArray0 = new long[5];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) (-1953));
      long long0 = cell0.dimension(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[3];
      intArray0[1] = 10;
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[1]);
      long long0 = cell0.dimension(1);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-822);
      long[] longArray0 = new long[8];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[3]);
      long long0 = cell0.dimension(0);
      assertEquals((-822L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[4];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      Cell<Object> cell1 = new Cell<Object>(intArray0, longArray0, cell0);
      // Undeclared exception!
      try { 
        cell1.min((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 4
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[1];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.max(1466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1466 out of bounds for length 1
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[8];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.indexToGlobalPosition(0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[1];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        cell0.indexToGlobalPosition((-1388), longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[7];
      long[] longArray0 = new long[12];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.indexToGlobalPosition(0, longArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[14];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.indexToGlobalPosition(12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 12 out of bounds for length 1
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.globalPositionToIndex((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        cell0.globalPositionToIndex(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[4];
      long[] longArray0 = new long[13];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      // Undeclared exception!
      try { 
        cell0.dimensions((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[1];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cell0.dimensions(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[0]);
      // Undeclared exception!
      try { 
        cell0.dimension(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 1
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[5];
      Cell<Integer> cell0 = null;
      try {
        cell0 = new Cell<Integer>(intArray0, (long[]) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      long[] longArray0 = new long[1];
      Cell<Integer> cell0 = null;
      try {
        cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.cell.Cell", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      long[] longArray0 = new long[13];
      Integer integer0 = new Integer((-3073));
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, integer0);
      cell0.dimensions(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 474);
      int int0 = cell0.globalPositionToIndex(longArray0);
      assertEquals(0L, cell0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Integer integer0 = new Integer(2456);
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, integer0);
      long long0 = cell0.max(0);
      assertEquals((-1L), long0);
      assertEquals(0L, cell0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[1];
      long[] longArray0 = new long[3];
      Cell<Integer> cell0 = new Cell<Integer>(intArray0, longArray0, (Integer) 474);
      Cell<Object> cell1 = new Cell<Object>(intArray0, longArray0, cell0);
      long long0 = cell1.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[13];
      int[] intArray0 = new int[8];
      Cell<Object> cell0 = new Cell<Object>(intArray0, longArray0, intArray0[5]);
      // Undeclared exception!
      try { 
        cell0.indexToGlobalPosition(1174, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.util.IntervalIndexer", e);
      }
  }
}
