/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:03:19 GMT 2022
 */

package net.imglib2.view.composite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.Positionable;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RealPositionable;
import net.imglib2.histogram.DiscreteFrequencyDistribution;
import net.imglib2.outofbounds.OutOfBoundsFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.view.ExtendedRandomAccessibleInterval;
import net.imglib2.view.HyperSlicesView;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleView;
import net.imglib2.view.composite.AbstractComposite;
import net.imglib2.view.composite.Composite;
import net.imglib2.view.composite.GenericComposite;
import net.imglib2.view.composite.InflateView;
import net.imglib2.view.composite.RealComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InflateView_ESTest extends InflateView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView0.equals((Object)inflateView1));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView1.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1355;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      inflateView_InflateRandomAccess2.move(intArray0);
      assertEquals(7, intArray0.length);
      assertNotSame(inflateView1, inflateView0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new int[] {1355, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Composite<Object>) null, (Composite<Object>) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess(inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.move((Localizable) inflateView_InflateRandomAccess0);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      int int0 = (-1933);
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess2.setPosition((-2842), (-1933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1933 out of bounds for length 0
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Composite<Object>) null, (Composite<Object>) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1L);
      inflateView_InflateRandomAccess0.localize(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView_InflateRandomAccess1.copy();
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess1);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess3);
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertNotNull(inflateView_InflateRandomAccess3);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess2.positionAsDoubleArray();
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess3.setPosition(1, 989);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess1);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess3);
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess3));
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess4 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess1));
      assertNotNull(inflateView_InflateRandomAccess4);
      
      double double0 = inflateView_InflateRandomAccess4.getDoublePosition(1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess4, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess4, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess4, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess4.equals((Object)inflateView_InflateRandomAccess1));
      
      inflateView_InflateRandomAccess0.setPosition(1204L, 1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      inflateView_InflateRandomAccess0.move(intArray1);
      assertEquals(5, longArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      intArray0[0] = 0;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.bck(970);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      int[] intArray0 = new int[5];
      intArray0[1] = 971;
      RandomAccessible<Composite<DiscreteFrequencyDistribution>> randomAccessible0 = null;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.move(970, (-2469));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2469 out of bounds for length 970
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.bck(970);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 971;
      intArray0[1] = 971;
      intArray0[2] = 971;
      RandomAccessible<Composite<DiscreteFrequencyDistribution>> randomAccessible0 = null;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.move(970, (-2469));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2469 out of bounds for length 970
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 970;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int1 = inflateView0.numDimensions();
      assertEquals(971, int1);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertFalse(int1 == int0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 971;
      longArray0[1] = (long) 971;
      longArray0[2] = (long) 971;
      longArray0[3] = (long) 971;
      longArray0[4] = (long) 970;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.move((Localizable) functionRandomAccessible_FunctionRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 970 out of bounds for length 970
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 970;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      boolean boolean0 = functionRandomAccessible_FunctionRandomAccess0.equals(functionRandomAccessible0);
      assertFalse(boolean0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int1 = inflateView0.numDimensions();
      assertEquals(971, int1);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertFalse(int1 == int0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.move((Localizable) functionRandomAccessible_FunctionRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 970 out of bounds for length 970
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      intArray0[0] = 720;
      intArray0[1] = 720;
      intArray0[2] = 720;
      intArray0[3] = 720;
      intArray0[4] = 720;
      intArray0[5] = 720;
      intArray0[6] = 720;
      intArray0[7] = 720;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(pointSample0);
      
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, pointSample0);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(pointSample1);
      
      PointSample<Object> pointSample2 = pointSample1.copy();
      assertEquals(8, intArray0.length);
      assertNotSame(pointSample0, pointSample1);
      assertNotSame(pointSample0, pointSample2);
      assertNotSame(pointSample1, pointSample0);
      assertNotSame(pointSample1, pointSample2);
      assertNotSame(pointSample2, pointSample0);
      assertNotSame(pointSample2, pointSample1);
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(pointSample2);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample2);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier2 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier2);
      assertEquals(8, intArray0.length);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 720;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 720;
      longArray0[3] = (long) 720;
      longArray0[4] = (-1L);
      longArray0[5] = (long) 720;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new long[] {720L, (-1L), 720L, 720L, (-1L), 720L}, longArray0);
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(8, intArray0.length);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(8, intArray0.length);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(8, pointSample1.numDimensions());
      assertEquals(8, pointSample2.numDimensions());
      assertArrayEquals(new int[] {720, 720, 720, 720, 720, 720, 720, 720}, intArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 720;
      intArray1[1] = (-2615);
      intArray1[2] = 687;
      intArray1[3] = 720;
      intArray1[4] = 720;
      intArray1[5] = 720;
      intArray1[6] = 720;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.move(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = 63;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 63);
      assertEquals(63, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 63;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      PointSample<Object> pointSample1 = PointSample.wrapSupplier(supplier1, longArray0);
      assertEquals(3, longArray0.length);
      assertNotSame(pointSample1, pointSample0);
      assertEquals(3, pointSample1.numDimensions());
      assertFalse(pointSample1.equals((Object)pointSample0));
      assertArrayEquals(new long[] {63L, 1L, 1L}, longArray0);
      assertNotNull(pointSample1);
      
      AbstractComposite<Object> abstractComposite0 = new AbstractComposite<Object>(pointSample1);
      assertEquals(3, longArray0.length);
      assertEquals(3, pointSample1.numDimensions());
      assertFalse(pointSample1.equals((Object)pointSample0));
      assertArrayEquals(new long[] {63L, 1L, 1L}, longArray0);
      assertNotNull(abstractComposite0);
      
      Supplier<Composite<Object>> supplier2 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>((-598), biConsumer0, supplier2);
      assertEquals((-598), functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals((-598), functionRandomAccessible0.numDimensions());
      assertEquals((-597), inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      // Undeclared exception!
      try { 
        inflateView0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -598
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Composite<Object>) null, (Composite<Object>) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      inflateView_InflateRandomAccess2.localize(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      
      inflateView_InflateRandomAccess2.setPosition(1959, 7);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      
      double double0 = inflateView_InflateRandomAccess2.getDoublePosition(0);
      assertEquals(1959.0, double0, 0.01);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      
      inflateView_InflateRandomAccess2.move(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      
      inflateView_InflateRandomAccess1.move(1959, 6);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 17;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<DiscreteFrequencyDistribution>> supplier0 = (Supplier<Composite<DiscreteFrequencyDistribution>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<DiscreteFrequencyDistribution>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<DiscreteFrequencyDistribution>>(17, biConsumer0, supplier0);
      assertEquals(17, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long long0 = 0L;
      SubsampleView<Composite<DiscreteFrequencyDistribution>> subsampleView0 = new SubsampleView<Composite<DiscreteFrequencyDistribution>>(functionRandomAccessible0, 0L);
      assertEquals(17, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      InflateView<DiscreteFrequencyDistribution> inflateView0 = new InflateView<DiscreteFrequencyDistribution>(subsampleView0);
      assertEquals(17, functionRandomAccessible0.numDimensions());
      assertEquals(18, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(17, functionRandomAccessible0.numDimensions());
      assertEquals(18, inflateView0.numDimensions());
      assertEquals(18, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.move(17, 17);
      assertEquals(17, functionRandomAccessible0.numDimensions());
      assertEquals(18, inflateView0.numDimensions());
      assertEquals(18, inflateView_InflateRandomAccess0.numDimensions());
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Composite<Object>) null, (Composite<Object>) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      long long0 = inflateView_InflateRandomAccess0.getLongPosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(0L, long0);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      long long1 = inflateView_InflateRandomAccess1.getLongPosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(0L, long1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertTrue(long1 == long0);
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      inflateView_InflateRandomAccess1.move(longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      BiConsumer<Localizable, Object> biConsumer1 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer1, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 7;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {7L, (-1L), (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess();
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView1.new InflateRandomAccess(inflateView_InflateRandomAccess0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(8, inflateView1.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView0.equals((Object)inflateView1));
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(inflateView0.equals((Object)inflateView1));
      assertNotNull(inflateView_InflateRandomAccess3);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess3.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(7, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(7, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(7, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      long long0 = inflateView_InflateRandomAccess2.getLongPosition(0);
      assertEquals(7, longArray0.length);
      assertEquals(0L, long0);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess0);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(7, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      long long1 = inflateView_InflateRandomAccess2.getLongPosition(707);
      assertEquals(7, longArray0.length);
      assertEquals(0L, long1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess0);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-1L);
      inflateView_InflateRandomAccess2.localize(floatArray0);
      assertEquals(7, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess0);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      longArray1[0] = (long) 707;
      longArray1[1] = (-1L);
      longArray1[2] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = (long) 0;
      inflateView_InflateRandomAccess2.move(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess0);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {707L, (-1L), (-1L), 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      BiConsumer<Localizable, Object> biConsumer1 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier1 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible1 = new FunctionRandomAccessible<Composite<Integer>>(695, biConsumer1, supplier1);
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertNotNull(functionRandomAccessible1);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible1.randomAccess();
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(695, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible1);
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(696, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(696, int0);
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(696, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(696, inflateView0.numDimensions());
      assertEquals(696, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(696, inflateView0.numDimensions());
      assertEquals(696, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.bck(0);
      assertEquals(695, functionRandomAccessible1.numDimensions());
      assertEquals(696, inflateView0.numDimensions());
      assertEquals(696, inflateView_InflateRandomAccess1.numDimensions());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 696;
      intArray0[2] = 695;
      intArray0[3] = 695;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 695;
      intArray0[8] = 695;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 9 out of bounds for length 9
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-290);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 632;
      intArray0[6] = 0;
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(7, intArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, genericComposite0).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(7, intArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1L);
      inflateView_InflateRandomAccess0.localize(floatArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess1.positionAsDoubleArray();
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition(697, 1);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess1.getDoublePosition(1283);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      inflateView_InflateRandomAccess0.setPosition(9223372036854775807L, 0);
      assertEquals(7, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-290), 0, 0, 0, 632, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      OutOfBoundsFactory<Composite<Object>, Object> outOfBoundsFactory0 = (OutOfBoundsFactory<Composite<Object>, Object>) mock(OutOfBoundsFactory.class, new ViolatedAssumptionAnswer());
      ExtendedRandomAccessibleInterval<Composite<Object>, IntervalView<Composite<Object>>> extendedRandomAccessibleInterval0 = new ExtendedRandomAccessibleInterval<Composite<Object>, IntervalView<Composite<Object>>>((IntervalView<Composite<Object>>) null, outOfBoundsFactory0);
      assertNotNull(extendedRandomAccessibleInterval0);
      
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.fwd(694);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      Point point0 = inflateView_InflateRandomAccess2.positionAsPoint();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(point0);
      
      float float0 = inflateView_InflateRandomAccess2.getFloatPosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      long long0 = inflateView_InflateRandomAccess3.getLongPosition(694);
      assertEquals(5, longArray0.length);
      assertEquals(0L, long0);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView1);
      
      // Undeclared exception!
      try { 
        inflateView1.getAt((Localizable) inflateView_InflateRandomAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      int int0 = functionRandomAccessible0.numDimensions();
      assertEquals(1, int0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      int int1 = inflateView_InflateRandomAccess0.getIntPosition(1);
      assertEquals(0, int1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(int1 == int0);
      
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      int[] intArray0 = new int[0];
      HyperSlicesView<Composite<Object>> hyperSlicesView0 = new HyperSlicesView<Composite<Object>>(subsampleView0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(1, hyperSlicesView0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(hyperSlicesView0);
      
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.randomAccess();
      assertEquals(0, intArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(1, hyperSlicesView0.numDimensions());
      assertEquals(1, hyperSlicesView_HyperSlicesViewRandomAccess0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(hyperSlicesView_HyperSlicesViewRandomAccess0);
      
      // Undeclared exception!
      try { 
        inflateView0.getAt((Localizable) hyperSlicesView_HyperSlicesViewRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier2 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier2).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier2);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 720;
      longArray0[1] = (long) 720;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.setPosition((Localizable) inflateView_InflateRandomAccess0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess(inflateView_InflateRandomAccess1);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 720;
      floatArray0[1] = (float) 720L;
      floatArray0[2] = (float) 720L;
      floatArray0[3] = (float) 720;
      floatArray0[4] = (float) 720L;
      floatArray0[5] = (float) 720L;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess2.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      inflateView_InflateRandomAccess0.move(intArray1);
      assertEquals(5, longArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, (-1L));
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      int[] intArray0 = new int[3];
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      inflateView_InflateRandomAccess2.move(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      int int0 = inflateView_InflateRandomAccess2.getIntPosition(0);
      assertEquals(0, int0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.setPosition((long) 0, (-1933));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1933 out of bounds for length 0
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(1, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int int0 = inflateView_InflateRandomAccess0.getIntPosition(1);
      assertEquals(0, int0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      
      inflateView_InflateRandomAccess0.setPosition(4882L, 0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.randomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      inflateView_InflateRandomAccess1.localize(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      inflateView_InflateRandomAccess2.localize(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      inflateView_InflateRandomAccess1.localize(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Composite<Object> composite0 = (Composite<Object>) mock(Composite.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, composite0, composite0).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1L);
      inflateView_InflateRandomAccess0.localize(floatArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess1.positionAsDoubleArray();
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition(697, 1);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess1.getDoublePosition(1283);
      assertEquals(5, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      inflateView_InflateRandomAccess3.fwd(1283);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      inflateView_InflateRandomAccess2.move(longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView1);
      
      // Undeclared exception!
      try { 
        inflateView1.getAt(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier1, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(5, longArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(genericComposite0);
      
      BiConsumer<Localizable, Object> biConsumer1 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible1 = new FunctionRandomAccessible<Composite<Object>>((-3101), biConsumer1, (Supplier<Composite<Object>>) null);
      assertEquals((-3101), functionRandomAccessible1.numDimensions());
      assertFalse(functionRandomAccessible1.equals((Object)functionRandomAccessible0));
      assertNotNull(functionRandomAccessible1);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(functionRandomAccessible0.equals((Object)functionRandomAccessible1));
      assertNotNull(inflateView0);
      
      // Undeclared exception!
      try { 
        inflateView0.getAt(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier1, 720);
      assertEquals(720, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      AbstractComposite<Object> abstractComposite0 = new AbstractComposite<Object>(pointSample0);
      assertEquals(720, pointSample0.numDimensions());
      assertNotNull(abstractComposite0);
      
      Supplier<Composite<Object>> supplier2 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier2);
      assertEquals(720, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[2];
      long long0 = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(720, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(2, longArray0.length);
      assertEquals(720, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(2, longArray0.length);
      assertEquals(720, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 720;
      floatArray0[2] = 173.47F;
      floatArray0[3] = (float) 720;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      int int0 = functionRandomAccessible0.numDimensions();
      assertEquals(1, int0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int int1 = functionRandomAccessible0.numDimensions();
      assertEquals(1, int1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      int int2 = inflateView_InflateRandomAccess0.getIntPosition(1);
      assertEquals(0, int2);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<DiscreteFrequencyDistribution>> supplier0 = (Supplier<Composite<DiscreteFrequencyDistribution>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<DiscreteFrequencyDistribution>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<DiscreteFrequencyDistribution>>(63, biConsumer0, supplier0);
      assertEquals(63, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<DiscreteFrequencyDistribution> inflateView0 = new InflateView<DiscreteFrequencyDistribution>(functionRandomAccessible0);
      assertEquals(63, functionRandomAccessible0.numDimensions());
      assertEquals(64, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(63, functionRandomAccessible0.numDimensions());
      assertEquals(64, inflateView0.numDimensions());
      assertEquals(64, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier1);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 720;
      longArray0[1] = (long) 720;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.fwd(1);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      Point point0 = inflateView_InflateRandomAccess1.positionAsPoint();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(721, point0.numDimensions());
      assertNotNull(point0);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.getFloatPosition((-271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -271 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      long long0 = inflateView_InflateRandomAccess0.getLongPosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(0L, long0);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      int int0 = inflateView_InflateRandomAccess1.getIntPosition(3);
      assertEquals(5, longArray0.length);
      assertEquals(0, int0);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(0, intArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, genericComposite0, genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier1);
      assertEquals(0, intArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      inflateView_InflateRandomAccess1.localize(floatArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView_InflateRandomAccess2.copy();
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess2.positionAsDoubleArray();
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition((-1), 3);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess2.getDoublePosition(0);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals((-1.0), double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess4 = inflateView0.new InflateRandomAccess();
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess4);
      
      inflateView_InflateRandomAccess4.fwd(0);
      assertEquals(0, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(intArray0, intArray1);
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(0, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.bck(971);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      inflateView_InflateRandomAccess0.move((long) 970, 970);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      inflateView_InflateRandomAccess0.bck(970);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 971;
      intArray0[1] = 971;
      intArray0[2] = 971;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.bck(970);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 971;
      intArray0[1] = 971;
      intArray0[2] = 971;
      intArray0[3] = 971;
      intArray0[4] = 970;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float float0 = inflateView_InflateRandomAccess0.getFloatPosition(1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, (-1L));
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      int[] intArray0 = new int[3];
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      inflateView_InflateRandomAccess2.move(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 720;
      longArray0[1] = 0L;
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier2 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, genericComposite0, (Object) null).when(supplier2).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier2);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 720;
      longArray1[1] = (long) 720;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray1, longArray1);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {720L, 720L}, longArray1);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(2, longArray0.length);
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(2, longArray0.length);
      assertEquals(721, inflateView1.numDimensions());
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView1.new InflateRandomAccess();
      assertEquals(2, longArray0.length);
      assertEquals(721, inflateView1.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      float float0 = inflateView_InflateRandomAccess1.getFloatPosition(4242);
      assertEquals(2, longArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(inflateView1, inflateView0);
      assertNotSame(longArray0, longArray1);
      assertEquals(721, inflateView1.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(2, longArray0.length);
      assertEquals(721, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(2, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(inflateView0.equals((Object)inflateView1));
      assertArrayEquals(new long[] {720L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess2.getLongPosition((-249));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -249 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1L);
      inflateView_InflateRandomAccess0.localize(floatArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, floatArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess1.positionAsDoubleArray();
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition(697, 1);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess1.getDoublePosition(1283);
      assertEquals(5, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      inflateView_InflateRandomAccess3.fwd(1283);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      inflateView_InflateRandomAccess2.move(longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      FinalInterval finalInterval1 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(5, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval1);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView1.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.setPosition(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(inflateView1, inflateView0);
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      FinalInterval finalInterval1 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(finalInterval1, finalInterval0);
      assertEquals(5, finalInterval1.numDimensions());
      assertTrue(finalInterval1.equals((Object)finalInterval0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval1);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView0.equals((Object)inflateView1));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      long long0 = inflateView_InflateRandomAccess0.getLongPosition(267);
      assertEquals(0L, long0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BiConsumer<Localizable, Object>> supplier0 = (Supplier<BiConsumer<Localizable, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier1);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 720;
      longArray0[1] = (long) 720;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.fwd(1);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.getFloatPosition((-271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -271 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 720;
      longArray0[1] = 283L;
      longArray0[2] = (long) 720;
      longArray0[3] = (long) 720;
      longArray0[4] = (long) 720;
      longArray0[5] = (long) 720;
      // Undeclared exception!
      try { 
        inflateView0.getAt(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier1);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      long long0 = inflateView_InflateRandomAccess0.getLongPosition(7);
      assertEquals(0L, long0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.getIntPosition((-296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -296 out of bounds for length 7
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      long long0 = inflateView_InflateRandomAccess0.getLongPosition(7);
      assertEquals(0L, long0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      
      int int0 = inflateView_InflateRandomAccess0.getIntPosition(2);
      assertEquals(0, int0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 7;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 7L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 7L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(4, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 7L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.getLongPosition((-494));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -494 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[1];
      inflateView_InflateRandomAccess0.localize(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess2.positionAsDoubleArray();
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition(2274, 0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      inflateView_InflateRandomAccess1.move(1497L, 0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess1.getDoublePosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(1497.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier1);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[2] = (long) 7;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {(-1L), 0L, 7L}, longArray0);
      assertNotNull(finalInterval0);
      
      int[] intArray0 = new int[2];
      int int0 = functionRandomAccessible0.numDimensions();
      assertEquals(7, int0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      
      intArray0[0] = 7;
      intArray0[1] = 7;
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess(inflateView_InflateRandomAccess0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.getDoublePosition((-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -21 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(971, int0);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess0.needsUpdate = false;
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      
      inflateView_InflateRandomAccess1.setPosition(85, 971);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      
      double double0 = inflateView_InflateRandomAccess1.getDoublePosition(7);
      assertEquals(0.0, double0, 0.01);
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess1.numDimensions());
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(1, pointSample0.numDimensions());
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.fwd(48);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, (-1L));
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      int[] intArray0 = new int[3];
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess2);
      
      inflateView_InflateRandomAccess2.move(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, pointSample0.numDimensions());
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 0L;
      inflateView_InflateRandomAccess1.localize(floatArray0);
      assertEquals(5, longArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView_InflateRandomAccess2.copy();
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess3.positionAsDoubleArray();
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition((-3580), 3194);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess3.getDoublePosition(0);
      assertEquals(5, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess4 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess4);
      
      inflateView_InflateRandomAccess4.fwd(3);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView_InflateRandomAccess4.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 720;
      longArray0[1] = (long) 720;
      longArray0[2] = (long) 720;
      longArray0[3] = (long) 720;
      longArray0[4] = (long) 720;
      longArray0[5] = (long) 720;
      longArray0[6] = (long) 720;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      assertNotNull(pointSample0);
      
      AbstractComposite<Object> abstractComposite0 = new AbstractComposite<Object>(pointSample0);
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      assertNotNull(abstractComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(abstractComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier1);
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      double double0 = inflateView_InflateRandomAccess0.getDoublePosition(735);
      assertEquals(7, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
      
      inflateView_InflateRandomAccess0.move(0L, 735);
      assertEquals(7, longArray0.length);
      assertEquals(7, pointSample0.numDimensions());
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {720L, 720L, 720L, 720L, 720L, 720L, 720L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier0);
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int int0 = inflateView_InflateRandomAccess0.getIntPosition(1);
      assertEquals(0, int0);
      assertEquals(1, functionRandomAccessible0.numDimensions());
      assertEquals(2, inflateView0.numDimensions());
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier1 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(0, biConsumer0, supplier1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(0, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      int int0 = inflateView0.numDimensions();
      assertEquals(1, int0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.move((long) 0, 0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (-1L);
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, (-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 7L;
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(7, functionRandomAccessible0.numDimensions());
      assertEquals(8, inflateView0.numDimensions());
      assertEquals(8, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.localize(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = 1959;
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess2.setPosition(1959, (-344));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -344 out of bounds for length 0
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      inflateView_InflateRandomAccess1.localize(intArray0);
      assertEquals(5, longArray0.length);
      assertEquals(7, intArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[2] = (float) 0;
      inflateView_InflateRandomAccess1.localize(floatArray0);
      assertEquals(5, longArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView_InflateRandomAccess2.copy();
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertNotSame(inflateView_InflateRandomAccess3, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess3.numDimensions());
      assertFalse(inflateView_InflateRandomAccess3.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess3);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess2.positionAsDoubleArray();
      assertEquals(5, longArray0.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess3);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess3));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess2.setPosition(1, (-1875));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1875 out of bounds for length 5
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 970;
      intArray0[1] = 970;
      intArray0[2] = 970;
      intArray0[3] = 0;
      intArray0[4] = 970;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Integer> genericComposite0 = new GenericComposite<Integer>(pointSample0);
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Integer>> supplier1 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier1);
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(functionRandomAccessible0);
      
      FunctionRandomAccessible.FunctionRandomAccess functionRandomAccessible_FunctionRandomAccess0 = functionRandomAccessible0.randomAccess();
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(functionRandomAccessible_FunctionRandomAccess0);
      
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(971, inflateView0.numDimensions());
      assertEquals(971, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 970;
      doubleArray0[1] = (double) 970;
      pointSample0.localize((Positionable) functionRandomAccessible_FunctionRandomAccess0);
      assertEquals(5, intArray0.length);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(970, functionRandomAccessible0.numDimensions());
      assertEquals(970, functionRandomAccessible_FunctionRandomAccess0.numDimensions());
      assertArrayEquals(new int[] {970, 970, 970, 0, 970}, intArray0);
      
      doubleArray0[2] = 1275.0608079348206;
      doubleArray0[3] = (-467.727365052748);
      doubleArray0[4] = (-467.727365052748);
      doubleArray0[5] = 4178.9;
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 6 out of bounds for length 6
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(pointSample0);
      
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(genericComposite0);
      
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0, (Object) null).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier1);
      assertEquals(8, intArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(inflateView_InflateRandomAccess2);
      
      double[] doubleArray0 = inflateView_InflateRandomAccess2.positionAsDoubleArray();
      assertEquals(1, doubleArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      assertNotNull(doubleArray0);
      
      inflateView_InflateRandomAccess2.setPosition(0, 3278);
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
      
      double double0 = inflateView_InflateRandomAccess2.getDoublePosition(4201);
      assertEquals(8, intArray0.length);
      assertEquals(5, longArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(8, pointSample0.numDimensions());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      inflateView_InflateRandomAccess0.localize(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      inflateView_InflateRandomAccess0.setPosition(938, 938);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      
      double double0 = inflateView_InflateRandomAccess0.getDoublePosition(2535);
      assertEquals(938.0, double0, 0.01);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      
      inflateView_InflateRandomAccess0.move(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(subsampleView0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView1 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView1.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView_InflateRandomAccess1.copy();
      assertNotSame(inflateView1, inflateView0);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      assertNotNull(inflateView_InflateRandomAccess2);
      
      inflateView_InflateRandomAccess2.setPosition(963, 0);
      assertNotSame(inflateView1, inflateView0);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      
      double double0 = inflateView_InflateRandomAccess2.getDoublePosition(963);
      assertEquals(963.0, double0, 0.01);
      assertNotSame(inflateView1, inflateView0);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertNotSame(inflateView_InflateRandomAccess2, inflateView_InflateRandomAccess1);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess2.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertFalse(inflateView_InflateRandomAccess2.equals((Object)inflateView_InflateRandomAccess1));
      
      inflateView_InflateRandomAccess1.move(longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(inflateView1, inflateView0);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess2);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView1.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView1.equals((Object)inflateView0));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess2));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      double double0 = inflateView_InflateRandomAccess0.getDoublePosition(735);
      assertEquals(0.0, double0, 0.01);
      assertEquals(720, functionRandomAccessible0.numDimensions());
      assertEquals(721, inflateView0.numDimensions());
      assertEquals(721, inflateView_InflateRandomAccess0.numDimensions());
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.getIntPosition((-228));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -228 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, finalInterval0.numDimensions());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(finalInterval0);
      
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertNotNull(inflateView0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertNotNull(inflateView_InflateRandomAccess0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess(inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      assertNotNull(inflateView_InflateRandomAccess1);
      
      inflateView_InflateRandomAccess1.setPosition(0L, 848);
      assertNotSame(inflateView_InflateRandomAccess0, inflateView_InflateRandomAccess1);
      assertNotSame(inflateView_InflateRandomAccess1, inflateView_InflateRandomAccess0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(1, inflateView0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess0.numDimensions());
      assertEquals(1, inflateView_InflateRandomAccess1.numDimensions());
      assertFalse(inflateView_InflateRandomAccess0.equals((Object)inflateView_InflateRandomAccess1));
      assertFalse(inflateView_InflateRandomAccess1.equals((Object)inflateView_InflateRandomAccess0));
      
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess1.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.randomAccess((Interval) finalInterval0);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) 0L;
      inflateView_InflateRandomAccess1.localize(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView_InflateRandomAccess2.copy();
      double[] doubleArray0 = inflateView_InflateRandomAccess3.positionAsDoubleArray();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      inflateView_InflateRandomAccess2.setPosition((-3580), 3194);
      double double0 = inflateView_InflateRandomAccess3.getDoublePosition(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(7, biConsumer0, supplier0);
      long[] longArray0 = new long[5];
      functionRandomAccessible0.numDimensions();
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (-1L);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      double[] doubleArray0 = inflateView_InflateRandomAccess0.positionAsDoubleArray();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = inflateView_InflateRandomAccess0.getIntPosition(7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(720, biConsumer0, supplier0);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.getIntPosition((-228));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -228 out of bounds for length 720
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(720, biConsumer0, supplier0);
      functionRandomAccessible0.randomAccess();
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      int int0 = inflateView0.numDimensions();
      assertEquals(721, int0);
      
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      inflateView_InflateRandomAccess0.move((long) 721, 720);
      assertEquals(721, inflateView0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Integer>> supplier0 = (Supplier<Composite<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Integer>>(970, biConsumer0, supplier0);
      functionRandomAccessible0.randomAccess();
      InflateView<Integer> inflateView0 = new InflateView<Integer>(functionRandomAccessible0);
      inflateView0.numDimensions();
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.move((long) 970, (-3580));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3580 out of bounds for length 970
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess(inflateView_InflateRandomAccess0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1470);
      floatArray0[1] = (float) (-1470);
      inflateView_InflateRandomAccess1.localize(floatArray0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess2 = inflateView0.new InflateRandomAccess();
      inflateView_InflateRandomAccess2.copy();
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess3 = inflateView0.new InflateRandomAccess();
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess3.getIntPosition((-1470));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1470 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      GenericComposite<Object> genericComposite0 = new GenericComposite<Object>(pointSample0);
      Supplier<Composite<Object>> supplier1 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(genericComposite0, genericComposite0).when(supplier1).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(1, biConsumer0, supplier1);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      inflateView_InflateRandomAccess0.positionAsDoubleArray();
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, (-36L));
      int[] intArray0 = new int[3];
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess1 = inflateView0.new InflateRandomAccess();
      inflateView_InflateRandomAccess1.localize(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      inflateView_InflateRandomAccess0.get();
      assertEquals(2, inflateView_InflateRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      SubsampleView<Composite<Object>> subsampleView0 = new SubsampleView<Composite<Object>>(functionRandomAccessible0, longArray0);
      InflateView<Object> inflateView0 = new InflateView<Object>(subsampleView0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      inflateView0.randomAccess((Interval) finalInterval0);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      inflateView_InflateRandomAccess0.localize(intArray0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        inflateView_InflateRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.composite.InflateView$InflateRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1361L);
      longArray0[1] = 1L;
      longArray0[2] = (-1275L);
      longArray0[3] = 1113L;
      longArray0[4] = 2107L;
      longArray0[5] = (-9223372036854775808L);
      longArray0[6] = (-3592L);
      longArray0[7] = 10298L;
      IntervalView<Composite<Object>> intervalView0 = new IntervalView<Composite<Object>>((RandomAccessible<Composite<Object>>) null, longArray0, longArray0);
      InflateView<Object> inflateView0 = new InflateView<Object>(intervalView0);
      // Undeclared exception!
      try { 
        inflateView0.randomAccess((Interval) intervalView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.IntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Composite<Object>> supplier0 = (Supplier<Composite<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>((-2525), biConsumer0, supplier0);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      InflateView.InflateRandomAccess inflateView_InflateRandomAccess0 = null;
      try {
        inflateView_InflateRandomAccess0 = inflateView0.new InflateRandomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2525
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      InflateView<Object> inflateView0 = null;
      try {
        inflateView0 = new InflateView<Object>((RandomAccessible<? extends Composite<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.composite.InflateView", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-2111);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Composite<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<Composite<Object>>((-2111), biConsumer0, (Supplier<Composite<Object>>) null);
      InflateView<Object> inflateView0 = new InflateView<Object>(functionRandomAccessible0);
      long[] longArray0 = new long[0];
      IntervalView<Object> intervalView0 = new IntervalView<Object>(inflateView0, longArray0, longArray0);
      IterableRandomAccessibleInterval<Object> iterableRandomAccessibleInterval0 = null;
      try {
        iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Object>(intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }
}
