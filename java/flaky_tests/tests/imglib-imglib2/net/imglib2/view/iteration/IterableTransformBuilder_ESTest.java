/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 12:11:38 GMT 2022
 */

package net.imglib2.view.iteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.IterableInterval;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.histogram.BinMapper1d;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.img.ImgView;
import net.imglib2.img.NativeImg;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.LongAccess;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.ShortArray;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.outofbounds.OutOfBoundsFactory;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.util.Fraction;
import net.imglib2.view.ExtendedRandomAccessibleInterval;
import net.imglib2.view.StackView;
import net.imglib2.view.TransformView;
import net.imglib2.view.iteration.IterableTransformBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IterableTransformBuilder_ESTest extends IterableTransformBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      IterableInterval<BiConvertedRealRandomAccessibleRealInterval<SlicingTransform, ByteArray, BiConvertedRealRandomAccessibleRealInterval>> iterableInterval0 = IterableTransformBuilder.getEfficientIterableInterval((Interval) finalInterval0, (RandomAccessible<BiConvertedRealRandomAccessibleRealInterval<SlicingTransform, ByteArray, BiConvertedRealRandomAccessibleRealInterval>>) null);
      assertNotNull(iterableInterval0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[2];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray1);
      // Undeclared exception!
      try { 
        IterableTransformBuilder.getEfficientIterableInterval((Interval) finalInterval0, (RandomAccessible<BiConvertedRealRandomAccessibleRealInterval<RandomAccessibleInterval, Object, RandomAccessibleInterval>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      IterableTransformBuilder<DoubleType> iterableTransformBuilder0 = new IterableTransformBuilder<DoubleType>(finalInterval0, (RandomAccessible<DoubleType>) null);
      // Undeclared exception!
      try { 
        iterableTransformBuilder0.buildIterableInterval();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Unsigned128BitType unsigned128BitType0 = new Unsigned128BitType();
      Fraction fraction0 = unsigned128BitType0.getEntitiesPerPixel();
      long[] longArray0 = new long[4];
      ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>> arrayImg0 = new ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>>((PlanarImg<UnsignedByteType, LongBufferAccess>) null, longArray0, fraction0);
      OutOfBoundsFactory<StackView.StackAccessMode, Object> outOfBoundsFactory0 = (OutOfBoundsFactory<StackView.StackAccessMode, Object>) mock(OutOfBoundsFactory.class, new ViolatedAssumptionAnswer());
      ExtendedRandomAccessibleInterval<StackView.StackAccessMode, RandomAccessibleInterval<StackView.StackAccessMode>> extendedRandomAccessibleInterval0 = new ExtendedRandomAccessibleInterval<StackView.StackAccessMode, RandomAccessibleInterval<StackView.StackAccessMode>>((RandomAccessibleInterval<StackView.StackAccessMode>) null, outOfBoundsFactory0);
      IterableTransformBuilder<StackView.StackAccessMode> iterableTransformBuilder0 = null;
      try {
        iterableTransformBuilder0 = new IterableTransformBuilder<StackView.StackAccessMode>(arrayImg0, extendedRandomAccessibleInterval0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.util.Intervals", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IterableTransformBuilder<DoubleType> iterableTransformBuilder0 = new IterableTransformBuilder<DoubleType>((Interval) null, (RandomAccessible<DoubleType>) null);
      // Undeclared exception!
      try { 
        iterableTransformBuilder0.buildIterableInterval();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Unsigned128BitType unsigned128BitType0 = new Unsigned128BitType((NativeImg<?, ? extends LongAccess>) null);
      Fraction fraction0 = unsigned128BitType0.getEntitiesPerPixel();
      long[] longArray0 = new long[3];
      longArray0[0] = 2990L;
      ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>> arrayImg0 = new ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>>((PlanarImg<UnsignedByteType, LongBufferAccess>) null, longArray0, fraction0);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      IterableTransformBuilder<DoubleType> iterableTransformBuilder0 = new IterableTransformBuilder<DoubleType>(finalInterval0, arrayImg0);
      IterableInterval<DoubleType> iterableInterval0 = iterableTransformBuilder0.buildIterableInterval();
      assertNotNull(iterableInterval0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayDeque<ImgView<BoolType>> arrayDeque0 = new ArrayDeque<ImgView<BoolType>>();
      BinMapper1d<ImgView<BoolType>> binMapper1d0 = (BinMapper1d<ImgView<BoolType>>) mock(BinMapper1d.class, new ViolatedAssumptionAnswer());
      doReturn(15L).when(binMapper1d0).getBinCount();
      Histogram1d<ImgView<BoolType>> histogram1d0 = new Histogram1d<ImgView<BoolType>>(arrayDeque0, binMapper1d0);
      SlicingTransform slicingTransform0 = new SlicingTransform((-1029), 0);
      TransformView<ShortArray> transformView0 = new TransformView<ShortArray>((RandomAccessible<ShortArray>) null, slicingTransform0);
      IterableTransformBuilder<ShortArray> iterableTransformBuilder0 = new IterableTransformBuilder<ShortArray>(histogram1d0, transformView0);
      // Undeclared exception!
      try { 
        iterableTransformBuilder0.buildIterableInterval();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1029
         //
         verifyException("net.imglib2.transform.integer.SlicingTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Fraction fraction0 = new Fraction();
      long[] longArray0 = new long[4];
      ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>> arrayImg0 = new ArrayImg<DoubleType, PlanarImg<UnsignedByteType, LongBufferAccess>>((PlanarImg<UnsignedByteType, LongBufferAccess>) null, longArray0, fraction0);
      IterableTransformBuilder<DoubleType> iterableTransformBuilder0 = new IterableTransformBuilder<DoubleType>(arrayImg0, arrayImg0);
      IterableInterval<DoubleType> iterableInterval0 = iterableTransformBuilder0.buildIterableInterval();
      assertNotNull(iterableInterval0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableTransformBuilder.getEfficientIterableInterval((Interval) null, (RandomAccessible<LongBufferAccess>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }
}
