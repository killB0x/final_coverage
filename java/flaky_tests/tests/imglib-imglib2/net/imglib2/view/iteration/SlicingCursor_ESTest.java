/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:57:04 GMT 2022
 */

package net.imglib2.view.iteration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Cursor;
import net.imglib2.Point;
import net.imglib2.PointSampleList;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.view.iteration.SlicingCursor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SlicingCursor_ESTest extends SlicingCursor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1553);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 1553);
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getDoublePosition(1262);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getFloatPosition(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      double[] doubleArray0 = new double[3];
      slicingCursor0.localize(doubleArray0);
      assertEquals(0, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1553);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 1553);
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      float[] floatArray0 = new float[0];
      slicingCursor0.localize(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getLongPosition(1529);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getIntPosition(1900);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      int[] intArray0 = new int[0];
      slicingCursor0.localize(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(4078);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingCursor<Integer> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(1);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 1);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      long[] longArray0 = new long[1];
      slicingCursor0.localize(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      double[] doubleArray0 = new double[0];
      slicingCursor0.localize(doubleArray0);
      assertEquals(0, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      SlicingCursor<Integer> slicingCursor1 = new SlicingCursor<Integer>(slicingCursor0);
      assertFalse(slicingCursor1.equals((Object)slicingCursor0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cursor<SlicingCursor<Integer>> cursor0 = (Cursor<SlicingCursor<Integer>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      SlicingTransform slicingTransform0 = new SlicingTransform(36, 0);
      SlicingCursor<SlicingCursor<Integer>> slicingCursor0 = new SlicingCursor<SlicingCursor<Integer>>(cursor0, slicingTransform0);
      slicingCursor0.jumpFwd(0);
      assertEquals(36, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(cursor0).next();
      doReturn(0).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      SlicingCursor<Object> slicingCursor1 = slicingCursor0.next();
      assertNull(slicingCursor1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      long[] longArray0 = new long[5];
      Point point0 = new Point(longArray0);
      Integer integer0 = new Integer(0);
      pointSampleList0.add(point0, integer0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      boolean boolean0 = slicingCursor0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(cursor0).numDimensions();
      doReturn(0L).when(cursor0).getLongPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      long long0 = slicingCursor0.getLongPosition(20);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(cursor0).numDimensions();
      doReturn((long)47).when(cursor0).getLongPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      long long0 = slicingCursor0.getLongPosition(20);
      assertEquals(47L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(cursor0).numDimensions();
      doReturn((long)47, (-482L), (long)47, (long)47, (-482L)).when(cursor0).getLongPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      slicingCursor0.positionAsLongArray();
      long long0 = slicingCursor0.getLongPosition(20);
      assertEquals((-482L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(26, 26);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(cursor0).numDimensions();
      doReturn(15).when(cursor0).getIntPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      int int0 = slicingCursor0.getIntPosition(1);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(cursor0).numDimensions();
      doReturn((-2063)).when(cursor0).getIntPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      int int0 = slicingCursor0.getIntPosition(3);
      assertEquals((-2063), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(18, 18);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(18, 18);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(cursor0).numDimensions();
      doReturn(4.16236F).when(cursor0).getFloatPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      float float0 = slicingCursor0.getFloatPosition(1);
      assertEquals(4.16236F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(18, 18);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(cursor0).numDimensions();
      doReturn((-3269.4514F)).when(cursor0).getFloatPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      float float0 = slicingCursor0.getFloatPosition(1);
      assertEquals((-3269.4514F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      doReturn(0.0).when(cursor0).getDoublePosition(anyInt());
      SlicingTransform slicingTransform0 = new SlicingTransform(1534, 0);
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      double double0 = slicingCursor0.getDoublePosition(52);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      doReturn((-2904.2806076)).when(cursor0).getDoublePosition(anyInt());
      SlicingTransform slicingTransform0 = new SlicingTransform(1534, 0);
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      double double0 = slicingCursor0.getDoublePosition(52);
      assertEquals((-2904.2806076), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(9);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(9, 9);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      Cursor<SlicingCursor<Integer>> cursor1 = (Cursor<SlicingCursor<Integer>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor1).numDimensions();
      doReturn(slicingCursor0).when(cursor1).get();
      SlicingTransform slicingTransform1 = new SlicingTransform(0, 0);
      SlicingCursor<SlicingCursor<Integer>> slicingCursor1 = new SlicingCursor<SlicingCursor<Integer>>(cursor1, slicingTransform1);
      SlicingCursor<Integer> slicingCursor2 = slicingCursor1.get();
      assertSame(slicingCursor2, slicingCursor0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      SlicingCursor<Integer> slicingCursor1 = slicingCursor0.copyCursor();
      assertFalse(slicingCursor1.equals((Object)slicingCursor0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      SlicingCursor<Integer> slicingCursor1 = slicingCursor0.copy();
      assertNotSame(slicingCursor0, slicingCursor1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(1);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.next();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(3462, 3462);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(3462).when(cursor0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(cursor0).getLongPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      long[] longArray0 = slicingCursor0.positionAsLongArray();
      slicingCursor0.localize(longArray0);
      assertEquals(3462, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(7);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(7, 7);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.localize((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2026);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(2026, 2026);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getLongPosition(1994);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2035);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(2035, 2035);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getIntPosition(2003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(812);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(812, 812);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getFloatPosition(736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2035);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(2035, 2035);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getDoublePosition(2028);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.fwd();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SlicingCursor<Integer> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<Integer>((SlicingCursor<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(3462, 3462);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(3462).when(cursor0).numDimensions();
      doReturn(0L, 0L, 0L, 0L, 0L).when(cursor0).getLongPosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      slicingCursor0.positionAsPoint();
      SlicingCursor<SlicingCursor<Object>> slicingCursor1 = new SlicingCursor<SlicingCursor<Object>>(slicingCursor0, slicingTransform0);
      assertFalse(slicingCursor1.equals((Object)slicingCursor0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>((Cursor<SlicingCursor<Object>>) null, slicingTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2041);
      SlicingTransform slicingTransform0 = new SlicingTransform((-3857), 2041);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3857
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(cursor0).numDimensions();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      slicingTransform0.setComponentMapping(intArray0);
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getDoublePosition((-2796));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2796 out of bounds for length 0
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getFloatPosition((-2252));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2252 out of bounds for length 0
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(1);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getLongPosition((-1897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1897 out of bounds for length 1
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(2, 2);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getIntPosition(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getIntPosition((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("net.imglib2.view.iteration.SlicingCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(47);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      SlicingCursor<Object> slicingCursor1 = slicingCursor0.copy();
      assertFalse(slicingCursor1.equals((Object)slicingCursor0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getDoublePosition(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getFloatPosition(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(47, 47);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(47);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(26, 26);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(cursor0).numDimensions();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(cursor0).getDoublePosition(anyInt());
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      double[] doubleArray0 = slicingCursor0.positionAsDoubleArray();
      assertEquals(26, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(4);
      SlicingTransform slicingTransform0 = new SlicingTransform(4, 4);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(24);
      SlicingTransform slicingTransform0 = new SlicingTransform(24, 24);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(floatArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.getLongPosition(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(13);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(13, 13);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(14);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(14, 14);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      int[] intArray0 = new int[19];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(9);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(9, 9);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        slicingCursor0.localize(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(26, 26);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(15);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingCursor<Integer> slicingCursor0 = null;
      try {
        slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingCursor0.jumpFwd(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      boolean boolean0 = slicingCursor0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      slicingCursor0.remove();
      assertEquals(0, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(18, 18);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(18).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      slicingCursor0.fwd();
      assertEquals(18, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      SlicingCursor<Object> slicingCursor0 = new SlicingCursor<Object>(pointSampleList_PointSampleListCursor0, slicingTransform0);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(slicingCursor0).when(cursor0).next();
      doReturn(0).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor1 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      SlicingCursor<Object> slicingCursor2 = slicingCursor1.next();
      assertSame(slicingCursor0, slicingCursor2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(0);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      slicingCursor0.reset();
      assertEquals(0, slicingCursor0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(2);
      Cursor<Integer> cursor0 = pointSampleList0.localizingCursor();
      SlicingTransform slicingTransform0 = new SlicingTransform(2, 2);
      SlicingCursor<Integer> slicingCursor0 = new SlicingCursor<Integer>(cursor0, slicingTransform0);
      Integer integer0 = slicingCursor0.get();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(26, 26);
      Cursor<SlicingCursor<Object>> cursor0 = (Cursor<SlicingCursor<Object>>) mock(Cursor.class, new ViolatedAssumptionAnswer());
      doReturn(26).when(cursor0).numDimensions();
      SlicingCursor<SlicingCursor<Object>> slicingCursor0 = new SlicingCursor<SlicingCursor<Object>>(cursor0, slicingTransform0);
      SlicingCursor<SlicingCursor<Object>> slicingCursor1 = slicingCursor0.copyCursor();
      assertFalse(slicingCursor1.equals((Object)slicingCursor0));
  }
}
