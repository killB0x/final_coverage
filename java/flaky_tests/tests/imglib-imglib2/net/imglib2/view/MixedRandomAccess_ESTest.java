/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:22:04 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RandomAccess;
import net.imglib2.transform.integer.ComponentMappingTransform;
import net.imglib2.transform.integer.Mixed;
import net.imglib2.transform.integer.MixedTransform;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.view.MixedRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MixedRandomAccess_ESTest extends MixedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<MixedRandomAccess<Integer>> supplier0 = (Supplier<MixedRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      longArray0[0] = 9223372036854775799L;
      Point point0 = Point.wrap(longArray0);
      PointSample<MixedRandomAccess<Integer>> pointSample0 = new PointSample<MixedRandomAccess<Integer>>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Integer>>(pointSample0, translationTransform0);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess1 = new MixedRandomAccess<Object>(pointSample1, translationTransform0);
      translationTransform0.applyInverse((Positionable) mixedRandomAccess0, (Localizable) mixedRandomAccess1);
      assertEquals(5, mixedRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.setPosition((long) 1, 1);
      assertEquals(8, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((long) 0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.setPosition(2147483639, 1);
      assertEquals(8, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(1245);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1245);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition(1245, 1245);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<MixedRandomAccess<Integer>> supplier0 = (Supplier<MixedRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[5];
      longArray0[1] = (-1L);
      Point point0 = Point.wrap(longArray0);
      PointSample<MixedRandomAccess<Integer>> pointSample0 = new PointSample<MixedRandomAccess<Integer>>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Integer>>(pointSample0, translationTransform0);
      MixedRandomAccess<Integer> mixedRandomAccess1 = mixedRandomAccess0.setPositionAndGet(longArray0);
      assertNull(mixedRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      mixedRandomAccess0.setPosition(longArray0);
      assertEquals(4, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, translationTransform0);
      int[] intArray0 = new int[5];
      intArray0[1] = 2495;
      mixedRandomAccess0.setPosition(intArray0);
      assertArrayEquals(new int[] {0, 2495, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1485L);
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.setPosition((Localizable) pointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1485L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(1);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, translationTransform0);
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 1;
      mixedRandomAccess0.move(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      mixedRandomAccess0.move(intArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<MixedRandomAccess<Integer>> supplier0 = (Supplier<MixedRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      PointSample<MixedRandomAccess<Integer>> pointSample0 = new PointSample<MixedRandomAccess<Integer>>(supplier0, intArray0);
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Integer>>(pointSample0, translationTransform0);
      PointSampleList<Integer> pointSampleList0 = new PointSampleList<Integer>(1992);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      mixedRandomAccess0.move((Localizable) point0);
      assertEquals(4, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(1245);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1245);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move(1L, 1245);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(3);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move(3740, 3);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(3);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, translationTransform0);
      mixedRandomAccess0.move(3740, 3);
      assertArrayEquals(new long[] {0L, 0L, 0L, 3740L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 3);
      SlicingTransform slicingTransform0 = new SlicingTransform(2101, 3);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.bck(2101);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.fwd(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 3740);
      MixedRandomAccess<Object> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      MixedRandomAccess<Object> mixedRandomAccess1 = new MixedRandomAccess<Object>(mixedRandomAccess0);
      assertFalse(mixedRandomAccess1.equals((Object)mixedRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[2];
      Point point0 = Point.wrap(longArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      Object object0 = mixedRandomAccess0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, object0).when(supplier0).get();
      long[] longArray0 = new long[2];
      Point point0 = Point.wrap(longArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[6];
      mixedRandomAccess0.setPositionAndGet(intArray0);
      Object object1 = mixedRandomAccess0.get();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      MixedRandomAccess<Object> mixedRandomAccess1 = mixedRandomAccess0.copy();
      assertNotSame(mixedRandomAccess0, mixedRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[18];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((long) (-2790), (-2790));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2790 out of bounds for length 7
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((-10), (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -10 out of bounds for length 8
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[124];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[44];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((long) (-3), (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3 out of bounds for length 8
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[14];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((-850), (-850));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -850 out of bounds for length 14
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<MixedRandomAccess<Object>> pointSample0 = new PointSample<MixedRandomAccess<Object>>((Supplier<MixedRandomAccess<Object>>) null, longArray0);
      MixedRandomAccess<MixedRandomAccess<Object>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Object>>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[10];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.fwd((-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -6 out of bounds for length 10
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.bck((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -7 out of bounds for length 1
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MixedRandomAccess<Object> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<Object>((MixedRandomAccess<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.MixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Object>> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Object>>((RandomAccess<MixedRandomAccess<Object>>) null, translationTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[143];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform((-1388), 180);
      MixedRandomAccess<Object> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, slicingTransform0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1388
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer(39);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      int[] intArray0 = new int[5];
      intArray0[1] = 39;
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(2736);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedTransform mixedTransform0 = new MixedTransform(2962, 2736);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, mixedTransform1);
      mixedRandomAccess0.setPosition((long) 2736, 1232);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((long) 3288, 3288);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      MixedTransform mixedTransform0 = new MixedTransform((-2136), 2209);
      MixedTransform mixedTransform1 = mixedTransform0.concatenate((Mixed) translationTransform0);
      MixedTransform mixedTransform2 = mixedTransform1.preConcatenate((Mixed) translationTransform0);
      MixedRandomAccess<Object> mixedRandomAccess1 = new MixedRandomAccess<Object>(mixedRandomAccess0, mixedTransform2);
      mixedRandomAccess1.setPosition(0, 1);
      assertFalse(mixedRandomAccess1.equals((Object)mixedRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((-1905), 3361);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(3);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[5];
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray1);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.setPosition(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      Integer integer1 = mixedRandomAccess0.setPositionAndGet(intArray0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[121];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long[] longArray0 = new long[110];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 59);
      MixedTransform mixedTransform0 = new MixedTransform(82, 59);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, mixedTransform0);
      PointSample<Object> pointSample1 = PointSample.wrap((Object) mixedTransform0, longArray0);
      mixedRandomAccess0.setPosition((Localizable) pointSample1);
      assertEquals(110, pointSample1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[14];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      Point point0 = new Point(0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.setPosition((Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      int[] intArray0 = new int[5];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Supplier<MixedRandomAccess<Integer>> supplier0 = (Supplier<MixedRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      PointSample<MixedRandomAccess<Integer>> pointSample0 = new PointSample<MixedRandomAccess<Integer>>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Integer>>(pointSample0, translationTransform0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess1 = new MixedRandomAccess<MixedRandomAccess<Integer>>(mixedRandomAccess0, translationTransform0);
      mixedRandomAccess1.move((Localizable) point0);
      assertFalse(mixedRandomAccess1.equals((Object)mixedRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[4];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[127];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      Point point0 = new Point(intArray0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[8];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, componentMappingTransform0);
      mixedRandomAccess0.move((Localizable) pointSample0);
      assertEquals(8, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[117];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedTransform mixedTransform0 = new MixedTransform(140, 140);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, mixedTransform1);
      mixedRandomAccess0.move((long) 0, 137);
      assertEquals(140, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      mixedRandomAccess0.move((long) 1, 1);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move(4513, 4513);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Supplier<MixedRandomAccess<Integer>> supplier0 = (Supplier<MixedRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      Point point0 = Point.wrap(longArray0);
      PointSample<MixedRandomAccess<Integer>> pointSample0 = new PointSample<MixedRandomAccess<Integer>>(supplier0, point0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedRandomAccess<MixedRandomAccess<Integer>> mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Integer>>(pointSample0, translationTransform0);
      mixedRandomAccess0.bck(0);
      assertEquals(5, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[14];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.bck(4314);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[110];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(102);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      MixedTransform mixedTransform0 = new MixedTransform(2514, 578);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      MixedRandomAccess<Integer> mixedRandomAccess0 = new MixedRandomAccess<Integer>(pointSample0, mixedTransform1);
      mixedRandomAccess0.bck(2416);
      assertEquals(2514, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 3);
      SlicingTransform slicingTransform0 = new SlicingTransform(2101, 3);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, slicingTransform0);
      mixedRandomAccess0.fwd(3);
      assertEquals(2101, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.fwd(1231);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      mixedRandomAccess0.fwd(1);
      assertEquals(5, mixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedTransform mixedTransform0 = new MixedTransform(1, 4);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, mixedTransform0);
      // Undeclared exception!
      try { 
        mixedRandomAccess0.move((long) 1, 4);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[1];
      PointSample<MixedRandomAccess<Object>> pointSample0 = new PointSample<MixedRandomAccess<Object>>((Supplier<MixedRandomAccess<Object>>) null, longArray1);
      MixedRandomAccess<MixedRandomAccess<Object>> mixedRandomAccess0 = null;
      try {
        mixedRandomAccess0 = new MixedRandomAccess<MixedRandomAccess<Object>>(pointSample0, translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedRandomAccess<Object> mixedRandomAccess0 = new MixedRandomAccess<Object>(pointSample0, translationTransform0);
      MixedRandomAccess<Object> mixedRandomAccess1 = mixedRandomAccess0.copy();
      assertNotSame(mixedRandomAccess0, mixedRandomAccess1);
  }
}
