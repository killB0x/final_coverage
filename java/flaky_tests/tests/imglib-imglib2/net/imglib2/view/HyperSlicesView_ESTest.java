/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:46:09 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Stack;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.list.ListImg;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.view.HyperSlice;
import net.imglib2.view.HyperSlicesView;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HyperSlicesView_ESTest extends HyperSlicesView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(1775, biConsumer0, supplier0);
      int[] intArray0 = new int[8];
      HyperSlicesView<Integer> hyperSlicesView0 = null;
      try {
        hyperSlicesView0 = new HyperSlicesView<Integer>(functionRandomAccessible0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1767 out of bounds for length 1767
         //
         verifyException("net.imglib2.view.HyperSlicesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[1];
      IntervalView<Object> intervalView0 = new IntervalView<Object>(functionRandomAccessible0, longArray0, longArray0);
      int[] intArray0 = new int[1];
      HyperSlicesView<Object> hyperSlicesView0 = new HyperSlicesView<Object>(intervalView0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.randomAccess((Interval) intervalView0);
      assertEquals(0, hyperSlicesView_HyperSlicesViewRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(0, biConsumer0, supplier0);
      long[] longArray0 = new long[1];
      IntervalView<Object> intervalView0 = new IntervalView<Object>(functionRandomAccessible0, longArray0, longArray0);
      int[] intArray0 = new int[1];
      HyperSlicesView<Object> hyperSlicesView0 = new HyperSlicesView<Object>(intervalView0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.randomAccess();
      assertEquals(0, hyperSlicesView_HyperSlicesViewRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      long[] longArray0 = new long[6];
      ListImg<Locale.Category> listImg0 = new ListImg<Locale.Category>(arrayList0, longArray0);
      IterableRandomAccessibleInterval<Locale.Category> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Locale.Category>(listImg0);
      int[] intArray0 = new int[1];
      HyperSlicesView<Locale.Category> hyperSlicesView0 = new HyperSlicesView<Locale.Category>(iterableRandomAccessibleInterval0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.randomAccess();
      assertEquals(5, hyperSlicesView_HyperSlicesViewRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(0, biConsumer0, supplier0);
      int[] intArray0 = new int[0];
      HyperSlicesView<Object> hyperSlicesView0 = new HyperSlicesView<Object>(functionRandomAccessible0, intArray0);
      int int0 = hyperSlicesView0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      HyperSlicesView<Integer> hyperSlicesView0 = null;
      try {
        hyperSlicesView0 = new HyperSlicesView<Integer>((RandomAccessible<Integer>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.HyperSlicesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[6];
      int[] intArray0 = new int[16];
      Stack<Object> stack0 = new Stack<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(stack0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, (-4774));
      IterableRandomAccessibleInterval<Object> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<Object>) subsampleIntervalView0);
      HyperSlicesView<Object> hyperSlicesView0 = null;
      try {
        hyperSlicesView0 = new HyperSlicesView<Object>(iterableRandomAccessibleInterval0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -10
         //
         verifyException("net.imglib2.view.HyperSlicesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[7];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[1];
      HyperSlicesView<Integer> hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
      HyperSlice<Integer> hyperSlice0 = hyperSlicesView0.getAt(longArray0);
      assertEquals(1, hyperSlice0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[6];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1688;
      HyperSlicesView<Integer> hyperSlicesView0 = null;
      try {
        hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.HyperSlicesView", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[6];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlicesView<Integer> hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
      int int0 = hyperSlicesView0.numDimensions();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[6];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlicesView<Integer> hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.randomAccess((Interval) listImg0);
      assertEquals(6, hyperSlicesView_HyperSlicesViewRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[7];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[1];
      HyperSlicesView<Integer> hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.new HyperSlicesViewRandomAccess();
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess1 = hyperSlicesView_HyperSlicesViewRandomAccess0.copy();
      assertEquals(6, hyperSlicesView_HyperSlicesViewRandomAccess1.numDimensions());
      assertNotSame(hyperSlicesView_HyperSlicesViewRandomAccess1, hyperSlicesView_HyperSlicesViewRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[6];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlicesView<Integer> hyperSlicesView0 = new HyperSlicesView<Integer>(listImg0, intArray0);
      HyperSlicesView.HyperSlicesViewRandomAccess hyperSlicesView_HyperSlicesViewRandomAccess0 = hyperSlicesView0.new HyperSlicesViewRandomAccess();
      HyperSlice<Object> hyperSlice0 = hyperSlicesView_HyperSlicesViewRandomAccess0.get();
      assertEquals(0, hyperSlice0.numDimensions());
  }
}
