/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:42:48 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubsampleView_ESTest extends SubsampleView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomAccessible<Integer> randomAccessible0 = (RandomAccessible<Integer>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Integer> subsampleView0 = new SubsampleView<Integer>(randomAccessible0, 840L);
      long[] longArray0 = new long[3];
      longArray0[1] = 840L;
      SubsampleView<Integer> subsampleView1 = new SubsampleView<Integer>(subsampleView0, longArray0);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(interval0);
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.setPosition(940L, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, (-1588L));
      long[] longArray0 = new long[3];
      longArray0[0] = (-1588L);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      // Undeclared exception!
      try { 
        subsampleView1.getAt(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(390, (-2041), 390).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess<Object>) null).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 69L);
      long[] longArray0 = new long[1];
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 390;
      // Undeclared exception!
      try { 
        subsampleView0.getAt(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((long)2966, 550L).when(randomAccess0).getLongPosition(anyInt());
      RandomAccess<Object> randomAccess1 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966, 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      doReturn(randomAccess1).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[2];
      longArray0[0] = 1391L;
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      RandomAccess<Object> randomAccess2 = subsampleView0.randomAccess();
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(interval0);
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.setPosition((Localizable) randomAccess2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1744;
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.move(longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2148L;
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 9223372036854775807L);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(interval0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[4];
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 9223372036854775807L);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(interval0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((long)2966, 550L).when(randomAccess0).getLongPosition(anyInt());
      RandomAccess<Object> randomAccess1 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966, 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      doReturn(randomAccess1).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[2];
      longArray0[0] = 1391L;
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess1 = subsampleView0.new SubsampleRandomAccess(interval0);
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess1.move((Localizable) subsampleView_SubsampleRandomAccess0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 1241L);
      long[] longArray0 = new long[1];
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      SubsampleView<Object> subsampleView2 = new SubsampleView<Object>(subsampleView1, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView2.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.move(3312, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((double)887).when(randomAccess0).getDoublePosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(887, 887).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 887);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(interval0);
      double double0 = subsampleView_SubsampleRandomAccess0.getDoublePosition(0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomAccess<SubsampleView<Object>> randomAccess0 = (RandomAccess<SubsampleView<Object>>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((-1188.0F)).when(randomAccess0).getFloatPosition(anyInt());
      RandomAccessible<SubsampleView<Object>> randomAccessible0 = (RandomAccessible<SubsampleView<Object>>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[5];
      longArray0[0] = (-474L);
      SubsampleView<SubsampleView<Object>> subsampleView0 = new SubsampleView<SubsampleView<Object>>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess((Interval) null);
      float float0 = subsampleView_SubsampleRandomAccess0.getFloatPosition(0);
      assertEquals(2.506329F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((double)887, 0.0, 0.0).when(randomAccess0).getDoublePosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(887, 887).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 887);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(interval0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomAccess<SubsampleView<Object>> randomAccess0 = (RandomAccess<SubsampleView<Object>>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1)).when(randomAccess0).getDoublePosition(anyInt());
      RandomAccessible<SubsampleView<Object>> randomAccessible0 = (RandomAccessible<SubsampleView<Object>>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[5];
      SubsampleView<SubsampleView<Object>> subsampleView0 = new SubsampleView<SubsampleView<Object>>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess((Interval) null);
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.positionAsRealPoint();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn(765.0F).when(randomAccess0).getFloatPosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(887, 887).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 887);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(interval0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.localize(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((long)208).when(randomAccess0).getLongPosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 208, 18).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[3];
      longArray0[0] = 2L;
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, (-466L));
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(interval0);
      subsampleView_SubsampleRandomAccess0.localize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn(2966).when(randomAccess0).getIntPosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966, 2966, 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[2];
      longArray0[0] = 1391L;
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, (-1L));
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-107L);
      RandomAccessible<SubsampleView<Object>> randomAccessible0 = (RandomAccessible<SubsampleView<Object>>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 2966).when(randomAccessible0).numDimensions();
      SubsampleView<SubsampleView<Object>> subsampleView0 = new SubsampleView<SubsampleView<Object>>(randomAccessible0, 1937L);
      SubsampleView<SubsampleView<Object>> subsampleView1 = new SubsampleView<SubsampleView<Object>>(subsampleView0, longArray0);
      RandomAccess<SubsampleView<Object>> randomAccess0 = (RandomAccess<SubsampleView<Object>>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn(2966, 2952).when(randomAccess0).getIntPosition(anyInt());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(randomAccess0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.localize(intArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomAccess<SubsampleView<Object>> randomAccess0 = (RandomAccess<SubsampleView<Object>>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<SubsampleView<Object>> randomAccessible0 = (RandomAccessible<SubsampleView<Object>>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1, 1, 3353).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[5];
      SubsampleView<SubsampleView<Object>> subsampleView0 = new SubsampleView<SubsampleView<Object>>(randomAccessible0, longArray0);
      SubsampleView<SubsampleView<Object>> subsampleView1 = new SubsampleView<SubsampleView<Object>>(subsampleView0, (-1));
      SubsampleView<SubsampleView<Object>> subsampleView2 = new SubsampleView<SubsampleView<Object>>(subsampleView0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      subsampleView_SubsampleRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessible0).numDimensions();
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((RandomAccess) null).when(randomAccess0).copy();
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess1 = subsampleView_SubsampleRandomAccess0.copy();
      assertNotSame(subsampleView_SubsampleRandomAccess0, subsampleView_SubsampleRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 493L);
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.setPosition((Localizable) subsampleView_SubsampleRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966, 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(interval0);
      int int0 = subsampleView_SubsampleRandomAccess0.numDimensions();
      assertEquals(2966, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(randomAccess0).getLongPosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.getLongPosition(2966);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2966 out of bounds for length 2
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 2966, 2966, 2966).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, 1963L);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess();
      subsampleView_SubsampleRandomAccess0.setPosition(0, 1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-295), 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = null;
      try {
        subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -295
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(192, 0, 0, 196).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 1241L);
      long[] longArray0 = new long[1];
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess();
      subsampleView_SubsampleRandomAccess0.move(3312, 0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(192, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 1241L);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      subsampleView_SubsampleRandomAccess0.move(3312, 0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      long[] longArray0 = new long[2];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      subsampleView_SubsampleRandomAccess0.fwd(0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0L);
      long[] longArray0 = new long[5];
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView1.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.bck(1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(390, (-2041), 390).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 69L);
      long[] longArray0 = new long[1];
      SubsampleView<Object> subsampleView1 = new SubsampleView<Object>(subsampleView0, longArray0);
      int int0 = subsampleView1.numDimensions();
      assertEquals(390, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1765, (-1)).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 69L);
      int int0 = subsampleView0.numDimensions();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccessible0).numDimensions();
      long[] longArray0 = new long[0];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      long[] longArray1 = subsampleView0.getSteps();
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-3389), 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      long[] longArray0 = new long[4];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
      Interval interval0 = mock(Interval.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        subsampleView0.randomAccess(interval0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3389
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(853, (-380)).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, (-4294L));
      // Undeclared exception!
      try { 
        subsampleView0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -380
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[1];
      SubsampleView<Object> subsampleView0 = null;
      try {
        subsampleView0 = new SubsampleView<Object>((RandomAccessible<Object>) null, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleView", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubsampleView<Integer> subsampleView0 = null;
      try {
        subsampleView0 = new SubsampleView<Integer>((RandomAccessible<Integer>) null, 614L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleView", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-698)).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = null;
      try {
        subsampleView0 = new SubsampleView<Object>(randomAccessible0, 1732);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -698
         //
         verifyException("net.imglib2.view.SubsampleView", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      int int0 = subsampleView0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[1];
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1727).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = null;
      try {
        subsampleView0 = new SubsampleView<Object>(randomAccessible0, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Dimensions do not match.
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      long[] longArray0 = new long[4];
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.setPosition(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(randomAccess0).get();
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0, randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      RandomAccess<Object> randomAccess1 = subsampleView0.randomAccess();
      Object object0 = subsampleView0.getAt((Localizable) randomAccess1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      RandomAccess<Object> randomAccess1 = subsampleView0.randomAccess();
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess1);
      subsampleView_SubsampleRandomAccess0.move((Localizable) randomAccess1);
      assertFalse(randomAccess1.equals((Object)randomAccess0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.move((int[]) null);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.localize((double[]) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      subsampleView_SubsampleRandomAccess0.localize((float[]) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      int[] intArray0 = new int[0];
      subsampleView_SubsampleRandomAccess0.localize(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(randomAccess0).get();
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      int[] intArray0 = new int[1];
      Object object0 = subsampleView0.getAt(intArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess();
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.move((long) 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(randomAccess0).getIntPosition(anyInt());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      SubsampleView.SubsampleRandomAccess subsampleView_SubsampleRandomAccess0 = subsampleView0.new SubsampleRandomAccess(randomAccess0);
      // Undeclared exception!
      try { 
        subsampleView_SubsampleRandomAccess0.getIntPosition(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      RandomAccess<Object> randomAccess1 = subsampleView0.randomAccess((Interval) null);
      assertFalse(randomAccess1.equals((Object)randomAccess0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(randomAccessible0).toString();
      doReturn(0).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 0);
      RandomAccessible<Object> randomAccessible1 = subsampleView0.getSource();
      assertSame(randomAccessible1, randomAccessible0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(853).when(randomAccessible0).numDimensions();
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(randomAccessible0, 853);
      long[] longArray0 = subsampleView0.getSteps();
      assertEquals(853, longArray0.length);
  }
}
