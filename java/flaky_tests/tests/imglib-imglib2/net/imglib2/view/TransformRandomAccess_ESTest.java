/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:30:27 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccess;
import net.imglib2.transform.InverseTransform;
import net.imglib2.transform.InvertibleTransform;
import net.imglib2.transform.Transform;
import net.imglib2.view.TransformRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransformRandomAccess_ESTest extends TransformRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(2, 0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0, 0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, transformRandomAccess0);
      TransformRandomAccess<Integer> transformRandomAccess1 = new TransformRandomAccess<Integer>(pointSample1, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess1.setPosition((long) 0, 1390);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(604).when(invertibleTransform0).numSourceDimensions();
      doReturn(604).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      transformRandomAccess0.setPosition(604, 0);
      assertEquals(604, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition(820, 827);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      long[] longArray0 = new long[1];
      transformRandomAccess0.setPosition(longArray0);
      assertEquals(1, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2165));
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      int[] intArray0 = new int[7];
      transformRandomAccess0.setPosition(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(850, 3284).when(invertibleTransform0).numSourceDimensions();
      doReturn(3284, 850).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      TransformRandomAccess<Object> transformRandomAccess1 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((Localizable) transformRandomAccess1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      longArray0[0] = 1676L;
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      transformRandomAccess0.move(longArray0);
      assertEquals(1, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      transformRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(invertibleTransform0).numSourceDimensions();
      doReturn(1, 0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier((Supplier<Integer>) null, longArray0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      TransformRandomAccess<Integer> transformRandomAccess1 = transformRandomAccess0.copy();
      TransformRandomAccess<Integer> transformRandomAccess2 = new TransformRandomAccess<Integer>(transformRandomAccess1);
      Supplier<TransformRandomAccess<Integer>> supplier0 = (Supplier<TransformRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      PointSample<TransformRandomAccess<Integer>> pointSample1 = new PointSample<TransformRandomAccess<Integer>>(supplier0, intArray0);
      TransformRandomAccess<TransformRandomAccess<Integer>> transformRandomAccess3 = new TransformRandomAccess<TransformRandomAccess<Integer>>(pointSample1, inverseTransform0);
      TransformRandomAccess<TransformRandomAccess<Integer>> transformRandomAccess4 = transformRandomAccess3.copy();
      // Undeclared exception!
      try { 
        transformRandomAccess4.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      Point point0 = Point.wrap(longArray0);
      transformRandomAccess0.move((Localizable) point0);
      assertEquals(4, point0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 2);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((long) 2, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<TransformRandomAccess<Integer>> supplier0 = (Supplier<TransformRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<TransformRandomAccess<Integer>> pointSample0 = new PointSample<TransformRandomAccess<Integer>>(supplier0, intArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<TransformRandomAccess<Integer>> transformRandomAccess0 = new TransformRandomAccess<TransformRandomAccess<Integer>>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move(783, 783);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.bck(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PointSample<TransformRandomAccess<Object>> pointSample0 = new PointSample<TransformRandomAccess<Object>>((Supplier<TransformRandomAccess<Object>>) null, 3272);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<TransformRandomAccess<Object>> transformRandomAccess0 = new TransformRandomAccess<TransformRandomAccess<Object>>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.fwd(3272);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(783).when(invertibleTransform0).numSourceDimensions();
      doReturn(783).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      transformRandomAccess0.move(3010L, 0);
      assertEquals(783, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(783).when(invertibleTransform0).numSourceDimensions();
      doReturn(2552).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<TransformRandomAccess<Object>> transformRandomAccess0 = new TransformRandomAccess<TransformRandomAccess<Object>>((RandomAccess<TransformRandomAccess<Object>>) null, inverseTransform0);
      transformRandomAccess0.fwd(783);
      assertEquals(2552, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(783).when(invertibleTransform0).numSourceDimensions();
      doReturn(2552).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<TransformRandomAccess<Object>> transformRandomAccess0 = new TransformRandomAccess<TransformRandomAccess<Object>>((RandomAccess<TransformRandomAccess<Object>>) null, inverseTransform0);
      transformRandomAccess0.bck(0);
      assertEquals(2552, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[9];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(783).when(invertibleTransform0).numSourceDimensions();
      doReturn(783).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      Object object0 = transformRandomAccess0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3251).when(invertibleTransform0).numSourceDimensions();
      doReturn(3251).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((long) 1, (-1535));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1535 out of bounds for length 1
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3272).when(invertibleTransform0).numSourceDimensions();
      doReturn(3272).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3272).when(invertibleTransform0).numSourceDimensions();
      doReturn(3272).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((-1386), (-1386));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1386 out of bounds for length 3272
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess1 = null;
      try {
        transformRandomAccess1 = new TransformRandomAccess<Object>(transformRandomAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3201).when(invertibleTransform0).numSourceDimensions();
      doReturn(3201).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess1 = null;
      try {
        transformRandomAccess1 = new TransformRandomAccess<Object>(transformRandomAccess0, (Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(761).when(invertibleTransform0).numSourceDimensions();
      doReturn((-27)).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = null;
      try {
        transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -27
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3196).when(invertibleTransform0).numSourceDimensions();
      doReturn(3196).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3201).when(invertibleTransform0).numSourceDimensions();
      doReturn(3201).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((long) 3201, 3201);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(2503);
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(2503).when(invertibleTransform0).numSourceDimensions();
      doReturn(2503).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      transformRandomAccess0.setPosition(0L, 2344);
      assertEquals(2503, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3004).when(invertibleTransform0).numSourceDimensions();
      doReturn(3004).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition(3004, 3004);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>((RandomAccess<Integer>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((-41), (-41));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -41 out of bounds for length 1
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1104).when(invertibleTransform0).numSourceDimensions();
      doReturn(1104).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      InvertibleTransform invertibleTransform1 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform1).numSourceDimensions();
      doReturn(0).when(invertibleTransform1).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform1);
      TransformRandomAccess<Object> transformRandomAccess1 = new TransformRandomAccess<Object>(transformRandomAccess0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess1.get();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(1760);
      long[] longArray0 = new long[2];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1760).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, invertibleTransform0);
      transformRandomAccess0.setPosition(longArray0);
      assertEquals(1, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      int[] intArray0 = new int[1];
      transformRandomAccess0.setPosition(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) inverseTransform0, longArray0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(2503).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1);
      Point point0 = pointSampleList0.dimensionsAsPoint();
      transformRandomAccess0.setPosition((Localizable) point0);
      assertEquals(1, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        transformRandomAccess0.move(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(2503).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      Supplier<TransformRandomAccess<Integer>> supplier0 = (Supplier<TransformRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      PointSample<TransformRandomAccess<Integer>> pointSample0 = new PointSample<TransformRandomAccess<Integer>>(supplier0, intArray0);
      TransformRandomAccess<TransformRandomAccess<Integer>> transformRandomAccess0 = new TransformRandomAccess<TransformRandomAccess<Integer>>(pointSample0, inverseTransform0);
      transformRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        transformRandomAccess0.move(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3201).when(invertibleTransform0).numSourceDimensions();
      doReturn(3201).when(invertibleTransform0).numTargetDimensions();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>(pointSample0, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((Localizable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      transformRandomAccess0.move((Localizable) transformRandomAccess0);
      assertEquals(1, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3258).when(invertibleTransform0).numSourceDimensions();
      doReturn(3258).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((long) 3258, (-2763));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2763 out of bounds for length 3258
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3038).when(invertibleTransform0).numSourceDimensions();
      doReturn(3038).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move((long) 3038, 3038);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3272).when(invertibleTransform0).numSourceDimensions();
      doReturn(3272).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.move(3272, 3272);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(2503);
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(2503).when(invertibleTransform0).numSourceDimensions();
      doReturn(2503).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Integer> transformRandomAccess0 = new TransformRandomAccess<Integer>(pointSample0, inverseTransform0);
      transformRandomAccess0.move(2344, 2471);
      assertEquals(2503, transformRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(3272).when(invertibleTransform0).numSourceDimensions();
      doReturn(3272).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.bck(3272);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.bck((-3166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3166 out of bounds for length 0
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(invertibleTransform0).numSourceDimensions();
      doReturn(0).when(invertibleTransform0).numTargetDimensions();
      InverseTransform inverseTransform0 = new InverseTransform(invertibleTransform0);
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, inverseTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.fwd((-2986));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2986 out of bounds for length 0
         //
         verifyException("net.imglib2.view.TransformRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InvertibleTransform invertibleTransform0 = mock(InvertibleTransform.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(invertibleTransform0).numSourceDimensions();
      doReturn(1).when(invertibleTransform0).numTargetDimensions();
      TransformRandomAccess<Object> transformRandomAccess0 = new TransformRandomAccess<Object>((RandomAccess<Object>) null, invertibleTransform0);
      // Undeclared exception!
      try { 
        transformRandomAccess0.fwd(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
