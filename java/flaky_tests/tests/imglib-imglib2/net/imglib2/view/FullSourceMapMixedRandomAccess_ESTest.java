/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:15:58 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RandomAccess;
import net.imglib2.RealPoint;
import net.imglib2.transform.integer.ComponentMappingTransform;
import net.imglib2.transform.integer.Mixed;
import net.imglib2.transform.integer.MixedTransform;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.view.FullSourceMapMixedRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FullSourceMapMixedRandomAccess_ESTest extends FullSourceMapMixedRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-1L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition((-715L), 2);
      assertEquals(4, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[] longArray0 = new long[10];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray1 = new long[5];
      PointSample<Integer> pointSample1 = PointSample.wrapSupplier(supplier1, longArray1);
      MixedTransform mixedTransform0 = new MixedTransform(16, 16);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray1);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample1, mixedTransform1);
      pointSample0.localize((Positionable) fullSourceMapMixedRandomAccess0);
      assertEquals(10, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[0];
      PointSample<FullSourceMapMixedRandomAccess<Object>> pointSample0 = new PointSample<FullSourceMapMixedRandomAccess<Object>>((Supplier<FullSourceMapMixedRandomAccess<Object>>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>>(pointSample0, componentMappingTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(839L, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-715L);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition(1886, 0);
      assertArrayEquals(new long[] {1171L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      MixedTransform mixedTransform0 = new MixedTransform(1, 4);
      MixedTransform mixedTransform1 = mixedTransform0.concatenate((Mixed) translationTransform0);
      Supplier<FullSourceMapMixedRandomAccess<Object>> supplier0 = (Supplier<FullSourceMapMixedRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<FullSourceMapMixedRandomAccess<Object>> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>>(pointSample0, mixedTransform1);
      fullSourceMapMixedRandomAccess0.setPosition(723, 1);
      assertArrayEquals(new long[] {723L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((-1540), 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (-84L);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition(longArray0);
      assertArrayEquals(new long[] {(-84L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[7];
      fullSourceMapMixedRandomAccess0.setPosition(longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1480);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition(intArray0);
      assertArrayEquals(new long[] {(-1480L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[1];
      fullSourceMapMixedRandomAccess0.setPosition(intArray0);
      assertEquals(1, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 1877L;
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      pointSample0.localize((Positionable) fullSourceMapMixedRandomAccess0);
      assertEquals(8, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      fullSourceMapMixedRandomAccess0.setPosition((Localizable) pointSample0);
      assertEquals(4, pointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(425);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long[] longArray0 = new long[3];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      long[] longArray1 = new long[8];
      fullSourceMapMixedRandomAccess0.move(longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[1];
      fullSourceMapMixedRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long[] longArray0 = new long[12];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(0);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1551);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSampleList$PointSampleListCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((-3245L), 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.move(5, 0);
      assertEquals(7, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((-1381), 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move(44, 13);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<FullSourceMapMixedRandomAccess<Object>> supplier0 = (Supplier<FullSourceMapMixedRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<FullSourceMapMixedRandomAccess<Object>> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.bck(2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Integer integer0 = new Integer(15);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.fwd(15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[8];
      fullSourceMapMixedRandomAccess0.localize(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getFloatPosition(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      longArray0[1] = 506L;
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[2];
      fullSourceMapMixedRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getIntPosition(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[3];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      long[] longArray1 = new long[4];
      fullSourceMapMixedRandomAccess0.localize(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[7];
      fullSourceMapMixedRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray1);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      double[] doubleArray0 = new double[8];
      fullSourceMapMixedRandomAccess0.localize(doubleArray0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess1 = new FullSourceMapMixedRandomAccess<Object>(fullSourceMapMixedRandomAccess0);
      assertEquals(1, fullSourceMapMixedRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[2];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition(1886, 0);
      long long0 = fullSourceMapMixedRandomAccess0.getLongPosition(0);
      assertArrayEquals(new long[] {1886L, 0L}, longArray0);
      assertEquals(1886L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[12];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.bck(4);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess1 = new FullSourceMapMixedRandomAccess<Integer>(pointSample1, translationTransform0);
      long long0 = fullSourceMapMixedRandomAccess1.getLongPosition(4);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[12];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.move(5, 5);
      int int0 = fullSourceMapMixedRandomAccess0.getIntPosition(5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[18];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      float float0 = fullSourceMapMixedRandomAccess0.getFloatPosition(10);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-715L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier0, fullSourceMapMixedRandomAccess0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess1 = new FullSourceMapMixedRandomAccess<Object>(pointSample1, translationTransform0);
      float float0 = fullSourceMapMixedRandomAccess1.getFloatPosition(0);
      assertEquals(715.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.setPosition((-715L), 2);
      float float0 = fullSourceMapMixedRandomAccess0.getFloatPosition(2);
      assertEquals((-715.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[3];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      double double0 = fullSourceMapMixedRandomAccess0.getDoublePosition(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.move(5, 5);
      double double0 = fullSourceMapMixedRandomAccess0.getDoublePosition(5);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[9];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.bck(7);
      double double0 = fullSourceMapMixedRandomAccess0.getDoublePosition(7);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1L), 0L}, longArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[12];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      Object object0 = fullSourceMapMixedRandomAccess0.get();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      TranslationTransform translationTransform1 = (TranslationTransform)fullSourceMapMixedRandomAccess0.get();
      assertEquals(5, translationTransform1.numSourceDimensions());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[0];
      PointSample<FullSourceMapMixedRandomAccess<Object>> pointSample0 = new PointSample<FullSourceMapMixedRandomAccess<Object>>((Supplier<FullSourceMapMixedRandomAccess<Object>>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>>(pointSample0, componentMappingTransform0);
      FullSourceMapMixedRandomAccess<FullSourceMapMixedRandomAccess<Object>> fullSourceMapMixedRandomAccess1 = fullSourceMapMixedRandomAccess0.copy();
      assertNotSame(fullSourceMapMixedRandomAccess0, fullSourceMapMixedRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(2629L, (-1410));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1410 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer(678);
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform(678, 0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((Localizable) fullSourceMapMixedRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((long) (-3), (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((-10), (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -10 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[18];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getIntPosition((-916));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -916 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getFloatPosition((-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getDoublePosition(3852);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.fwd((-3570));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3570 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.bck((-21));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -21 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>((FullSourceMapMixedRandomAccess<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 5555);
      TranslationTransform translationTransform0 = new TranslationTransform(5555);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      assertEquals(5555, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>((RandomAccess<Object>) null, translationTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      MixedTransform mixedTransform0 = new MixedTransform((-1), 32);
      MixedTransform mixedTransform1 = mixedTransform0.preConcatenate((Mixed) translationTransform0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, mixedTransform1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1080;
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, intArray0);
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1080 out of bounds for length 1
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.move(longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[12];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      long long0 = fullSourceMapMixedRandomAccess0.getLongPosition(4);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getLongPosition(40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getLongPosition((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[12];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int int0 = fullSourceMapMixedRandomAccess0.getIntPosition(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(0L, 2272);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(1443, 1443);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((-10), (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -10 out of bounds for length 5
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      MixedTransform mixedTransform0 = new MixedTransform(7, 1);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, mixedTransform0);
      int[] intArray0 = new int[9];
      fullSourceMapMixedRandomAccess0.setPosition(intArray0);
      assertEquals(7, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(0);
      PointSampleList.PointSampleListCursor pointSampleList_PointSampleListCursor0 = pointSampleList0.new PointSampleListCursor();
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.setPosition((Localizable) pointSampleList_PointSampleListCursor0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[18];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess1 = new FullSourceMapMixedRandomAccess<Object>(fullSourceMapMixedRandomAccess0, translationTransform0);
      fullSourceMapMixedRandomAccess1.move((Localizable) fullSourceMapMixedRandomAccess0);
      assertNotSame(fullSourceMapMixedRandomAccess1, fullSourceMapMixedRandomAccess0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[10];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, 1);
      MixedTransform mixedTransform0 = new MixedTransform(7, 1);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, mixedTransform0);
      int[] intArray0 = new int[9];
      fullSourceMapMixedRandomAccess0.move(intArray0);
      assertEquals(7, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[21];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      Point point0 = new Point(1);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[7];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform(964, 7);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, slicingTransform0);
      fullSourceMapMixedRandomAccess0.move((Localizable) fullSourceMapMixedRandomAccess0);
      assertEquals(964, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.move((long) 15, 15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[18];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.move((long) 10, 10);
      assertEquals(18, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.bck(607);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[12];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.bck(8);
      int int0 = fullSourceMapMixedRandomAccess0.getIntPosition(8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.fwd(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      fullSourceMapMixedRandomAccess0.fwd(0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[9];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      RealPoint realPoint0 = fullSourceMapMixedRandomAccess0.positionAsRealPoint();
      assertEquals(2, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FullSourceMapMixedRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize(floatArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[1];
      fullSourceMapMixedRandomAccess0.localize(floatArray0);
      assertEquals(1, fullSourceMapMixedRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getIntPosition(364);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.localize(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[] longArray0 = new long[4];
      Integer integer0 = new Integer(2);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) integer0, longArray0);
      int[] intArray0 = new int[4];
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, componentMappingTransform0);
      fullSourceMapMixedRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MixedTransform mixedTransform0 = new MixedTransform(7, 1);
      int[] intArray0 = new int[9];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = null;
      try {
        fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, mixedTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[10];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      FullSourceMapMixedRandomAccess<Object> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.getDoublePosition((-2816));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 1);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        fullSourceMapMixedRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long[] longArray0 = new long[7];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform(964, 7);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess0 = new FullSourceMapMixedRandomAccess<Integer>(pointSample0, slicingTransform0);
      FullSourceMapMixedRandomAccess<Integer> fullSourceMapMixedRandomAccess1 = fullSourceMapMixedRandomAccess0.copy();
      assertNotSame(fullSourceMapMixedRandomAccess1, fullSourceMapMixedRandomAccess0);
  }
}
