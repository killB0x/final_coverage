/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:31:59 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Cursor;
import net.imglib2.Interval;
import net.imglib2.IterableInterval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.RandomAccessiblePair;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalView_ESTest extends IntervalView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[6];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      long[] longArray1 = new long[2];
      IntervalView<Integer> intervalView0 = null;
      try {
        intervalView0 = new IntervalView<Integer>(listImg0, longArray1, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<DoubleNtree> priorityQueue0 = new PriorityQueue<DoubleNtree>();
      long[] longArray0 = new long[6];
      ListImg<DoubleNtree> listImg0 = new ListImg<DoubleNtree>(priorityQueue0, longArray0);
      IterableRandomAccessibleInterval<DoubleNtree> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<DoubleNtree>(listImg0);
      SubsampleIntervalView<DoubleNtree> subsampleIntervalView0 = new SubsampleIntervalView<DoubleNtree>(iterableRandomAccessibleInterval0, longArray0);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<PlanarImg<NativeBoolType, IntArray>> supplier0 = (Supplier<PlanarImg<NativeBoolType, IntArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<PlanarImg<NativeBoolType, IntArray>> functionRandomAccessible0 = new FunctionRandomAccessible<PlanarImg<NativeBoolType, IntArray>>(2065, biConsumer0, supplier0);
      IntervalView<PlanarImg<NativeBoolType, IntArray>> intervalView0 = null;
      try {
        intervalView0 = new IntervalView<PlanarImg<NativeBoolType, IntArray>>(functionRandomAccessible0, subsampleIntervalView0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      long[] longArray0 = new long[1];
      ListImg<Integer> listImg0 = new ListImg<Integer>(treeSet0, longArray0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, 0L);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(subsampleIntervalView0, longArray0, longArray0);
      RandomAccess<Integer> randomAccess0 = intervalView0.randomAccess();
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      Stack<Object> stack0 = new Stack<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(stack0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      RandomAccessible<Object> randomAccessible0 = intervalView0.getSource();
      assertNotNull(randomAccessible0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      IterableInterval<Object> iterableInterval0 = intervalView0.getFullViewIterableInterval();
      assertNotNull(iterableInterval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<Integer>> supplier0 = (Supplier<RandomAccessibleInterval<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Integer>>(1, biConsumer0, supplier0);
      IntervalView<RandomAccessibleInterval<Integer>> intervalView0 = new IntervalView<RandomAccessibleInterval<Integer>>(functionRandomAccessible0, longArray0, longArray0);
      RandomAccessibleInterval<Integer> randomAccessibleInterval0 = intervalView0.firstElement();
      assertNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      long[] longArray1 = new long[1];
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray1);
      // Undeclared exception!
      try { 
        intervalView0.getFullViewIterableInterval();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      // Undeclared exception!
      try { 
        intervalView0.firstElement();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      IntervalView<IntervalView<Object>> intervalView0 = null;
      try {
        intervalView0 = new IntervalView<IntervalView<Object>>((RandomAccessible<IntervalView<Object>>) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.IntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      IntervalView<IntervalView<Object>> intervalView1 = null;
      try {
        intervalView1 = new IntervalView<IntervalView<Object>>((RandomAccessible<IntervalView<Object>>) null, intervalView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.IntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedList0, longArray0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, 0L);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListImg<Object> listImg1 = new ListImg<Object>(linkedList1, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg1, listImg1);
      RandomAccessiblePair<Object, Object> randomAccessiblePair0 = new RandomAccessiblePair<Object, Object>(intervalView0, intervalView0);
      RandomAccessiblePair.RandomAccess randomAccessiblePair_RandomAccess0 = randomAccessiblePair0.randomAccess((Interval) subsampleIntervalView0);
      assertNotNull(randomAccessiblePair_RandomAccess0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      Iterator<Object> iterator0 = intervalView0.iterator();
      Iterator<Object> iterator1 = intervalView0.iterator();
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[3];
      ArrayDeque<IntervalView<Object>> arrayDeque0 = new ArrayDeque<IntervalView<Object>>();
      ListImg<IntervalView<Object>> listImg0 = new ListImg<IntervalView<Object>>(arrayDeque0, longArray0);
      IntervalView<IntervalView<Object>> intervalView0 = null;
      try {
        intervalView0 = new IntervalView<IntervalView<Object>>(listImg0, longArray1, longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[3];
      Stack<Integer> stack0 = new Stack<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(stack0, longArray0);
      long[] longArray1 = new long[1];
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(listImg0, longArray0, longArray1);
      ListImg<IntervalView<Integer>> listImg1 = new ListImg<IntervalView<Integer>>(longArray1, intervalView0);
      IntervalView<IntervalView<Integer>> intervalView1 = null;
      try {
        intervalView1 = new IntervalView<IntervalView<Integer>>(listImg1, listImg0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[1];
      Stack<Object> stack0 = new Stack<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(stack0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      Cursor<Object> cursor0 = intervalView0.localizingCursor();
      assertNotNull(cursor0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      long long0 = intervalView0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      long[] longArray0 = new long[1];
      ListImg<Integer> listImg0 = new ListImg<Integer>(treeSet0, longArray0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(listImg0, longArray0, longArray0);
      Object object0 = intervalView0.iterationOrder();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedList0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      Cursor<Object> cursor0 = intervalView0.cursor();
      assertNotNull(cursor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[1];
      Stack<Object> stack0 = new Stack<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(stack0, longArray0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, listImg0);
      RandomAccess<Object> randomAccess0 = intervalView0.randomAccess((Interval) intervalView0);
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      long[] longArray0 = new long[1];
      ListImg<Integer> listImg0 = new ListImg<Integer>(treeSet0, longArray0);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<Integer>> supplier0 = (Supplier<RandomAccessibleInterval<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(listImg0).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Integer>>(1, biConsumer0, supplier0);
      IntervalView<RandomAccessibleInterval<Integer>> intervalView0 = new IntervalView<RandomAccessibleInterval<Integer>>(functionRandomAccessible0, longArray0, longArray0);
      RandomAccessibleInterval<Integer> randomAccessibleInterval0 = intervalView0.firstElement();
      assertNotNull(randomAccessibleInterval0);
  }
}
