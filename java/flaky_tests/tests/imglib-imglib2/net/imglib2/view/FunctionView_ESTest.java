/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:39:06 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.view.FunctionView;
import net.imglib2.view.IntervalView;
import net.imglib2.view.StackView;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionView_ESTest extends FunctionView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<Localizable, Integer> biConsumer0 = (BiConsumer<Localizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(255, biConsumer0, supplier0);
      long[] longArray0 = new long[2];
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(functionRandomAccessible0, longArray0, longArray0);
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>(intervalView0, function0);
      RandomAccess<Integer> randomAccess0 = functionView0.randomAccess();
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<StackView.StackAccessMode> supplier0 = (Supplier<StackView.StackAccessMode>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<StackView.StackAccessMode> functionRandomAccessible0 = new FunctionRandomAccessible<StackView.StackAccessMode>(0, biConsumer0, supplier0);
      FunctionView<StackView.StackAccessMode, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> functionView0 = new FunctionView<StackView.StackAccessMode, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>(functionRandomAccessible0, (Function<StackView.StackAccessMode, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) null);
      int int0 = functionView0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(1364, biConsumer0, supplier0);
      Function<Object, Object> function0 = Function.identity();
      FunctionView<Object, Object> functionView0 = new FunctionView<Object, Object>(functionRandomAccessible0, function0);
      int int0 = functionView0.numDimensions();
      assertEquals(1364, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BiConsumer<Localizable, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> biConsumer0 = (BiConsumer<Localizable, ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>((-1981), biConsumer0, supplier0);
      long[] longArray0 = new long[4];
      SubsampleView<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>> subsampleView0 = new SubsampleView<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>>(functionRandomAccessible0, longArray0);
      FunctionView<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer> functionView0 = new FunctionView<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer>(subsampleView0, (Function<ConvertedRealRandomAccessibleRealInterval<Integer, Integer>, Integer>) null);
      int int0 = functionView0.numDimensions();
      assertEquals((-1981), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>((RandomAccessible<Integer>) null, function0);
      // Undeclared exception!
      try { 
        functionView0.randomAccess((Interval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FunctionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>((-1422), (BiConsumer<Localizable, ? super Integer>) null, supplier0);
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>(functionRandomAccessible0, function0);
      // Undeclared exception!
      try { 
        functionView0.randomAccess();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1422
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>((RandomAccessible<Integer>) null, function0);
      Integer integer0 = new Integer(1);
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      FunctionView.FunctionRandomAccess functionView_FunctionRandomAccess0 = functionView0.new FunctionRandomAccess(pointSample0);
      FunctionView.FunctionRandomAccess functionView_FunctionRandomAccess1 = functionView_FunctionRandomAccess0.copy();
      assertFalse(functionView_FunctionRandomAccess1.equals((Object)functionView_FunctionRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>((RandomAccessible<Integer>) null, function0);
      // Undeclared exception!
      try { 
        functionView0.randomAccess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FunctionView", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BiConsumer<Localizable, BitType> biConsumer0 = (BiConsumer<Localizable, BitType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BitType> supplier0 = (Supplier<BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<BitType> functionRandomAccessible0 = new FunctionRandomAccessible<BitType>(0, biConsumer0, supplier0);
      FunctionView<BitType, RandomAccessibleInterval<BitType>> functionView0 = new FunctionView<BitType, RandomAccessibleInterval<BitType>>(functionRandomAccessible0, (Function<BitType, RandomAccessibleInterval<BitType>>) null);
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      RandomAccess<RandomAccessibleInterval<BitType>> randomAccess0 = functionView0.randomAccess((Interval) finalInterval0);
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Function<Integer, Integer> function0 = Function.identity();
      FunctionView<Integer, Integer> functionView0 = new FunctionView<Integer, Integer>((RandomAccessible<Integer>) null, function0);
      // Undeclared exception!
      try { 
        functionView0.numDimensions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.FunctionView", e);
      }
  }
}
