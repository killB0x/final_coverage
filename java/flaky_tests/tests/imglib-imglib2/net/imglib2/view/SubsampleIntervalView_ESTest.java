/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 13:13:01 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Positionable;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPositionable;
import net.imglib2.converter.read.BiConvertedRealRandomAccessibleRealInterval;
import net.imglib2.img.basictypeaccess.array.CharArray;
import net.imglib2.img.basictypeaccess.array.DirtyBooleanArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.array.LongArray;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.position.RealPositionRealRandomAccessible;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubsampleIntervalView_ESTest extends SubsampleIntervalView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2724L;
      ArrayList<LongArray> arrayList0 = new ArrayList<LongArray>();
      TreeSet<LongArray> treeSet0 = new TreeSet<LongArray>(arrayList0);
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(treeSet0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, 255L);
      IntervalView<LongArray> intervalView0 = new IntervalView<LongArray>(subsampleIntervalView0, longArray0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView1 = new SubsampleIntervalView<LongArray>(intervalView0, longArray0);
      assertFalse(subsampleIntervalView1.equals((Object)subsampleIntervalView0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<RandomAccessibleInterval<Integer>> linkedHashSet0 = new LinkedHashSet<RandomAccessibleInterval<Integer>>();
      long[] longArray0 = new long[1];
      ListImg<RandomAccessibleInterval<Integer>> listImg0 = new ListImg<RandomAccessibleInterval<Integer>>(linkedHashSet0, longArray0);
      IntervalView<RandomAccessibleInterval<Integer>> intervalView0 = new IntervalView<RandomAccessibleInterval<Integer>>(listImg0, listImg0);
      SubsampleIntervalView<RandomAccessibleInterval<Integer>> subsampleIntervalView0 = new SubsampleIntervalView<RandomAccessibleInterval<Integer>>(intervalView0, 0L);
      IntervalView<RandomAccessibleInterval<FloatBufferAccess>> intervalView1 = new IntervalView<RandomAccessibleInterval<FloatBufferAccess>>((RandomAccessible<RandomAccessibleInterval<FloatBufferAccess>>) null, subsampleIntervalView0);
      IterableRandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>>) intervalView1);
      SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>> subsampleIntervalView1 = new SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>>(iterableRandomAccessibleInterval0, longArray0);
      double[] doubleArray0 = new double[7];
      subsampleIntervalView1.realMin(doubleArray0);
      assertEquals(0L, iterableRandomAccessibleInterval0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[2];
      Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> supplier0 = (Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> realPointSample0 = new RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>(supplier0, doubleArray0);
      Vector<Integer> vector0 = new Vector<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(vector0);
      ListImg<Integer> listImg0 = new ListImg<Integer>(priorityQueue0, longArray0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      subsampleIntervalView0.realMin((RealPositionable) realPointSample0);
      assertEquals(8, realPointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(linkedHashSet0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      double[] doubleArray0 = new double[2];
      subsampleIntervalView0.realMax(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer((-524));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      subsampleIntervalView0.min(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[7];
      Integer integer0 = Integer.valueOf(2405);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, (-1L));
      subsampleIntervalView0.dimensions(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      long[] longArray0 = new long[3];
      ListImg<Object> listImg0 = new ListImg<Object>(arrayDeque0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      IntervalView<RandomAccessibleInterval<FloatBufferAccess>> intervalView0 = new IntervalView<RandomAccessibleInterval<FloatBufferAccess>>((RandomAccessible<RandomAccessibleInterval<FloatBufferAccess>>) null, subsampleIntervalView0);
      IterableRandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>>) intervalView0);
      SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>> subsampleIntervalView1 = new SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>>(iterableRandomAccessibleInterval0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView1.realMin((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      long[] longArray0 = new long[3];
      ListImg<Object> listImg0 = new ListImg<Object>(arrayDeque0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      IntervalView<RandomAccessibleInterval<FloatBufferAccess>> intervalView0 = new IntervalView<RandomAccessibleInterval<FloatBufferAccess>>((RandomAccessible<RandomAccessibleInterval<FloatBufferAccess>>) null, subsampleIntervalView0);
      IterableRandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>>) intervalView0);
      SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>> subsampleIntervalView1 = new SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>>(iterableRandomAccessibleInterval0, longArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        subsampleIntervalView1.realMin(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[10];
      Object object0 = new Object();
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, object0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      long[] longArray0 = new long[3];
      ListImg<Object> listImg0 = new ListImg<Object>(arrayDeque0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMax((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<LongArray> vector0 = new Vector<LongArray>();
      long[] longArray0 = new long[8];
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, vector0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMax(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[10];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMax((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[8];
      TreeSet<LongArray> treeSet0 = new TreeSet<LongArray>();
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(treeSet0, longArray0);
      double[] doubleArray0 = new double[0];
      RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> realPointSample0 = new RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>((Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>) null, doubleArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, 2327L);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMax((RealPositionable) realPointSample0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer(40);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.realMax(491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 491 out of bounds for length 8
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer((-1027));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      long[] longArray1 = new long[7];
      // Undeclared exception!
      try { 
        subsampleIntervalView0.min(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[8];
      TreeSet<LongArray> treeSet0 = new TreeSet<LongArray>();
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(treeSet0, longArray0);
      double[] doubleArray0 = new double[0];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      ListImg<Object> listImg1 = new ListImg<Object>(longArray0, doubleArray1);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg1, listImg0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(intervalView0, 605L);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.min((Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[8];
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(priorityQueue0, longArray0);
      SubsampleIntervalView<Object> subsampleIntervalView0 = new SubsampleIntervalView<Object>(listImg0, longArray0);
      RealPoint realPoint0 = new RealPoint(1);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.min((Positionable) realPoint0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer((-1027));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      long[] longArray1 = new long[5];
      // Undeclared exception!
      try { 
        subsampleIntervalView0.max(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer((-1018));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.max((Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer(1);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      RealPositionRealRandomAccessible realPositionRealRandomAccessible0 = new RealPositionRealRandomAccessible(1, 1);
      RealPositionRealRandomAccessible.RealPositionRealRandomAccess realPositionRealRandomAccessible_RealPositionRealRandomAccess0 = realPositionRealRandomAccessible0.realRandomAccess();
      // Undeclared exception!
      try { 
        subsampleIntervalView0.max((Positionable) realPositionRealRandomAccessible_RealPositionRealRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.RealPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[6];
      Integer integer0 = new Integer(48);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, (-1123L));
      // Undeclared exception!
      try { 
        subsampleIntervalView0.max(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 48 out of bounds for length 6
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[2];
      Vector<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>> vector0 = new Vector<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>>();
      ListImg<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>> listImg0 = new ListImg<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>>(vector0, longArray0);
      SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>> subsampleIntervalView0 = new SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Unsigned128BitType, Integer, Object>>(listImg0, 1348L);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.dimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer((-1021));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(iterableRandomAccessibleInterval0, longArray0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        subsampleIntervalView0.dimensions(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[22];
      HashSet<PlanarImg<UnsignedVariableBitLengthType, CharArray>> hashSet0 = new HashSet<PlanarImg<UnsignedVariableBitLengthType, CharArray>>();
      ListImg<PlanarImg<UnsignedVariableBitLengthType, CharArray>> listImg0 = new ListImg<PlanarImg<UnsignedVariableBitLengthType, CharArray>>(hashSet0, longArray0);
      SubsampleIntervalView<PlanarImg<UnsignedVariableBitLengthType, CharArray>> subsampleIntervalView0 = new SubsampleIntervalView<PlanarImg<UnsignedVariableBitLengthType, CharArray>>(listImg0, longArray0);
      // Undeclared exception!
      try { 
        subsampleIntervalView0.dimension(3989);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3989 out of bounds for length 22
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[3];
      LinkedHashSet<LongArray> linkedHashSet0 = new LinkedHashSet<LongArray>();
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(linkedHashSet0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = null;
      try {
        subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, (long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SubsampleView", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<LongArray> vector0 = new Vector<LongArray>();
      long[] longArray0 = new long[2];
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(vector0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, longArray0);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<FloatBufferAccess>> supplier0 = (Supplier<RandomAccessibleInterval<FloatBufferAccess>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<RandomAccessibleInterval<FloatBufferAccess>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<FloatBufferAccess>>((-1877), biConsumer0, supplier0);
      IntervalView<RandomAccessibleInterval<FloatBufferAccess>> intervalView0 = new IntervalView<RandomAccessibleInterval<FloatBufferAccess>>(functionRandomAccessible0, subsampleIntervalView0);
      SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>> subsampleIntervalView1 = null;
      try {
        subsampleIntervalView1 = new SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>>(intervalView0, longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1877
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[1];
      LongArray longArray2 = new LongArray(longArray1);
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(longArray1, longArray2);
      IntervalView<LongArray> intervalView0 = new IntervalView<LongArray>(listImg0, listImg0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = null;
      try {
        subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(intervalView0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>> subsampleIntervalView0 = null;
      try {
        subsampleIntervalView0 = new SubsampleIntervalView<RandomAccessibleInterval<FloatBufferAccess>>((RandomAccessibleInterval<RandomAccessibleInterval<FloatBufferAccess>>) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.ViewTransforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[3];
      BiConsumer<Localizable, Integer> biConsumer0 = (BiConsumer<Localizable, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>((-3530), biConsumer0, supplier0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(functionRandomAccessible0, longArray0, longArray0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = null;
      try {
        subsampleIntervalView0 = new SubsampleIntervalView<Integer>(intervalView0, (-1430L));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3530
         //
         verifyException("net.imglib2.transform.integer.MixedTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<LongArray> vector0 = new Vector<LongArray>();
      long[] longArray0 = new long[8];
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(vector0, longArray0);
      long[] longArray1 = new long[1];
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, longArray1);
      SubsampleIntervalView<LongArray> subsampleIntervalView1 = null;
      try {
        subsampleIntervalView1 = new SubsampleIntervalView<LongArray>(subsampleIntervalView0, 1L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer(0);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      long long0 = subsampleIntervalView0.dimension(7);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector<LongArray> vector0 = new Vector<LongArray>();
      long[] longArray0 = new long[2];
      ListImg<LongArray> listImg0 = new ListImg<LongArray>(vector0, longArray0);
      SubsampleIntervalView<LongArray> subsampleIntervalView0 = new SubsampleIntervalView<LongArray>(listImg0, longArray0);
      Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> supplier0 = (Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> realPointSample0 = new RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>(supplier0, doubleArray0);
      subsampleIntervalView0.realMax((RealPositionable) realPointSample0);
      assertEquals(8, realPointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[8];
      Integer integer0 = new Integer(0);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      RealPoint realPoint0 = subsampleIntervalView0.minAsRealPoint();
      subsampleIntervalView0.max((Positionable) realPoint0);
      assertEquals(8, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[10];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      subsampleIntervalView0.max(longArray0);
      ListImg<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>> listImg1 = new ListImg<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>>(longArray0, (BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>) null);
      SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>> subsampleIntervalView1 = new SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>>(listImg1, (-573L));
      double double0 = subsampleIntervalView1.realMax(0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[2];
      Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> supplier0 = (Supplier<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>> realPointSample0 = new RealPointSample<PlanarImg<VolatileUnsignedShortType, DirtyBooleanArray>>(supplier0, doubleArray0);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      subsampleIntervalView0.min((Positionable) realPointSample0);
      assertEquals(8, realPointSample0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[28];
      Stack<PlanarImg<LongType, DirtyVolatileLongArray>> stack0 = new Stack<PlanarImg<LongType, DirtyVolatileLongArray>>();
      ListImg<PlanarImg<LongType, DirtyVolatileLongArray>> listImg0 = new ListImg<PlanarImg<LongType, DirtyVolatileLongArray>>(stack0, longArray0);
      SubsampleIntervalView<PlanarImg<LongType, DirtyVolatileLongArray>> subsampleIntervalView0 = new SubsampleIntervalView<PlanarImg<LongType, DirtyVolatileLongArray>>(listImg0, longArray0);
      double double0 = subsampleIntervalView0.realMin(24);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedHashSet<RandomAccessibleInterval<Integer>> linkedHashSet0 = new LinkedHashSet<RandomAccessibleInterval<Integer>>();
      long[] longArray0 = new long[1];
      ListImg<RandomAccessibleInterval<Integer>> listImg0 = new ListImg<RandomAccessibleInterval<Integer>>(linkedHashSet0, longArray0);
      IntervalView<RandomAccessibleInterval<Integer>> intervalView0 = new IntervalView<RandomAccessibleInterval<Integer>>(listImg0, listImg0);
      SubsampleIntervalView<RandomAccessibleInterval<Integer>> subsampleIntervalView0 = new SubsampleIntervalView<RandomAccessibleInterval<Integer>>(intervalView0, 0L);
      long long0 = subsampleIntervalView0.max(0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[10];
      ListImg<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>> listImg0 = new ListImg<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>>(longArray0, (BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>) null);
      SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>> subsampleIntervalView0 = new SubsampleIntervalView<BiConvertedRealRandomAccessibleRealInterval<Integer, Integer, Object>>(listImg0, (-573L));
      double double0 = subsampleIntervalView0.realMax(0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[10];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      long long0 = subsampleIntervalView0.min(5);
      assertEquals(0L, long0);
  }
}
