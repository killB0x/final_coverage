/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:14:43 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.LinkOption;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RealLocalizable;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.histogram.Integer1dBinMapper;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListRandomAccess;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.view.HyperSlice;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HyperSlice_ESTest extends HyperSlice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[6];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      int[] intArray0 = new int[3];
      intArray0[1] = 4;
      intArray0[2] = 3167;
      HyperSlice<Integer> hyperSlice0 = null;
      try {
        hyperSlice0 = new HyperSlice<Integer>(iterableRandomAccessibleInterval0, intArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.view.HyperSlice", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[6];
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, (Integer) null);
      IterableRandomAccessibleInterval<Integer> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<Integer>(listImg0);
      int[] intArray0 = new int[3];
      HyperSlice<Integer> hyperSlice0 = null;
      try {
        hyperSlice0 = new HyperSlice<Integer>(iterableRandomAccessibleInterval0, intArray0, longArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.view.HyperSlice", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(listImg0, longArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(intervalView0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.move((-2330), (-90));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -90 out of bounds for length 5
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(4);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      Integer1dBinMapper<UnsignedIntType> integer1dBinMapper0 = new Integer1dBinMapper<UnsignedIntType>(4, 3396L, false);
      Histogram1d<UnsignedIntType> histogram1d0 = new Histogram1d<UnsignedIntType>(integer1dBinMapper0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = null;
      try {
        hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(histogram1d0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Interval dimensions do not match Hyperslice dimensions.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      hyperSlice_HyperSliceRandomAccess0.setPosition(longArray0);
      assertEquals(5, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(35);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      int int0 = hyperSlice_HyperSliceRandomAccess0.numDimensions();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(5);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.move((long) 5, 1159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1159 out of bounds for length 7
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[6];
      Integer integer0 = new Integer((-1));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      hyperSlice_HyperSliceRandomAccess0.localize(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777216));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      hyperSlice_HyperSliceRandomAccess0.setPosition(0L, 0);
      assertEquals(5, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      hyperSlice_HyperSliceRandomAccess0.move(1, 1);
      assertFalse(treeSet0.contains(1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[0];
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<LinkOption> supplier0 = (Supplier<LinkOption>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<LinkOption> functionRandomAccessible0 = new FunctionRandomAccessible<LinkOption>(120, biConsumer0, supplier0);
      HyperSlice<LinkOption> hyperSlice0 = new HyperSlice<LinkOption>(functionRandomAccessible0, intArray0, longArray0);
      // Undeclared exception!
      try { 
        hyperSlice0.randomAccess();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.Point", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = null;
      try {
        hyperSlice0 = new HyperSlice<Integer>((RandomAccessible<Integer>) null, intArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.HyperSlice", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[0];
      Point point0 = new Point(longArray0);
      FinalInterval finalInterval0 = new FinalInterval(point0, point0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>((RandomAccessible<Integer>) null, finalInterval0);
      int[] intArray0 = new int[2];
      HyperSlice<Integer> hyperSlice0 = null;
      try {
        hyperSlice0 = new HyperSlice<Integer>(intervalView0, intArray0, longArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2
         //
         verifyException("net.imglib2.view.HyperSlice", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777216));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      SubsampleView<Object> subsampleView0 = new SubsampleView<Object>(hyperSlice0, longArray0);
      RandomAccess<Object> randomAccess0 = subsampleView0.randomAccess();
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-33));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      int[] intArray1 = new int[9];
      // Undeclared exception!
      try { 
        hyperSlice0.getAt(intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(35);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      ListImg<Object> listImg1 = new ListImg<Object>(longArray0, integer0);
      ListRandomAccess<Object> listRandomAccess0 = listImg1.randomAccess();
      hyperSlice_HyperSliceRandomAccess0.setPosition((Localizable) listRandomAccess0);
      assertEquals(7, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777216));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      int[] intArray1 = new int[6];
      hyperSlice_HyperSliceRandomAccess0.move(intArray1);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777216));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      hyperSlice_HyperSliceRandomAccess0.positionAsDoubleArray();
      assertEquals(5, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ByteArray> supplier0 = (Supplier<ByteArray>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRealRandomAccessible<ByteArray> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ByteArray>(0, biConsumer0, supplier0);
      RandomAccessibleOnRealRandomAccessible<ByteArray> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ByteArray>(functionRealRandomAccessible0);
      HyperSlice<ByteArray> hyperSlice0 = new HyperSlice<ByteArray>(randomAccessibleOnRealRandomAccessible0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.randomAccess();
      double[] doubleArray0 = new double[0];
      hyperSlice_HyperSliceRandomAccess0.localize(doubleArray0);
      assertEquals(0, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(hyperSlice0, longArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(intervalView0);
      float[] floatArray0 = new float[5];
      hyperSlice_HyperSliceRandomAccess0.localize(floatArray0);
      assertEquals(5, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[5];
      Integer integer0 = new Integer((-33));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      int[] intArray0 = new int[1];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = null;
      try {
        hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Interval dimensions do not match Hyperslice dimensions.
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777183));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess1 = hyperSlice0.randomAccess();
      hyperSlice_HyperSliceRandomAccess1.move((Localizable) hyperSlice_HyperSliceRandomAccess0);
      assertEquals(5, hyperSlice_HyperSliceRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-33));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      hyperSlice_HyperSliceRandomAccess0.copy();
      assertEquals(5, hyperSlice0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(hyperSlice0, longArray0, longArray0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        intervalView0.forEach(consumer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      IntervalView<Integer> intervalView0 = new IntervalView<Integer>(hyperSlice0, longArray0, longArray0);
      HyperSlice<Integer> hyperSlice1 = new HyperSlice<Integer>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice1.new HyperSliceRandomAccess();
      hyperSlice_HyperSliceRandomAccess0.move(longArray0);
      assertEquals(5, hyperSlice1.numDimensions());
      assertEquals(5, hyperSlice0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      hyperSlice_HyperSliceRandomAccess0.setPosition(113, 4);
      assertEquals(5, hyperSlice0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.getDoublePosition((-3682));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3682 out of bounds for length 5
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess();
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.getFloatPosition(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-5));
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.getIntPosition(844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 844 out of bounds for length 5
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer(35);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.new HyperSliceRandomAccess(listImg0);
      // Undeclared exception!
      try { 
        hyperSlice_HyperSliceRandomAccess0.bck(35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 35 out of bounds for length 7
         //
         verifyException("net.imglib2.view.HyperSlice$HyperSliceRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[5];
      int[] intArray0 = new int[0];
      Integer integer0 = new Integer((-16777183));
      ListImg<Object> listImg0 = new ListImg<Object>(longArray0, integer0);
      IntervalView<Object> intervalView0 = new IntervalView<Object>(listImg0, longArray0, longArray0);
      HyperSlice<Object> hyperSlice0 = new HyperSlice<Object>(intervalView0, intArray0, longArray0);
      HyperSlice.HyperSliceRandomAccess hyperSlice_HyperSliceRandomAccess0 = hyperSlice0.randomAccess();
      int[] intArray1 = new int[7];
      hyperSlice_HyperSliceRandomAccess0.localize(intArray1);
      assertEquals(5, hyperSlice0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(treeSet0);
      long[] longArray0 = new long[5];
      ListImg<Integer> listImg0 = new ListImg<Integer>(linkedHashSet0, longArray0);
      int[] intArray0 = new int[0];
      HyperSlice<Integer> hyperSlice0 = new HyperSlice<Integer>(listImg0, intArray0, longArray0);
      hyperSlice0.randomAccess((Interval) listImg0);
      assertEquals(5, hyperSlice0.numDimensions());
  }
}
