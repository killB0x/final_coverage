/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:47:13 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalInterval;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.transform.InverseTransform;
import net.imglib2.transform.Transform;
import net.imglib2.transform.integer.MixedTransform;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.view.TransformView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransformView_ESTest extends TransformView_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4L;
      Integer integer0 = new Integer(8);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(listImg0, translationTransform0);
      RandomAccess<Integer> randomAccess0 = transformView0.randomAccess();
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long[] longArray0 = new long[1];
      double[] doubleArray0 = new double[8];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      ListImg<DirtyDoubleArray> listImg0 = new ListImg<DirtyDoubleArray>(longArray0, dirtyDoubleArray0);
      MixedTransform mixedTransform0 = new MixedTransform(727, 727);
      TransformView<DirtyDoubleArray> transformView0 = null;
      try {
        transformView0 = new TransformView<DirtyDoubleArray>(listImg0, mixedTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ListImg<Integer> listImg0 = new ListImg<Integer>(treeSet0, longArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(listImg0, translationTransform0);
      RandomAccess<Integer> randomAccess0 = transformView0.randomAccess((Interval) listImg0);
      assertNotNull(randomAccess0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, supplier0);
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      InverseTransform inverseTransform0 = new InverseTransform(translationTransform0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(functionRandomAccessible0, inverseTransform0);
      int int0 = transformView0.numDimensions();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(37, biConsumer0, supplier0);
      TranslationTransform translationTransform0 = new TranslationTransform(37);
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(functionRandomAccessible0, translationTransform0);
      // Undeclared exception!
      try { 
        transformView0.randomAccess((Interval) finalInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformView<TransformView<Object>> transformView0 = null;
      try {
        transformView0 = new TransformView<TransformView<Object>>((RandomAccessible<TransformView<Object>>) null, (Transform) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TransformView", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(8);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(listImg0, translationTransform0);
      Transform transform0 = transformView0.getTransformToSource();
      assertSame(transform0, translationTransform0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[1];
      Integer integer0 = new Integer(8);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(listImg0, translationTransform0);
      RandomAccess<Integer> randomAccess0 = transformView0.randomAccess();
      // Undeclared exception!
      try { 
        transformView0.getAt((Localizable) randomAccess0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashSet<TransformView<Object>> hashSet0 = new HashSet<TransformView<Object>>();
      long[] longArray0 = new long[8];
      ListImg<TransformView<Object>> listImg0 = new ListImg<TransformView<Object>>(hashSet0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(0);
      TransformView<TransformView<Object>> transformView0 = null;
      try {
        transformView0 = new TransformView<TransformView<Object>>(listImg0, translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, biConsumer0, supplier0);
      MixedTransform mixedTransform0 = new MixedTransform((-2212), 0);
      TransformView<Integer> transformView0 = new TransformView<Integer>(functionRandomAccessible0, mixedTransform0);
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      // Undeclared exception!
      try { 
        transformView0.randomAccess((Interval) finalInterval0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2212
         //
         verifyException("net.imglib2.transform.integer.SlicingTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[8];
      Vector<Object> vector0 = new Vector<Object>();
      ListImg<Object> listImg0 = new ListImg<Object>(vector0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TransformView<Object> transformView0 = new TransformView<Object>(listImg0, translationTransform0);
      int int0 = transformView0.numDimensions();
      assertEquals(8, int0);
  }
}
