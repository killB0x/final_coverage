/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 11:11:17 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.Positionable;
import net.imglib2.RandomAccess;
import net.imglib2.RealPoint;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.view.TranslationRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TranslationRandomAccess_ESTest extends TranslationRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((long) (-125), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[0] = (-1555L);
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.setPosition((-125), 0);
      assertArrayEquals(new long[] {(-1680L), 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Supplier<TranslationRandomAccess<Object>> supplier0 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      PointSample<TranslationRandomAccess<Object>> pointSample1 = new PointSample<TranslationRandomAccess<Object>>(supplier0, pointSample0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample1, translationTransform_InverseTranslationTransform0);
      translationRandomAccess0.setPosition(longArray0);
      assertEquals(1, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      Supplier<TranslationRandomAccess<Object>> supplier1 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<TranslationRandomAccess<Object>> pointSample1 = new PointSample<TranslationRandomAccess<Object>>(supplier1, pointSample0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample1, translationTransform_InverseTranslationTransform0);
      long[] longArray1 = new long[7];
      translationRandomAccess0.setPosition(longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[1];
      translationRandomAccess0.setPositionAndGet(intArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      Object object0 = translationRandomAccess0.setPositionAndGet((Localizable) pointSample0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Point point0 = new Point(1278);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((Localizable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      longArray0[2] = (-2051L);
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      double double0 = translationRandomAccess0.getDoublePosition(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 1);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getDoublePosition(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getFloatPosition(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      double[] doubleArray0 = new double[5];
      translationRandomAccess0.localize(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[2];
      translationRandomAccess0.localize(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      int[] intArray0 = new int[1];
      Supplier<TranslationRandomAccess<Object>> supplier0 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<TranslationRandomAccess<Object>> pointSample0 = new PointSample<TranslationRandomAccess<Object>>(supplier0, intArray0);
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample0, translationTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, 4);
      // Undeclared exception!
      try { 
        pointSample1.setPosition((Localizable) translationRandomAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<TranslationRandomAccess<Object>> supplier0 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<TranslationRandomAccess<Object>> pointSample0 = new PointSample<TranslationRandomAccess<Object>>(supplier0, longArray0);
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getIntPosition(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      long[] longArray1 = new long[9];
      translationRandomAccess0.localize(longArray1);
      assertEquals(1, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[4];
      translationRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[9];
      translationRandomAccess0.localize(intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      long[] longArray1 = new long[1];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray1);
      TranslationRandomAccess<Object> translationRandomAccess0 = null;
      try {
        translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[13];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.setPosition(longArray0);
      assertEquals(13, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[6];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.setPosition((-1L), 2);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.localize(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      double[] doubleArray0 = new double[5];
      translationRandomAccess0.localize(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      int[] intArray0 = new int[5];
      translationRandomAccess0.move(intArray0);
      assertEquals(4, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.move((Localizable) pointSample0);
      assertEquals(5, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long[] longArray0 = new long[4];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.move(0L, 1);
      assertEquals(4, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, translationRandomAccess0);
      TranslationRandomAccess<Integer> translationRandomAccess1 = new TranslationRandomAccess<Integer>(pointSample1, translationTransform0);
      translationRandomAccess1.move(2, 0);
      assertEquals(1, translationRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.fwd(0);
      assertEquals(1, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[2];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.bck(1);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      long long0 = translationRandomAccess0.getLongPosition(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[1] = 40;
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      long long0 = translationRandomAccess0.getLongPosition(1);
      assertEquals(40L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Supplier<TranslationRandomAccess<Object>> supplier0 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      PointSample<TranslationRandomAccess<Object>> pointSample1 = new PointSample<TranslationRandomAccess<Object>>(supplier0, pointSample0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample1, translationTransform_InverseTranslationTransform0);
      long long0 = translationRandomAccess0.getLongPosition(0);
      assertEquals((-2L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      intArray0[0] = (-285);
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, intArray0);
      pointSample0.setPositionAndGet((Localizable) pointSample1);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationTransform0.applyInverse((Positionable) translationRandomAccess0, (Localizable) translationRandomAccess0);
      int int0 = translationRandomAccess0.getIntPosition(0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(285, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      long[] longArray1 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray1);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      PointSample<TranslationRandomAccess<Object>> pointSample1 = PointSample.wrap(translationRandomAccess0, longArray0);
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess1 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample1, translationTransform0);
      int int0 = translationRandomAccess1.getIntPosition(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      int[] intArray0 = new int[1];
      intArray0[0] = 18;
      translationRandomAccess0.setPosition(intArray0);
      float float0 = translationRandomAccess0.getFloatPosition(0);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertEquals(18.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      longArray0[3] = (-1L);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, translationRandomAccess0);
      TranslationRandomAccess<Object> translationRandomAccess1 = new TranslationRandomAccess<Object>(pointSample1, translationTransform_InverseTranslationTransform0);
      float float0 = translationRandomAccess1.getFloatPosition(3);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      int[] intArray0 = new int[1];
      intArray0[0] = 18;
      translationRandomAccess0.setPosition(intArray0);
      double double0 = translationRandomAccess0.getDoublePosition(0);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertEquals(18.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      intArray0[1] = (-626);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, intArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      double double0 = translationRandomAccess0.getDoublePosition(1);
      assertEquals((-626.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      long[] longArray0 = new long[4];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Integer> translationRandomAccess0 = new TranslationRandomAccess<Integer>(pointSample0, translationTransform0);
      Integer integer0 = translationRandomAccess0.get();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<TranslationRandomAccess<Object>> supplier0 = (Supplier<TranslationRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      long[] longArray0 = new long[1];
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(supplier0).when(supplier1).get();
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier1, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Object object0 = translationRandomAccess0.get();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier((Supplier<Object>) null, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      TranslationRandomAccess<Object> translationRandomAccess1 = translationRandomAccess0.copy();
      assertEquals(0, translationRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition(5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.move(longArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.move(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[15];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[3];
      Point point0 = new Point(intArray0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move((Localizable) point0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[11];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long[] longArray0 = new long[4];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getLongPosition((-2411));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2411 out of bounds for length 6
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TranslationRandomAccess<Object> translationRandomAccess0 = null;
      try {
        translationRandomAccess0 = new TranslationRandomAccess<Object>((TranslationRandomAccess<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TranslationTransform translationTransform0 = new TranslationTransform(28);
      TranslationRandomAccess<Object> translationRandomAccess0 = null;
      try {
        translationRandomAccess0 = new TranslationRandomAccess<Object>((RandomAccess<Object>) null, translationTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[10];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition((long) 1113, 1113);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition(5, 5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<TranslationRandomAccess<Integer>> supplier0 = (Supplier<TranslationRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<TranslationRandomAccess<Integer>> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationRandomAccess<TranslationRandomAccess<Integer>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Integer>>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[1];
      int[] intArray0 = new int[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      Supplier<TranslationRandomAccess<Integer>> supplier0 = (Supplier<TranslationRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<TranslationRandomAccess<Integer>> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationRandomAccess<TranslationRandomAccess<Integer>> translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Integer>>(pointSample0, translationTransform0);
      translationRandomAccess0.setPosition(intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, translationRandomAccess0);
      TranslationRandomAccess<Integer> translationRandomAccess1 = new TranslationRandomAccess<Integer>(pointSample1, translationTransform0);
      Supplier<Object> supplier2 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample2 = new PointSample<Object>(supplier2, intArray0);
      // Undeclared exception!
      try { 
        translationRandomAccess1.setPosition((Localizable) pointSample2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.setPosition((Localizable) translationRandomAccess0);
      assertEquals(3, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getDoublePosition(44);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getFloatPosition(5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      float float0 = translationRandomAccess0.getFloatPosition(0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      RealPoint realPoint0 = translationRandomAccess0.positionAsRealPoint();
      assertEquals(5, realPoint0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long[] longArray0 = new long[6];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.TranslationRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize(floatArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      float[] floatArray0 = new float[35];
      translationRandomAccess0.localize(floatArray0);
      assertEquals(5, translationRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long[] longArray0 = new long[5];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getLongPosition(1184);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.getIntPosition(5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform_InverseTranslationTransform0);
      PointSample<TranslationRandomAccess<Object>> pointSample1 = PointSample.wrap(translationRandomAccess0, longArray0);
      TranslationRandomAccess<TranslationRandomAccess<Object>> translationRandomAccess1 = new TranslationRandomAccess<TranslationRandomAccess<Object>>(pointSample1, translationTransform0);
      int int0 = translationRandomAccess1.getIntPosition(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long[] longArray0 = new long[8];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      long[] longArray1 = new long[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize(longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        translationRandomAccess0.localize(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      int[] intArray0 = new int[1];
      translationRandomAccess0.localize(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationTransform.InverseTranslationTransform translationTransform_InverseTranslationTransform0 = translationTransform0.inverse();
      Supplier<TranslationRandomAccess<Integer>> supplier0 = (Supplier<TranslationRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      PointSample<TranslationRandomAccess<Integer>> pointSample0 = new PointSample<TranslationRandomAccess<Integer>>(supplier0, intArray0);
      TranslationRandomAccess<TranslationRandomAccess<Integer>> translationRandomAccess0 = null;
      try {
        translationRandomAccess0 = new TranslationRandomAccess<TranslationRandomAccess<Integer>>(pointSample0, translationTransform_InverseTranslationTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, translationRandomAccess0);
      TranslationRandomAccess<Integer> translationRandomAccess1 = new TranslationRandomAccess<Integer>(pointSample1, translationTransform0);
      TranslationRandomAccess<Integer> translationRandomAccess2 = translationRandomAccess1.copy();
      assertNotSame(translationRandomAccess2, translationRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      long[] longArray0 = new long[3];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      translationRandomAccess0.move(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      long[] longArray0 = new long[1];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, translationRandomAccess0);
      TranslationRandomAccess<Integer> translationRandomAccess1 = new TranslationRandomAccess<Integer>(pointSample1, translationTransform0);
      TranslationRandomAccess<Integer> translationRandomAccess2 = new TranslationRandomAccess<Integer>(translationRandomAccess1);
      assertFalse(translationRandomAccess2.equals((Object)translationRandomAccess1));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move((-776), (-776));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -776 out of bounds for length 7
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long[] longArray0 = new long[2];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.bck((-2268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2268 out of bounds for length 2
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      long[] longArray0 = new long[1];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.move(0L, (-2002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2002 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      long[] longArray0 = new long[7];
      TranslationTransform translationTransform0 = new TranslationTransform(longArray0);
      PointSample<Object> pointSample0 = PointSample.wrap((Object) translationTransform0, longArray0);
      TranslationRandomAccess<Object> translationRandomAccess0 = new TranslationRandomAccess<Object>(pointSample0, translationTransform0);
      // Undeclared exception!
      try { 
        translationRandomAccess0.fwd(596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 596 out of bounds for length 7
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }
}
