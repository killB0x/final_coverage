/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:37:58 GMT 2022
 */

package net.imglib2.view;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.RandomAccess;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.view.SlicingRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SlicingRandomAccess_ESTest extends SlicingRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      Supplier<SlicingRandomAccess<Integer>> supplier1 = (Supplier<SlicingRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Integer>> pointSample1 = new PointSample<SlicingRandomAccess<Integer>>(supplier1, slicingRandomAccess0);
      SlicingRandomAccess<SlicingRandomAccess<Integer>> slicingRandomAccess1 = new SlicingRandomAccess<SlicingRandomAccess<Integer>>(pointSample1, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess1.setPosition((-480L), 2176);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((-1929), 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      long[] longArray0 = new long[9];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition(longArray0);
      assertEquals(0, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      long[] longArray0 = new long[5];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample1 = new PointSample<Integer>(supplier1, slicingRandomAccess0);
      SlicingRandomAccess<Integer> slicingRandomAccess1 = new SlicingRandomAccess<Integer>(pointSample1, slicingTransform0);
      PointSample<SlicingRandomAccess<Integer>> pointSample2 = PointSample.wrap(slicingRandomAccess1, longArray0);
      slicingRandomAccess1.setPosition((Localizable) pointSample2);
      assertEquals(0, slicingRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(12, 12);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 12);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      long[] longArray0 = new long[20];
      longArray0[0] = (long) 12;
      slicingRandomAccess0.move(longArray0);
      assertEquals(12, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      slicingRandomAccess0.move(intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<SlicingRandomAccess<Integer>> supplier0 = (Supplier<SlicingRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Integer>> pointSample0 = new PointSample<SlicingRandomAccess<Integer>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<SlicingRandomAccess<Integer>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Integer>>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[0];
      slicingRandomAccess0.move(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 5);
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 5);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, pointSample0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample1, slicingTransform0);
      slicingRandomAccess0.move((Localizable) pointSample1);
      assertEquals(5, pointSample1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(0L, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Supplier<SlicingRandomAccess<Integer>> supplier0 = (Supplier<SlicingRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Integer>> pointSample0 = new PointSample<SlicingRandomAccess<Integer>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      PointSample<Integer> pointSample1 = new PointSample<Integer>((Supplier<Integer>) null, pointSample0);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample1, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(0, 584);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Point point0 = new Point(0);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.bck(16);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(897, 0);
      Integer integer0 = new Integer(6);
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.fwd(897);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 5);
      SlicingTransform slicingTransform0 = new SlicingTransform(5, 5);
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample1 = new PointSample<Object>(supplier1, pointSample0);
      int[] intArray0 = new int[7];
      slicingTransform0.setComponentMapping(intArray0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample1, slicingTransform0);
      assertEquals(5, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[3];
      Point point0 = new Point(intArray0);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, point0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 1268);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(796, 796);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 796);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      SlicingRandomAccess<Object> slicingRandomAccess1 = new SlicingRandomAccess<Object>(slicingRandomAccess0);
      assertEquals(796, slicingRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 8);
      SlicingTransform slicingTransform0 = new SlicingTransform(8, 8);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      SlicingRandomAccess<Object> slicingRandomAccess1 = slicingRandomAccess0.get();
      assertNull(slicingRandomAccess1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(63, 63);
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) slicingTransform0, longArray0);
      SlicingTransform slicingTransform1 = new SlicingTransform(63, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform1);
      SlicingTransform slicingTransform2 = (SlicingTransform)slicingRandomAccess0.get();
      assertTrue(slicingTransform2.hasFullSourceMapping());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess1 = slicingRandomAccess0.copy();
      assertEquals(0, slicingRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 8);
      SlicingTransform slicingTransform0 = new SlicingTransform(8, 8);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(897, 0);
      Integer integer0 = new Integer(1344);
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 27);
      SlicingTransform slicingTransform0 = new SlicingTransform(27, 27);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 41);
      SlicingTransform slicingTransform0 = new SlicingTransform(41, 41);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 27);
      SlicingTransform slicingTransform0 = new SlicingTransform(27, 27);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((long) (-2742), (-2742));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2742 out of bounds for length 27
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 27);
      SlicingTransform slicingTransform0 = new SlicingTransform(27, 27);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition(27, (-1160));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1160 out of bounds for length 27
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 27);
      SlicingTransform slicingTransform0 = new SlicingTransform(27, 27);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 40);
      SlicingTransform slicingTransform0 = new SlicingTransform(40, 40);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 60);
      SlicingTransform slicingTransform0 = new SlicingTransform(60, 60);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move((Localizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 20);
      SlicingTransform slicingTransform0 = new SlicingTransform(20, 20);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move((long) 20, (-4586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4586 out of bounds for length 20
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 8);
      SlicingTransform slicingTransform0 = new SlicingTransform(8, 8);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(8, (-2845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2845 out of bounds for length 8
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 5);
      SlicingTransform slicingTransform0 = new SlicingTransform(5, 5);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.fwd((-617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -617 out of bounds for length 5
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 20);
      SlicingTransform slicingTransform0 = new SlicingTransform(20, 20);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.bck((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4 out of bounds for length 20
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SlicingRandomAccess<Integer> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<Integer>((SlicingRandomAccess<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 4269);
      SlicingTransform slicingTransform0 = new SlicingTransform(4269, 4269);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess1 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      assertFalse(slicingRandomAccess1.equals((Object)slicingRandomAccess0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(42, 42);
      SlicingRandomAccess<Object> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<Object>((RandomAccess<Object>) null, slicingTransform0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 8);
      SlicingTransform slicingTransform0 = new SlicingTransform((-942), 1);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -942
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 4);
      SlicingTransform slicingTransform0 = new SlicingTransform(4, 4);
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      slicingTransform0.setComponentMapping(intArray0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.view.SlicingRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 56);
      SlicingTransform slicingTransform0 = new SlicingTransform(1814, 56);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition((long) 1814, 56);
      assertEquals(1814, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 5);
      SlicingTransform slicingTransform0 = new SlicingTransform(5, 5);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition(0L, 5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 60);
      SlicingTransform slicingTransform0 = new SlicingTransform(60, 60);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition((long) 60, 1);
      slicingRandomAccess0.move((Localizable) slicingRandomAccess0);
      assertEquals(60, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 18);
      SlicingTransform slicingTransform0 = new SlicingTransform(1280, 18);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition(1280, 18);
      assertEquals(1280, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 56);
      SlicingTransform slicingTransform0 = new SlicingTransform(56, 56);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition(56, 1);
      assertEquals(56, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(4, 4);
      Supplier<SlicingRandomAccess<Integer>> supplier0 = (Supplier<SlicingRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[4];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      slicingTransform0.setComponentZero(booleanArray0);
      PointSample<SlicingRandomAccess<Integer>> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      SlicingRandomAccess<SlicingRandomAccess<Integer>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Integer>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 4);
      SlicingTransform slicingTransform0 = new SlicingTransform(8, 4);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[9];
      slicingRandomAccess0.setPosition(intArray0);
      assertEquals(8, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 2942);
      SlicingTransform slicingTransform0 = new SlicingTransform(2942, 2942);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 68);
      SlicingTransform slicingTransform0 = new SlicingTransform(71, 68);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.setPosition((Localizable) slicingRandomAccess0);
      assertEquals(71, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(63, 63);
      long[] longArray0 = new long[0];
      PointSample<Object> pointSample0 = PointSample.wrap((Object) slicingTransform0, longArray0);
      SlicingTransform slicingTransform1 = new SlicingTransform(63, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform1);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.setPosition((Localizable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 1);
      SlicingTransform slicingTransform0 = new SlicingTransform(3, 1);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      long[] longArray0 = new long[9];
      slicingRandomAccess0.move(longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(12, 12);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 12);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 60);
      SlicingTransform slicingTransform0 = new SlicingTransform(60, 60);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess1 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(slicingRandomAccess0, slicingTransform0);
      slicingRandomAccess1.move((Localizable) slicingRandomAccess0);
      assertEquals(60, slicingRandomAccess1.numDimensions());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 20);
      SlicingTransform slicingTransform0 = new SlicingTransform(20, 20);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 4);
      SlicingTransform slicingTransform0 = new SlicingTransform(1512, 4);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.move((Localizable) slicingRandomAccess0);
      assertEquals(1512, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 1);
      SlicingTransform slicingTransform0 = new SlicingTransform(41, 1);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move((Localizable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 63);
      SlicingTransform slicingTransform0 = new SlicingTransform(498, 63);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.move((long) 63, 63);
      assertEquals(498, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      Point point0 = new Point(1);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, point0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(1L, 816);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(12, 12);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 12);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      slicingRandomAccess0.move((long) 12, 0);
      assertEquals(12, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 51);
      SlicingTransform slicingTransform0 = new SlicingTransform(1035, 51);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.move(2431, 51);
      assertEquals(1035, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 2942);
      SlicingTransform slicingTransform0 = new SlicingTransform(2942, 2942);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.move(738, 2942);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 2942);
      SlicingTransform slicingTransform0 = new SlicingTransform(2942, 2942);
      SlicingRandomAccess<Integer> slicingRandomAccess0 = new SlicingRandomAccess<Integer>(pointSample0, slicingTransform0);
      slicingRandomAccess0.move(87, 0);
      assertEquals(2942, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 58);
      SlicingTransform slicingTransform0 = new SlicingTransform(58, 58);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.bck(10);
      assertEquals(58, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Point point0 = new Point(0);
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, point0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess0.bck(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 71);
      SlicingTransform slicingTransform0 = new SlicingTransform(943, 71);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.bck(71);
      assertEquals(943, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 27);
      SlicingTransform slicingTransform0 = new SlicingTransform(27, 27);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.fwd(0);
      assertEquals(27, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Supplier<SlicingRandomAccess<Integer>> supplier0 = (Supplier<SlicingRandomAccess<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Integer>> pointSample0 = new PointSample<SlicingRandomAccess<Integer>>(supplier0, 0);
      SlicingTransform slicingTransform0 = new SlicingTransform(0, 0);
      SlicingRandomAccess<SlicingRandomAccess<Integer>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Integer>>(pointSample0, slicingTransform0);
      Supplier<SlicingRandomAccess<Object>> supplier1 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample1 = new PointSample<SlicingRandomAccess<Object>>(supplier1, slicingRandomAccess0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess1 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample1, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess1.fwd(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 16);
      SlicingTransform slicingTransform0 = new SlicingTransform(17, 16);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      slicingRandomAccess0.fwd(16);
      assertEquals(17, slicingRandomAccess0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 1);
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      slicingTransform0.setComponentZero(booleanArray0);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      int[] intArray0 = new int[23];
      slicingRandomAccess0.move(intArray0);
      assertEquals(23, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SlicingTransform slicingTransform0 = new SlicingTransform(8, 8);
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, 10);
      SlicingRandomAccess<Object> slicingRandomAccess0 = null;
      try {
        slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Supplier<SlicingRandomAccess<Object>> supplier0 = (Supplier<SlicingRandomAccess<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<SlicingRandomAccess<Object>> pointSample0 = new PointSample<SlicingRandomAccess<Object>>(supplier0, 60);
      SlicingTransform slicingTransform0 = new SlicingTransform(60, 60);
      SlicingRandomAccess<SlicingRandomAccess<Object>> slicingRandomAccess0 = new SlicingRandomAccess<SlicingRandomAccess<Object>>(pointSample0, slicingTransform0);
      PointSample<Object> pointSample1 = new PointSample<Object>((Supplier<Object>) null, slicingRandomAccess0);
      SlicingRandomAccess<Object> slicingRandomAccess1 = new SlicingRandomAccess<Object>(pointSample1, slicingTransform0);
      // Undeclared exception!
      try { 
        slicingRandomAccess1.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[1];
      PointSample<Object> pointSample0 = new PointSample<Object>((Supplier<Object>) null, longArray0);
      SlicingTransform slicingTransform0 = new SlicingTransform(1, 1);
      SlicingRandomAccess<Object> slicingRandomAccess0 = new SlicingRandomAccess<Object>(pointSample0, slicingTransform0);
      SlicingRandomAccess<Object> slicingRandomAccess1 = slicingRandomAccess0.copy();
      assertFalse(slicingRandomAccess1.equals((Object)slicingRandomAccess0));
  }
}
