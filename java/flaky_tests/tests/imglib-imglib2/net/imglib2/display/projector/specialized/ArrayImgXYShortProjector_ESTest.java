/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:53:50 GMT 2022
 */

package net.imglib2.display.projector.specialized;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.display.projector.specialized.ArrayImgXYShortProjector;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.DataAccess;
import net.imglib2.img.basictypeaccess.array.ShortArray;
import net.imglib2.type.numeric.integer.UnsignedShortType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayImgXYShortProjector_ESTest extends ArrayImgXYShortProjector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn(65535.0).when(unsignedShortType0).getMinValue();
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn((short[]) null).when(shortArray0).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn(5).when(arrayImg0).numDimensions();
      doReturn(shortArray0, (DataAccess) null).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = null;
      try {
        arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 65535.0, 65535.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.specialized.ArrayImgXYShortProjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(unsignedShortType0).getMinValue();
      short[] shortArray0 = new short[4];
      ShortArray shortArray1 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray1).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn((-1658)).when(arrayImg0).numDimensions();
      doReturn(shortArray1).when(arrayImg0).update(any());
      ShortArray shortArray2 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray2).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg1 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray2).when(arrayImg1).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg1, 0.0, (-1.0));
      arrayImgXYShortProjector0.map();
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn((-1472.6268181257392)).when(unsignedShortType0).getMinValue();
      short[] shortArray0 = new short[5];
      ShortArray shortArray1 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray1).getCurrentStorageArray();
      ShortArray shortArray2 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray2).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn(65535).when(arrayImg0).numDimensions();
      doReturn(shortArray1, shortArray2).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 65535, 65535);
      // Undeclared exception!
      arrayImgXYShortProjector0.map();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(unsignedShortType0).getMinValue();
      ShortArray shortArray0 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn((short[]) null).when(shortArray0).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn((-3476)).when(arrayImg0).numDimensions();
      doReturn(shortArray0, (DataAccess) null).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = null;
      try {
        arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 1.0, 885.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.specialized.ArrayImgXYShortProjector", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn((-1998.14566308)).when(unsignedShortType0).getMinValue();
      short[] shortArray0 = new short[6];
      short[] shortArray1 = new short[2];
      ShortArray shortArray2 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray2).getCurrentStorageArray();
      ShortArray shortArray3 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray1).when(shortArray3).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn((-2562)).when(arrayImg0).numDimensions();
      doReturn(shortArray2, shortArray3).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 20.7777118262671, 20.7777118262671);
      // Undeclared exception!
      try { 
        arrayImgXYShortProjector0.map();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(2146867728).when(arrayImg0).numDimensions();
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, (-1.0), 3484.855892095462);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn((-1472.6268181257392)).when(unsignedShortType0).getMinValue();
      short[] shortArray0 = new short[8];
      ShortArray shortArray1 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray1).getCurrentStorageArray();
      ShortArray shortArray2 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray2).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn(1318).when(arrayImg0).numDimensions();
      doReturn(shortArray1, shortArray2).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 1.0, 1318);
      arrayImgXYShortProjector0.map();
      assertArrayEquals(new short[] {(short) (-32768), (short) (-32768), (short) (-32768), (short) (-32768), (short) (-32768), (short) (-32768), (short) (-32768), (short) (-32768)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnsignedShortType unsignedShortType0 = mock(UnsignedShortType.class, new ViolatedAssumptionAnswer());
      doReturn((-1474.099838)).when(unsignedShortType0).getMinValue();
      short[] shortArray0 = new short[5];
      ShortArray shortArray1 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray1).getCurrentStorageArray();
      ShortArray shortArray2 = mock(ShortArray.class, new ViolatedAssumptionAnswer());
      doReturn(shortArray0).when(shortArray2).getCurrentStorageArray();
      ArrayImg<UnsignedShortType, ShortArray> arrayImg0 = (ArrayImg<UnsignedShortType, ShortArray>) mock(ArrayImg.class, new ViolatedAssumptionAnswer());
      doReturn(unsignedShortType0).when(arrayImg0).firstElement();
      doReturn(1336).when(arrayImg0).numDimensions();
      doReturn(shortArray1, shortArray2).when(arrayImg0).update(any());
      ArrayImgXYShortProjector<UnsignedShortType> arrayImgXYShortProjector0 = new ArrayImgXYShortProjector<UnsignedShortType>(arrayImg0, arrayImg0, 1336, 1336);
      arrayImgXYShortProjector0.map();
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }
}
