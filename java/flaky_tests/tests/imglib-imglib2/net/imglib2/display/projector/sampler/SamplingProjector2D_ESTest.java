/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:11:44 GMT 2022
 */

package net.imglib2.display.projector.sampler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.IterableInterval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.Converter;
import net.imglib2.display.projector.sampler.ProjectedSampler;
import net.imglib2.display.projector.sampler.SamplingProjector2D;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileIntArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.sparse.LongNtree;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.util.Fraction;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleIntervalView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SamplingProjector2D_ESTest extends SamplingProjector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long[] longArray0 = new long[7];
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ListImg<ARGBDoubleType> listImg0 = new ListImg<ARGBDoubleType>(longArray0, aRGBDoubleType0);
      SubsampleIntervalView<ARGBDoubleType> subsampleIntervalView0 = new SubsampleIntervalView<ARGBDoubleType>(listImg0, longArray0);
      ArrayDeque<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> arrayDeque0 = new ArrayDeque<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>();
      ListImg<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> listImg1 = new ListImg<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>(arrayDeque0, longArray0);
      IterableRandomAccessibleInterval<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>) listImg1);
      IntervalView<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> intervalView0 = new IntervalView<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>(iterableRandomAccessibleInterval0, listImg1);
      Converter<ProjectedSampler<ARGBDoubleType>, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> converter0 = (Converter<ProjectedSampler<ARGBDoubleType>, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      SamplingProjector2D<ARGBDoubleType, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> samplingProjector2D0 = new SamplingProjector2D<ARGBDoubleType, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>(8, 0, subsampleIntervalView0, intervalView0, converter0, 0);
      assertEquals(7, samplingProjector2D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 8;
      Integer integer0 = new Integer(8);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SamplingProjector2D<Integer, Integer> samplingProjector2D0 = new SamplingProjector2D<Integer, Integer>(45, (-914), listImg0, listImg0, (Converter<ProjectedSampler<Integer>, Integer>) null, 1919, longArray0);
      assertEquals(7, samplingProjector2D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BiConsumer<Localizable, RandomAccessibleInterval<Integer>> biConsumer0 = (BiConsumer<Localizable, RandomAccessibleInterval<Integer>>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<Integer>> supplier0 = (Supplier<RandomAccessibleInterval<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<RandomAccessibleInterval<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Integer>>(2118, biConsumer0, supplier0);
      Converter<ProjectedSampler<RandomAccessibleInterval<Integer>>, DirtyVolatileByteArray> converter0 = (Converter<ProjectedSampler<RandomAccessibleInterval<Integer>>, DirtyVolatileByteArray>) mock(Converter.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[8];
      SamplingProjector2D<RandomAccessibleInterval<Integer>, DirtyVolatileByteArray> samplingProjector2D0 = new SamplingProjector2D<RandomAccessibleInterval<Integer>, DirtyVolatileByteArray>(245, 3, functionRandomAccessible0, (IterableInterval<DirtyVolatileByteArray>) null, converter0, 1242, longArray0);
      // Undeclared exception!
      try { 
        samplingProjector2D0.map();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      long[] longArray0 = new long[7];
      Integer integer0 = new Integer(0);
      ListImg<Integer> listImg0 = new ListImg<Integer>(longArray0, integer0);
      SubsampleIntervalView<Integer> subsampleIntervalView0 = new SubsampleIntervalView<Integer>(listImg0, longArray0);
      Converter<ProjectedSampler<Integer>, Integer> converter0 = (Converter<ProjectedSampler<Integer>, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      SamplingProjector2D<Integer, Integer> samplingProjector2D0 = new SamplingProjector2D<Integer, Integer>((-15), (-478), subsampleIntervalView0, listImg0, converter0, 0, longArray0);
      Converter<ProjectedSampler<Integer>, Integer> converter1 = samplingProjector2D0.converter;
      SamplingProjector2D<Integer, Integer> samplingProjector2D1 = null;
      try {
        samplingProjector2D1 = new SamplingProjector2D<Integer, Integer>(2, 0, subsampleIntervalView0, listImg0, converter1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 7
         //
         verifyException("net.imglib2.view.SubsampleIntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      long[] longArray0 = new long[15];
      Fraction fraction0 = new Fraction(3L, 900L);
      NtreeImg<BitType, LongNtree> ntreeImg0 = new NtreeImg<BitType, LongNtree>((LongNtree) null, longArray0, fraction0);
      SamplingProjector2D<BitType, BitType> samplingProjector2D0 = new SamplingProjector2D<BitType, BitType>(5, 5, ntreeImg0, ntreeImg0, (Converter<ProjectedSampler<BitType>, BitType>) null, 32, longArray0);
      // Undeclared exception!
      try { 
        samplingProjector2D0.map();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long[] longArray0 = new long[7];
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ListImg<ARGBDoubleType> listImg0 = new ListImg<ARGBDoubleType>(longArray0, aRGBDoubleType0);
      ArrayDeque<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> arrayDeque0 = new ArrayDeque<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>();
      ListImg<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> listImg1 = new ListImg<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>(arrayDeque0, longArray0);
      IterableRandomAccessibleInterval<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> iterableRandomAccessibleInterval0 = IterableRandomAccessibleInterval.create((RandomAccessibleInterval<PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>) listImg1);
      Converter<ProjectedSampler<ARGBDoubleType>, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> converter0 = (Converter<ProjectedSampler<ARGBDoubleType>, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      SamplingProjector2D<ARGBDoubleType, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>> samplingProjector2D0 = new SamplingProjector2D<ARGBDoubleType, PlanarImg<VolatileUnsignedByteType, VolatileIntArray>>(0, 2005, listImg0, iterableRandomAccessibleInterval0, converter0, 0);
      // Undeclared exception!
      try { 
        samplingProjector2D0.map();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
