/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:09:31 GMT 2022
 */

package net.imglib2.display.projector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.RandomAccessible;
import net.imglib2.RealLocalizable;
import net.imglib2.converter.Converter;
import net.imglib2.converter.read.ConvertedRealRandomAccessibleRealInterval;
import net.imglib2.display.projector.RandomAccessibleProjector2D;
import net.imglib2.position.FunctionRealRandomAccessible;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractProjector2D_ESTest extends AbstractProjector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<RealLocalizable, Object> biConsumer0 = (BiConsumer<RealLocalizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> supplier0 = (Supplier<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> functionRealRandomAccessible0 = new FunctionRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>((-2622), biConsumer0, supplier0);
      RandomAccessibleOnRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>(functionRealRandomAccessible0);
      long[] longArray0 = new long[3];
      IntervalView<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> intervalView0 = new IntervalView<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray0);
      SubsampleView<ConvertedRealRandomAccessibleRealInterval<Integer, Object>> subsampleView0 = new SubsampleView<ConvertedRealRandomAccessibleRealInterval<Integer, Object>>(intervalView0, 3L);
      IntervalView<ConvertedRealRandomAccessibleRealInterval<Object, Object>> intervalView1 = new IntervalView<ConvertedRealRandomAccessibleRealInterval<Object, Object>>((RandomAccessible<ConvertedRealRandomAccessibleRealInterval<Object, Object>>) null, intervalView0);
      Converter<Object, ConvertedRealRandomAccessibleRealInterval<Object, Object>> converter0 = (Converter<Object, ConvertedRealRandomAccessibleRealInterval<Object, Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<ConvertedRealRandomAccessibleRealInterval<Integer, Object>, ConvertedRealRandomAccessibleRealInterval<Object, Object>> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<ConvertedRealRandomAccessibleRealInterval<Integer, Object>, ConvertedRealRandomAccessibleRealInterval<Object, Object>>(0, 0, subsampleView0, intervalView1, converter0);
      assertEquals(3, randomAccessibleProjector2D0.numDimensions());
  }
}
