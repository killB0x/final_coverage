/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:28:23 GMT 2022
 */

package net.imglib2.display.projector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.RandomAccess;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.converter.Converter;
import net.imglib2.display.projector.RandomAccessibleProjector2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomAccessibleProjector2D_ESTest extends RandomAccessibleProjector2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2065).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess<Object>) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn((-2655L), (long)2065, 419L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((long)0, 1665L).when(randomAccessibleInterval0).max(anyInt());
      doReturn((long)2065, 1665L).when(randomAccessibleInterval0).min(anyInt());
      doReturn((RandomAccess<Object>) null).when(randomAccessibleInterval0).randomAccess(any(net.imglib2.Interval.class));
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(0, 0, randomAccessible0, randomAccessibleInterval0, converter0);
      assertNotNull(randomAccessibleProjector2D0);
      assertEquals(2, randomAccessibleProjector2D0.numDimensions());
      
      // Undeclared exception!
      try { 
        randomAccessibleProjector2D0.map();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.RandomAccessibleProjector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(8, (-2554)).when(randomAccessible0).numDimensions();
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>((-1331), 8, randomAccessible0, randomAccessibleInterval0, converter0);
      assertNotNull(randomAccessibleProjector2D0);
      assertEquals(8, randomAccessibleProjector2D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(65535, 1192).when(randomAccessible0).numDimensions();
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(662, 662, randomAccessible0, randomAccessibleInterval0, converter0);
      assertNotNull(randomAccessibleProjector2D0);
      assertEquals(65535, randomAccessibleProjector2D0.numDimensions());
      
      // Undeclared exception!
      randomAccessibleProjector2D0.map();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(randomAccessible0).numDimensions();
      doReturn((RandomAccess) null).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn(0L, 0L).when(randomAccessibleInterval0).max(anyInt());
      doReturn(0L, 0L).when(randomAccessibleInterval0).min(anyInt());
      doReturn((RandomAccess) null).when(randomAccessibleInterval0).randomAccess(any(net.imglib2.Interval.class));
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(1, 1, randomAccessible0, randomAccessibleInterval0, converter0);
      assertNotNull(randomAccessibleProjector2D0);
      assertEquals(2, randomAccessibleProjector2D0.numDimensions());
      
      // Undeclared exception!
      try { 
        randomAccessibleProjector2D0.map();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.RandomAccessibleProjector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = null;
      try {
        randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(1177, 2, (RandomAccessible<Object>) null, (RandomAccessibleInterval<Object>) null, (Converter<? super Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.RandomAccessibleProjector2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomAccess<Object> randomAccess0 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(randomAccess0).get();
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1, 1).when(randomAccessible0).numDimensions();
      doReturn(randomAccess0).when(randomAccessible0).randomAccess(any(net.imglib2.Interval.class));
      RandomAccess<Object> randomAccess1 = (RandomAccess<Object>) mock(RandomAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(randomAccess1).get();
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn((long)1, (long)1, (long)1).when(randomAccessibleInterval0).dimension(anyInt());
      doReturn((long)1, (long)1).when(randomAccessibleInterval0).max(anyInt());
      doReturn(0L, (long)1).when(randomAccessibleInterval0).min(anyInt());
      doReturn(randomAccess1).when(randomAccessibleInterval0).randomAccess(any(net.imglib2.Interval.class));
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(1, 1, randomAccessible0, randomAccessibleInterval0, converter0);
      assertNotNull(randomAccessibleProjector2D0);
      assertEquals(2, randomAccessibleProjector2D0.numDimensions());
      
      randomAccessibleProjector2D0.map();
      assertEquals(2, randomAccessibleProjector2D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RandomAccessible<Object> randomAccessible0 = (RandomAccessible<Object>) mock(RandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1199, 1199).when(randomAccessible0).numDimensions();
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = (RandomAccessibleInterval<Object>) mock(RandomAccessibleInterval.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(randomAccessibleInterval0).min(anyInt());
      Converter<Object, Object> converter0 = (Converter<Object, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      RandomAccessibleProjector2D<Object, Object> randomAccessibleProjector2D0 = new RandomAccessibleProjector2D<Object, Object>(1199, 1199, randomAccessible0, randomAccessibleInterval0, converter0);
      // Undeclared exception!
      try { 
        randomAccessibleProjector2D0.map();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1199 out of bounds for length 1199
         //
         verifyException("net.imglib2.display.projector.RandomAccessibleProjector2D", e);
      }
  }
}
