/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:51:37 GMT 2022
 */

package net.imglib2.display.projector.sampler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.PointSample;
import net.imglib2.Sampler;
import net.imglib2.display.projector.sampler.IntervalSampler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntervalSampler_ESTest extends IntervalSampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, 960L, 960L);
      long[] longArray0 = new long[8];
      longArray0[1] = 960L;
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      boolean boolean0 = intervalSampler0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalSampler<Object> intervalSampler0 = new IntervalSampler<Object>(2, 2, 2);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[7];
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier0, intArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      intervalSampler0.jumpFwd(2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[8];
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(0, (-1101L), (-5012L));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      intervalSampler0.fwd();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[8];
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(0, (-1101L), (-5012L));
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      PointSample<Integer> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      Integer integer0 = intervalSampler0.get();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalSampler<Object> intervalSampler0 = new IntervalSampler<Object>(2299, 2299, 0L);
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(intervalSampler0).when(supplier0).get();
      long[] longArray0 = new long[8];
      PointSample<Object> pointSample0 = PointSample.wrapSupplier(supplier0, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      Object object0 = intervalSampler0.get();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, (-2803L), (-860L));
      long[] longArray0 = new long[3];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      Sampler<Integer> sampler0 = intervalSampler0.copy();
      assertNotNull(sampler0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>((-4266), (-4266), (-4266));
      int[] intArray0 = new int[0];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, intArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      // Undeclared exception!
      try { 
        intervalSampler0.reset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -4266 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, 1, 1);
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 1);
      intervalSampler0.setRandomAccess(pointSample0);
      // Undeclared exception!
      try { 
        intervalSampler0.jumpFwd(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>((-4236), (-4236), (-4236));
      // Undeclared exception!
      try { 
        intervalSampler0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, 1, 1);
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, 1);
      intervalSampler0.setRandomAccess(pointSample0);
      // Undeclared exception!
      try { 
        intervalSampler0.hasNext();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>((-3), (-624L), (-624L));
      Integer integer0 = new Integer((-3));
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = PointSample.wrap(integer0, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      // Undeclared exception!
      try { 
        intervalSampler0.fwd();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -3 out of bounds for length 0
         //
         verifyException("net.imglib2.PointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, (-2803L), (-860L));
      long[] longArray0 = new long[3];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      intervalSampler0.reset();
      boolean boolean0 = intervalSampler0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(1, 1, 1);
      // Undeclared exception!
      try { 
        intervalSampler0.jumpFwd(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>((-4236), (-4236), (-4236));
      intervalSampler0.jumpFwd((-4236));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(0, 0, (-4266));
      long[] longArray0 = new long[1];
      PointSample<Integer> pointSample0 = new PointSample<Integer>((Supplier<Integer>) null, longArray0);
      intervalSampler0.setRandomAccess(pointSample0);
      boolean boolean0 = intervalSampler0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(0, 0, (-4266));
      // Undeclared exception!
      try { 
        intervalSampler0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntervalSampler<Object> intervalSampler0 = new IntervalSampler<Object>((-32), (-32), (-32));
      // Undeclared exception!
      try { 
        intervalSampler0.fwd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>((-4266), (-4266), (-4266));
      // Undeclared exception!
      try { 
        intervalSampler0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntervalSampler<Integer> intervalSampler0 = new IntervalSampler<Integer>(222, 222, 222);
      // Undeclared exception!
      try { 
        intervalSampler0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.projector.sampler.IntervalSampler", e);
      }
  }
}
