/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:14:56 GMT 2022
 */

package net.imglib2.display.awt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.display.awt.SignedShortDataBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SignedShortDataBuffer_ESTest extends SignedShortDataBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[4];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (short)2889, 1);
      assertEquals(2889, signedShortDataBuffer0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(1182, 3471);
      signedShortDataBuffer0.setElem(1182, 957, 1182);
      assertEquals(1, signedShortDataBuffer0.getDataType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)9;
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (short)9);
      int int0 = signedShortDataBuffer0.getElem(0, 0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1);
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-2320));
      int int0 = signedShortDataBuffer0.getElem(0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer((short[]) null, 137);
      short[] shortArray0 = signedShortDataBuffer0.getData(0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      short[][] shortArray0 = new short[3][1];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-3061));
      short[] shortArray1 = signedShortDataBuffer0.getData((int) (short)0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(0);
      short[] shortArray0 = signedShortDataBuffer0.getData(0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(1433);
      short[] shortArray0 = signedShortDataBuffer0.getData();
      assertEquals(1433, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(0);
      short[] shortArray0 = signedShortDataBuffer0.getData();
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer((short[]) null, (-3795));
      // Undeclared exception!
      try { 
        signedShortDataBuffer0.setElem(0, (-1), 1222);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      short[][] shortArray0 = new short[3][1];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-3061));
      // Undeclared exception!
      try { 
        signedShortDataBuffer0.setElem(0, 4033, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4033 out of bounds for length 1
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer((short[]) null, 0);
      // Undeclared exception!
      try { 
        signedShortDataBuffer0.getElem(0, 444);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(3468, 3468);
      // Undeclared exception!
      try { 
        signedShortDataBuffer0.getElem(3468, 3468);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3468 out of bounds for length 3468
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer((short[][]) null, 663);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.display.awt.SignedShortDataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer((short) (-340));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -340
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      short[][] shortArray0 = new short[3][7];
      int[] intArray0 = new int[3];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-869), intArray0);
      assertEquals((-869), signedShortDataBuffer0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      short[][] shortArray0 = new short[1][7];
      int[] intArray0 = new int[8];
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-857), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Number of banks does not match number of bank offsets
         //
         verifyException("java.awt.image.DataBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      short[] shortArray0 = new short[3];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-2320));
      // Undeclared exception!
      try { 
        signedShortDataBuffer0.getData(1028);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1028 out of bounds for length 1
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer((short[]) null, 137);
      short[] shortArray0 = signedShortDataBuffer0.getData();
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer((-361), 4274);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -361
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      short[][] shortArray0 = new short[0][4];
      SignedShortDataBuffer signedShortDataBuffer0 = null;
      try {
        signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-2381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("java.awt.image.DataBufferShort", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      short[] shortArray0 = new short[3];
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer(shortArray0, (-2320));
      int int0 = signedShortDataBuffer0.getElem(0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignedShortDataBuffer signedShortDataBuffer0 = new SignedShortDataBuffer((short[]) null, (-1379), (-1379));
      assertEquals(1, signedShortDataBuffer0.getDataType());
  }
}
