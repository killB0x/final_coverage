/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:03:58 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.array.ArrayImgFactory;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.img.sparse.NtreeImgFactory;
import net.imglib2.interpolation.randomaccess.ClampingNLinearInterpolatorRealType;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedIntType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import net.imglib2.view.SubsampleIntervalView;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClampingNLinearInterpolatorRealType_ESTest extends ClampingNLinearInterpolatorRealType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(1091L);
      NtreeImgFactory<UnsignedIntType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedIntType>(unsignedIntType0);
      long[] longArray0 = new long[5];
      longArray0[0] = 1091L;
      longArray0[1] = 1091L;
      longArray0[2] = 1091L;
      longArray0[3] = 1091L;
      longArray0[4] = 1091L;
      NtreeImg<UnsignedIntType, ?> ntreeImg0 = ntreeImgFactory0.create(longArray0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(ntreeImg0, unsignedIntType0);
      clampingNLinearInterpolatorRealType0.move((-4187.7925F), 2);
      UnsignedIntType unsignedIntType1 = clampingNLinearInterpolatorRealType0.get();
      assertEquals(0, unsignedIntType1.getInt());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BitType bitType0 = new BitType(true);
      Supplier<BitType> supplier0 = (Supplier<BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(bitType0).when(supplier0).get();
      FunctionRandomAccessible<BitType> functionRandomAccessible0 = new FunctionRandomAccessible<BitType>(5, biConsumer0, supplier0);
      ClampingNLinearInterpolatorRealType<BitType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<BitType>(functionRandomAccessible0, bitType0);
      BitType bitType1 = clampingNLinearInterpolatorRealType0.get();
      assertTrue(bitType1.equals((Object)bitType0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[2];
      VolatileByteType volatileByteType0 = new VolatileByteType((byte)6);
      ListImg<VolatileByteType> listImg0 = new ListImg<VolatileByteType>(longArray0, volatileByteType0);
      ClampingNLinearInterpolatorRealType<VolatileByteType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<VolatileByteType>(listImg0, volatileByteType0);
      ClampingNLinearInterpolatorRealType<VolatileByteType> clampingNLinearInterpolatorRealType1 = new ClampingNLinearInterpolatorRealType<VolatileByteType>(clampingNLinearInterpolatorRealType0);
      assertFalse(clampingNLinearInterpolatorRealType1.equals((Object)clampingNLinearInterpolatorRealType0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 3L;
      longArray0[1] = 3L;
      VolatileByteType volatileByteType0 = new VolatileByteType((byte)6);
      ListImg<VolatileByteType> listImg0 = new ListImg<VolatileByteType>(longArray0, volatileByteType0);
      ClampingNLinearInterpolatorRealType<VolatileByteType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<VolatileByteType>(listImg0, volatileByteType0);
      VolatileByteType volatileByteType1 = clampingNLinearInterpolatorRealType0.get();
      assertEquals((-128.0), volatileByteType1.getMinValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileUnsignedShortType> supplier0 = (Supplier<VolatileUnsignedShortType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedShortType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedShortType>(1555, biConsumer0, supplier0);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      ClampingNLinearInterpolatorRealType<VolatileUnsignedShortType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<VolatileUnsignedShortType>(functionRandomAccessible0, volatileUnsignedShortType0);
      // Undeclared exception!
      clampingNLinearInterpolatorRealType0.get();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<BitType> supplier0 = (Supplier<BitType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<BitType> functionRandomAccessible0 = new FunctionRandomAccessible<BitType>(5, biConsumer0, supplier0);
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(5, false);
      BitType bitType0 = new BitType(longBufferAccess0);
      ClampingNLinearInterpolatorRealType<BitType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<BitType>(functionRandomAccessible0, bitType0);
      // Undeclared exception!
      try { 
        clampingNLinearInterpolatorRealType0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.ClampingNLinearInterpolatorRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayDeque<UnsignedLongType> arrayDeque0 = new ArrayDeque<UnsignedLongType>();
      ListImg<UnsignedLongType> listImg0 = new ListImg<UnsignedLongType>(arrayDeque0, longArray0);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType();
      ClampingNLinearInterpolatorRealType<UnsignedLongType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedLongType>(listImg0, unsignedLongType0);
      // Undeclared exception!
      try { 
        clampingNLinearInterpolatorRealType0.get();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(1091L);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<UnsignedIntType> supplier0 = (Supplier<UnsignedIntType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<UnsignedIntType> functionRandomAccessible0 = new FunctionRandomAccessible<UnsignedIntType>(256, biConsumer0, supplier0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(functionRandomAccessible0, unsignedIntType0);
      // Undeclared exception!
      try { 
        clampingNLinearInterpolatorRealType0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2147483648 out of bounds for length 1
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(3L);
      long[] longArray0 = new long[2];
      longArray0[0] = 3L;
      longArray0[1] = 3L;
      ArrayImgFactory<UnsignedIntType> arrayImgFactory0 = new ArrayImgFactory<UnsignedIntType>(unsignedIntType0);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      ArrayImg<UnsignedIntType, ?> arrayImg0 = arrayImgFactory0.create((Dimensions) finalInterval0);
      SubsampleIntervalView<UnsignedIntType> subsampleIntervalView0 = new SubsampleIntervalView<UnsignedIntType>(arrayImg0, 0L);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(subsampleIntervalView0, unsignedIntType0);
      // Undeclared exception!
      try { 
        clampingNLinearInterpolatorRealType0.get();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClampingNLinearInterpolatorRealType<BoolType> clampingNLinearInterpolatorRealType0 = null;
      try {
        clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<BoolType>((ClampingNLinearInterpolatorRealType<BoolType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Unsigned4BitType unsigned4BitType0 = new Unsigned4BitType(1096L);
      ClampingNLinearInterpolatorRealType<Unsigned4BitType> clampingNLinearInterpolatorRealType0 = null;
      try {
        clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<Unsigned4BitType>((RandomAccessible<Unsigned4BitType>) null, unsigned4BitType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[2];
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>((-323), biConsumer0, supplier0);
      SubsampleView<VolatileUnsignedLongType> subsampleView0 = new SubsampleView<VolatileUnsignedLongType>(functionRandomAccessible0, longArray0);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      ClampingNLinearInterpolatorRealType<VolatileUnsignedLongType> clampingNLinearInterpolatorRealType0 = null;
      try {
        clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<VolatileUnsignedLongType>(subsampleView0, volatileUnsignedLongType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -323
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClampingNLinearInterpolatorRealType<DoubleType> clampingNLinearInterpolatorRealType0 = null;
      try {
        clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<DoubleType>((RandomAccessible<DoubleType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.ClampingNLinearInterpolatorRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType();
      long[] longArray0 = new long[1];
      ListImg<UnsignedIntType> listImg0 = new ListImg<UnsignedIntType>(longArray0, unsignedIntType0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = null;
      try {
        clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(9223372036854775807L);
      NtreeImgFactory<UnsignedIntType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedIntType>(unsignedIntType0);
      long[] longArray0 = new long[3];
      longArray0[0] = 9223372036854775807L;
      longArray0[1] = 9223372036854775807L;
      longArray0[2] = 3L;
      NtreeImg<UnsignedIntType, ?> ntreeImg0 = ntreeImgFactory0.create(longArray0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(ntreeImg0, unsignedIntType0);
      UnsignedIntType unsignedIntType1 = clampingNLinearInterpolatorRealType0.get();
      assertEquals(0, unsignedIntType1.getInt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(3L);
      NtreeImgFactory<UnsignedIntType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedIntType>(unsignedIntType0);
      long[] longArray0 = new long[2];
      longArray0[0] = 3L;
      longArray0[1] = 3L;
      NtreeImg<UnsignedIntType, ?> ntreeImg0 = ntreeImgFactory0.create(longArray0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(ntreeImg0);
      assertEquals(2, clampingNLinearInterpolatorRealType0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnsignedIntType unsignedIntType0 = new UnsignedIntType(3L);
      NtreeImgFactory<UnsignedIntType> ntreeImgFactory0 = new NtreeImgFactory<UnsignedIntType>(unsignedIntType0);
      long[] longArray0 = new long[2];
      longArray0[0] = 3L;
      longArray0[1] = 3L;
      NtreeImg<UnsignedIntType, ?> ntreeImg0 = ntreeImgFactory0.create(longArray0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType0 = new ClampingNLinearInterpolatorRealType<UnsignedIntType>(ntreeImg0, unsignedIntType0);
      ClampingNLinearInterpolatorRealType<UnsignedIntType> clampingNLinearInterpolatorRealType1 = clampingNLinearInterpolatorRealType0.copy();
      assertEquals(2, clampingNLinearInterpolatorRealType1.numDimensions());
  }
}
