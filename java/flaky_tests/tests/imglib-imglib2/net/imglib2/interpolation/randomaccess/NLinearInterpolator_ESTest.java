/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:05:24 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.DoubleBuffer;
import java.util.LinkedHashSet;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.list.ListImg;
import net.imglib2.interpolation.randomaccess.NLinearInterpolator;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.transform.integer.ComponentMappingTransform;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.MixedTransformView;
import net.imglib2.view.SubsampleIntervalView;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolator_ESTest extends NLinearInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(0, biConsumer0, supplier0);
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(0, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      try { 
        nLinearInterpolator0.get();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(3, biConsumer0, supplier0);
      assertEquals(3, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(3, functionRandomAccessible0.numDimensions());
      assertEquals(3, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 3;
      // Undeclared exception!
      try { 
        nLinearInterpolator0.setPositionAndGet(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 3;
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertNotNull(aRGBDoubleType0);
      
      ListImg<ARGBDoubleType> listImg0 = new ListImg<ARGBDoubleType>(longArray0, aRGBDoubleType0);
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(9L, listImg0.size());
      assertEquals(2, listImg0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3L, 3L}, longArray0);
      assertNotNull(listImg0);
      
      NLinearInterpolator<ARGBDoubleType> nLinearInterpolator0 = new NLinearInterpolator<ARGBDoubleType>(listImg0);
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(9L, listImg0.size());
      assertEquals(2, listImg0.numDimensions());
      assertEquals(2, nLinearInterpolator0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3L, 3L}, longArray0);
      assertNotNull(nLinearInterpolator0);
      
      nLinearInterpolator0.fillWeights();
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(9L, listImg0.size());
      assertEquals(2, listImg0.numDimensions());
      assertEquals(2, nLinearInterpolator0.numDimensions());
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3L, 3L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[1];
      VolatileShortType volatileShortType0 = new VolatileShortType((short)91);
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertNotNull(volatileShortType0);
      
      ListImg<VolatileShortType> listImg0 = new ListImg<VolatileShortType>(longArray0, volatileShortType0);
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertEquals(1, listImg0.numDimensions());
      assertEquals(0L, listImg0.size());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(listImg0);
      
      IntervalView<VolatileShortType> intervalView0 = new IntervalView<VolatileShortType>(listImg0, listImg0);
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertEquals(1, listImg0.numDimensions());
      assertEquals(0L, listImg0.size());
      assertEquals(1, intervalView0.numDimensions());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(intervalView0);
      
      SubsampleIntervalView<VolatileShortType> subsampleIntervalView0 = new SubsampleIntervalView<VolatileShortType>(intervalView0, 786L);
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertEquals(1, listImg0.numDimensions());
      assertEquals(0L, listImg0.size());
      assertEquals(1, intervalView0.numDimensions());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(subsampleIntervalView0);
      
      NLinearInterpolator<VolatileShortType> nLinearInterpolator0 = new NLinearInterpolator<VolatileShortType>(subsampleIntervalView0, volatileShortType0);
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertEquals(1, listImg0.numDimensions());
      assertEquals(0L, listImg0.size());
      assertEquals(1, intervalView0.numDimensions());
      assertEquals(1, nLinearInterpolator0.numDimensions());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(nLinearInterpolator0);
      
      NLinearInterpolator<VolatileShortType> nLinearInterpolator1 = new NLinearInterpolator<VolatileShortType>(nLinearInterpolator0);
      assertFalse(nLinearInterpolator1.equals((Object)nLinearInterpolator0));
      assertEquals(32767.0, volatileShortType0.getMaxValue(), 0.01);
      assertEquals(16, volatileShortType0.getBitsPerPixel());
      assertEquals((-32768.0), volatileShortType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileShortType0.getMinIncrement(), 0.01);
      assertTrue(volatileShortType0.isValid());
      assertEquals(0, volatileShortType0.getIndex());
      assertEquals(1, listImg0.numDimensions());
      assertEquals(0L, listImg0.size());
      assertEquals(1, intervalView0.numDimensions());
      assertEquals(1, nLinearInterpolator0.numDimensions());
      assertEquals(1, nLinearInterpolator1.numDimensions());
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(nLinearInterpolator1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertNotNull(volatileUnsignedLongType0);
      
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(0, biConsumer0, supplier0);
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(0, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator1 = nLinearInterpolator0.copy();
      assertFalse(nLinearInterpolator1.equals((Object)nLinearInterpolator0));
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0, functionRandomAccessible0.numDimensions());
      assertEquals(0, nLinearInterpolator0.numDimensions());
      assertEquals(0, nLinearInterpolator1.numDimensions());
      assertNotNull(nLinearInterpolator1);
      assertNotSame(nLinearInterpolator0, nLinearInterpolator1);
      assertNotSame(nLinearInterpolator1, nLinearInterpolator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(114, biConsumer0, supplier0);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(114, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(114, functionRandomAccessible0.numDimensions());
      assertEquals(114, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      nLinearInterpolator0.get();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(5, biConsumer0, supplier0);
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertEquals(5, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      try { 
        nLinearInterpolator0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(106, biConsumer0, supplier0);
      assertEquals(106, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(106, functionRandomAccessible0.numDimensions());
      assertEquals(106, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      try { 
        nLinearInterpolator0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2147483648 out of bounds for length 1024
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(5, biConsumer0, supplier0);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      SubsampleView<VolatileUnsignedLongType> subsampleView0 = new SubsampleView<VolatileUnsignedLongType>(functionRandomAccessible0, 0L);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertNotNull(subsampleView0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(subsampleView0, volatileUnsignedLongType0);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertEquals(5, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      try { 
        nLinearInterpolator0.get();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(178, biConsumer0, supplier0);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(178, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(178, functionRandomAccessible0.numDimensions());
      assertEquals(178, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      nLinearInterpolator0.fillWeights();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType((-3542L));
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0, volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(200, biConsumer0, supplier0);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(200, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(200, functionRandomAccessible0.numDimensions());
      assertEquals(200, nLinearInterpolator0.numDimensions());
      assertNotNull(nLinearInterpolator0);
      
      // Undeclared exception!
      try { 
        nLinearInterpolator0.fillWeights();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -2147483648 out of bounds for length 256
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NLinearInterpolator<ComplexDoubleType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<ComplexDoubleType>((NLinearInterpolator<ComplexDoubleType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(2919);
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=2919 cap=2919]", doubleBuffer0.toString());
      assertEquals(2919, doubleBuffer0.remaining());
      assertEquals(2919, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasArray());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(2919, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertNotNull(doubleBuffer0);
      
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=2919 cap=2919]", doubleBuffer0.toString());
      assertEquals(2919, doubleBuffer0.remaining());
      assertEquals(2919, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasArray());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(2919, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertTrue(doubleBufferAccess0.isValid());
      assertEquals(2919, doubleBufferAccess0.getArrayLength());
      assertEquals(8, doubleBufferAccess0.getNumBytesPerEntity());
      assertFalse(doubleBufferAccess0.isDirect());
      assertFalse(doubleBufferAccess0.isReadOnly());
      assertNotNull(doubleBufferAccess0);
      
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      assertEquals("java.nio.HeapDoubleBuffer[pos=0 lim=2919 cap=2919]", doubleBuffer0.toString());
      assertEquals(2919, doubleBuffer0.remaining());
      assertEquals(2919, doubleBuffer0.capacity());
      assertFalse(doubleBuffer0.isDirect());
      assertTrue(doubleBuffer0.hasArray());
      assertTrue(doubleBuffer0.hasRemaining());
      assertEquals(2919, doubleBuffer0.limit());
      assertEquals(0, doubleBuffer0.arrayOffset());
      assertFalse(doubleBuffer0.isReadOnly());
      assertEquals(0, doubleBuffer0.position());
      assertTrue(doubleBufferAccess0.isValid());
      assertEquals(2919, doubleBufferAccess0.getArrayLength());
      assertEquals(8, doubleBufferAccess0.getNumBytesPerEntity());
      assertFalse(doubleBufferAccess0.isDirect());
      assertFalse(doubleBufferAccess0.isReadOnly());
      assertEquals(64, volatileDoubleType0.getBitsPerPixel());
      assertEquals(4.9E-324, volatileDoubleType0.getMinIncrement(), 0.01);
      assertTrue(volatileDoubleType0.isValid());
      assertEquals((-1.7976931348623157E308), volatileDoubleType0.getMinValue(), 0.01);
      assertEquals(1.7976931348623157E308, volatileDoubleType0.getMaxValue(), 0.01);
      assertEquals(0, volatileDoubleType0.getIndex());
      assertNotNull(volatileDoubleType0);
      
      NLinearInterpolator<VolatileDoubleType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileDoubleType>((RandomAccessible<VolatileDoubleType>) null, volatileDoubleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(255, biConsumer0, supplier0);
      assertEquals(255, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      assertEquals(0, volatileUnsignedLongType0.getIndex());
      assertEquals(1.8446744073709552E19, volatileUnsignedLongType0.getMaxValue(), 0.01);
      assertTrue(volatileUnsignedLongType0.isValid());
      assertEquals(64, volatileUnsignedLongType0.getBitsPerPixel());
      assertEquals(0.0, volatileUnsignedLongType0.getMinValue(), 0.01);
      assertEquals(1.0, volatileUnsignedLongType0.getMinIncrement(), 0.01);
      assertNotNull(volatileUnsignedLongType0);
      
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(5, biConsumer0, supplier0);
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      ComponentMappingTransform componentMappingTransform0 = new ComponentMappingTransform(intArray0);
      assertEquals(5, componentMappingTransform0.numSourceDimensions());
      assertEquals(5, componentMappingTransform0.numTargetDimensions());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0}, intArray0);
      assertNotNull(componentMappingTransform0);
      
      MixedTransformView<VolatileUnsignedLongType> mixedTransformView0 = new MixedTransformView<VolatileUnsignedLongType>(functionRandomAccessible0, componentMappingTransform0);
      assertEquals(5, functionRandomAccessible0.numDimensions());
      assertEquals(5, componentMappingTransform0.numSourceDimensions());
      assertEquals(5, componentMappingTransform0.numTargetDimensions());
      assertEquals(5, mixedTransformView0.numDimensions());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {5, 0, 0, 0, 0}, intArray0);
      assertNotNull(mixedTransformView0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(mixedTransformView0, volatileUnsignedLongType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("net.imglib2.transform.integer.SlicingTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(200, biConsumer0, supplier0);
      assertEquals(200, functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>((-630), (BiConsumer<Localizable, ? super VolatileUnsignedLongType>) null, supplier0);
      assertEquals((-630), functionRandomAccessible0.numDimensions());
      assertNotNull(functionRandomAccessible0);
      
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -630
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(2, biConsumer0, supplier0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      VolatileUnsignedLongType volatileUnsignedLongType1 = nLinearInterpolator0.get();
      assertEquals(64, volatileUnsignedLongType1.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      LinkedHashSet<VolatileUnsignedLongType> linkedHashSet0 = new LinkedHashSet<VolatileUnsignedLongType>();
      linkedHashSet0.add(volatileUnsignedLongType0);
      long[] longArray0 = new long[4];
      ListImg<VolatileUnsignedLongType> listImg0 = new ListImg<VolatileUnsignedLongType>(linkedHashSet0, longArray0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(listImg0);
      // Undeclared exception!
      try { 
        nLinearInterpolator0.get();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<VolatileUnsignedLongType> linkedHashSet0 = new LinkedHashSet<VolatileUnsignedLongType>();
      long[] longArray0 = new long[4];
      ListImg<VolatileUnsignedLongType> listImg0 = new ListImg<VolatileUnsignedLongType>(linkedHashSet0, longArray0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = null;
      try {
        nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(5, biConsumer0, supplier0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      VolatileUnsignedLongType volatileUnsignedLongType1 = nLinearInterpolator0.get();
      assertTrue(volatileUnsignedLongType1.equals((Object)volatileUnsignedLongType0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BiConsumer<Localizable, VolatileUnsignedLongType> biConsumer0 = (BiConsumer<Localizable, VolatileUnsignedLongType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType();
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(volatileUnsignedLongType0, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>(5, biConsumer0, supplier0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator0 = new NLinearInterpolator<VolatileUnsignedLongType>(functionRandomAccessible0, volatileUnsignedLongType0);
      NLinearInterpolator<VolatileUnsignedLongType> nLinearInterpolator1 = nLinearInterpolator0.copy();
      assertFalse(nLinearInterpolator1.equals((Object)nLinearInterpolator0));
  }
}
