/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:45:05 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Vector;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RealInterval;
import net.imglib2.histogram.DiscreteFrequencyDistribution;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.histogram.Real1dBinMapper;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileShortArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.img.sparse.BooleanNtree;
import net.imglib2.img.sparse.NtreeImg;
import net.imglib2.interpolation.randomaccess.NLinearInterpolator;
import net.imglib2.interpolation.randomaccess.NLinearInterpolatorFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.transform.integer.SlicingTransform;
import net.imglib2.transform.integer.TranslationTransform;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.ShortType;
import net.imglib2.type.numeric.integer.Unsigned2BitType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.util.Fraction;
import net.imglib2.view.IntervalView;
import net.imglib2.view.IterableRandomAccessibleInterval;
import net.imglib2.view.SubsampleView;
import net.imglib2.view.TransformView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolatorFactory_ESTest extends NLinearInterpolatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Real1dBinMapper<ShortType> real1dBinMapper0 = new Real1dBinMapper<ShortType>(0.0, 0.0, 752L, false);
      Histogram1d<ShortType> histogram1d0 = new Histogram1d<ShortType>(real1dBinMapper0);
      NLinearInterpolatorFactory<LongType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<LongType>();
      NLinearInterpolator<LongType> nLinearInterpolator0 = nLinearInterpolatorFactory0.create((RandomAccessible<LongType>) histogram1d0, (RealInterval) histogram1d0);
      assertEquals(1, nLinearInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NLinearInterpolatorFactory<Unsigned2BitType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<Unsigned2BitType>();
      ArrayList<VolatileShortArray> arrayList0 = new ArrayList<VolatileShortArray>();
      long[] longArray0 = new long[8];
      Fraction fraction0 = new Fraction();
      PlanarImg<Unsigned2BitType, VolatileShortArray> planarImg0 = new PlanarImg<Unsigned2BitType, VolatileShortArray>(arrayList0, longArray0, fraction0);
      SlicingTransform slicingTransform0 = new SlicingTransform(2147483639, 2);
      TransformView<Unsigned2BitType> transformView0 = new TransformView<Unsigned2BitType>(planarImg0, slicingTransform0);
      // Undeclared exception!
      nLinearInterpolatorFactory0.create((RandomAccessible<Unsigned2BitType>) transformView0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      long[] longArray0 = new long[1];
      BooleanNtree booleanNtree0 = new BooleanNtree(longArray0, longArray0, false);
      Fraction fraction0 = new Fraction(2045L, 2266L);
      NtreeImg<VolatileUnsignedLongType, BooleanNtree> ntreeImg0 = new NtreeImg<VolatileUnsignedLongType, BooleanNtree>(booleanNtree0, longArray0, fraction0);
      NLinearInterpolatorFactory<VolatileUnsignedLongType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<VolatileUnsignedLongType>();
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<VolatileUnsignedLongType>) ntreeImg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.sparse.NtreeRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NLinearInterpolatorFactory<VolatileUnsignedLongType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<VolatileUnsignedLongType>();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<VolatileUnsignedLongType> supplier0 = (Supplier<VolatileUnsignedLongType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<VolatileUnsignedLongType> functionRandomAccessible0 = new FunctionRandomAccessible<VolatileUnsignedLongType>((-2347), biConsumer0, supplier0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<VolatileUnsignedLongType>) functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2347
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Real1dBinMapper<ShortType> real1dBinMapper0 = new Real1dBinMapper<ShortType>(0.0, 0.0, 752L, false);
      Histogram1d<ShortType> histogram1d0 = new Histogram1d<ShortType>(real1dBinMapper0);
      DiscreteFrequencyDistribution discreteFrequencyDistribution0 = histogram1d0.dfd();
      NLinearInterpolatorFactory<LongType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<LongType>();
      NLinearInterpolator<LongType> nLinearInterpolator0 = nLinearInterpolatorFactory0.create((RandomAccessible<LongType>) discreteFrequencyDistribution0);
      assertEquals(1, nLinearInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NLinearInterpolatorFactory<IntType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<IntType>();
      long[] longArray0 = new long[2];
      IntType intType0 = new IntType();
      ListImg<IntType> listImg0 = new ListImg<IntType>(longArray0, intType0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<IntType>) listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NLinearInterpolatorFactory<BoolType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<BoolType>();
      Vector<BoolType> vector0 = new Vector<BoolType>();
      long[] longArray0 = new long[7];
      ListImg<BoolType> listImg0 = new ListImg<BoolType>(vector0, longArray0);
      TranslationTransform translationTransform0 = new TranslationTransform(1735);
      TransformView<BoolType> transformView0 = new TransformView<BoolType>(listImg0, translationTransform0);
      IntervalView<BoolType> intervalView0 = new IntervalView<BoolType>(transformView0, listImg0);
      IterableRandomAccessibleInterval<BoolType> iterableRandomAccessibleInterval0 = new IterableRandomAccessibleInterval<BoolType>(intervalView0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<BoolType>) iterableRandomAccessibleInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.transform.integer.TranslationTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NLinearInterpolatorFactory<FloatType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<FloatType>();
      long[] longArray0 = new long[2];
      IntervalView<FloatType> intervalView0 = new IntervalView<FloatType>((RandomAccessible<FloatType>) null, longArray0, longArray0);
      SubsampleView<FloatType> subsampleView0 = new SubsampleView<FloatType>(intervalView0, longArray0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<FloatType>) subsampleView0, (RealInterval) intervalView0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.IntervalView", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      NLinearInterpolatorFactory<ByteType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<ByteType>();
      BiConsumer<Localizable, ByteType> biConsumer0 = (BiConsumer<Localizable, ByteType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ByteType> supplier0 = (Supplier<ByteType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<ByteType> functionRandomAccessible0 = new FunctionRandomAccessible<ByteType>((-606), biConsumer0, supplier0);
      long[] longArray0 = new long[0];
      IntervalView<ByteType> intervalView0 = new IntervalView<ByteType>(functionRandomAccessible0, longArray0, longArray0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<ByteType>) intervalView0, (RealInterval) intervalView0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -606
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NLinearInterpolatorFactory<ARGBType> nLinearInterpolatorFactory0 = new NLinearInterpolatorFactory<ARGBType>();
      ArrayDeque<ARGBType> arrayDeque0 = new ArrayDeque<ARGBType>();
      long[] longArray0 = new long[1];
      ListImg<ARGBType> listImg0 = new ListImg<ARGBType>(arrayDeque0, longArray0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorFactory0.create((RandomAccessible<ARGBType>) listImg0, (RealInterval) listImg0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
