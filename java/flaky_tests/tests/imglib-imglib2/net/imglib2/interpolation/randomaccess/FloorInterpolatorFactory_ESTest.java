/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:13:02 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.FinalRealInterval;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealInterval;
import net.imglib2.RealPoint;
import net.imglib2.interpolation.randomaccess.FloorInterpolator;
import net.imglib2.interpolation.randomaccess.FloorInterpolatorFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.util.Grid;
import net.imglib2.view.IntervalView;
import net.imglib2.view.StackView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FloorInterpolatorFactory_ESTest extends FloorInterpolatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FloorInterpolatorFactory<StackView<Object>> floorInterpolatorFactory0 = new FloorInterpolatorFactory<StackView<Object>>();
      Supplier<StackView<Object>> supplier0 = (Supplier<StackView<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<StackView<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<StackView<Object>>(0, (BiConsumer<Localizable, ? super StackView<Object>>) null, supplier0);
      long[] longArray0 = new long[1];
      IntervalView<StackView<Object>> intervalView0 = new IntervalView<StackView<Object>>(functionRandomAccessible0, longArray0, longArray0);
      FloorInterpolator<StackView<Object>> floorInterpolator0 = floorInterpolatorFactory0.create((RandomAccessible<StackView<Object>>) functionRandomAccessible0, (RealInterval) intervalView0);
      assertEquals(0, floorInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<RealPoint>> supplier0 = (Supplier<RandomAccessibleInterval<RealPoint>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<RealPoint>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<RealPoint>>(1619, biConsumer0, supplier0);
      double[] doubleArray0 = new double[2];
      FinalRealInterval finalRealInterval0 = FinalRealInterval.createMinMax(doubleArray0);
      FloorInterpolatorFactory<RandomAccessibleInterval<RealPoint>> floorInterpolatorFactory0 = new FloorInterpolatorFactory<RandomAccessibleInterval<RealPoint>>();
      FloorInterpolator<RandomAccessibleInterval<RealPoint>> floorInterpolator0 = floorInterpolatorFactory0.create((RandomAccessible<RandomAccessibleInterval<RealPoint>>) functionRandomAccessible0, (RealInterval) finalRealInterval0);
      assertEquals(1619, floorInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FloorInterpolatorFactory<StackView<Object>> floorInterpolatorFactory0 = new FloorInterpolatorFactory<StackView<Object>>();
      Supplier<StackView<Object>> supplier0 = (Supplier<StackView<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<StackView<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<StackView<Object>>(0, (BiConsumer<Localizable, ? super StackView<Object>>) null, supplier0);
      long[] longArray0 = new long[1];
      IntervalView<StackView<Object>> intervalView0 = new IntervalView<StackView<Object>>(functionRandomAccessible0, longArray0, longArray0);
      FloorInterpolator<StackView<Object>> floorInterpolator0 = floorInterpolatorFactory0.create((RandomAccessible<StackView<Object>>) intervalView0);
      assertEquals(0, floorInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FloorInterpolatorFactory<Grid.CellIntervals> floorInterpolatorFactory0 = new FloorInterpolatorFactory<Grid.CellIntervals>();
      BiConsumer<Localizable, Grid.CellIntervals> biConsumer0 = (BiConsumer<Localizable, Grid.CellIntervals>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Grid.CellIntervals> supplier0 = (Supplier<Grid.CellIntervals>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Grid.CellIntervals> functionRandomAccessible0 = new FunctionRandomAccessible<Grid.CellIntervals>(787, biConsumer0, supplier0);
      FloorInterpolator<Grid.CellIntervals> floorInterpolator0 = floorInterpolatorFactory0.create((RandomAccessible<Grid.CellIntervals>) functionRandomAccessible0);
      assertEquals(787, floorInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FloorInterpolatorFactory<Object> floorInterpolatorFactory0 = new FloorInterpolatorFactory<Object>();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>((-3241), biConsumer0, supplier0);
      // Undeclared exception!
      try { 
        floorInterpolatorFactory0.create((RandomAccessible<Object>) functionRandomAccessible0, (RealInterval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3241
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FloorInterpolatorFactory<Grid.CellIntervals> floorInterpolatorFactory0 = new FloorInterpolatorFactory<Grid.CellIntervals>();
      // Undeclared exception!
      try { 
        floorInterpolatorFactory0.create((RandomAccessible<Grid.CellIntervals>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.FloorInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FloorInterpolatorFactory<RandomAccessibleInterval<Object>> floorInterpolatorFactory0 = new FloorInterpolatorFactory<RandomAccessibleInterval<Object>>();
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[2];
      IntervalView<RandomAccessibleInterval<Object>> intervalView0 = new IntervalView<RandomAccessibleInterval<Object>>((RandomAccessible<RandomAccessibleInterval<Object>>) null, longArray0, longArray1);
      // Undeclared exception!
      try { 
        floorInterpolatorFactory0.create((RandomAccessible<RandomAccessibleInterval<Object>>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FloorInterpolatorFactory<Grid.CellIntervals> floorInterpolatorFactory0 = new FloorInterpolatorFactory<Grid.CellIntervals>();
      Supplier<Grid.CellIntervals> supplier0 = (Supplier<Grid.CellIntervals>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Grid.CellIntervals> functionRandomAccessible0 = new FunctionRandomAccessible<Grid.CellIntervals>((-1290), (BiConsumer<Localizable, ? super Grid.CellIntervals>) null, supplier0);
      // Undeclared exception!
      try { 
        floorInterpolatorFactory0.create((RandomAccessible<Grid.CellIntervals>) functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1290
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FloorInterpolatorFactory<StackView<Grid.CellIntervals>> floorInterpolatorFactory0 = new FloorInterpolatorFactory<StackView<Grid.CellIntervals>>();
      // Undeclared exception!
      try { 
        floorInterpolatorFactory0.create((RandomAccessible<StackView<Grid.CellIntervals>>) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.FloorInterpolator", e);
      }
  }
}
