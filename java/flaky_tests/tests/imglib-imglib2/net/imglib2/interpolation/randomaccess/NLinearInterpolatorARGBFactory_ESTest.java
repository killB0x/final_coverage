/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:52:37 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RealInterval;
import net.imglib2.RealRandomAccessible;
import net.imglib2.interpolation.randomaccess.NLinearInterpolatorARGBFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.numeric.ARGBType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolatorARGBFactory_ESTest extends NLinearInterpolatorARGBFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBType> supplier0 = (Supplier<ARGBType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBType>(4895, biConsumer0, supplier0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) functionRandomAccessible0, (RealInterval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      RealRandomAccessible<ARGBType> realRandomAccessible0 = (RealRandomAccessible<ARGBType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      RandomAccessibleOnRealRandomAccessible<ARGBType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBType>(realRandomAccessible0);
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[7];
      IntervalView<ARGBType> intervalView0 = new IntervalView<ARGBType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray1);
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) intervalView0, (RealInterval) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBType> supplier0 = (Supplier<ARGBType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBType>(1468, biConsumer0, supplier0);
      // Undeclared exception!
      nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) functionRandomAccessible0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBType> supplier0 = (Supplier<ARGBType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<ARGBType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBType>((-1214), biConsumer0, supplier0);
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1214
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      RealRandomAccessible<ARGBType> realRandomAccessible0 = (RealRandomAccessible<ARGBType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(410).when(realRandomAccessible0).numDimensions();
      RandomAccessibleOnRealRandomAccessible<ARGBType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBType>(realRandomAccessible0);
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[7];
      IntervalView<ARGBType> intervalView0 = new IntervalView<ARGBType>(randomAccessibleOnRealRandomAccessible0, longArray0, longArray1);
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolatorARGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NLinearInterpolatorARGBFactory nLinearInterpolatorARGBFactory0 = new NLinearInterpolatorARGBFactory();
      // Undeclared exception!
      try { 
        nLinearInterpolatorARGBFactory0.create((RandomAccessible<ARGBType>) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolatorARGB", e);
      }
  }
}
