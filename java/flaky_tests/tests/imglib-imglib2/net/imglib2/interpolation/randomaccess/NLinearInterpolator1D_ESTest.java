/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:30:37 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.interpolation.randomaccess.NLinearInterpolator1D;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolator1D_ESTest extends NLinearInterpolator1D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, aRGBDoubleType0).when(supplier0).get();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier1).get();
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier1, 4);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 4;
      pointSample0.setPositionAndGet(longArray0);
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, pointSample0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(realRandomAccessible0).numDimensions();
      doReturn(realPointSample0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      ARGBDoubleType aRGBDoubleType1 = nLinearInterpolator1D0.get();
      assertEquals(0.0, aRGBDoubleType1.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 65;
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, doubleArray0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(65).when(realRandomAccessible0).numDimensions();
      doReturn(realPointSample0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1930.83377), 0.0, (-1930.83377), (-1.0));
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      nLinearInterpolator1D0.fillWeights();
      assertEquals(1, nLinearInterpolator1D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType1, (Object) null).when(supplier0).get();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier1, 4);
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, pointSample0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(realRandomAccessible0).numDimensions();
      doReturn(realPointSample0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType1);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>((Supplier<ARGBDoubleType>) null, 6);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(2094).when(realRandomAccessible0).numDimensions();
      doReturn(realPointSample0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      SubsampleView<ARGBDoubleType> subsampleView0 = new SubsampleView<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, 0L);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(subsampleView0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.get();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.view.SubsampleView$SubsampleRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(1516).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess<ARGBDoubleType>) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.fillWeights();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.fillWeights();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2633, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2633, 2633, (-1499.76222), (-1499.76222));
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(nLinearInterpolator1D0);
      nLinearInterpolator1D1.copy();
      nLinearInterpolator1D0.copy();
      // Undeclared exception!
      nLinearInterpolator1D0.copy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator1D0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = null;
      try {
        nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(nLinearInterpolator1D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(3942, biConsumer0, supplier0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(4.0, (-2296.233410938225), 10.0, 4.0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(862).when(realRandomAccessible0).numDimensions();
      doReturn(nLinearInterpolator1D0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = null;
      try {
        nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, (ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, biConsumer0, supplier0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-311)).when(realRandomAccessible0).numDimensions();
      doReturn(nLinearInterpolator1D0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = null;
      try {
        nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -311
         //
         verifyException("net.imglib2.position.transform.AbstractPositionableTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, 287);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0, 287).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null, realPointSample0, (RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 2136.3, (-72.927899701), 2136.3);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible1 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = null;
      try {
        nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2147483648
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible1 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn((-2931)).when(realRandomAccessible1).numDimensions();
      doReturn(nLinearInterpolator1D0).when(realRandomAccessible1).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible1 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible1);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D1 = null;
      try {
        nLinearInterpolator1D1 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator1D", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      Supplier<Object> supplier1 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<Object> pointSample0 = new PointSample<Object>(supplier1, 4);
      RealPointSample<ARGBDoubleType> realPointSample0 = new RealPointSample<ARGBDoubleType>(supplier0, pointSample0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(realRandomAccessible0).numDimensions();
      doReturn(realPointSample0, realPointSample0).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0);
      assertEquals(1, nLinearInterpolator1D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = null;
      try {
        nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator1D<ARGBDoubleType> nLinearInterpolator1D0 = new NLinearInterpolator1D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      int int0 = nLinearInterpolator1D0.numDimensions();
      assertEquals(1, int0);
  }
}
