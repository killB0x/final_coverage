/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:00:40 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.Interval;
import net.imglib2.Localizable;
import net.imglib2.PointSample;
import net.imglib2.RandomAccessible;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.RealRandomAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.list.ListImg;
import net.imglib2.img.list.ListImgFactory;
import net.imglib2.interpolation.Interpolant;
import net.imglib2.interpolation.InterpolatorFactory;
import net.imglib2.interpolation.randomaccess.NearestNeighborInterpolator;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.util.Grid;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NearestNeighborInterpolator_ESTest extends NearestNeighborInterpolator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(944);
      ListImgFactory<Object> listImgFactory0 = new ListImgFactory<Object>(integer0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1671;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      Interval interval0 = grid_CellIntervals0.firstElement();
      ListImg<Object> listImg0 = listImgFactory0.create((Dimensions) interval0);
      Supplier<RandomAccessibleInterval<Object>> supplier0 = (Supplier<RandomAccessibleInterval<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(listImg0).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Object>>(1671, biConsumer0, supplier0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<RandomAccessibleInterval<Object>>(functionRandomAccessible0);
      RandomAccessibleInterval<Object> randomAccessibleInterval0 = nearestNeighborInterpolator0.get();
      assertNotNull(randomAccessibleInterval0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<Object> functionRandomAccessible0 = new FunctionRandomAccessible<Object>(0, biConsumer0, supplier0);
      NearestNeighborInterpolator<Object> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<Object>(functionRandomAccessible0);
      NearestNeighborInterpolator<Object> nearestNeighborInterpolator1 = nearestNeighborInterpolator0.copy();
      assertNotSame(nearestNeighborInterpolator0, nearestNeighborInterpolator1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<Integer> functionRandomAccessible0 = new FunctionRandomAccessible<Integer>(0, (BiConsumer<Localizable, ? super Integer>) null, supplier0);
      NearestNeighborInterpolator<Integer> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<Integer>(functionRandomAccessible0);
      // Undeclared exception!
      try { 
        nearestNeighborInterpolator0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(2052);
      InterpolatorFactory<Integer, Object> interpolatorFactory0 = (InterpolatorFactory<Integer, Object>) mock(InterpolatorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RealRandomAccess) null).when(interpolatorFactory0).create(any());
      Interpolant<Integer, Object> interpolant0 = new Interpolant<Integer, Object>(integer0, interpolatorFactory0, 2052);
      RandomAccessibleOnRealRandomAccessible<Integer> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<Integer>(interpolant0);
      NearestNeighborInterpolator<Integer> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<Integer>(randomAccessibleOnRealRandomAccessible0);
      // Undeclared exception!
      try { 
        nearestNeighborInterpolator0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<Object>> supplier0 = (Supplier<RandomAccessibleInterval<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Object>>(5220, biConsumer0, supplier0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<RandomAccessibleInterval<Object>>(functionRandomAccessible0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator1 = new NearestNeighborInterpolator<RandomAccessibleInterval<Object>>(nearestNeighborInterpolator0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator2 = new NearestNeighborInterpolator<RandomAccessibleInterval<Object>>(nearestNeighborInterpolator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NearestNeighborInterpolator<PointSample<VolatileFloatArray>> nearestNeighborInterpolator0 = null;
      try {
        nearestNeighborInterpolator0 = new NearestNeighborInterpolator<PointSample<VolatileFloatArray>>((NearestNeighborInterpolator<PointSample<VolatileFloatArray>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NearestNeighborInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NearestNeighborInterpolator<Object> nearestNeighborInterpolator0 = null;
      try {
        nearestNeighborInterpolator0 = new NearestNeighborInterpolator<Object>((RandomAccessible<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NearestNeighborInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<PointSample<Integer>> supplier0 = (Supplier<PointSample<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<PointSample<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<PointSample<Integer>>((-725), biConsumer0, supplier0);
      NearestNeighborInterpolator<PointSample<Integer>> nearestNeighborInterpolator0 = null;
      try {
        nearestNeighborInterpolator0 = new NearestNeighborInterpolator<PointSample<Integer>>(functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -725
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(944);
      ListImgFactory<Object> listImgFactory0 = new ListImgFactory<Object>(integer0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1671;
      Grid grid0 = new Grid(longArray0, longArray0, longArray0);
      Grid.CellIntervals grid_CellIntervals0 = grid0.new CellIntervals();
      Interval interval0 = grid_CellIntervals0.firstElement();
      ListImg<Object> listImg0 = listImgFactory0.create((Dimensions) interval0);
      Supplier<RandomAccessibleInterval<Object>> supplier0 = (Supplier<RandomAccessibleInterval<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(listImg0, listImg0).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Object>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Object>>(1671, biConsumer0, supplier0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<RandomAccessibleInterval<Object>>(functionRandomAccessible0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Object>> nearestNeighborInterpolator1 = nearestNeighborInterpolator0.copy();
      assertNotSame(nearestNeighborInterpolator1, nearestNeighborInterpolator0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<RandomAccessibleInterval<Integer>> supplier0 = (Supplier<RandomAccessibleInterval<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<RandomAccessibleInterval<Integer>> functionRandomAccessible0 = new FunctionRandomAccessible<RandomAccessibleInterval<Integer>>(0, biConsumer0, supplier0);
      NearestNeighborInterpolator<RandomAccessibleInterval<Integer>> nearestNeighborInterpolator0 = new NearestNeighborInterpolator<RandomAccessibleInterval<Integer>>(functionRandomAccessible0);
      RandomAccessibleInterval<Integer> randomAccessibleInterval0 = nearestNeighborInterpolator0.get();
      assertNull(randomAccessibleInterval0);
  }
}
