/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:45:34 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.PointSampleList;
import net.imglib2.RandomAccessible;
import net.imglib2.RealInterval;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.interpolation.randomaccess.LanczosInterpolatorFactory;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.numeric.integer.IntType;
import net.imglib2.type.numeric.integer.Unsigned4BitType;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.view.IntervalView;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import net.imglib2.view.SubsampleView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LanczosInterpolatorFactory_ESTest extends LanczosInterpolatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>(0, true);
      assertTrue(lanczosInterpolatorFactory0.getClipping());
      
      lanczosInterpolatorFactory0.setClipping(false);
      assertFalse(lanczosInterpolatorFactory0.getClipping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LanczosInterpolatorFactory<Unsigned4BitType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<Unsigned4BitType>(2405.0, 0.0);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<Unsigned4BitType> functionRandomAccessible0 = new FunctionRandomAccessible<Unsigned4BitType>(3003, biConsumer0, (Supplier<Unsigned4BitType>) null);
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<Unsigned4BitType>) functionRandomAccessible0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>((-4171), 3525.0676360880702, (-4171));
      assertEquals((-4171), lanczosInterpolatorFactory0.getAlpha());
      assertTrue(lanczosInterpolatorFactory0.getClipping());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>(3, false);
      boolean boolean0 = lanczosInterpolatorFactory0.getClipping();
      assertFalse(boolean0);
      assertEquals(3, lanczosInterpolatorFactory0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>(3, false);
      assertEquals(3, lanczosInterpolatorFactory0.getAlpha());
      
      lanczosInterpolatorFactory0.setAlpha(0);
      int int0 = lanczosInterpolatorFactory0.getAlpha();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>((-1), false);
      int int0 = lanczosInterpolatorFactory0.getAlpha();
      assertFalse(lanczosInterpolatorFactory0.getClipping());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LanczosInterpolatorFactory<UnsignedVariableBitLengthType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<UnsignedVariableBitLengthType>(1804, 1804, 1804);
      RealRandomAccessible<UnsignedVariableBitLengthType> realRandomAccessible0 = (RealRandomAccessible<UnsignedVariableBitLengthType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<UnsignedVariableBitLengthType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<UnsignedVariableBitLengthType>(realRandomAccessible0);
      // Undeclared exception!
      lanczosInterpolatorFactory0.create((RandomAccessible<UnsignedVariableBitLengthType>) randomAccessibleOnRealRandomAccessible0, (RealInterval) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LanczosInterpolatorFactory<UnsignedByteType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<UnsignedByteType>();
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FunctionRandomAccessible<UnsignedByteType> functionRandomAccessible0 = new FunctionRandomAccessible<UnsignedByteType>((-1404), biConsumer0, (Supplier<UnsignedByteType>) null);
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<UnsignedByteType>) functionRandomAccessible0, (RealInterval) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1404
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LanczosInterpolatorFactory<IntType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<IntType>(1.0, 1.0);
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[4];
      IntervalView<IntType> intervalView0 = new IntervalView<IntType>((RandomAccessible<IntType>) null, longArray0, longArray1);
      SubsampleView<IntType> subsampleView0 = new SubsampleView<IntType>(intervalView0, longArray1);
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<IntType>) subsampleView0, (RealInterval) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LanczosInterpolatorFactory<UnsignedVariableBitLengthType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<UnsignedVariableBitLengthType>(1198, 1198, 1198);
      RealRandomAccessible<UnsignedVariableBitLengthType> realRandomAccessible0 = (RealRandomAccessible<UnsignedVariableBitLengthType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<UnsignedVariableBitLengthType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<UnsignedVariableBitLengthType>(realRandomAccessible0);
      // Undeclared exception!
      lanczosInterpolatorFactory0.create((RandomAccessible<UnsignedVariableBitLengthType>) randomAccessibleOnRealRandomAccessible0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LanczosInterpolatorFactory<UnsignedVariableBitLengthType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<UnsignedVariableBitLengthType>();
      FunctionRandomAccessible<UnsignedVariableBitLengthType> functionRandomAccessible0 = new FunctionRandomAccessible<UnsignedVariableBitLengthType>((-3031), (BiConsumer<Localizable, ? super UnsignedVariableBitLengthType>) null, (Supplier<UnsignedVariableBitLengthType>) null);
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<UnsignedVariableBitLengthType>) functionRandomAccessible0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3031
         //
         verifyException("net.imglib2.AbstractLocalizable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>();
      BiConsumer<Localizable, DoubleType> biConsumer0 = (BiConsumer<Localizable, DoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<DoubleType> supplier0 = (Supplier<DoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<DoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<DoubleType>(14, biConsumer0, supplier0);
      PointSampleList<DoubleType> pointSampleList0 = new PointSampleList<DoubleType>(0);
      IntervalView<DoubleType> intervalView0 = new IntervalView<DoubleType>(functionRandomAccessible0, pointSampleList0);
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<DoubleType>) intervalView0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.position.transform.FloorOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LanczosInterpolatorFactory<DoubleType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<DoubleType>(0, true);
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      DoubleAccess doubleAccess0 = mock(DoubleAccess.class, new ViolatedAssumptionAnswer());
      DoubleType doubleType0 = new DoubleType(doubleAccess0);
      Supplier<DoubleType> supplier0 = (Supplier<DoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(doubleType0).when(supplier0).get();
      FunctionRandomAccessible<DoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<DoubleType>(0, biConsumer0, supplier0);
      lanczosInterpolatorFactory0.create((RandomAccessible<DoubleType>) functionRandomAccessible0);
      assertTrue(lanczosInterpolatorFactory0.getClipping());
      assertEquals(0, lanczosInterpolatorFactory0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LanczosInterpolatorFactory<Unsigned4BitType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<Unsigned4BitType>(2405.0, 0.0);
      int int0 = lanczosInterpolatorFactory0.getAlpha();
      assertEquals(3, int0);
      assertTrue(lanczosInterpolatorFactory0.getClipping());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LanczosInterpolatorFactory<Unsigned4BitType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<Unsigned4BitType>(3818, 3818, 3818);
      boolean boolean0 = lanczosInterpolatorFactory0.getClipping();
      assertTrue(boolean0);
      assertEquals(3818, lanczosInterpolatorFactory0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LanczosInterpolatorFactory<UnsignedVariableBitLengthType> lanczosInterpolatorFactory0 = new LanczosInterpolatorFactory<UnsignedVariableBitLengthType>();
      // Undeclared exception!
      try { 
        lanczosInterpolatorFactory0.create((RandomAccessible<UnsignedVariableBitLengthType>) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.LanczosInterpolator", e);
      }
  }
}
