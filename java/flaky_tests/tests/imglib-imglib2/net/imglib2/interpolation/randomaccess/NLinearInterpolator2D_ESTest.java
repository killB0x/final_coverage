/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:38:21 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.interpolation.randomaccess.NLinearInterpolator2D;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.numeric.ARGBDoubleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolator2D_ESTest extends NLinearInterpolator2D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2, 2, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0);
      nLinearInterpolator2D0.move((-4328.7050271801), 1);
      // Undeclared exception!
      try { 
        nLinearInterpolator2D0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2921.499413905, 2921.499413905, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      nLinearInterpolator2D0.setPosition(doubleArray0);
      ARGBDoubleType aRGBDoubleType1 = nLinearInterpolator2D0.get();
      assertEquals(2921.499413905, aRGBDoubleType1.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2, 2, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0);
      nLinearInterpolator2D0.fillWeights();
      assertEquals(2, nLinearInterpolator2D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2, 2, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D1 = new NLinearInterpolator2D<ARGBDoubleType>(nLinearInterpolator2D0);
      assertFalse(nLinearInterpolator2D1.equals((Object)nLinearInterpolator2D0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, biConsumer0, supplier0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator2D0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2, 2, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator2D0.fillWeights();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2072, biConsumer0, supplier0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType1);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D1 = new NLinearInterpolator2D<ARGBDoubleType>(nLinearInterpolator2D0);
      nLinearInterpolator2D1.move((float) 2072, 1840);
      assertFalse(nLinearInterpolator2D1.equals((Object)nLinearInterpolator2D0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((ARGBDoubleType) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = null;
      try {
        nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, (ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = null;
      try {
        nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      int int0 = nLinearInterpolator2D0.numDimensions();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BiConsumer<Localizable, ARGBDoubleType> biConsumer0 = (BiConsumer<Localizable, ARGBDoubleType>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2, 2, 2, 2);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, (Object) null, (Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2, biConsumer0, supplier0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D0 = new NLinearInterpolator2D<ARGBDoubleType>(functionRandomAccessible0);
      NLinearInterpolator2D<ARGBDoubleType> nLinearInterpolator2D1 = nLinearInterpolator2D0.copy();
      assertEquals(2, nLinearInterpolator2D1.numDimensions());
  }
}
