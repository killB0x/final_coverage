/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:47:51 GMT 2022
 */

package net.imglib2.interpolation.randomaccess;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import net.imglib2.Localizable;
import net.imglib2.RandomAccessible;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import net.imglib2.RealRandomAccessible;
import net.imglib2.interpolation.randomaccess.NLinearInterpolator3D;
import net.imglib2.position.FunctionRandomAccessible;
import net.imglib2.type.logic.BoolType;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.view.RandomAccessibleOnRealRandomAccessible;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NLinearInterpolator3D_ESTest extends NLinearInterpolator3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(3, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 3;
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.setPositionAndGet(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(3, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 3;
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.setPositionAndGet(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0, 0, 0, 0);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(265, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      nLinearInterpolator3D0.bck(0);
      nLinearInterpolator3D0.fillWeights();
      assertEquals(3, nLinearInterpolator3D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-354.01075318), 0, (-354.01075318), (-354.01075318));
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D1 = new NLinearInterpolator3D<ARGBDoubleType>(nLinearInterpolator3D0);
      assertFalse(nLinearInterpolator3D1.equals((Object)nLinearInterpolator3D0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BiConsumer<Localizable, Object> biConsumer0 = (BiConsumer<Localizable, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(16, biConsumer0, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      ARGBDoubleType aRGBDoubleType1 = nLinearInterpolator3D0.get();
      assertEquals(0.0, aRGBDoubleType1.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(3, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0, 0, 0, 0);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.fillWeights();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 519.0456238, 0.0, 0.0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      // Undeclared exception!
      try { 
        nLinearInterpolator3D0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D1 = null;
      try {
        nLinearInterpolator3D1 = new NLinearInterpolator3D<ARGBDoubleType>(nLinearInterpolator3D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.view.RandomAccessibleOnRealRandomAccessible$RandomAccessOnRealRandomAccessible", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0, 0, 0, 0);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(2074, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      assertEquals(3, nLinearInterpolator3D0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoolType boolType0 = new BoolType();
      NLinearInterpolator3D<BoolType> nLinearInterpolator3D0 = null;
      try {
        nLinearInterpolator3D0 = new NLinearInterpolator3D<BoolType>((RandomAccessible<BoolType>) null, boolType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.randomaccess.NLinearInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      double[] doubleArray0 = new double[4];
      RealPointSample<ARGBDoubleType> realPointSample0 = RealPointSample.wrap(aRGBDoubleType0, doubleArray0);
      RealRandomAccessible<ARGBDoubleType> realRandomAccessible0 = (RealRandomAccessible<ARGBDoubleType>) mock(RealRandomAccessible.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realRandomAccessible0).numDimensions();
      doReturn((RealRandomAccess) null, realPointSample0, (RealRandomAccess) null).when(realRandomAccessible0).realRandomAccess();
      RandomAccessibleOnRealRandomAccessible<ARGBDoubleType> randomAccessibleOnRealRandomAccessible0 = new RandomAccessibleOnRealRandomAccessible<ARGBDoubleType>(realRandomAccessible0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D1 = new NLinearInterpolator3D<ARGBDoubleType>(randomAccessibleOnRealRandomAccessible0);
      assertFalse(nLinearInterpolator3D1.equals((Object)nLinearInterpolator3D0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0, 0, 0, 0);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(265, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      int int0 = nLinearInterpolator3D0.numDimensions();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(0, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = null;
      try {
        nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.position.FunctionRandomAccessible$FunctionRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(1428, 1428, 1428, 1428);
      Supplier<ARGBDoubleType> supplier0 = (Supplier<ARGBDoubleType>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(aRGBDoubleType0, aRGBDoubleType0).when(supplier0).get();
      FunctionRandomAccessible<ARGBDoubleType> functionRandomAccessible0 = new FunctionRandomAccessible<ARGBDoubleType>(1428, (BiConsumer<Localizable, ? super ARGBDoubleType>) null, supplier0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D0 = new NLinearInterpolator3D<ARGBDoubleType>(functionRandomAccessible0, aRGBDoubleType0);
      NLinearInterpolator3D<ARGBDoubleType> nLinearInterpolator3D1 = nLinearInterpolator3D0.copy();
      assertNotSame(nLinearInterpolator3D1, nLinearInterpolator3D0);
  }
}
