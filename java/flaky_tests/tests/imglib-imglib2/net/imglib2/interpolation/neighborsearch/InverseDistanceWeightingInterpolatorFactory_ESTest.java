/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:50:42 GMT 2022
 */

package net.imglib2.interpolation.neighborsearch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.Dimensions;
import net.imglib2.FinalInterval;
import net.imglib2.KDTree;
import net.imglib2.PointSampleList;
import net.imglib2.RealInterval;
import net.imglib2.RealPointSampleList;
import net.imglib2.img.cell.CellImg;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.img.list.ListImg;
import net.imglib2.interpolation.neighborsearch.InverseDistanceWeightingInterpolator;
import net.imglib2.interpolation.neighborsearch.InverseDistanceWeightingInterpolatorFactory;
import net.imglib2.neighborsearch.KNearestNeighborSearch;
import net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval;
import net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree;
import net.imglib2.type.logic.NativeBoolType;
import net.imglib2.type.numeric.integer.LongType;
import net.imglib2.type.numeric.integer.Unsigned12BitType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileIntType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InverseDistanceWeightingInterpolatorFactory_ESTest extends InverseDistanceWeightingInterpolatorFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<Unsigned12BitType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<Unsigned12BitType>((-924.708));
      Unsigned12BitType unsigned12BitType0 = new Unsigned12BitType(0L);
      int[] intArray0 = new int[8];
      intArray0[0] = 65;
      intArray0[1] = 65;
      intArray0[2] = 65;
      intArray0[3] = 65;
      intArray0[4] = 65;
      intArray0[5] = 65;
      intArray0[6] = 65;
      intArray0[7] = 4119;
      CellImgFactory<Unsigned12BitType> cellImgFactory0 = new CellImgFactory<Unsigned12BitType>(unsigned12BitType0, intArray0);
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      CellImg<Unsigned12BitType, ?> cellImg0 = cellImgFactory0.create((Dimensions) finalInterval0);
      KNearestNeighborSearchOnIterableRealInterval<Unsigned12BitType> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<Unsigned12BitType>(cellImg0, 65);
      InverseDistanceWeightingInterpolator<Unsigned12BitType> inverseDistanceWeightingInterpolator0 = inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<Unsigned12BitType>) kNearestNeighborSearchOnIterableRealInterval0, (RealInterval) finalInterval0);
      assertEquals(3, inverseDistanceWeightingInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<UnsignedLongType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<UnsignedLongType>();
      long[] longArray0 = new long[1];
      longArray0[0] = 1768L;
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(1768L);
      ListImg<UnsignedLongType> listImg0 = new ListImg<UnsignedLongType>(longArray0, unsignedLongType0);
      KNearestNeighborSearchOnIterableRealInterval<UnsignedLongType> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<UnsignedLongType>(listImg0, 67);
      InverseDistanceWeightingInterpolator<UnsignedLongType> inverseDistanceWeightingInterpolator0 = inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<UnsignedLongType>) kNearestNeighborSearchOnIterableRealInterval0);
      assertEquals(1, inverseDistanceWeightingInterpolator0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<NativeBoolType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<NativeBoolType>();
      RealPointSampleList<NativeBoolType> realPointSampleList0 = new RealPointSampleList<NativeBoolType>(4109);
      KDTree<NativeBoolType> kDTree0 = new KDTree<NativeBoolType>(realPointSampleList0);
      KNearestNeighborSearchOnKDTree<NativeBoolType> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<NativeBoolType>(kDTree0, 4109);
      KNearestNeighborSearchOnKDTree<NativeBoolType> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      // Undeclared exception!
      inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<NativeBoolType>) kNearestNeighborSearchOnKDTree1, (RealInterval) kDTree0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<FloatType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<FloatType>();
      // Undeclared exception!
      try { 
        inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<FloatType>) null, (RealInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.interpolation.neighborsearch.InverseDistanceWeightingInterpolatorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<LongType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<LongType>(0.0);
      PointSampleList<LongType> pointSampleList0 = new PointSampleList<LongType>(4400);
      KDTree<LongType> kDTree0 = new KDTree<LongType>(pointSampleList0);
      KNearestNeighborSearchOnKDTree<LongType> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<LongType>(kDTree0, 4400);
      KNearestNeighborSearchOnKDTree<LongType> kNearestNeighborSearchOnKDTree1 = kNearestNeighborSearchOnKDTree0.copy();
      // Undeclared exception!
      inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<LongType>) kNearestNeighborSearchOnKDTree1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<VolatileIntType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<VolatileIntType>();
      RealPointSampleList<VolatileIntType> realPointSampleList0 = new RealPointSampleList<VolatileIntType>(0);
      KNearestNeighborSearchOnIterableRealInterval<VolatileIntType> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<VolatileIntType>(realPointSampleList0, 0);
      // Undeclared exception!
      try { 
        inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<VolatileIntType>) kNearestNeighborSearchOnIterableRealInterval0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<LongType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<LongType>(0.0);
      PointSampleList<LongType> pointSampleList0 = new PointSampleList<LongType>(4400);
      KDTree<LongType> kDTree0 = new KDTree<LongType>(pointSampleList0);
      KNearestNeighborSearchOnKDTree<LongType> kNearestNeighborSearchOnKDTree0 = new KNearestNeighborSearchOnKDTree<LongType>(kDTree0, 4400);
      // Undeclared exception!
      try { 
        inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<LongType>) kNearestNeighborSearchOnKDTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnKDTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InverseDistanceWeightingInterpolatorFactory<NativeBoolType> inverseDistanceWeightingInterpolatorFactory0 = new InverseDistanceWeightingInterpolatorFactory<NativeBoolType>();
      RealPointSampleList<NativeBoolType> realPointSampleList0 = new RealPointSampleList<NativeBoolType>(0);
      KNearestNeighborSearchOnIterableRealInterval<NativeBoolType> kNearestNeighborSearchOnIterableRealInterval0 = new KNearestNeighborSearchOnIterableRealInterval<NativeBoolType>(realPointSampleList0, 0);
      // Undeclared exception!
      try { 
        inverseDistanceWeightingInterpolatorFactory0.create((KNearestNeighborSearch<NativeBoolType>) kNearestNeighborSearchOnIterableRealInterval0, (RealInterval) realPointSampleList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.neighborsearch.KNearestNeighborSearchOnIterableRealInterval", e);
      }
  }
}
