/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:33:15 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.RealLocalizable;
import net.imglib2.RealPointSample;
import net.imglib2.RealRandomAccess;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RealRandomAccess_ESTest extends RealRandomAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, 2);
      Object object0 = realPointSample0.setPositionAndGet(doubleArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[5];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0);
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, pointSample0);
      Supplier<RealPointSample<Object>> supplier2 = (Supplier<RealPointSample<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier2).get();
      float[] floatArray0 = new float[7];
      RealPointSample<RealPointSample<Object>> realPointSample1 = new RealPointSample<RealPointSample<Object>>(supplier2, floatArray0);
      RealPointSample<Object> realPointSample2 = realPointSample1.setPositionAndGet(floatArray0);
      assertSame(realPointSample2, realPointSample0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(supplier0).get();
      double[] doubleArray0 = new double[1];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0, false);
      Object object1 = realPointSample0.setPositionAndGet(doubleArray0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Object object0 = new Object();
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, floatArray0);
      Object object1 = realPointSample0.setPositionAndGet((RealLocalizable) realPointSample0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[8];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>((Supplier<Object>) null, floatArray0);
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealPointSample", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[1];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, floatArray0);
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, 0);
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet((RealLocalizable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.RealRandomAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0, false);
      Supplier<Integer> supplier1 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier1, longArray0, false);
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet((RealLocalizable) pointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Point point0 = new Point(1601);
      PointSample<Integer> pointSample0 = new PointSample<Integer>(supplier0, point0);
      Supplier<Integer> supplier1 = pointSample0.sampleSupplier;
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>(supplier1, doubleArray0);
      Object object0 = realPointSample0.setPositionAndGet((RealLocalizable) pointSample0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[] floatArray0 = new float[19];
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>((Supplier<Object>) null, floatArray0);
      float[] floatArray1 = new float[1];
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet(floatArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      float[] floatArray0 = new float[8];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0, false);
      Object object0 = realPointSample0.setPositionAndGet(floatArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[] floatArray0 = new float[6];
      RealPointSample<Integer> realPointSample0 = new RealPointSample<Integer>((Supplier<Integer>) null, floatArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        realPointSample0.setPositionAndGet(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      RealPointSample<Object> realPointSample0 = new RealPointSample<Object>(supplier0, doubleArray0, false);
      RealRandomAccess<Object> realRandomAccess0 = realPointSample0.copyRealRandomAccess();
      assertNotNull(realRandomAccess0);
  }
}
