/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 10:33:04 GMT 2022
 */

package net.imglib2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import net.imglib2.Dimensions;
import net.imglib2.FinalDimensions;
import net.imglib2.FinalInterval;
import net.imglib2.Point;
import net.imglib2.PointSample;
import net.imglib2.PointSampleList;
import net.imglib2.Positionable;
import net.imglib2.RealPoint;
import net.imglib2.RealPointSample;
import net.imglib2.RealPointSampleList;
import net.imglib2.RealPositionable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.dimension(329);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2219);
      assertNotNull(pointSampleList0);
      assertEquals(2219, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      Point point0 = pointSampleList0.dimensionsAsPoint();
      assertNotNull(point0);
      assertEquals(2219, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2219, point0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.dimensions(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, longArray0.length);
      
      RealPoint realPoint0 = new RealPoint(24);
      assertNotNull(realPoint0);
      assertEquals(24, realPoint0.numDimensions());
      
      // Undeclared exception!
      try { 
        finalInterval0.max((Positionable) realPoint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.max(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.max(4571);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      Supplier<PointSampleList<Object>> supplier0 = (Supplier<PointSampleList<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      PointSample<PointSampleList<Object>> pointSample0 = new PointSample<PointSampleList<Object>>(supplier0, longArray0);
      assertNotNull(pointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(5, longArray0.length);
      
      Supplier<PointSampleList<Object>> supplier1 = pointSample0.sampleSupplier;
      assertSame(supplier1, supplier0);
      assertNotNull(supplier1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      RealPointSample<PointSampleList<Object>> realPointSample0 = new RealPointSample<PointSampleList<Object>>(supplier1, doubleArray0, false);
      assertNotNull(realPointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, pointSample0.numDimensions());
      assertEquals(4, realPointSample0.numDimensions());
      assertEquals(5, longArray0.length);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min((Positionable) realPointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long[] longArray0 = new long[4];
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(329);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(329, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        pointSampleList0.min(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min(2215);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, longArray0.length);
      
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(0);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(0, pointSampleList0.numDimensions());
      
      PointSampleList pointSampleList1 = (PointSampleList)pointSampleList0.iterationOrder();
      assertNotNull(pointSampleList1);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(0, pointSampleList0.numDimensions());
      assertEquals(0, pointSampleList1.numDimensions());
      assertEquals(0L, pointSampleList1.size());
      
      double[] doubleArray0 = new double[2];
      RealPointSample<Object> realPointSample0 = RealPointSample.wrap((Object) pointSampleList1, doubleArray0);
      assertNotNull(realPointSample0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(0, pointSampleList0.numDimensions());
      assertEquals(0, pointSampleList1.numDimensions());
      assertEquals(0L, pointSampleList1.size());
      assertEquals(2, realPointSample0.numDimensions());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMax((RealPositionable) realPointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        finalInterval0.realMax(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMax(1782);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      double double0 = finalInterval0.realMax(0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0, true);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      
      Supplier<RealPointSampleList.RealPointSampleListCursor> supplier0 = (Supplier<RealPointSampleList.RealPointSampleListCursor>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      RealPointSample<RealPointSampleList.RealPointSampleListCursor> realPointSample0 = RealPointSample.wrapSupplier(supplier0, doubleArray0);
      assertNotNull(realPointSample0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, realPointSample0.numDimensions());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMin((RealPositionable) realPointSample0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        finalInterval0.realMin(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMin(2175);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      FinalInterval finalInterval0 = null;
      try {
        finalInterval0 = new FinalInterval(longArray0, longArray1, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = finalInterval0.maxAsDoubleArray();
      assertNotNull(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      assertEquals(2, doubleArray0.length);
      
      finalInterval0.realMin(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long[] longArray0 = new long[3];
      double[] doubleArray0 = new double[3];
      RealPointSample<Object> realPointSample0 = RealPointSample.wrapSupplier((Supplier<Object>) null, doubleArray0);
      assertNotNull(realPointSample0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, doubleArray0.length);
      
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      finalInterval0.realMin((RealPositionable) realPointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      finalInterval0.realMax(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = finalInterval0.maxAsDoubleArray();
      assertNotNull(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
      
      RealPointSample<Object> realPointSample0 = RealPointSample.wrap((Object) finalInterval0, doubleArray0);
      assertNotNull(realPointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
      
      finalInterval0.realMax((RealPositionable) realPointSample0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, realPointSample0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      
      Point point0 = finalInterval0.maxAsPoint();
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(1, longArray0.length);
      
      finalInterval0.min((Positionable) point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      finalInterval0.max(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalDimensions finalDimensions0 = FinalDimensions.wrap(longArray0);
      assertNotNull(finalDimensions0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalDimensions0.numDimensions());
      assertEquals(5, longArray0.length);
      
      Point point0 = finalDimensions0.dimensionsAsPoint();
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalDimensions0.numDimensions());
      assertEquals(5, point0.numDimensions());
      assertEquals(5, longArray0.length);
      
      FinalInterval finalInterval0 = new FinalInterval(finalDimensions0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalDimensions0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      finalInterval0.max((Positionable) point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalDimensions0.numDimensions());
      assertEquals(5, point0.numDimensions());
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2132);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      assertEquals(2132, finalInterval0.numDimensions());
      
      String string0 = finalInterval0.toString();
      assertNotNull(string0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      assertEquals(2132, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1343);
      assertNotNull(pointSampleList0);
      assertEquals(1343, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      double double0 = pointSampleList0.realMin(3);
      assertEquals(1343, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      assertEquals(9.223372036854776E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (-1880L);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      
      double double0 = finalInterval0.realMin(0);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      assertEquals((-1880.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[22];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      
      double double0 = finalInterval0.realMax(19);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[2] = 1L;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      
      double double0 = finalInterval0.realMax(2);
      assertEquals(22, finalInterval0.numDimensions());
      assertEquals(22, longArray0.length);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 1;
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(7, longArray0.length);
      
      long long0 = finalInterval0.min(1);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(7, longArray0.length);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-257L);
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {(-257L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      long long0 = finalInterval0.min(0);
      assertArrayEquals(new long[] {(-257L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      assertEquals((-257L), long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2533L;
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {2533L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, longArray0.length);
      
      long long0 = finalInterval0.max(0);
      assertArrayEquals(new long[] {2533L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, finalInterval0.numDimensions());
      assertEquals(9, longArray0.length);
      assertEquals(2533L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(1);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      
      long long0 = pointSampleList0.dimension(0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1, pointSampleList0.numDimensions());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-933L);
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {(-933L), 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      long long0 = finalInterval0.dimension(0);
      assertArrayEquals(new long[] {(-933L), 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals((-933L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMin((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long[] longArray0 = new long[16];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertEquals(16, finalInterval0.numDimensions());
      assertEquals(16, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMin((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(10);
      assertNotNull(pointSampleList0);
      assertEquals(10, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        pointSampleList0.realMax((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long[] longArray0 = new long[0];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, finalInterval0.numDimensions());
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.realMax((RealPositionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min((Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(1577);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(1577, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        pointSampleList0.max((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(878);
      assertNotNull(pointSampleList0);
      assertEquals(878, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        pointSampleList0.max((Positionable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long[] longArray0 = new long[10];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, finalInterval0.numDimensions());
      assertEquals(10, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.dimensions((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      long long0 = finalInterval0.dimension(1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, finalInterval0.numDimensions());
      assertEquals(6, longArray0.length);
      
      long long0 = finalInterval0.max(1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, finalInterval0.numDimensions());
      assertEquals(6, longArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      finalInterval0.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long[] longArray0 = new long[7];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(7, longArray0.length);
      
      long long0 = finalInterval0.min(1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(7, longArray0.length);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(1);
      assertNotNull(pointSampleList0);
      assertEquals(1, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        pointSampleList0.dimension(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PointSampleList<PointSampleList<Object>> pointSampleList0 = new PointSampleList<PointSampleList<Object>>(2573);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2573, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        pointSampleList0.dimension((-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      finalInterval0.dimensions(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2132);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      assertEquals(2132, finalInterval0.numDimensions());
      
      long[] longArray0 = new long[7];
      // Undeclared exception!
      try { 
        finalInterval0.dimensions(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(2132);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      assertNotNull(finalInterval0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2132, pointSampleList0.numDimensions());
      assertEquals(2132, finalInterval0.numDimensions());
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        finalInterval0.max(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(40);
      assertNotNull(pointSampleList0);
      assertEquals(40, pointSampleList0.numDimensions());
      assertEquals(0L, pointSampleList0.size());
      
      // Undeclared exception!
      try { 
        pointSampleList0.max(40);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long[] longArray0 = new long[6];
      FinalInterval finalInterval0 = new FinalInterval(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, finalInterval0.numDimensions());
      assertEquals(6, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.max((-2051));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(4, longArray0.length);
      
      Point point0 = Point.wrap(longArray0);
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, point0.numDimensions());
      assertEquals(4, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min((Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      
      Point point0 = finalInterval0.minAsPoint();
      assertNotNull(point0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, point0.numDimensions());
      assertEquals(1, longArray0.length);
      
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(833);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(833, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        pointSampleList0.max((Positionable) point0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long[] longArray0 = new long[5];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(2, finalInterval0.numDimensions());
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min(longArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PointSampleList<PointSampleList<Object>> pointSampleList0 = new PointSampleList<PointSampleList<Object>>(2573);
      assertNotNull(pointSampleList0);
      assertEquals(0L, pointSampleList0.size());
      assertEquals(2573, pointSampleList0.numDimensions());
      
      // Undeclared exception!
      try { 
        pointSampleList0.min(2573);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long[] longArray0 = new long[9];
      FinalInterval finalInterval0 = FinalInterval.createMinMax(longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, finalInterval0.numDimensions());
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval0.min((-2861));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = FinalInterval.wrap(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, longArray0.length);
      
      RealPoint realPoint0 = finalInterval0.minAsRealPoint();
      assertNotNull(realPoint0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, finalInterval0.numDimensions());
      assertEquals(1, realPoint0.numDimensions());
      assertEquals(1, longArray0.length);
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0);
      assertNotSame(finalInterval1, finalInterval0);
      assertNotNull(finalInterval1);
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0, finalInterval1.numDimensions());
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval1.realMax((RealPositionable) realPoint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      assertNotNull(finalInterval0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = finalInterval0.minAsDoubleArray();
      assertNotNull(doubleArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, finalInterval0.numDimensions());
      assertEquals(3, longArray0.length);
      assertEquals(3, doubleArray0.length);
      
      FinalInterval finalInterval1 = FinalInterval.createMinSize(longArray0);
      assertNotSame(finalInterval1, finalInterval0);
      assertNotNull(finalInterval1);
      assertFalse(finalInterval1.equals((Object)finalInterval0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(1, finalInterval1.numDimensions());
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        finalInterval1.realMax(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(1696);
      // Undeclared exception!
      try { 
        pointSampleList0.realMax(1696);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(3114);
      // Undeclared exception!
      try { 
        pointSampleList0.realMax((-2097));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      FinalInterval finalInterval1 = FinalInterval.createMinMax(longArray0);
      RealPoint realPoint0 = finalInterval1.minAsRealPoint();
      // Undeclared exception!
      try { 
        finalInterval0.realMin((RealPositionable) realPoint0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long[] longArray0 = new long[1];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        finalInterval0.realMin(doubleArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(1442);
      // Undeclared exception!
      try { 
        pointSampleList0.realMin(1442);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PointSampleList<FinalInterval> pointSampleList0 = new PointSampleList<FinalInterval>(1405);
      // Undeclared exception!
      try { 
        pointSampleList0.realMin((-1143));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long[] longArray0 = new long[4];
      FinalInterval finalInterval0 = FinalInterval.createMinSize(longArray0, longArray0);
      double double0 = finalInterval0.realMin(2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long[] longArray0 = new long[3];
      FinalInterval finalInterval0 = new FinalInterval(longArray0);
      long long0 = finalInterval0.max(2);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[1];
      FinalInterval finalInterval0 = null;
      try {
        finalInterval0 = new FinalInterval(longArray0, longArray1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long[] longArray0 = new long[0];
      Point point0 = new Point(longArray0);
      FinalInterval finalInterval0 = new FinalInterval(point0, point0);
      assertEquals(0, finalInterval0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PointSampleList<Object> pointSampleList0 = new PointSampleList<Object>(5284);
      FinalInterval finalInterval0 = new FinalInterval((Dimensions) pointSampleList0);
      // Undeclared exception!
      finalInterval0.toString();
  }
}
