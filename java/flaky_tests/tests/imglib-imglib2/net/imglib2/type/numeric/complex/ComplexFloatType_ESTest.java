/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:14:19 GMT 2022
 */

package net.imglib2.type.numeric.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.FloatAccess;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import net.imglib2.img.basictypeaccess.array.FloatArray;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileLongArray;
import net.imglib2.img.sparse.FloatNtree;
import net.imglib2.type.Index;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.complex.ComplexFloatType;
import net.imglib2.type.numeric.integer.UnsignedLongType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexFloatType_ESTest extends ComplexFloatType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(176.81F, (-294.72232F));
      complexFloatType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-3651.4858F), (-3651.4858F));
      complexFloatType0.sub(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, (-2328.4392F));
      ComplexFloatType complexFloatType1 = complexFloatType0.createVariable();
      complexFloatType1.pow(complexFloatType0);
      complexFloatType0.mul(complexFloatType1);
      assertFalse(complexFloatType0.equals((Object)complexFloatType1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, (-2328.4392F));
      ComplexFloatType complexFloatType1 = complexFloatType0.createVariable();
      assertFalse(complexFloatType1.equals((Object)complexFloatType0));
      
      complexFloatType0.mul(complexFloatType1);
      assertTrue(complexFloatType1.equals((Object)complexFloatType0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.setReal((-3365.4155F));
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 4439.1235F);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatNtree0);
      complexFloatType0.div(complexFloatType1);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(1.0F, 384.00616F);
      complexFloatType0.div(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(1.0F, (-1060.0F));
      complexFloatType0.add(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(1, false);
      long[] longArray0 = new long[9];
      VolatileLongArray volatileLongArray0 = new VolatileLongArray(longArray0, true);
      UnsignedLongType unsignedLongType0 = new UnsignedLongType(volatileLongArray0);
      Fraction fraction0 = unsignedLongType0.getEntitiesPerPixel();
      ArrayImg<ComplexFloatType, VolatileFloatArray> arrayImg0 = new ArrayImg<ComplexFloatType, VolatileFloatArray>(volatileFloatArray0, longArray0, fraction0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(arrayImg0);
      complexFloatType0.updateContainer(arrayImg0);
      assertEquals(0L, arrayImg0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, 0.0F);
      float float0 = complexFloatType0.getRealFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-3651.4858F), (-3651.4858F));
      complexFloatType0.setComplexNumber(1432.368159, 1.0);
      float float0 = complexFloatType0.getRealFloat();
      assertEquals(1432.3682F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-139.7F), (-139.7F));
      float float0 = complexFloatType0.getRealFloat();
      assertEquals((-139.7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-1661.043F), (-1661.043F));
      complexFloatType0.mul(0.0F);
      double double0 = complexFloatType0.getRealDouble();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, 0.0F);
      complexFloatType0.setComplexNumber(1.0F, 1.0F);
      double double0 = complexFloatType0.getRealDouble();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2585.45F);
      FloatArray floatArray1 = new FloatArray(floatArray0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatArray1);
      double double0 = complexFloatType0.getRealDouble();
      assertEquals((-2585.449951171875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(2310.0F, 2310.0F);
      float float0 = complexFloatType0.getImaginaryFloat();
      assertEquals(2310.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, 0.0F);
      double double0 = complexFloatType0.getImaginaryDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(2310.0F, 2310.0F);
      double double0 = complexFloatType0.getImaginaryDouble();
      assertEquals(2310.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-4800.2F), (-4800.2F));
      double double0 = complexFloatType0.getImaginaryDouble();
      assertEquals((-4800.2001953125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      boolean boolean0 = complexFloatType0.equals(complexFloatType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType0.valueEquals(complexFloatType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1, false);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType1.valueEquals(complexFloatType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      float[] floatArray0 = new float[4];
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(floatArray0);
      DirtyFloatArray dirtyFloatArray1 = dirtyFloatArray0.createArray(1);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(dirtyFloatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.valueEquals(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.switchRealComplex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.switchRealComplex();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.sub(complexFloatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.sub(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatArray floatArray0 = new FloatArray(1);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.sub(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 0.0F);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.setReal((-3.4028235E38F));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-139.7F), (-139.7F));
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setReal((-1630.57F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      complexFloatType0.dataAccess = (FloatAccess) floatBufferAccess0;
      // Undeclared exception!
      try { 
        complexFloatType0.setReal((-588.27F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatArray floatArray1 = new FloatArray(floatArray0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.setReal(0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setReal(527.5672488201859);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.setReal((double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(0);
      complexFloatType0.dataAccess = (FloatAccess) dirtyFloatArray0;
      // Undeclared exception!
      try { 
        complexFloatType0.setReal((-2801.4546624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 1.0F);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.setImaginary((-1.0F));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((FloatAccess) null);
      // Undeclared exception!
      try { 
        complexFloatType0.setImaginary(1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.setImaginary((-2159.83F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatArray floatArray1 = new FloatArray(floatArray0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.setImaginary((float) 696);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long[] longArray0 = new long[9];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, (-1698L));
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.setImaginary((double) (-2744L));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setImaginary(1156.46891);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.setImaginary(0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(volatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.setImaginary((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      // Undeclared exception!
      try { 
        complexFloatType0.set((ComplexFloatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.set(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      complexFloatType1.dataAccess = (FloatAccess) dirtyFloatArray0;
      // Undeclared exception!
      try { 
        complexFloatType0.set(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 4439.1235F);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.set((-2565.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.set((-1523.3612F), (-1523.3612F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.set((float) 0, 3.4028235E38F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(volatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.set((-3.4028235E38F), (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, (-2679.11F));
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.mul(complexFloatType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      // Undeclared exception!
      try { 
        complexFloatType0.mul((ComplexFloatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, true);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.mul(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatArray floatArray0 = new FloatArray(0);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.mul(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      complexFloatType0.dataAccess = (FloatAccess) dirtyFloatArray0;
      // Undeclared exception!
      try { 
        complexFloatType0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((FloatAccess) null);
      // Undeclared exception!
      try { 
        complexFloatType0.getRealFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.getRealFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsFloatBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[] floatArray0 = new float[0];
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(floatArray0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(volatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.getRealFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.getRealDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.getRealDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsFloatBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[] floatArray0 = new float[1];
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(floatArray0, true);
      VolatileFloatArray volatileFloatArray1 = volatileFloatArray0.createArray(0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(volatileFloatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.getRealDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, 0.0F);
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.getImaginaryFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.getImaginaryFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[] floatArray0 = new float[0];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.getImaginaryFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.getImaginaryDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.getImaginaryDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, true);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.getImaginaryDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.equals(complexFloatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(5);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.equals(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.ByteBufferAsFloatBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      long[] longArray0 = new long[2];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, 0L);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType1.div(complexFloatType0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      // Undeclared exception!
      try { 
        complexFloatType0.div((ComplexFloatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.div(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(dirtyFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.div(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(1);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[] floatArray0 = new float[0];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.complexConjugate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.complexConjugate();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.add(complexFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.ByteBufferAsFloatBufferB", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(1, false);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.add(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.setImaginary((-1392.0F));
      float float0 = complexFloatType0.getImaginaryFloat();
      assertEquals((-1392.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      float float0 = complexFloatType0.getImaginaryFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      boolean boolean0 = complexFloatType0.valueEquals(complexFloatType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.copy();
      assertTrue(complexFloatType1.equals((Object)complexFloatType0));
      
      complexFloatType1.set((-2560.6099F), (-2560.6099F));
      boolean boolean0 = complexFloatType0.valueEquals(complexFloatType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.switchRealComplex();
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      Fraction fraction0 = complexFloatType0.getEntitiesPerPixel();
      assertEquals(2.0, fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.complexConjugate();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(40);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatBufferAccess0);
      boolean boolean0 = complexFloatType1.valueEquals(complexFloatType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.set(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      long[] longArray0 = new long[0];
      FloatNtree floatNtree0 = new FloatNtree(longArray0, longArray0, (-122.569F));
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatNtree0);
      // Undeclared exception!
      complexFloatType0.setReal((-2068.91));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      NativeTypeFactory<ComplexFloatType, FloatAccess> nativeTypeFactory0 = complexFloatType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.FLOAT, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, (-2328.4392F));
      Index index0 = complexFloatType0.index();
      assertEquals(0, index0.get());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.setReal((-2068.91));
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.sub(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      Object object0 = new Object();
      boolean boolean0 = complexFloatType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType0.add(complexFloatType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.div(complexFloatType0);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.setImaginary(2427.189559259);
      assertEquals(0, complexFloatType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      // Undeclared exception!
      try { 
        complexFloatType0.updateContainer(complexFloatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }
}
