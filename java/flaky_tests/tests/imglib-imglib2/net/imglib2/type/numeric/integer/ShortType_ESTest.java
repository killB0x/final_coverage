/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:14:19 GMT 2022
 */

package net.imglib2.type.numeric.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import net.imglib2.img.basictypeaccess.ShortAccess;
import net.imglib2.img.basictypeaccess.array.DirtyShortArray;
import net.imglib2.img.basictypeaccess.array.ShortArray;
import net.imglib2.img.basictypeaccess.nio.ShortBufferAccess;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.integer.ShortType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShortType_ESTest extends ShortType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)1647);
      shortType0.setInteger((int) (short)1647);
      assertEquals(0.0, shortType0.getPhaseDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)0);
      long long0 = shortType0.getIntegerLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)933);
      long long0 = shortType0.getIntegerLong();
      assertEquals(933L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShortType shortType0 = new ShortType((short) (-675));
      long long0 = shortType0.getIntegerLong();
      assertEquals((-675L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)1647);
      int int0 = shortType0.getInteger();
      assertEquals(1647, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShortType shortType0 = new ShortType((short) (-675));
      int int0 = shortType0.getInteger();
      assertEquals((-675), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShortType shortType0 = new ShortType((short) (-675));
      ShortType shortType1 = shortType0.createVariable();
      shortType1.pow(shortType1);
      BigInteger bigInteger0 = shortType1.getBigInteger();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShortType shortType0 = new ShortType((short) (-675));
      BigInteger bigInteger0 = shortType0.getBigInteger();
      assertEquals((byte)93, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3611);
      ShortArray shortArray1 = new ShortArray(shortArray0);
      ShortType shortType0 = new ShortType(shortArray1);
      BigInteger bigInteger0 = shortType0.getBigInteger();
      assertEquals((byte) (-27), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)1647);
      ShortType shortType1 = new ShortType((short)0);
      BigInteger bigInteger0 = shortType1.getBigInteger();
      shortType0.setBigInteger(bigInteger0);
      assertTrue(shortType1.equals((Object)shortType0));
      
      short short0 = shortType0.get();
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      shortType0.set((short) (-7605));
      short short0 = shortType0.get();
      assertEquals((short) (-7605), short0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ShortType shortType0 = new ShortType((short) (-1053));
      ShortType shortType1 = shortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        shortType1.setInteger((long) (short) (-1053));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = shortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        shortType1.setInteger(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(0);
      ShortType shortType0 = new ShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        shortType0.set((short)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(0);
      ShortType shortType0 = new ShortType(dirtyShortArray0);
      ShortType shortType1 = shortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        shortType1.getInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(0, false);
      ShortType shortType0 = new ShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        shortType0.getInteger();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = shortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        shortType1.getBigInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(0);
      ShortType shortType0 = new ShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        shortType0.getBigInteger();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DirtyShortArray dirtyShortArray0 = new DirtyShortArray(0);
      ShortType shortType0 = new ShortType(dirtyShortArray0);
      // Undeclared exception!
      try { 
        shortType0.getBigInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      shortType0.dataAccess = null;
      // Undeclared exception!
      try { 
        shortType0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ShortArray shortArray1 = new ShortArray(shortArray0);
      ShortType shortType0 = new ShortType(shortArray1);
      // Undeclared exception!
      try { 
        shortType0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(0, false);
      ShortType shortType0 = new ShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        shortType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ShortArray shortArray1 = new ShortArray(shortArray0);
      ShortType shortType0 = new ShortType(shortArray1);
      // Undeclared exception!
      try { 
        shortType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)1647);
      short short0 = shortType0.get();
      assertEquals((short)1647, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ShortType shortType0 = new ShortType((ShortAccess) null);
      // Undeclared exception!
      try { 
        shortType0.set((short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ShortType shortType0 = new ShortType((ShortAccess) null);
      NativeTypeFactory<ShortType, ShortAccess> nativeTypeFactory0 = shortType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.SHORT, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      int int0 = shortType0.getInteger();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      // Undeclared exception!
      try { 
        shortType0.setBigInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.ShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      double double0 = shortType0.getMaxValue();
      assertEquals(32767.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = shortType0.copy();
      assertEquals(0, shortType1.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      ShortType shortType1 = shortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        shortType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ShortType shortType0 = new ShortType((short)5);
      shortType0.setInteger(2029L);
      assertEquals(1.0, shortType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ShortType shortType0 = new ShortType();
      double double0 = shortType0.getMinValue();
      assertEquals((-32768.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ShortType shortType0 = new ShortType((ShortAccess) null);
      // Undeclared exception!
      try { 
        shortType0.getIntegerLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }
}
