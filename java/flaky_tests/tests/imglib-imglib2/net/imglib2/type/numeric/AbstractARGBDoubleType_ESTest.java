/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:44:30 GMT 2022
 */

package net.imglib2.type.numeric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileDoubleArray;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractARGBDoubleType_ESTest extends AbstractARGBDoubleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(649.4063923556297, 0.0, (-3.4028234663852886E38), 0.0);
      aRGBDoubleType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType(0.0, 0.0, (-62.78944619770912), 0.0);
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType1);
      assertFalse(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 791.3, (-2129.614442785811), (-2129.614442785811));
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      aRGBDoubleType1.setZero();
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType1);
      assertEquals(0.0, aRGBDoubleType1.getG(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      assertTrue(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      
      aRGBDoubleType0.pow(aRGBDoubleType1);
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType1);
      assertFalse(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.mul(1152.594396842511);
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-4502.751630103404), (-4502.751630103404), (-4502.751630103404), (-4502.751630103404));
      aRGBDoubleType0.mul(0.0F);
      assertEquals(-0.0, aRGBDoubleType0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      nativeARGBDoubleType0.setA((-1756.568824914539));
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      aRGBDoubleType0.set(nativeARGBDoubleType0);
      aRGBDoubleType1.sub(aRGBDoubleType0);
      aRGBDoubleType0.div(aRGBDoubleType1);
      assertEquals(Double.NaN, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(24.492594685321702, (-1990.156532), (-2.147483648E9), 24.492594685321702);
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType(255.0, 830.600247464, 24.492594685321702, (-65281.0));
      aRGBDoubleType0.mul(aRGBDoubleType1);
      assertEquals((-5.259744658382006E10), aRGBDoubleType0.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType((-1756.568824914539), 1.0, (-1574.897), (-1.0));
      aRGBDoubleType0.sub(aRGBDoubleType1);
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      aRGBDoubleType1.add(aRGBDoubleType0);
      assertTrue(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(2932.882597687642, 2932.882597687642, 2932.882597687642, (-1457.624674610163));
      aRGBDoubleType0.setR((-1457.624674610163));
      assertEquals(2932.882597687642, aRGBDoubleType0.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1.0), 3702.96179, 0.0, (-1.0));
      aRGBDoubleType0.setB(0.0);
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, (-3.4028234663852886E38), (-4226.70819886));
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType(649.4063923556297, 0.0, (-3.4028234663852886E38), 0.0);
      aRGBDoubleType0.pow(aRGBDoubleType1);
      int int0 = aRGBDoubleType0.toARGBInt();
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(16711935, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(23.09278, (-1990.156532), (-2.147483648E9), 23.09278);
      int int0 = aRGBDoubleType0.toARGBInt();
      assertEquals((-16776961), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 791.3, (-2129.614442785811), (-2129.614442785811));
      aRGBDoubleType0.setZero();
      double double0 = aRGBDoubleType0.getR();
      assertEquals(0.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(24.492594685321702, (-1990.156532), (-2.147483648E9), 24.492594685321702);
      aRGBDoubleType0.setR(24.492594685321702);
      double double0 = aRGBDoubleType0.getR();
      assertEquals(24.492594685321702, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(23.09278, (-1990.156532), (-2.147483648E9), 23.09278);
      double double0 = aRGBDoubleType0.getR();
      assertEquals((-1990.156532), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      aRGBDoubleType1.setG((-2939.618968993));
      aRGBDoubleType0.pow(aRGBDoubleType1);
      aRGBDoubleType0.pow((-3086.0));
      double double0 = aRGBDoubleType0.getG();
      assertEquals(0.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1990.156532), (-1990.156532), 128.0, (-1777.875783));
      double double0 = aRGBDoubleType0.getG();
      assertEquals(128.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(24.492594685321702, (-1990.156532), (-2.147483648E9), 24.492594685321702);
      double double0 = aRGBDoubleType0.getG();
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(649.4063923556297, 0.0, (-3.4028234663852886E38), 0.0);
      double double0 = aRGBDoubleType0.getB();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(23.09278, (-1990.156532), (-2.147483648E9), 23.09278);
      double double0 = aRGBDoubleType0.getB();
      assertEquals(23.09278, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(129.48736627286, 0.0, 0.0, (-3.4028234663852886E38));
      double double0 = aRGBDoubleType0.getB();
      assertEquals((-3.4028234663852886E38), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, (-3.4028234663852886E38), (-4226.70819886));
      double double0 = aRGBDoubleType0.getA();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(255.0, (-1.0), 255.0, 255.0);
      double double0 = aRGBDoubleType0.getA();
      assertEquals(255.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.setA((-62.78944619770912));
      double double0 = aRGBDoubleType0.getA();
      assertEquals((-62.78944619770912), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(23.09278, (-2.147483648E9), (-2.147483648E9), 23.09278);
      boolean boolean0 = nativeARGBDoubleType0.equals(nativeARGBDoubleType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.valueEquals((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(572.12600000157, (-281.68364940388), 572.12600000157, 1511.0670961875953);
      double[] doubleArray0 = new double[0];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      NativeARGBDoubleType nativeARGBDoubleType1 = new NativeARGBDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.valueEquals(nativeARGBDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.toARGBInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(doubleArray0, true);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.toARGBInt();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.sub((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        nativeARGBDoubleType1.setZero();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.setOne();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.setOne();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.set((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long[] longArray0 = new long[7];
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, 929.599104601);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleNtree0);
      // Undeclared exception!
      nativeARGBDoubleType0.pow(nativeARGBDoubleType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.pow((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.pow(nativeARGBDoubleType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleArray1);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.pow(nativeARGBDoubleType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((-5665.033), (-5665.033), (-5665.033), (-5665.033));
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        nativeARGBDoubleType1.pow((-5665.033));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.mul((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((-4274.8368282624), (-4274.8368282624), (-4274.8368282624), (-4274.8368282624));
      byte[] byteArray0 = new byte[8];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0, false);
      NativeARGBDoubleType nativeARGBDoubleType1 = new NativeARGBDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.mul(nativeARGBDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      DoubleArray doubleArray0 = new DoubleArray(0);
      NativeARGBDoubleType nativeARGBDoubleType1 = new NativeARGBDoubleType(doubleArray0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.mul(nativeARGBDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        nativeARGBDoubleType1.mul((-435.5785F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        nativeARGBDoubleType1.mul((double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(0, 2234.7835405, 255.0, 255.0);
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        nativeARGBDoubleType1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.NativeARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.div((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray1 = dirtyVolatileDoubleArray0.createArray(0, true);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(dirtyVolatileDoubleArray1);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.div(nativeARGBDoubleType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.add((ARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.AbstractARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      assertTrue(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      
      aRGBDoubleType1.setB((-2893.30209701));
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType1);
      assertFalse(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((-956.1973033), (-956.1973033), (-0.1845417382400651), 1596.2);
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.createVariable();
      nativeARGBDoubleType1.set((-956.1973033), (-2939.618968993), 1.0478375883696995, (-2939.618968993));
      boolean boolean0 = nativeARGBDoubleType1.valueEquals(nativeARGBDoubleType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      aRGBDoubleType1.pow((-3086.0));
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType1);
      assertEquals(Double.POSITIVE_INFINITY, aRGBDoubleType1.getB(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      boolean boolean0 = aRGBDoubleType0.equals(doubleBufferAccess0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((-956.1973033), (-956.1973033), (-0.1845417382400651), 1596.2);
      NativeARGBDoubleType nativeARGBDoubleType1 = nativeARGBDoubleType0.createVariable();
      nativeARGBDoubleType1.set(nativeARGBDoubleType0);
      assertTrue(nativeARGBDoubleType1.equals((Object)nativeARGBDoubleType0));
      
      nativeARGBDoubleType1.setB(0.0);
      boolean boolean0 = nativeARGBDoubleType1.equals(nativeARGBDoubleType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.setG(16711680);
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType();
      boolean boolean0 = aRGBDoubleType1.valueEquals(aRGBDoubleType0);
      assertFalse(aRGBDoubleType0.equals((Object)aRGBDoubleType1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, (-3.4028234663852886E38), (-4226.70819886));
      boolean boolean0 = aRGBDoubleType0.valueEquals(aRGBDoubleType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      aRGBDoubleType0.setOne();
      boolean boolean0 = aRGBDoubleType1.equals(aRGBDoubleType0);
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType();
      nativeARGBDoubleType0.mul((double) 0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(0, 2234.7835405, 255.0, 255.0);
      nativeARGBDoubleType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.div(aRGBDoubleType0);
      aRGBDoubleType0.div(aRGBDoubleType0);
      assertEquals(Double.NaN, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.set(aRGBDoubleType0);
      assertEquals(0.0, aRGBDoubleType0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      int int0 = aRGBDoubleType0.toARGBInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        nativeARGBDoubleType0.add((NativeARGBDoubleType) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.pow(aRGBDoubleType0);
      aRGBDoubleType0.add(aRGBDoubleType0);
      assertEquals(2.0, aRGBDoubleType0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.mul((-124.6F));
      assertEquals(-0.0, aRGBDoubleType0.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long[] longArray0 = new long[7];
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, 929.599104601);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleNtree0);
      // Undeclared exception!
      nativeARGBDoubleType0.pow((double) 0);
  }
}
