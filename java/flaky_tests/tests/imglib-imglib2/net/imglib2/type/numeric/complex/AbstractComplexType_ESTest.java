/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:38:21 GMT 2022
 */

package net.imglib2.type.numeric.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.FloatAccess;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DirtyFloatArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.array.FloatArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileDoubleArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.type.numeric.complex.ComplexFloatType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractComplexType_ESTest extends AbstractComplexType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setOne();
      complexDoubleType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1884.217989567176, (-1.0));
      double double0 = complexDoubleType0.getPowerDouble();
      assertEquals(1884.2182549292347, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(1.0F, (-5249.313F));
      float float0 = complexFloatType0.getPowerFloat();
      assertEquals(5249.313F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(0.0F, 0.0F);
      complexDoubleType0.pow(complexDoubleType0);
      complexDoubleType0.sub(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.copy();
      complexDoubleType1.setReal((-1.0F));
      complexDoubleType1.mul(complexDoubleType0);
      assertFalse(complexDoubleType1.equals((Object)complexDoubleType0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setReal((-3965.9856F));
      complexDoubleType0.mul(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.copy();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5338;
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      complexDoubleType0.dataAccess = (DoubleAccess) dirtyVolatileDoubleArray0;
      complexDoubleType1.setComplexNumber((-2003.8021058456), (double) 78);
      complexDoubleType1.div(complexDoubleType0);
      assertFalse(complexDoubleType0.equals((Object)complexDoubleType1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setComplexNumber((-2003.8021058456), (double) 78);
      complexDoubleType0.div(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(0.0F, 0.0F);
      complexDoubleType0.add(complexDoubleType1);
      assertTrue(complexDoubleType1.equals((Object)complexDoubleType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1884.217989567176, (-1.0));
      complexDoubleType0.mul((-1.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(0.0, 0.0);
      complexDoubleType0.mul(0.0F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.div(complexDoubleType0);
      complexDoubleType0.mul(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      boolean boolean0 = complexDoubleType0.valueEquals(complexDoubleType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((-192.7042930085431), (-192.7042930085431));
      float float0 = complexDoubleType0.getPowerFloat();
      assertEquals(272.52502F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setReal((-1.0F));
      double double0 = complexDoubleType0.getPowerDouble();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setComplexNumber(1951.4F, 472.0F);
      float float0 = complexDoubleType0.getPhaseFloat();
      assertEquals(0.23731959F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setComplexNumber(3.4028235E38F, (-1964.66F));
      float float0 = complexDoubleType0.getPhaseFloat();
      assertEquals((-5.7736173E-36F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((-2737.7249F), 0.0F);
      double double0 = complexFloatType0.getPhaseDouble();
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(0.0F, (-230.494F));
      double double0 = complexFloatType0.getPhaseDouble();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType0.valueEquals(complexDoubleType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.copy();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0, false);
      complexDoubleType1.dataAccess = (DoubleAccess) doubleBufferAccess0;
      // Undeclared exception!
      try { 
        complexDoubleType1.valueEquals(complexDoubleType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      double[] doubleArray0 = new double[4];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, false);
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray1 = dirtyVolatileDoubleArray0.createArray(0, true);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(dirtyVolatileDoubleArray1);
      // Undeclared exception!
      try { 
        complexDoubleType0.valueEquals(complexDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      complexFloatType0.dataAccess = (FloatAccess) floatBufferAccess0;
      // Undeclared exception!
      try { 
        complexFloatType0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FloatArray floatArray0 = new FloatArray(1);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType0.sub(complexDoubleType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.sub(complexDoubleType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray((double[]) null, true);
      VolatileDoubleArray volatileDoubleArray1 = volatileDoubleArray0.createArray(1, true);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(volatileDoubleArray1);
      // Undeclared exception!
      try { 
        complexDoubleType0.sub(complexDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setZero();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setZero();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setOne();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(dirtyFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.setOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setComplexNumber(1.0F, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DirtyFloatArray dirtyFloatArray0 = new DirtyFloatArray(1);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(dirtyFloatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.setComplexNumber((-1248.883F), (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.setComplexNumber((-3696.05073), (-3696.05073));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(byteBuffer0, false);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        complexFloatType0.setComplexNumber((double) (-2737.7249F), (double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatArray floatArray1 = new FloatArray(floatArray0);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(floatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.setComplexNumber(1.0, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      // Undeclared exception!
      try { 
        complexDoubleType0.set((ComplexDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set(complexDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      double[] doubleArray0 = new double[0];
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(doubleArray0);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(dirtyDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set(complexDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.pow(complexFloatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.pow(complexDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      FloatArray floatArray0 = new FloatArray(1);
      ComplexFloatType complexFloatType1 = new ComplexFloatType(floatArray0);
      // Undeclared exception!
      try { 
        complexFloatType0.pow(complexFloatType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.pow(3.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType0.mul(complexDoubleType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.mul(complexDoubleType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleArray1);
      // Undeclared exception!
      try { 
        complexDoubleType0.mul((ComplexDoubleType) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType(537.0F, 537.0F);
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.mul(2221.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.mul((float) (byte) (-73));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.mul(1448.1498);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[] floatArray0 = new float[6];
      VolatileFloatArray volatileFloatArray0 = new VolatileFloatArray(floatArray0, true);
      VolatileFloatArray volatileFloatArray1 = volatileFloatArray0.createArray(1);
      ComplexFloatType complexFloatType0 = new ComplexFloatType(volatileFloatArray1);
      // Undeclared exception!
      try { 
        complexFloatType0.mul((double) 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(1, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.getPowerFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPowerFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(1);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPowerFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPowerDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(1, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPowerDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DoubleArray doubleArray0 = new DoubleArray(0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPowerDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      ComplexFloatType complexFloatType1 = complexFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexFloatType1.getPhaseFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType((FloatAccess) null);
      // Undeclared exception!
      try { 
        complexFloatType0.getPhaseDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getPhaseDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.equals(complexDoubleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(doubleBuffer0, true);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleBufferAccess1);
      // Undeclared exception!
      try { 
        complexDoubleType0.equals(complexDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(0, true);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.div(complexDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.div(complexDoubleType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.complexConjugate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(1, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.complexConjugate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      // Undeclared exception!
      try { 
        complexDoubleType0.add((ComplexDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.AbstractComplexType", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1.0, 1.0);
      double[] doubleArray0 = new double[0];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleArray1);
      // Undeclared exception!
      try { 
        complexDoubleType0.add(complexDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      Object object0 = new Object();
      boolean boolean0 = complexDoubleType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      boolean boolean0 = complexDoubleType0.equals(complexDoubleType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setReal((-1964.66F));
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(0.0F, 0.0F);
      boolean boolean0 = complexDoubleType0.valueEquals(complexDoubleType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.sub(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      double double0 = complexDoubleType0.getPowerDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setZero();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.complexConjugate();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.createVariable();
      boolean boolean0 = complexDoubleType0.valueEquals(complexDoubleType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1.0, 1.0);
      complexDoubleType0.add(complexDoubleType0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      double double0 = complexFloatType0.getPhaseDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      float float0 = complexDoubleType0.getPhaseFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ComplexFloatType complexFloatType0 = new ComplexFloatType();
      complexFloatType0.mul((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.pow((double) 0.0F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      String string0 = complexDoubleType0.toString();
      assertEquals("(0.0) + (0.0)i", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.mul((-1964.66F));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      // Undeclared exception!
      try { 
        complexDoubleType0.div((ComplexDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.AbstractComplexType", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      float float0 = complexDoubleType0.getPowerFloat();
      assertEquals(0.0F, float0, 0.01F);
  }
}
