/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:37:54 GMT 2022
 */

package net.imglib2.type.numeric.real;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileDoubleArray;
import net.imglib2.type.Index;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.util.Fraction;
import net.imglib2.view.composite.RealComposite;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DoubleType_ESTest extends DoubleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = DoubleType.equals(1.0, (-1971.692719));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType(0.0);
      doubleType0.setReal((-2680.9F));
      assertEquals(0.0F, doubleType0.getImaginaryFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      RealComposite<DoubleType> realComposite0 = DoubleType.wrapVector(doubleArray0);
      assertEquals(0, realComposite0.getLength());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      RealComposite<DoubleType> realComposite0 = DoubleType.wrapVector(doubleArray0);
      assertEquals(5, realComposite0.numDimensions());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType(3533.533420319);
      float float0 = doubleType0.getRealFloat();
      assertEquals(3533.5334F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType((-3216.153638));
      float float0 = doubleType0.getRealFloat();
      assertEquals((-3216.1536F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      double double0 = doubleType0.getRealDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      doubleType0.dec();
      double double0 = doubleType0.getRealDouble();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleArray doubleArray0 = new DoubleArray(3724);
      DoubleType doubleType0 = new DoubleType(doubleArray0);
      doubleType0.inc();
      double double0 = doubleType0.get();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      doubleType0.setReal((-1015.3862291321));
      double double0 = doubleType0.get();
      assertEquals((-1015.3862291321), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        doubleType0.setReal((-1835.2F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      DoubleType doubleType0 = new DoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        doubleType0.setReal(0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        doubleType0.setReal(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      DoubleType doubleType1 = doubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        doubleType1.set(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      DoubleType doubleType1 = doubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        doubleType1.getRealFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(0, false);
      DoubleType doubleType0 = new DoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        doubleType0.getRealFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        doubleType0.getRealDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType((DoubleAccess) null);
      // Undeclared exception!
      try { 
        doubleType0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleType.createVector((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected only positive dimensions but got: [-2147483646]
         //
         verifyException("net.imglib2.Dimensions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      DoubleType.createVector(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      DoubleType doubleType0 = new DoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        doubleType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(0);
      DoubleType doubleType0 = new DoubleType(dirtyDoubleArray0);
      // Undeclared exception!
      try { 
        doubleType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      Index index0 = doubleType0.index();
      assertEquals(0, index0.get());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      doubleType0.set((-1015.3862291321));
      assertEquals((-1.7976931348623157E308), doubleType0.getMinValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      DoubleType doubleType1 = doubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        doubleType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      Fraction fraction0 = doubleType0.getEntitiesPerPixel();
      assertEquals(1L, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      // Undeclared exception!
      try { 
        doubleType0.updateContainer(doubleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      double double0 = doubleType0.get();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      NativeTypeFactory<DoubleType, DoubleAccess> nativeTypeFactory0 = doubleType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.DOUBLE, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = DoubleType.equals(1.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = DoubleType.equals(404.8607583168152, 1484.442544119228);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      double double0 = doubleType0.getMinIncrement();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      DoubleType doubleType1 = doubleType0.createVariable();
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(0);
      doubleType1.dataAccess = (DoubleAccess) dirtyDoubleArray0;
      // Undeclared exception!
      try { 
        doubleType1.set((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      double double0 = doubleType0.getMinValue();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      doubleType0.inc();
      double double0 = doubleType0.getRealDouble();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      DoubleType doubleType1 = doubleType0.copy();
      assertTrue(doubleType1.equals((Object)doubleType0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      double double0 = doubleType0.getMaxValue();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RealComposite<DoubleType> realComposite0 = DoubleType.createVector(239);
      assertEquals(239, realComposite0.getLength());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      float float0 = doubleType0.getRealFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DoubleType doubleType0 = new DoubleType();
      int int0 = doubleType0.getBitsPerPixel();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        DoubleType.wrapVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }
}
