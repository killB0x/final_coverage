/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:56:07 GMT 2022
 */

package net.imglib2.type.numeric.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.nio.IntBuffer;
import net.imglib2.img.basictypeaccess.IntAccess;
import net.imglib2.img.basictypeaccess.array.DirtyIntArray;
import net.imglib2.img.basictypeaccess.array.IntArray;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.integer.IntType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IntType_ESTest extends IntType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntType intType0 = new IntType(0);
      intType0.setInteger((long) 0);
      assertEquals(0, intType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntType intType0 = new IntType();
      intType0.set(1534);
      assertEquals(1.0, intType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntType intType0 = new IntType(810);
      intType0.pow((-1704.094));
      long long0 = intType0.getIntegerLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntType intType0 = new IntType();
      IntType intType1 = new IntType(8);
      intType0.set(intType1);
      long long0 = intType0.getIntegerLong();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntBuffer intBuffer0 = mock(IntBuffer.class, new ViolatedAssumptionAnswer());
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(intBuffer0, true);
      IntType intType0 = new IntType(intBufferAccess0);
      IntType intType1 = intType0.createVariable();
      intType1.dec();
      long long0 = intType1.getIntegerLong();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntType intType0 = new IntType(1979);
      int int0 = intType0.getInteger();
      assertEquals(1979, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntBuffer intBuffer0 = mock(IntBuffer.class, new ViolatedAssumptionAnswer());
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(intBuffer0, true);
      IntType intType0 = new IntType(intBufferAccess0);
      IntType intType1 = intType0.createVariable();
      intType1.dec();
      int int0 = intType1.getInteger();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntType intType0 = new IntType();
      intType0.setReal(1.0);
      BigInteger bigInteger0 = intType0.getBigInteger();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntType intType0 = new IntType();
      intType0.setReal((-1815.733735675));
      BigInteger bigInteger0 = intType0.getBigInteger();
      assertEquals((short) (-1816), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntBuffer intBuffer0 = mock(IntBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intBuffer0).get(anyInt());
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(intBuffer0, true);
      IntType intType0 = new IntType(intBufferAccess0);
      int int0 = intType0.get();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntType intType0 = new IntType();
      intType0.setOne();
      int int0 = intType0.get();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntType intType0 = new IntType(0);
      IntType intType1 = intType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        intType1.setInteger(2147483639L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntType intType0 = new IntType();
      IntType intType1 = intType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        intType1.setInteger((-4224));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0);
      IntType intType0 = new IntType(intBufferAccess0);
      IntType intType1 = intType0.createVariable();
      BigInteger bigInteger0 = intType1.getBigInteger();
      // Undeclared exception!
      try { 
        intType0.setBigInteger(bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntArray intArray0 = new IntArray(0);
      IntType intType0 = new IntType(intArray0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        intType0.setBigInteger(bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(0);
      IntType intType0 = new IntType(dirtyIntArray0);
      // Undeclared exception!
      try { 
        intType0.set(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntType intType0 = new IntType();
      IntType intType1 = intType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        intType1.getIntegerLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0);
      IntType intType0 = new IntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        intType0.getIntegerLong();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntType intType0 = new IntType((IntAccess) null);
      // Undeclared exception!
      try { 
        intType0.getInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess();
      IntType intType0 = new IntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        intType0.getBigInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.IntBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0, false);
      IntType intType0 = new IntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        intType0.getBigInteger();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntArray intArray1 = new IntArray(intArray0);
      IntType intType0 = new IntType(intArray1);
      // Undeclared exception!
      try { 
        intType0.getBigInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntType intType0 = new IntType((-1));
      IntType intType1 = intType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        intType1.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[0];
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(intArray0);
      IntType intType0 = new IntType(dirtyIntArray0);
      // Undeclared exception!
      try { 
        intType0.get();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(0);
      IntType intType0 = new IntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        intType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirtyIntArray dirtyIntArray0 = new DirtyIntArray(0);
      IntType intType0 = new IntType(dirtyIntArray0);
      // Undeclared exception!
      try { 
        intType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractIntArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntType intType0 = new IntType((-1));
      int int0 = intType0.get();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntType intType0 = new IntType();
      double double0 = intType0.getMinValue();
      assertEquals((-2.147483648E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntType intType0 = new IntType();
      intType0.setInteger(0);
      assertEquals(0.0F, intType0.getPhaseFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntBufferAccess intBufferAccess0 = new IntBufferAccess();
      IntType intType0 = new IntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        intType0.set((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.IntBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntType intType0 = new IntType();
      IntType intType1 = intType0.copy();
      assertEquals(0.0, intType1.getImaginaryDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntType intType0 = new IntType();
      // Undeclared exception!
      try { 
        intType0.setBigInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.IntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntType intType0 = new IntType();
      BigInteger bigInteger0 = intType0.getBigInteger();
      intType0.setBigInteger(bigInteger0);
      assertEquals(1.0, intType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntType intType0 = new IntType();
      IntType intType1 = intType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        intType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntType intType0 = new IntType();
      double double0 = intType0.getMaxValue();
      assertEquals(2.147483647E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntType intType0 = new IntType();
      int int0 = intType0.getInteger();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntType intType0 = new IntType();
      NativeTypeFactory<IntType, IntAccess> nativeTypeFactory0 = intType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.INT, nativeTypeFactory0.getPrimitiveType());
  }
}
