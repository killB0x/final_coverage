/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:23:45 GMT 2022
 */

package net.imglib2.type.numeric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.type.numeric.ARGBDoubleType;
import net.imglib2.type.numeric.NativeARGBDoubleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ARGBDoubleType_ESTest extends ARGBDoubleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, (-1148.813878), (-418.89345), (-418.89345));
      aRGBDoubleType0.setA(0.0);
      assertEquals((-418.89345), aRGBDoubleType0.getG(), 0.01);
      assertEquals((-418.89345), aRGBDoubleType0.getB(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertEquals((-1148.813878), aRGBDoubleType0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      double double0 = aRGBDoubleType0.getR();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1929.7373528754565), 3852.511308, (-1031.408269343), 1.0);
      double double0 = aRGBDoubleType0.getR();
      assertEquals((-1929.7373528754565), aRGBDoubleType0.getA(), 0.01);
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals((-1031.408269343), aRGBDoubleType0.getG(), 0.01);
      assertEquals(3852.511308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, 0.0, 0.0);
      ARGBDoubleType aRGBDoubleType1 = new ARGBDoubleType(0.0, (-1148.813878), (-418.89345), (-418.89345));
      aRGBDoubleType0.set(aRGBDoubleType1);
      double double0 = aRGBDoubleType0.getR();
      assertEquals((-418.89345), aRGBDoubleType0.getB(), 0.01);
      assertEquals((-1148.813878), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      double double0 = aRGBDoubleType0.getG();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.pow((double) 0);
      double double0 = aRGBDoubleType0.getG();
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1929.7373528754565), 3852.511308, (-1031.408269343), 1.0);
      double double0 = aRGBDoubleType0.getG();
      assertEquals((-1031.408269343), double0, 0.01);
      assertEquals(3852.511308, aRGBDoubleType0.getR(), 0.01);
      assertEquals((-1929.7373528754565), aRGBDoubleType0.getA(), 0.01);
      assertEquals(1.0, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      double double0 = aRGBDoubleType0.getB();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.setOne();
      double double0 = aRGBDoubleType0.getB();
      assertEquals(1.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1.0), (-1.0), 1900.9917688, 1.0);
      aRGBDoubleType0.setB((-1.7976931348623157E308));
      double double0 = aRGBDoubleType0.getB();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      double double0 = aRGBDoubleType0.getA();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.setOne();
      double double0 = aRGBDoubleType0.getA();
      assertEquals(1.0, aRGBDoubleType0.getG(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.set((-506.676433392094), 2636.8873, 1.0, 2501.51322974677);
      double double0 = aRGBDoubleType0.getA();
      assertEquals(2636.8873, aRGBDoubleType0.getR(), 0.01);
      assertEquals((-506.676433392094), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, (-1148.813878), (-418.89345), (-418.89345));
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      assertEquals((-418.89345), aRGBDoubleType0.getB(), 0.01);
      assertEquals(0.0, aRGBDoubleType0.getA(), 0.01);
      assertTrue(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
      assertEquals(0.0, aRGBDoubleType1.getA(), 0.01);
      assertEquals((-1148.813878), aRGBDoubleType1.getR(), 0.01);
      assertEquals((-418.89345), aRGBDoubleType1.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, 0.0, 0.0);
      aRGBDoubleType0.div(aRGBDoubleType0);
      aRGBDoubleType0.copy();
      assertEquals(Double.NaN, aRGBDoubleType0.getB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType((-1.0), (-1.0), 1900.9917688, 1.0);
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      assertEquals(1.0, aRGBDoubleType1.getB(), 0.01);
      assertEquals((-1.0), aRGBDoubleType1.getR(), 0.01);
      assertEquals((-1.0), aRGBDoubleType1.getA(), 0.01);
      assertEquals(1900.9917688, aRGBDoubleType0.getG(), 0.01);
      assertTrue(aRGBDoubleType1.equals((Object)aRGBDoubleType0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      // Undeclared exception!
      try { 
        aRGBDoubleType0.set((NativeARGBDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.ARGBDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      DoubleArray doubleArray0 = new DoubleArray(0);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType(doubleArray0);
      // Undeclared exception!
      try { 
        aRGBDoubleType0.set(nativeARGBDoubleType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      aRGBDoubleType0.setR((-243.58679574));
      assertEquals((-243.58679574), aRGBDoubleType0.getR(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, 0.0, 0.0);
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.copy();
      aRGBDoubleType1.a = 1.0;
      aRGBDoubleType1.setA(0.0);
      assertEquals(0.0, aRGBDoubleType1.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, 0.0, 0.0);
      NativeARGBDoubleType nativeARGBDoubleType0 = new NativeARGBDoubleType((-1148.813878), 0.0, (-3749.36), 0.0);
      aRGBDoubleType0.set(nativeARGBDoubleType0);
      assertEquals((-3749.36), aRGBDoubleType0.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType(0.0, 0.0, 0.0, 0.0);
      aRGBDoubleType0.setG((-1148.813878));
      assertEquals((-1148.813878), aRGBDoubleType0.getG(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ARGBDoubleType aRGBDoubleType0 = new ARGBDoubleType();
      ARGBDoubleType aRGBDoubleType1 = aRGBDoubleType0.createVariable();
      assertEquals(0.0, aRGBDoubleType1.getR(), 0.01);
  }
}
