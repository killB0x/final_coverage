/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 16:55:59 GMT 2022
 */

package net.imglib2.type.numeric.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import net.imglib2.img.basictypeaccess.DoubleAccess;
import net.imglib2.img.basictypeaccess.array.DirtyDoubleArray;
import net.imglib2.img.basictypeaccess.array.DoubleArray;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray;
import net.imglib2.img.sparse.DoubleNtree;
import net.imglib2.type.Index;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.complex.ComplexDoubleType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexDoubleType_ESTest extends ComplexDoubleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(360);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(dirtyDoubleArray0);
      complexDoubleType0.set(complexDoubleType1);
      assertTrue(complexDoubleType1.equals((Object)complexDoubleType0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setReal((-1124.81F));
      assertEquals(0, complexDoubleType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((-890.514968), 2.147483647E9);
      complexDoubleType0.setReal(0.0);
      assertEquals(0, complexDoubleType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(862.739381425, 1.0);
      complexDoubleType0.setImaginary((-1.7976931348623157E308));
      assertEquals(0, complexDoubleType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      float float0 = complexDoubleType0.getRealFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((-890.514968), 2.147483647E9);
      float float0 = complexDoubleType0.getRealFloat();
      assertEquals((-890.51495F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      double double0 = complexDoubleType0.getRealDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(862.739381425, 1.0);
      complexDoubleType0.mul((-3498.87274348454));
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.createVariable();
      complexDoubleType1.pow(complexDoubleType0);
      double double0 = complexDoubleType1.getRealDouble();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType((-1.0), (-1.0));
      double double0 = complexDoubleType0.getRealDouble();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1765.84401195, 1765.84401195);
      float float0 = complexDoubleType0.getImaginaryFloat();
      assertEquals(1765.844F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setImaginary((-104.9F));
      float float0 = complexDoubleType0.getImaginaryFloat();
      assertEquals((-104.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(0.0, 0.0);
      double double0 = complexDoubleType0.getImaginaryDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(862.739381425, 1.0);
      complexDoubleType0.mul((-3498.87274348454));
      complexDoubleType0.complexConjugate();
      double double0 = complexDoubleType0.getImaginaryDouble();
      assertEquals(3498.87274348454, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.setComplexNumber((-1896.2216), (-510.3216356994791));
      double double0 = complexDoubleType0.getImaginaryDouble();
      assertEquals((-510.3216356994791), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.setReal((-127.73819F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setReal((float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleArray doubleArray0 = new DoubleArray(0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setReal((float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.setReal((-49.726));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setReal((double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setReal(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.setImaginary(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setImaginary((float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(1, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setImaginary((float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.setImaginary((-558.4329739821));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setImaginary(128.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.setImaginary((double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      DoubleBufferAccess doubleBufferAccess0 = DoubleBufferAccess.fromByteBuffer(byteBuffer0, false);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set(complexDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      DirtyDoubleArray dirtyDoubleArray0 = new DirtyDoubleArray(0);
      ComplexDoubleType complexDoubleType1 = new ComplexDoubleType(dirtyDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set(complexDoubleType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long[] longArray0 = new long[0];
      DoubleNtree doubleNtree0 = new DoubleNtree(longArray0, longArray0, (-1.0));
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleNtree0);
      // Undeclared exception!
      complexDoubleType0.set((-1.0), 128.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.set(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set((double) 0, 4.9E-324);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(doubleArray0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.set(0.0, (-2523.9266));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.getRealFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = DoubleBuffer.allocate(1);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      DoubleBufferAccess doubleBufferAccess1 = doubleBufferAccess0.newInstance(byteBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess1);
      // Undeclared exception!
      try { 
        complexDoubleType0.getRealFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getRealFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.getRealDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, 0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getRealDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getRealDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.getImaginaryFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      DoubleBuffer doubleBuffer0 = byteBuffer0.asDoubleBuffer();
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getImaginaryFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, true);
      complexDoubleType0.dataAccess = (DoubleAccess) dirtyVolatileDoubleArray0;
      // Undeclared exception!
      try { 
        complexDoubleType0.getImaginaryFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.getImaginaryDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0, false);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getImaginaryDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DirtyVolatileDoubleArray dirtyVolatileDoubleArray0 = new DirtyVolatileDoubleArray(0, true);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(dirtyVolatileDoubleArray0);
      // Undeclared exception!
      try { 
        complexDoubleType0.getImaginaryDouble();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        complexDoubleType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DoubleArray doubleArray1 = new DoubleArray(doubleArray0);
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(doubleArray1);
      // Undeclared exception!
      try { 
        complexDoubleType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      complexDoubleType0.set(0.0, 0.0);
      assertEquals(0, complexDoubleType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType(1765.84401195, 1765.84401195);
      float float0 = complexDoubleType0.getRealFloat();
      assertEquals(1765.844F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      float float0 = complexDoubleType0.getImaginaryFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      // Undeclared exception!
      try { 
        complexDoubleType0.updateContainer(complexDoubleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      // Undeclared exception!
      try { 
        complexDoubleType0.set((ComplexDoubleType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      Fraction fraction0 = complexDoubleType0.getEntitiesPerPixel();
      assertEquals(2.0, fraction0.getRatio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      NativeTypeFactory<ComplexDoubleType, DoubleAccess> nativeTypeFactory0 = complexDoubleType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.DOUBLE, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        complexDoubleType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.complex.ComplexDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      Index index0 = complexDoubleType0.index();
      assertEquals(0, index0.get());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ComplexDoubleType complexDoubleType0 = new ComplexDoubleType();
      ComplexDoubleType complexDoubleType1 = complexDoubleType0.copy();
      assertTrue(complexDoubleType1.equals((Object)complexDoubleType0));
  }
}
