/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 18:42:35 GMT 2022
 */

package net.imglib2.type.numeric.integer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.ByteAccess;
import net.imglib2.img.basictypeaccess.array.ByteArray;
import net.imglib2.img.basictypeaccess.array.DirtyByteArray;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileByteArray;
import net.imglib2.img.sparse.ByteNtree;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.logic.BitType;
import net.imglib2.type.numeric.integer.ByteType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteType_ESTest extends ByteType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.setInteger(1);
      assertEquals(0, byteType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      long long0 = byteType0.getIntegerLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.copy();
      byteType1.dec();
      byteType0.sub(byteType1);
      long long0 = byteType0.getIntegerLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      ByteArray byteArray1 = new ByteArray(byteArray0);
      ByteType byteType0 = new ByteType(byteArray1);
      int int0 = byteType0.getInteger();
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.setReal((-888.0F));
      int int0 = byteType0.getInteger();
      assertEquals((-120), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.copy();
      byteType1.dec();
      byteType0.sub(byteType1);
      BigInteger bigInteger0 = byteType0.getBigInteger();
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.copy();
      byteType1.dec();
      byteType0.sub(byteType1);
      byte byte0 = byteType0.get();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.setComplexNumber(679.4F, 679.4F);
      byte byte0 = byteType0.get();
      assertEquals((byte) (-89), byte0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long[] longArray0 = new long[7];
      ByteNtree byteNtree0 = new ByteNtree(longArray0, longArray0, (byte)0);
      ByteType byteType0 = new ByteType(byteNtree0);
      // Undeclared exception!
      byteType0.setInteger(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteType byteType0 = new ByteType((byte)78);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess();
      byteType0.dataAccess = (ByteAccess) byteBufferAccess0;
      // Undeclared exception!
      try { 
        byteType0.setInteger((long) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ByteBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, true);
      ByteType byteType0 = new ByteType(byteBufferAccess0);
      // Undeclared exception!
      try { 
        byteType0.setInteger((long) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(0);
      ByteType byteType0 = new ByteType(dirtyByteArray0);
      // Undeclared exception!
      try { 
        byteType0.setInteger((long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.setInteger((-2313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolatileByteArray volatileByteArray0 = new VolatileByteArray(0, false);
      ByteType byteType0 = new ByteType(volatileByteArray0);
      // Undeclared exception!
      try { 
        byteType0.setInteger(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      // Undeclared exception!
      try { 
        byteType0.setBigInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.ByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.set((byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(0);
      ByteType byteType0 = new ByteType(dirtyByteArray0);
      // Undeclared exception!
      try { 
        byteType0.set((byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteType byteType0 = new ByteType((byte) (-93));
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.getIntegerLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(0, true);
      ByteType byteType0 = new ByteType(byteBufferAccess0);
      // Undeclared exception!
      try { 
        byteType0.getIntegerLong();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.getInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(0);
      ByteType byteType0 = new ByteType(byteBufferAccess0);
      // Undeclared exception!
      try { 
        byteType0.getInteger();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(0, true);
      ByteType byteType0 = new ByteType(dirtyVolatileByteArray0);
      // Undeclared exception!
      try { 
        byteType0.getInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.getBigInteger();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer(byteBuffer0, true);
      byteBuffer0.flip();
      byteType0.dataAccess = (ByteAccess) byteBufferAccess0;
      // Undeclared exception!
      try { 
        byteType0.getBigInteger();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(0);
      ByteType byteType0 = new ByteType(dirtyByteArray0);
      // Undeclared exception!
      try { 
        byteType0.getBigInteger();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteType byteType0 = new ByteType((ByteAccess) null);
      // Undeclared exception!
      try { 
        byteType0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(0);
      ByteType byteType0 = new ByteType(byteBufferAccess0);
      // Undeclared exception!
      try { 
        byteType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DirtyByteArray dirtyByteArray0 = new DirtyByteArray(0);
      ByteType byteType0 = new ByteType(dirtyByteArray0);
      // Undeclared exception!
      try { 
        byteType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, false);
      long[] longArray0 = new long[4];
      Fraction fraction0 = new Fraction();
      ArrayImg<BitType, ByteBufferAccess> arrayImg0 = new ArrayImg<BitType, ByteBufferAccess>(byteBufferAccess0, longArray0, fraction0);
      ByteType byteType0 = new ByteType(arrayImg0);
      assertEquals(0.0, byteType0.getImaginaryDouble(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.set((byte) (-34));
      assertEquals(1.0, byteType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byte byte0 = byteType0.get();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger bigInteger0 = new BigInteger(4814, mockRandom0);
      byteType0.setBigInteger(bigInteger0);
      assertEquals(0, byteType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArray byteArray1 = new ByteArray(byteArray0);
      ByteType byteType0 = new ByteType(byteArray1);
      NativeTypeFactory<ByteType, ByteAccess> nativeTypeFactory0 = byteType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.BYTE, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteType byteType0 = new ByteType((byte) (-1));
      ByteType byteType1 = byteType0.createVariable();
      assertEquals(8, byteType1.getBitsPerPixel());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      BigInteger bigInteger0 = byteType0.getBigInteger();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      double double0 = byteType0.getMinValue();
      assertEquals((-128.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.setReal((-888.0F));
      BigInteger bigInteger0 = byteType0.getBigInteger();
      assertEquals((short) (-120), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      byteType0.setInteger((-399L));
      assertEquals(0.0F, byteType0.getPhaseFloat(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      int int0 = byteType0.getInteger();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      double double0 = byteType0.getMaxValue();
      assertEquals(127.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteType byteType0 = new ByteType((byte) (-93));
      long long0 = byteType0.getIntegerLong();
      assertEquals((-93L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteType byteType0 = new ByteType();
      ByteType byteType1 = byteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        byteType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }
}
