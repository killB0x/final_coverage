/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 14:21:42 GMT 2022
 */

package net.imglib2.type.label;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.LinkedList;
import net.imglib2.img.basictypeaccess.CharAccess;
import net.imglib2.img.basictypeaccess.array.CharArray;
import net.imglib2.img.basictypeaccess.array.DirtyCharArray;
import net.imglib2.img.basictypeaccess.nio.CharBufferAccess;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.label.BasePairBitType;
import net.imglib2.type.label.BasePairCharType;
import net.imglib2.type.numeric.integer.Unsigned128BitType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasePairCharType_ESTest extends BasePairCharType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('\\');
      char char0 = basePairCharType0.getChar();
      assertEquals('\\', char0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('5');
      char char0 = basePairCharType0.getChar();
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('u');
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.gap;
      BasePairCharType basePairCharType1 = new BasePairCharType(basePairBitType_Base0);
      int int0 = basePairCharType0.compareTo(basePairCharType1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.U;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      int int0 = basePairCharType1.compareTo(basePairCharType0);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.gap;
      basePairCharType0.set(basePairBitType_Base0);
      byte byte0 = basePairCharType0.baseToValue();
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType0.valueEquals(basePairCharType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('V');
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBufferAccess charBufferAccess0 = CharBufferAccess.fromByteBuffer(byteBuffer0, false);
      basePairCharType1.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType1.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(0);
      basePairCharType0.dataAccess = (CharAccess) dirtyCharArray0;
      // Undeclared exception!
      try { 
        basePairCharType0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.setChar('8');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      // Undeclared exception!
      try { 
        basePairCharType0.set((BasePairCharType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.G;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      BasePairBitType.Base basePairBitType_Base1 = basePairCharType0.get();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.set(basePairBitType_Base1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.G;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(charBuffer0, true);
      basePairCharType0.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType0.set(basePairBitType_Base0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      char[] charArray0 = new char[0];
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(charArray0);
      basePairCharType1.dataAccess = (CharAccess) dirtyCharArray0;
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.G;
      // Undeclared exception!
      try { 
        basePairCharType1.set(basePairBitType_Base0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.DirtyCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.getChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('u');
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      CharBufferAccess charBufferAccess0 = CharBufferAccess.fromByteBuffer(byteBuffer0, false);
      basePairCharType1.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType1.getChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('Y');
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(byteBuffer0);
      basePairCharType1.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType1.get();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBufferAccess charBufferAccess0 = new CharBufferAccess(charBuffer0);
      basePairCharType0.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      CharArray charArray0 = new CharArray(0);
      basePairCharType0.dataAccess = (CharAccess) charArray0;
      // Undeclared exception!
      try { 
        basePairCharType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.complement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType0.compareTo(basePairCharType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('d');
      BasePairCharType basePairCharType1 = new BasePairCharType();
      CharArray charArray0 = new CharArray(0);
      basePairCharType1.dataAccess = (CharAccess) charArray0;
      // Undeclared exception!
      try { 
        basePairCharType0.compareTo(basePairCharType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('u');
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      CharBufferAccess charBufferAccess0 = CharBufferAccess.fromByteBuffer(byteBuffer0, false);
      basePairCharType1.dataAccess = (CharAccess) charBufferAccess0;
      // Undeclared exception!
      try { 
        basePairCharType1.baseToValue();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      DirtyCharArray dirtyCharArray0 = new DirtyCharArray(0);
      basePairCharType0.dataAccess = (CharAccess) dirtyCharArray0;
      // Undeclared exception!
      try { 
        basePairCharType0.baseToValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractCharArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<CharBufferAccess> linkedList0 = new LinkedList<CharBufferAccess>();
      long[] longArray0 = new long[4];
      BasePairCharType basePairCharType0 = new BasePairCharType('u');
      Fraction fraction0 = basePairCharType0.getEntitiesPerPixel();
      PlanarImg<Unsigned128BitType, CharBufferAccess> planarImg0 = new PlanarImg<Unsigned128BitType, CharBufferAccess>(linkedList0, longArray0, fraction0);
      BasePairCharType basePairCharType1 = new BasePairCharType(planarImg0);
      // Undeclared exception!
      try { 
        basePairCharType1.updateContainer(basePairCharType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.type.label.BasePairCharType cannot be cast to class net.imglib2.img.planar.PlanarImg$PlanarContainerSampler (net.imglib2.type.label.BasePairCharType and net.imglib2.img.planar.PlanarImg$PlanarContainerSampler are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @39293c00)
         //
         verifyException("net.imglib2.img.planar.PlanarImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      basePairCharType0.setChar('N');
      assertEquals(0, basePairCharType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      char char0 = basePairCharType0.getChar();
      assertEquals('N', char0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      boolean boolean0 = basePairCharType0.valueEquals(basePairCharType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.U;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      boolean boolean0 = basePairCharType1.valueEquals(basePairCharType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.U;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      BasePairCharType basePairCharType1 = basePairCharType0.createVariable();
      basePairCharType1.complement();
      assertEquals(0, basePairCharType1.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.G;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      basePairCharType0.complement();
      basePairCharType0.complement();
      assertEquals(0, basePairCharType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.U;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      basePairCharType0.complement();
      basePairCharType0.complement();
      basePairCharType0.complement();
      assertEquals(0, basePairCharType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasePairBitType.Base basePairBitType_Base0 = BasePairBitType.Base.U;
      BasePairCharType basePairCharType0 = new BasePairCharType(basePairBitType_Base0);
      String string0 = basePairCharType0.toString();
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      byte byte0 = basePairCharType0.baseToValue();
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      NativeTypeFactory<BasePairCharType, CharAccess> nativeTypeFactory0 = basePairCharType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.CHAR, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        basePairCharType1.baseToValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      basePairCharType0.set(basePairCharType0);
      assertEquals(0, basePairCharType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      // Undeclared exception!
      try { 
        basePairCharType0.updateContainer(basePairCharType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.label.BasePairCharType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType();
      BasePairCharType basePairCharType1 = basePairCharType0.copy();
      assertEquals(0, basePairCharType1.getIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BasePairCharType basePairCharType0 = new BasePairCharType('d');
      int int0 = basePairCharType0.compareTo(basePairCharType0);
      assertEquals(0, int0);
  }
}
