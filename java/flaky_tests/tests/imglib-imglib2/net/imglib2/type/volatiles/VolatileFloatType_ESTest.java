/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 17:22:20 GMT 2022
 */

package net.imglib2.type.volatiles;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.VolatileFloatAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileFloatArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.real.FloatType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VolatileFloatType_ESTest extends VolatileFloatType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<VolatileFloatArray> linkedList0 = new LinkedList<VolatileFloatArray>();
      long[] longArray0 = new long[9];
      Fraction fraction0 = new Fraction((-2471L), 1L);
      PlanarImg<FloatType, VolatileFloatArray> planarImg0 = new PlanarImg<FloatType, VolatileFloatArray>(linkedList0, longArray0, fraction0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(planarImg0);
      FloatType floatType0 = volatileFloatType0.get();
      // Undeclared exception!
      try { 
        volatileFloatType0.updateContainer(floatType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.imglib2.type.volatiles.VolatileFloatType$WrappedFloatType cannot be cast to class net.imglib2.img.planar.PlanarImg$PlanarContainerSampler (net.imglib2.type.volatiles.VolatileFloatType$WrappedFloatType and net.imglib2.img.planar.PlanarImg$PlanarContainerSampler are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @3d72d219)
         //
         verifyException("net.imglib2.img.planar.PlanarImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.set((-169.34938F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.set((float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(1.0F);
      volatileFloatType0.createVariable();
      // Undeclared exception!
      try { 
        volatileFloatType0.duplicateTypeOnSameNativeImg();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.createVariable();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      // Undeclared exception!
      try { 
        volatileFloatType0.copy();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess();
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.FloatBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[] floatArray0 = new float[0];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        volatileFloatType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = null;
      try {
        volatileFloatType0 = new VolatileFloatType((VolatileFloatAccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileFloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(0.0F);
      volatileFloatType0.set(0.0F);
      assertTrue(volatileFloatType0.isValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(1.0F);
      NativeTypeFactory<VolatileFloatType, ?> nativeTypeFactory0 = volatileFloatType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.FLOAT, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      // Undeclared exception!
      try { 
        volatileFloatType0.updateContainer(volatileFloatType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileFloatType", e);
      }
  }
}
