/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 19:05:51 GMT 2022
 */

package net.imglib2.type.volatiles;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.VolatileDoubleAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileDoubleArray;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.NativeTypeFactory;
import net.imglib2.type.PrimitiveType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.type.volatiles.VolatileARGBType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.util.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VolatileDoubleType_ESTest extends VolatileDoubleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType((-3632.95));
      assertEquals(1.7976931348623157E308, volatileDoubleType0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      DoubleType doubleType0 = volatileDoubleType0.get();
      // Undeclared exception!
      try { 
        volatileDoubleType0.updateContainer(doubleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DoubleBufferAccess> linkedList0 = new LinkedList<DoubleBufferAccess>();
      long[] longArray0 = new long[4];
      IntBuffer intBuffer0 = mock(IntBuffer.class, new ViolatedAssumptionAnswer());
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(intBuffer0);
      VolatileARGBType volatileARGBType0 = new VolatileARGBType(intBufferAccess0);
      Fraction fraction0 = volatileARGBType0.getEntitiesPerPixel();
      PlanarImg<DoubleType, DoubleBufferAccess> planarImg0 = new PlanarImg<DoubleType, DoubleBufferAccess>(linkedList0, longArray0, fraction0);
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(planarImg0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        volatileDoubleType0.updateContainer(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.imglib2.img.planar.PlanarImg$PlanarContainerSampler (java.lang.Object is in module java.base of loader 'bootstrap'; net.imglib2.img.planar.PlanarImg$PlanarContainerSampler is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @19713f64)
         //
         verifyException("net.imglib2.img.planar.PlanarImg", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      VolatileDoubleType volatileDoubleType1 = volatileDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileDoubleType1.set(2799.59466566424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.DoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess();
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        volatileDoubleType0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(0);
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        volatileDoubleType0.copy();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VolatileDoubleArray volatileDoubleArray0 = new VolatileDoubleArray(0, false);
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(volatileDoubleArray0);
      // Undeclared exception!
      try { 
        volatileDoubleType0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractDoubleArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = null;
      try {
        volatileDoubleType0 = new VolatileDoubleType((VolatileDoubleAccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.VolatileDoubleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      VolatileDoubleType volatileDoubleType1 = volatileDoubleType0.createVariable();
      // Undeclared exception!
      try { 
        volatileDoubleType1.duplicateTypeOnSameNativeImg();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      volatileDoubleType0.set(2799.59466566424);
      assertEquals(0, volatileDoubleType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      NativeTypeFactory<VolatileDoubleType, ?> nativeTypeFactory0 = volatileDoubleType0.getNativeTypeFactory();
      assertEquals(PrimitiveType.DOUBLE, nativeTypeFactory0.getPrimitiveType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      // Undeclared exception!
      try { 
        volatileDoubleType0.copy();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleBuffer doubleBuffer0 = mock(DoubleBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((DoubleBuffer) null).when(doubleBuffer0).duplicate();
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(doubleBuffer0, true);
      long[] longArray0 = new long[4];
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      Fraction fraction0 = volatileDoubleType0.getEntitiesPerPixel();
      ArrayImg<DoubleType, DoubleBufferAccess> arrayImg0 = new ArrayImg<DoubleType, DoubleBufferAccess>(doubleBufferAccess0, longArray0, fraction0);
      VolatileDoubleType volatileDoubleType1 = new VolatileDoubleType(arrayImg0);
      DoubleType doubleType0 = volatileDoubleType1.get();
      volatileDoubleType1.updateContainer(doubleType0);
      assertEquals((-1.7976931348623157E308), volatileDoubleType1.getMinValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType();
      volatileDoubleType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileDoubleType0.createVariable();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
