/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 05 15:39:26 GMT 2022
 */

package net.imglib2.type.volatiles;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import net.imglib2.img.NativeImg;
import net.imglib2.img.basictypeaccess.nio.ByteBufferAccess;
import net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess;
import net.imglib2.img.basictypeaccess.nio.FloatBufferAccess;
import net.imglib2.img.basictypeaccess.nio.IntBufferAccess;
import net.imglib2.img.basictypeaccess.nio.LongBufferAccess;
import net.imglib2.img.basictypeaccess.nio.ShortBufferAccess;
import net.imglib2.img.basictypeaccess.volatiles.VolatileByteAccess;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileFloatArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray;
import net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileShortArray;
import net.imglib2.img.basictypeaccess.volatiles.array.VolatileShortArray;
import net.imglib2.type.volatiles.VolatileByteType;
import net.imglib2.type.volatiles.VolatileDoubleType;
import net.imglib2.type.volatiles.VolatileFloatType;
import net.imglib2.type.volatiles.VolatileIntType;
import net.imglib2.type.volatiles.VolatileLongType;
import net.imglib2.type.volatiles.VolatileRealType;
import net.imglib2.type.volatiles.VolatileShortType;
import net.imglib2.type.volatiles.VolatileUnsignedByteType;
import net.imglib2.type.volatiles.VolatileUnsignedIntType;
import net.imglib2.type.volatiles.VolatileUnsignedLongType;
import net.imglib2.type.volatiles.VolatileUnsignedShortType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractVolatileRealType_ESTest extends AbstractVolatileRealType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(578);
      VolatileUnsignedShortType volatileUnsignedShortType1 = volatileUnsignedShortType0.copy();
      boolean boolean0 = volatileUnsignedShortType1.equals(volatileUnsignedShortType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      short[] shortArray0 = new short[4];
      DirtyVolatileShortArray dirtyVolatileShortArray0 = new DirtyVolatileShortArray(shortArray0, false);
      VolatileUnsignedShortType volatileUnsignedShortType1 = new VolatileUnsignedShortType(dirtyVolatileShortArray0);
      volatileUnsignedShortType0.pow(volatileUnsignedShortType1);
      assertFalse(volatileUnsignedShortType0.isValid());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(1);
      VolatileUnsignedShortType volatileUnsignedShortType1 = new VolatileUnsignedShortType(1);
      volatileUnsignedShortType1.setValid(false);
      volatileUnsignedShortType1.div(volatileUnsignedShortType0);
      assertFalse(volatileUnsignedShortType1.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.createVariable();
      volatileFloatType1.setValid(false);
      volatileFloatType0.mul(volatileFloatType1);
      assertFalse(volatileFloatType0.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      VolatileFloatType volatileFloatType1 = new VolatileFloatType(floatBufferAccess0);
      volatileFloatType0.sub(volatileFloatType1);
      assertFalse(volatileFloatType0.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      short[] shortArray0 = new short[4];
      ShortBuffer shortBuffer0 = ShortBuffer.wrap(shortArray0);
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(shortBuffer0, false);
      VolatileShortType volatileShortType0 = new VolatileShortType();
      VolatileShortType volatileShortType1 = new VolatileShortType(shortBufferAccess0);
      volatileShortType1.add(volatileShortType0);
      assertFalse(volatileShortType1.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(1);
      volatileUnsignedShortType0.setComplexNumber(442.0871F, (-3.4028235E38F));
      assertEquals(65535.0, volatileUnsignedShortType0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(578);
      volatileUnsignedShortType0.set(volatileUnsignedShortType0);
      assertEquals(65535.0, volatileUnsignedShortType0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VolatileIntType volatileIntType0 = new VolatileIntType(1475);
      float float0 = volatileIntType0.getRealFloat();
      assertEquals(1475.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.setReal((-3318.1335160057674));
      float float0 = volatileFloatType0.getRealFloat();
      assertEquals((-3318.1335F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType(3256);
      double double0 = volatileUnsignedIntType0.getRealDouble();
      assertEquals(3256.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType((-1933.4F));
      double double0 = volatileFloatType0.getRealDouble();
      assertEquals((-1933.4000244140625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      float float0 = volatileUnsignedShortType0.getPowerFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolatileIntType volatileIntType0 = new VolatileIntType(1);
      float float0 = volatileIntType0.getPowerFloat();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VolatileIntType volatileIntType0 = new VolatileIntType(1475);
      double double0 = volatileIntType0.getPowerDouble();
      assertEquals(1475.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VolatileByteType volatileByteType0 = new VolatileByteType((byte) (-100));
      double double0 = volatileByteType0.getPowerDouble();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType();
      VolatileUnsignedByteType volatileUnsignedByteType1 = volatileUnsignedByteType0.copy();
      volatileUnsignedByteType0.setComplexNumber(1309.0F, 1309.0F);
      int int0 = volatileUnsignedByteType0.compareTo(volatileUnsignedByteType1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(15, false);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(byteBufferAccess0);
      VolatileUnsignedByteType volatileUnsignedByteType1 = volatileUnsignedByteType0.copy();
      assertTrue(volatileUnsignedByteType1.equals((Object)volatileUnsignedByteType0));
      
      volatileUnsignedByteType1.setComplexNumber((float) 15, (float) 15);
      int int0 = volatileUnsignedByteType0.compareTo(volatileUnsignedByteType1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(2147483639L);
      // Undeclared exception!
      try { 
        volatileUnsignedLongType0.valueEquals((VolatileUnsignedLongType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      VolatileFloatType volatileFloatType1 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.valueEquals(volatileFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType0.sub(volatileFloatType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.setZero();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VolatileShortType volatileShortType0 = new VolatileShortType();
      VolatileShortType volatileShortType1 = volatileShortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileShortType1.setReal((-2767.4749F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      VolatileUnsignedIntType volatileUnsignedIntType1 = volatileUnsignedIntType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileUnsignedIntType1.setReal((-1212.54));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericIntType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(byteArray0, true);
      DirtyVolatileByteArray dirtyVolatileByteArray1 = dirtyVolatileByteArray0.createArray(0, false);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(dirtyVolatileByteArray1);
      // Undeclared exception!
      try { 
        volatileUnsignedByteType0.setReal(1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      VolatileUnsignedShortType volatileUnsignedShortType1 = volatileUnsignedShortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileUnsignedShortType1.setOne();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.setComplexNumber((float) 1, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(7);
      VolatileUnsignedByteType volatileUnsignedByteType1 = volatileUnsignedByteType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileUnsignedByteType1.setComplexNumber((double) 7, 1229.3137474);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(byteBuffer0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.setComplexNumber((double) 1, (double) 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long[] longArray0 = new long[0];
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(longArray0, false);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(dirtyVolatileLongArray0);
      VolatileRealType<VolatileUnsignedLongType> volatileRealType0 = new VolatileRealType<VolatileUnsignedLongType>(volatileUnsignedLongType0, false);
      // Undeclared exception!
      try { 
        volatileRealType0.setComplexNumber(2313.929557484741, (-2.147483648E9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VolatileShortType volatileShortType0 = new VolatileShortType();
      // Undeclared exception!
      try { 
        volatileShortType0.set((VolatileShortType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(0.0F);
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, false);
      VolatileFloatType volatileFloatType1 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.set(volatileFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      // Undeclared exception!
      try { 
        volatileFloatType0.pow((VolatileFloatType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(byteBuffer0);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.pow(volatileUnsignedShortType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      short[] shortArray0 = new short[0];
      DirtyVolatileShortArray dirtyVolatileShortArray0 = new DirtyVolatileShortArray(shortArray0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(dirtyVolatileShortArray0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.pow(volatileUnsignedShortType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VolatileByteType volatileByteType0 = new VolatileByteType((NativeImg<?, ? extends VolatileByteAccess>) null);
      // Undeclared exception!
      try { 
        volatileByteType0.pow(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericByteType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ShortBufferAccess shortBufferAccess0 = ShortBufferAccess.fromByteBuffer(byteBuffer0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.pow(0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DirtyVolatileByteArray dirtyVolatileByteArray0 = new DirtyVolatileByteArray(0, false);
      VolatileByteType volatileByteType0 = new VolatileByteType(dirtyVolatileByteArray0);
      // Undeclared exception!
      try { 
        volatileByteType0.pow((-5.18565439104946));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractByteArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.mul((VolatileUnsignedShortType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(0);
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(floatBuffer0);
      VolatileFloatType volatileFloatType1 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.mul(volatileFloatType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        volatileFloatType0.mul(volatileFloatType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(1087, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.mul(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.mul(0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VolatileShortArray volatileShortArray0 = new VolatileShortArray(1, true);
      VolatileShortArray volatileShortArray1 = volatileShortArray0.createArray(0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(volatileShortArray1);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.mul((float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess((DoubleBuffer) null);
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        volatileDoubleType0.mul(1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.DoubleBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(0, true);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(longBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedLongType0.mul((double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DirtyVolatileShortArray dirtyVolatileShortArray0 = new DirtyVolatileShortArray(1749, true);
      DirtyVolatileShortArray dirtyVolatileShortArray1 = dirtyVolatileShortArray0.createArray(0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(dirtyVolatileShortArray1);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.mul(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.inc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      FloatBufferAccess floatBufferAccess0 = FloatBufferAccess.fromByteBuffer(byteBuffer0, true);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.inc();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(0, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray0);
      // Undeclared exception!
      try { 
        volatileFloatType0.inc();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VolatileShortType volatileShortType0 = new VolatileShortType();
      VolatileShortType volatileShortType1 = volatileShortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileShortType1.getRealFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FloatBufferAccess floatBufferAccess0 = new FloatBufferAccess(0);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(floatBufferAccess0);
      // Undeclared exception!
      try { 
        volatileFloatType0.getRealFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[] floatArray0 = new float[8];
      DirtyVolatileFloatArray dirtyVolatileFloatArray0 = new DirtyVolatileFloatArray(floatArray0, false);
      DirtyVolatileFloatArray dirtyVolatileFloatArray1 = dirtyVolatileFloatArray0.createArray(0, false);
      VolatileFloatType volatileFloatType0 = new VolatileFloatType(dirtyVolatileFloatArray1);
      // Undeclared exception!
      try { 
        volatileFloatType0.getRealFloat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractFloatArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.getRealDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess();
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.getPowerFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.img.basictypeaccess.nio.ShortBufferAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileFloatType1.getPowerDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.real.FloatType", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ShortBufferAccess shortBufferAccess0 = new ShortBufferAccess(byteBuffer0, false);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.getPowerDouble();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(1);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.div((VolatileUnsignedShortType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.volatiles.AbstractVolatileRealType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VolatileDoubleType volatileDoubleType0 = new VolatileDoubleType(3.4028234663852886E38);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      DoubleBufferAccess doubleBufferAccess0 = new DoubleBufferAccess(byteBuffer0);
      VolatileDoubleType volatileDoubleType1 = new VolatileDoubleType(doubleBufferAccess0);
      // Undeclared exception!
      try { 
        volatileDoubleType0.div(volatileDoubleType1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      VolatileShortArray volatileShortArray0 = new VolatileShortArray(0, true);
      VolatileUnsignedShortType volatileUnsignedShortType1 = new VolatileUnsignedShortType(volatileShortArray0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.div(volatileUnsignedShortType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.array.AbstractShortArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.div(volatileUnsignedShortType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.imglib2.type.numeric.integer.UnsignedShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VolatileLongType volatileLongType0 = new VolatileLongType();
      VolatileLongType volatileLongType1 = volatileLongType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileLongType1.dec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericLongType", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IntBuffer intBuffer0 = IntBuffer.allocate(0);
      IntBufferAccess intBufferAccess0 = new IntBufferAccess(intBuffer0);
      VolatileIntType volatileIntType0 = new VolatileIntType(intBufferAccess0);
      // Undeclared exception!
      try { 
        volatileIntType0.dec();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      VolatileUnsignedShortType volatileUnsignedShortType1 = volatileUnsignedShortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.compareTo(volatileUnsignedShortType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LongBufferAccess longBufferAccess0 = new LongBufferAccess(0);
      VolatileLongType volatileLongType0 = new VolatileLongType(longBufferAccess0);
      // Undeclared exception!
      try { 
        volatileLongType0.compareTo(volatileLongType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      VolatileUnsignedShortType volatileUnsignedShortType1 = volatileUnsignedShortType0.duplicateTypeOnSameNativeImg();
      // Undeclared exception!
      try { 
        volatileUnsignedShortType1.add(volatileUnsignedShortType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.imglib2.type.numeric.integer.GenericShortType", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      boolean boolean0 = volatileFloatType0.valueEquals(volatileFloatType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(555);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType();
      boolean boolean0 = volatileUnsignedShortType0.equals(volatileUnsignedByteType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType();
      VolatileUnsignedByteType volatileUnsignedByteType1 = volatileUnsignedByteType0.copy();
      volatileUnsignedByteType0.setComplexNumber(1309.0F, 1309.0F);
      boolean boolean0 = volatileUnsignedByteType1.valueEquals(volatileUnsignedByteType0);
      assertFalse(volatileUnsignedByteType1.equals((Object)volatileUnsignedByteType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      VolatileFloatType volatileFloatType1 = volatileFloatType0.duplicateTypeOnSameNativeImg();
      boolean boolean0 = volatileFloatType1.valueEquals(volatileFloatType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(1);
      float float0 = volatileUnsignedShortType0.getPhaseFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, (int) (byte)1, (int) (byte)0);
      ShortBufferAccess shortBufferAccess0 = ShortBufferAccess.fromByteBuffer(byteBuffer0, true);
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(shortBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedShortType0.getPowerFloat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ByteBufferAccess byteBufferAccess0 = new ByteBufferAccess(byteBuffer0, true);
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(byteBufferAccess0);
      // Undeclared exception!
      try { 
        volatileUnsignedByteType0.setReal(64.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      double double0 = volatileFloatType0.getRealDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      volatileUnsignedShortType0.setReal(0.0F);
      assertEquals(0, volatileUnsignedShortType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      float float0 = volatileFloatType0.getRealFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(1);
      volatileUnsignedShortType0.setImaginary((-1933.4F));
      assertTrue(volatileUnsignedShortType0.isValid());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VolatileUnsignedIntType volatileUnsignedIntType0 = new VolatileUnsignedIntType();
      volatileUnsignedIntType0.setImaginary(3155.236421251416);
      assertEquals(0, volatileUnsignedIntType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.complexConjugate();
      assertEquals(1.401298464324817E-45, volatileFloatType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(578);
      volatileUnsignedShortType0.pow((double) 578);
      assertEquals(1.0, volatileUnsignedShortType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      volatileUnsignedShortType0.mul(0.0);
      assertEquals(0, volatileUnsignedShortType0.getIndex());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.mul((-297.8F));
      assertTrue(volatileFloatType0.isValid());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.setOne();
      assertEquals(1.401298464324817E-45, volatileFloatType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      int int0 = volatileUnsignedShortType0.compareTo(volatileUnsignedShortType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      double double0 = volatileFloatType0.getPowerDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.setZero();
      assertEquals(3.4028234663852886E38, volatileFloatType0.getMaxValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType();
      double double0 = volatileUnsignedByteType0.getPhaseDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      VolatileFloatType volatileFloatType0 = new VolatileFloatType();
      volatileFloatType0.inc();
      assertEquals(1.401298464324817E-45, volatileFloatType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(578);
      float float0 = volatileUnsignedShortType0.getImaginaryFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      VolatileLongType volatileLongType0 = new VolatileLongType();
      volatileLongType0.dec();
      assertEquals(1.0, volatileLongType0.getMinIncrement(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ByteBufferAccess byteBufferAccess0 = ByteBufferAccess.fromByteBuffer((ByteBuffer) null, true);
      VolatileByteType volatileByteType0 = new VolatileByteType(byteBufferAccess0);
      int int0 = volatileByteType0.getBitsPerPixel();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType(578);
      double double0 = volatileUnsignedShortType0.getImaginaryDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DirtyVolatileLongArray dirtyVolatileLongArray0 = new DirtyVolatileLongArray(0, true);
      VolatileUnsignedLongType volatileUnsignedLongType0 = new VolatileUnsignedLongType(dirtyVolatileLongArray0);
      // Undeclared exception!
      try { 
        volatileUnsignedLongType0.setComplexNumber((float) 0, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("net.imglib2.img.basictypeaccess.volatiles.array.DirtyVolatileLongArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      VolatileUnsignedShortType volatileUnsignedShortType0 = new VolatileUnsignedShortType();
      double double0 = volatileUnsignedShortType0.getMaxValue();
      assertEquals(65535.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      VolatileUnsignedByteType volatileUnsignedByteType0 = new VolatileUnsignedByteType(7);
      volatileUnsignedByteType0.setComplexNumber((double) 7, 1229.3137474);
      assertTrue(volatileUnsignedByteType0.isValid());
  }
}
