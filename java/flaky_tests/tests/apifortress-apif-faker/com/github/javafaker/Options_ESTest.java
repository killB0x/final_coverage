/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:11:12 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Faker;
import com.github.javafaker.Options;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = new Faker(mockRandom0);
      Options options0 = new Options(faker0);
      Enum<Locale.Category>[] enumArray0 = (Enum<Locale.Category>[]) Array.newInstance(Enum.class, 5);
      Enum<Locale.Category> enum0 = options0.option(enumArray0);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Faker faker0 = new Faker(locale0);
      Options options0 = new Options(faker0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) faker0;
      Object object0 = options0.option(objectArray0);
      assertSame(faker0, object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Options options0 = faker0.options();
      Class<Locale.Category> class0 = Locale.Category.class;
      Locale.Category locale_Category0 = options0.option(class0);
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Faker faker0 = new Faker();
      Options options0 = new Options(faker0);
      Options[] optionsArray0 = new Options[1];
      Options options1 = options0.nextElement(optionsArray0);
      assertNull(options1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Faker faker0 = new Faker(locale0);
      Options options0 = new Options(faker0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) faker0;
      Object object0 = options0.nextElement(objectArray0);
      assertSame(faker0, object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Faker faker0 = Faker.instance(locale0);
      Options options0 = new Options(faker0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      Object object0 = options0.nextElement((List<Object>) linkedList0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Faker faker0 = Faker.instance(locale0);
      Options options0 = new Options(faker0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) options0);
      Object object0 = options0.nextElement((List<Object>) linkedList0);
      assertSame(options0, object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Faker faker0 = Faker.instance(locale0);
      Options options0 = new Options(faker0);
      Options[] optionsArray0 = new Options[0];
      // Undeclared exception!
      try { 
        options0.option(optionsArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Faker faker0 = new Faker();
      Options options0 = new Options(faker0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        options0.nextElement(objectArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Faker faker0 = new Faker();
      Options options0 = faker0.options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        options0.nextElement((List<Object>) linkedList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options((Faker) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        options0.option(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options((Faker) null);
      // Undeclared exception!
      try { 
        options0.nextElement((List<Enum<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      Faker faker0 = new Faker(locale0);
      Options options0 = new Options(faker0);
      // Undeclared exception!
      try { 
        options0.nextElement((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options((Faker) null);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      // Undeclared exception!
      try { 
        options0.option(locale_CategoryArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Options", e);
      }
  }
}
