/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:19:32 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Address;
import com.github.javafaker.Ancient;
import com.github.javafaker.App;
import com.github.javafaker.Artist;
import com.github.javafaker.Avatar;
import com.github.javafaker.Beer;
import com.github.javafaker.Book;
import com.github.javafaker.Bool;
import com.github.javafaker.Business;
import com.github.javafaker.Cat;
import com.github.javafaker.ChuckNorris;
import com.github.javafaker.Code;
import com.github.javafaker.Color;
import com.github.javafaker.Commerce;
import com.github.javafaker.Company;
import com.github.javafaker.Country;
import com.github.javafaker.Crypto;
import com.github.javafaker.Currency;
import com.github.javafaker.DateAndTime;
import com.github.javafaker.Demographic;
import com.github.javafaker.Dog;
import com.github.javafaker.DragonBall;
import com.github.javafaker.Educator;
import com.github.javafaker.Esports;
import com.github.javafaker.Faker;
import com.github.javafaker.File;
import com.github.javafaker.Finance;
import com.github.javafaker.Food;
import com.github.javafaker.Friends;
import com.github.javafaker.FunnyName;
import com.github.javafaker.GameOfThrones;
import com.github.javafaker.Hacker;
import com.github.javafaker.HarryPotter;
import com.github.javafaker.Hipster;
import com.github.javafaker.HitchhikersGuideToTheGalaxy;
import com.github.javafaker.Hobbit;
import com.github.javafaker.HowIMetYourMother;
import com.github.javafaker.IdNumber;
import com.github.javafaker.Internet;
import com.github.javafaker.Job;
import com.github.javafaker.LeagueOfLegends;
import com.github.javafaker.Lebowski;
import com.github.javafaker.LordOfTheRings;
import com.github.javafaker.Lorem;
import com.github.javafaker.Matz;
import com.github.javafaker.Medical;
import com.github.javafaker.Music;
import com.github.javafaker.Name;
import com.github.javafaker.Number;
import com.github.javafaker.Options;
import com.github.javafaker.Overwatch;
import com.github.javafaker.PhoneNumber;
import com.github.javafaker.Pokemon;
import com.github.javafaker.RickAndMorty;
import com.github.javafaker.Robin;
import com.github.javafaker.RockBand;
import com.github.javafaker.Shakespeare;
import com.github.javafaker.SlackEmoji;
import com.github.javafaker.Space;
import com.github.javafaker.StarTrek;
import com.github.javafaker.Stock;
import com.github.javafaker.Superhero;
import com.github.javafaker.Team;
import com.github.javafaker.TwinPeaks;
import com.github.javafaker.University;
import com.github.javafaker.Weather;
import com.github.javafaker.Witcher;
import com.github.javafaker.Yoda;
import com.github.javafaker.Zelda;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.RandomService;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Faker_ESTest extends Faker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Faker faker0 = new Faker();
      String string0 = faker0.numerify("!D");
      assertEquals("!D", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      Faker faker0 = Faker.instance(locale0);
      String string0 = faker0.numerify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.letterify("WxJnsu,Flr.5u", false);
      assertEquals("WxJnsu,Flr.5u", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      Faker faker0 = new Faker(locale0);
      String string0 = faker0.letterify("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Faker faker0 = new Faker();
      String string0 = faker0.letterify("[?yAwj,p; 0qyD(b|{");
      assertEquals("[ayAwj,p; 0qyD(b|{", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.letterify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = new Faker(locale0, mockRandom0);
      String string0 = faker0.expression("+");
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Faker faker0 = new Faker();
      String string0 = faker0.bothify("com.github.javafaker.Faker", false);
      assertEquals("com.github.javafaker.Faker", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Faker faker0 = Faker.instance(locale0);
      String string0 = faker0.bothify("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Faker faker0 = Faker.instance(locale0);
      String string0 = faker0.bothify("und");
      assertEquals("und", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.resolve("creature.dog.breed");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/yaml/snakeyaml/Yaml
         //
         verifyException("com.github.javafaker.service.FakeValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Faker.instance((Locale) null, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.bothify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = null;
      try {
        faker0 = new Faker((Locale) null, mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Faker faker0 = null;
      try {
        faker0 = new Faker((Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = new Faker(mockRandom0);
      String string0 = faker0.expression("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Company company0 = faker0.company();
      assertNotNull(company0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.letterify((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Dog dog0 = faker0.dog();
      assertNotNull(dog0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Faker faker0 = Faker.instance();
      PhoneNumber phoneNumber0 = faker0.phoneNumber();
      assertNotNull(phoneNumber0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      // Undeclared exception!
      try { 
        faker0.regexify("0=O8~{g}<A~[i(uu6");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/mifmif/common/regex/Generex
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Robin robin0 = faker0.robin();
      assertNotNull(robin0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Address address0 = faker0.address();
      assertNotNull(address0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Faker faker0 = Faker.instance();
      TwinPeaks twinPeaks0 = faker0.twinPeaks();
      assertNotNull(twinPeaks0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Code code0 = faker0.code();
      assertNotNull(code0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.bothify((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Cat cat0 = faker0.cat();
      assertNotNull(cat0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Faker faker0 = new Faker();
      Hacker hacker0 = faker0.hacker();
      assertNotNull(hacker0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Faker faker0 = new Faker();
      Esports esports0 = faker0.esports();
      assertNotNull(esports0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Number number0 = faker0.number();
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Faker faker0 = Faker.instance();
      IdNumber idNumber0 = faker0.idNumber();
      assertNotNull(idNumber0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      Bool bool0 = faker0.bool();
      assertNotNull(bool0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Faker faker0 = new Faker();
      Lorem lorem0 = faker0.lorem();
      assertNotNull(lorem0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Faker faker0 = new Faker();
      StarTrek starTrek0 = faker0.starTrek();
      assertNotNull(starTrek0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Faker faker0 = Faker.instance();
      LordOfTheRings lordOfTheRings0 = faker0.lordOfTheRings();
      assertNotNull(lordOfTheRings0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Faker faker0 = new Faker();
      Currency currency0 = faker0.currency();
      assertNotNull(currency0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Faker faker0 = new Faker();
      Lebowski lebowski0 = faker0.lebowski();
      assertNotNull(lebowski0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Faker faker0 = new Faker();
      Beer beer0 = faker0.beer();
      assertNotNull(beer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Faker faker0 = new Faker();
      Superhero superhero0 = faker0.superhero();
      assertNotNull(superhero0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Internet internet0 = faker0.internet();
      assertNotNull(internet0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Commerce commerce0 = faker0.commerce();
      assertNotNull(commerce0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Avatar avatar0 = faker0.avatar();
      assertNotNull(avatar0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Faker faker0 = Faker.instance();
      HarryPotter harryPotter0 = faker0.harryPotter();
      assertNotNull(harryPotter0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Ancient ancient0 = faker0.ancient();
      assertNotNull(ancient0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.numerify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = faker0.date();
      assertNotNull(dateAndTime0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Matz matz0 = faker0.matz();
      assertNotNull(matz0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Name name0 = faker0.name();
      assertNotNull(name0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Zelda zelda0 = faker0.zelda();
      assertNotNull(zelda0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Faker faker0 = Faker.instance();
      RickAndMorty rickAndMorty0 = faker0.rickAndMorty();
      assertNotNull(rickAndMorty0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Food food0 = faker0.food();
      assertNotNull(food0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Faker faker0 = Faker.instance();
      FakeValuesService fakeValuesService0 = faker0.fakeValuesService();
      assertNotNull(fakeValuesService0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Faker faker0 = Faker.instance();
      HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy0 = faker0.hitchhikersGuideToTheGalaxy();
      assertNotNull(hitchhikersGuideToTheGalaxy0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Faker faker0 = Faker.instance();
      File file0 = faker0.file();
      assertNotNull(file0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Faker faker0 = new Faker();
      Job job0 = faker0.job();
      assertNotNull(job0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Faker faker0 = Faker.instance();
      FunnyName funnyName0 = faker0.funnyName();
      assertNotNull(funnyName0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Witcher witcher0 = faker0.witcher();
      assertNotNull(witcher0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance(locale0, (Random) mockRandom0);
      assertNotNull(faker0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Faker faker0 = new Faker();
      Educator educator0 = faker0.educator();
      assertNotNull(educator0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      Pokemon pokemon0 = faker0.pokemon();
      assertNotNull(pokemon0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Faker faker0 = new Faker();
      Yoda yoda0 = faker0.yoda();
      assertNotNull(yoda0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Demographic demographic0 = faker0.demographic();
      assertNotNull(demographic0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Artist artist0 = faker0.artist();
      assertNotNull(artist0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Faker faker0 = new Faker();
      Book book0 = faker0.book();
      assertNotNull(book0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Faker faker0 = Faker.instance();
      GameOfThrones gameOfThrones0 = faker0.gameOfThrones();
      assertNotNull(gameOfThrones0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = Faker.instance((Random) mockRandom0);
      assertNotNull(faker0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Faker faker0 = new Faker();
      RockBand rockBand0 = faker0.rockBand();
      assertNotNull(rockBand0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Faker faker0 = new Faker();
      LeagueOfLegends leagueOfLegends0 = faker0.leagueOfLegends();
      assertNotNull(leagueOfLegends0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      HowIMetYourMother howIMetYourMother0 = faker0.howIMetYourMother();
      assertNotNull(howIMetYourMother0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Options options0 = faker0.options();
      assertNotNull(options0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Faker faker0 = new Faker();
      SlackEmoji slackEmoji0 = faker0.slackEmoji();
      assertNotNull(slackEmoji0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Hipster hipster0 = faker0.hipster();
      assertNotNull(hipster0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Faker faker0 = new Faker();
      // Undeclared exception!
      try { 
        faker0.resolve("W|v>4{t4=a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // W|v>4{t4=a resulted in null expression
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Overwatch overwatch0 = faker0.overwatch();
      assertNotNull(overwatch0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        Faker.instance((Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // locale is required
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Faker faker0 = Faker.instance();
      RandomService randomService0 = faker0.random();
      assertNotNull(randomService0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Faker faker0 = Faker.instance();
      ChuckNorris chuckNorris0 = faker0.chuckNorris();
      assertNotNull(chuckNorris0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Faker faker0 = new Faker();
      App app0 = faker0.app();
      assertNotNull(app0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      Medical medical0 = faker0.medical();
      assertNotNull(medical0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Faker faker0 = new Faker();
      Weather weather0 = faker0.weather();
      assertNotNull(weather0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Faker faker0 = Faker.instance();
      String string0 = faker0.bothify("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = new Faker(locale0);
      Finance finance0 = faker0.finance();
      assertNotNull(finance0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.letterify((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Business business0 = faker0.business();
      assertNotNull(business0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Space space0 = faker0.space();
      assertNotNull(space0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Faker faker0 = new Faker();
      Stock stock0 = faker0.stock();
      assertNotNull(stock0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Faker faker0 = new Faker();
      University university0 = faker0.university();
      assertNotNull(university0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Team team0 = faker0.team();
      assertNotNull(team0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Faker faker0 = Faker.instance();
      // Undeclared exception!
      try { 
        faker0.expression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Crypto crypto0 = faker0.crypto();
      assertNotNull(crypto0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Shakespeare shakespeare0 = faker0.shakespeare();
      assertNotNull(shakespeare0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Faker faker0 = new Faker();
      Country country0 = faker0.country();
      assertNotNull(country0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Faker faker0 = new Faker();
      Friends friends0 = faker0.friends();
      assertNotNull(friends0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Faker faker0 = new Faker();
      Color color0 = faker0.color();
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Hobbit hobbit0 = faker0.hobbit();
      assertNotNull(hobbit0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Music music0 = faker0.music();
      assertNotNull(music0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DragonBall dragonBall0 = faker0.dragonBall();
      assertNotNull(dragonBall0);
  }
}
