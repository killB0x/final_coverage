/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:34:32 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Faker;
import com.github.javafaker.Shakespeare;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Shakespeare_ESTest extends Shakespeare_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Faker faker0 = new Faker(locale0);
      Shakespeare shakespeare0 = faker0.shakespeare();
      String string0 = shakespeare0.kingRichardIIIQuote();
      assertEquals("Now is the winter of our discontent.", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Shakespeare shakespeare0 = new Shakespeare(faker0);
      String string0 = shakespeare0.hamletQuote();
      assertEquals("To be, or not to be: that is the question.", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Faker faker0 = Faker.instance();
      Shakespeare shakespeare0 = new Shakespeare(faker0);
      String string0 = shakespeare0.asYouLikeItQuote();
      assertEquals("All the world 's a stage, and all the men and women merely players. They have their exits and their entrances; And one man in his time plays many parts.", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Shakespeare shakespeare0 = new Shakespeare((Faker) null);
      // Undeclared exception!
      try { 
        shakespeare0.romeoAndJulietQuote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Shakespeare", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Shakespeare shakespeare0 = new Shakespeare((Faker) null);
      // Undeclared exception!
      try { 
        shakespeare0.hamletQuote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Shakespeare", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Faker faker0 = new Faker(locale0);
      Shakespeare shakespeare0 = faker0.shakespeare();
      String string0 = shakespeare0.romeoAndJulietQuote();
      assertEquals("O Romeo, Romeo! wherefore art thou Romeo?.", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Shakespeare shakespeare0 = new Shakespeare((Faker) null);
      // Undeclared exception!
      try { 
        shakespeare0.kingRichardIIIQuote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Shakespeare", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Shakespeare shakespeare0 = new Shakespeare((Faker) null);
      // Undeclared exception!
      try { 
        shakespeare0.asYouLikeItQuote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.Shakespeare", e);
      }
  }
}
