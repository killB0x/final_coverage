/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 12:54:48 GMT 2022
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.DateAndTime;
import com.github.javafaker.Faker;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateAndTime_ESTest extends DateAndTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = Faker.instance(locale0);
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      MockDate mockDate0 = new MockDate(1728, 1728, 222, (-11), 6);
      Date date0 = dateAndTime0.future(1728, timeUnit0, (Date) mockDate0);
      assertEquals("Sat Aug 08 13:06:00 GMT 3772", date0.toString());
      
      MockDate mockDate1 = new MockDate(0, 0, (-737));
      Date date1 = dateAndTime0.between(mockDate1, mockDate0);
      assertFalse(mockDate0.equals((Object)date0));
      assertEquals("Fri Dec 24 00:00:00 GMT 1897", date1.toString());
      assertFalse(date1.equals((Object)mockDate1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Date date0 = dateAndTime0.past(4189, timeUnit0);
      assertEquals("Fri Feb 14 20:21:20 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Faker faker0 = new Faker(mockRandom0);
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Date date0 = dateAndTime0.past(549, 0, timeUnit0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Faker faker0 = new Faker(locale0);
      DateAndTime dateAndTime0 = faker0.date();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Date date0 = dateAndTime0.future(3885, (-108), timeUnit0);
      assertEquals("Mon Feb 10 08:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = Faker.instance(locale0);
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Date date0 = dateAndTime0.future(99, timeUnit0);
      Date date1 = dateAndTime0.past(2034, timeUnit0, date0);
      assertFalse(date1.equals((Object)date0));
      
      Date date2 = dateAndTime0.between(date1, date0);
      assertTrue(date2.equals((Object)date1));
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date2.toString());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        dateAndTime0.past((-3264), timeUnit0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        dateAndTime0.past((-874), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.past(713, 713, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        dateAndTime0.future(11, timeUnit0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      MockDate mockDate0 = new MockDate((-1));
      // Undeclared exception!
      try { 
        dateAndTime0.future((-1), timeUnit0, (Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.future(0, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Faker faker0 = new Faker();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.future(0, timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.future((-3394), (-3394), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      // Undeclared exception!
      try { 
        dateAndTime0.birthday(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      // Undeclared exception!
      try { 
        dateAndTime0.birthday();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      // Undeclared exception!
      try { 
        dateAndTime0.between((Date) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Faker faker0 = Faker.instance(locale0);
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Date date0 = dateAndTime0.future(99, timeUnit0);
      try { 
        dateAndTime0.between(date0, date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Faker faker0 = new Faker();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.past(2318, timeUnit0, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      // Undeclared exception!
      try { 
        dateAndTime0.birthday(1329, 1329);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Faker faker0 = Faker.instance();
      DateAndTime dateAndTime0 = new DateAndTime(faker0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      MockDate mockDate0 = new MockDate(974, 974, 974, 974, 974, 974);
      Date date0 = dateAndTime0.future(974, timeUnit0, (Date) mockDate0);
      try { 
        dateAndTime0.between(date0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid date range, the upper bound date is before the lower bound.
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      // Undeclared exception!
      try { 
        dateAndTime0.past(726, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Faker faker0 = new Faker(locale0);
      DateAndTime dateAndTime0 = faker0.date();
      // Undeclared exception!
      try { 
        dateAndTime0.birthday();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException("com.github.javafaker.service.RandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Faker faker0 = new Faker(locale0);
      DateAndTime dateAndTime0 = faker0.date();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Date date0 = dateAndTime0.future(3885, timeUnit0);
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      
      Date date1 = dateAndTime0.future(3885, (-108), timeUnit0);
      assertEquals("Mon Feb 10 08:21:21 GMT 2014", date1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        dateAndTime0.past(121, 121, timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateAndTime dateAndTime0 = new DateAndTime((Faker) null);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        dateAndTime0.future((-1590), (-1590), timeUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.DateAndTime", e);
      }
  }
}
