/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:51:15 GMT 2022
 */

package io.github.axel_n.limiter.config;

import org.junit.Test;
import static org.junit.Assert.*;
import io.github.axel_n.limiter.config.LimiterConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimiterConfig_ESTest extends LimiterConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(480L, 2332, (-671L), 480L, "");
      long long0 = limiterConfig0.getSizeWindowInMilliseconds();
      assertEquals(480L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals((-671L), limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(480L, long0);
      assertEquals(2332, limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-1833L), (-473), 0L, 764L, "lc9W'=j");
      long long0 = limiterConfig0.getSizeWindowInMilliseconds();
      assertEquals((-1833L), long0);
      assertEquals(764L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(0L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals((-473), limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 0L, 0, "");
      limiterConfig0.getPeriodForCheckExecutionInMilliseconds();
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-2418L), 765, (-2418L), 0L, (String) null);
      long long0 = limiterConfig0.getPeriodForCheckExecutionInMilliseconds();
      assertEquals(765, limiterConfig0.getMaxRequestsInWindow());
      assertEquals((-2418L), limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(0L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals((-2418L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 0L, 0, "");
      int int0 = limiterConfig0.getMaxRequestsInWindow();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-2418L), 765, (-2418L), 0L, (String) null);
      int int0 = limiterConfig0.getMaxRequestsInWindow();
      assertEquals((-2418L), limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(765, int0);
      assertEquals(0L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals((-2418L), limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-1833L), (-473), 0L, 764L, "lc9W'=j");
      long long0 = limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds();
      assertEquals((-473), limiterConfig0.getMaxRequestsInWindow());
      assertEquals(0L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals((-1833L), limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(764L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 473L, (-1047L), "MXQFjNNs]S");
      long long0 = limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds();
      assertEquals(0L, limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(473L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals((-1047L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-2876L), (-444), (-177L), (-444), (String) null);
      limiterConfig0.getInstanceName();
      assertEquals((-2876L), limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals((-444), limiterConfig0.getMaxRequestsInWindow());
      assertEquals((-177L), limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals((-444L), limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 0L, 0, "");
      limiterConfig0.getInstanceName();
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 473L, (-1047L), "MXQFjNNs]S");
      long long0 = limiterConfig0.getSizeWindowInMilliseconds();
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals(0L, long0);
      assertEquals(473L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals((-1047L), limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 473L, (-1047L), "MXQFjNNs]S");
      limiterConfig0.getInstanceName();
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals(0L, limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(473L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals((-1047L), limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 0, 473L, (-1047L), "MXQFjNNs]S");
      long long0 = limiterConfig0.getPeriodForCheckExecutionInMilliseconds();
      assertEquals(473L, long0);
      assertEquals(0L, limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals((-1047L), limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig(0L, 1, 1, 0L, "");
      long long0 = limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds();
      assertEquals(1L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(1, limiterConfig0.getMaxRequestsInWindow());
      assertEquals(0L, long0);
      assertEquals(0L, limiterConfig0.getSizeWindowInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LimiterConfig limiterConfig0 = new LimiterConfig((-1833L), (-473), 0L, 764L, "lc9W'=j");
      int int0 = limiterConfig0.getMaxRequestsInWindow();
      assertEquals((-473), int0);
      assertEquals(764L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals((-1833L), limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals(0L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
  }
}
