/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 25 19:51:03 GMT 2022
 */

package io.github.axel_n.limiter.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.github.axel_n.limiter.config.LimiterConfig;
import io.github.axel_n.limiter.config.LimiterConfigBuilder;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LimiterConfigBuilder_ESTest extends LimiterConfigBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      limiterConfigBuilder0.setMaxAwaitExecutionTime((-1), timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LimiterConfigBuilder limiterConfigBuilder1 = limiterConfigBuilder0.setPeriodForCheckExecution((-796), timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder1.build();
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      limiterConfigBuilder0.setSizeWindow(844, timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals(72921600000L, limiterConfig0.getSizeWindowInMilliseconds());
      assertEquals("common", limiterConfig0.getInstanceName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      limiterConfigBuilder0.setSizeWindow((-3343), timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals((-200580000L), limiterConfig0.getSizeWindowInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      limiterConfigBuilder0.setMaxRequestsInWindow((-2077));
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals((-2077), limiterConfig0.getMaxRequestsInWindow());
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      // Undeclared exception!
      try { 
        limiterConfigBuilder0.setSizeWindow(2, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.axel_n.limiter.config.LimiterConfigBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      // Undeclared exception!
      try { 
        limiterConfigBuilder0.setPeriodForCheckExecution((-1), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.axel_n.limiter.config.LimiterConfigBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      // Undeclared exception!
      try { 
        limiterConfigBuilder0.setMaxAwaitExecutionTime((-62), (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.github.axel_n.limiter.config.LimiterConfigBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      limiterConfigBuilder0.setInstanceName("");
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals("", limiterConfig0.getInstanceName());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      limiterConfigBuilder0.setPeriodForCheckExecution(2003, timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder0.build();
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(173059200000L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LimiterConfigBuilder limiterConfigBuilder1 = limiterConfigBuilder0.setMaxAwaitExecutionTime(2003, timeUnit0);
      LimiterConfig limiterConfig0 = limiterConfigBuilder1.build();
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(173059200000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(0, limiterConfig0.getMaxRequestsInWindow());
      assertEquals("common", limiterConfig0.getInstanceName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LimiterConfigBuilder limiterConfigBuilder0 = new LimiterConfigBuilder();
      LimiterConfigBuilder limiterConfigBuilder1 = limiterConfigBuilder0.setMaxRequestsInWindow(953);
      LimiterConfig limiterConfig0 = limiterConfigBuilder1.build();
      assertEquals("common", limiterConfig0.getInstanceName());
      assertEquals(100L, limiterConfig0.getPeriodForCheckExecutionInMilliseconds());
      assertEquals(30000L, limiterConfig0.getMaxAwaitExecutionTimeInMilliseconds());
      assertEquals(953, limiterConfig0.getMaxRequestsInWindow());
  }
}
