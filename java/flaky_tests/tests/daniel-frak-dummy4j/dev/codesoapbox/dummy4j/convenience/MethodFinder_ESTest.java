/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:57:38 GMT 2022
 */

package dev.codesoapbox.dummy4j.convenience;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.convenience.MethodFinder;
import dev.codesoapbox.dummy4j.convenience.MethodPathLoader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MethodFinder_ESTest extends MethodFinder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodFinder methodFinder0 = new MethodFinder(class0, (MethodPathLoader) null);
      // Undeclared exception!
      try { 
        methodFinder0.find("=YAfaMhd'w\";&:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.convenience.MethodFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodPathLoader methodPathLoader0 = new MethodPathLoader();
      MethodFinder methodFinder0 = new MethodFinder(class0, methodPathLoader0);
      methodFinder0.find("C");
      String string0 = methodFinder0.find("-17!QM s@;I");
      assertEquals("No methods found containing '-17!QM s@;I'", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MethodPathLoader methodPathLoader0 = new MethodPathLoader();
      Class<Object> class0 = Object.class;
      MethodFinder methodFinder0 = new MethodFinder(class0, methodPathLoader0);
      String string0 = methodFinder0.find(".");
      assertEquals("No methods found containing '.'", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MethodPathLoader methodPathLoader0 = new MethodPathLoader();
      MethodFinder methodFinder0 = new MethodFinder(class0, methodPathLoader0);
      String string0 = methodFinder0.find("");
      assertEquals("No methods found containing ''", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MethodPathLoader methodPathLoader0 = new MethodPathLoader();
      Class<Object> class0 = Object.class;
      MethodFinder methodFinder0 = new MethodFinder(class0, methodPathLoader0);
      String string0 = methodFinder0.find(".e");
      assertEquals("Found methods containing '.e':\nObject", string0);
  }
}
