/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:02:33 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.color;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.color.HSBA;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HSBA_ESTest extends HSBA_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HSBA hSBA0 = new HSBA((-360.0F), 1.0F, 1.0F, 0.0F);
      hSBA0.hashCode();
      assertEquals(0.0F, hSBA0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.3963555F, 0.3963555F, 0.3963555F, 0.3963555F);
      HSBA hSBA1 = new HSBA(0.3963555F, 0.3963555F, 0.3963555F, 0.0F);
      boolean boolean0 = hSBA1.equals(hSBA0);
      assertEquals(0.4F, hSBA0.getAlpha(), 0.01F);
      assertFalse(boolean0);
      assertFalse(hSBA0.equals((Object)hSBA1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HSBA hSBA0 = new HSBA((-360.0F), 0.0F, 1.0F, 1.0F);
      String string0 = hSBA0.toString();
      assertEquals("hsba(-360, 0%, 100%, 1)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HSBA hSBA0 = new HSBA((-360.0F), 1.0F, 1.0F, 0.0F);
      String string0 = hSBA0.toString();
      assertEquals("hsba(-360, 100%, 100%, 0)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 1.0F, 0.0F, 0.0F);
      float[] floatArray0 = hSBA0.toArray();
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HSBA hSBA0 = new HSBA((-360.0F), 1.0F, 1.0F, 0.0F);
      float[] floatArray0 = hSBA0.toArray();
      assertArrayEquals(new float[] {(-360.0F), 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 1.0F);
      float float0 = hSBA0.getAlpha();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HSBA hSBA0 = null;
      try {
        hSBA0 = new HSBA((-1515.1967F), 0.0F, 0.0F, (-1.0F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Given value (-1515.1967) is out of range (-360.0-360.0).
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.shared.math.NumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 0.0F);
      HSBA hSBA1 = new HSBA(0.0F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSBA0.equals(hSBA1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 0.0F);
      HSBA hSBA1 = new HSBA(0.0F, 0.0F, 1.0F, 1.0F);
      boolean boolean0 = hSBA0.equals(hSBA1);
      assertEquals(1.0F, hSBA1.getAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HSBA hSBA0 = new HSBA(1.0F, 1.0F, 1.0F, 1.0F);
      boolean boolean0 = hSBA0.equals("hsba(1, 100%, 100%, 1)");
      assertFalse(boolean0);
      assertEquals(1.0F, hSBA0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 1.0F);
      boolean boolean0 = hSBA0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1.0F, hSBA0.getAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSBA0.equals(hSBA0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.3963555F, 0.3963555F, 0.3963555F, 0.3963555F);
      HSBA hSBA1 = new HSBA(0.3963555F, 0.3963555F, 0.3963555F, 0.0F);
      boolean boolean0 = hSBA0.equals(hSBA1);
      assertFalse(boolean0);
      assertEquals(0.4F, hSBA0.getAlpha(), 0.01F);
      assertFalse(hSBA1.equals((Object)hSBA0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HSBA hSBA0 = new HSBA(0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = hSBA0.getAlpha();
      assertEquals(0.0F, float0, 0.01F);
  }
}
