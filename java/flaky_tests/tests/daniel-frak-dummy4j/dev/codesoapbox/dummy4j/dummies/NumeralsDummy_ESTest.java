/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:11:54 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.NumeralsDummy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumeralsDummy_ESTest extends NumeralsDummy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumeralsDummy numeralsDummy0 = new NumeralsDummy((Dummy4j) null);
      // Undeclared exception!
      try { 
        numeralsDummy0.roman(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roman numeral must be greater than zero
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      String string0 = numeralsDummy0.roman(400, 4999);
      assertEquals("CD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      String string0 = numeralsDummy0.roman(4999);
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumeralsDummy numeralsDummy0 = new NumeralsDummy((Dummy4j) null);
      // Undeclared exception!
      try { 
        numeralsDummy0.roman(21, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumeralsDummy numeralsDummy0 = new NumeralsDummy((Dummy4j) null);
      // Undeclared exception!
      try { 
        numeralsDummy0.roman(2476);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumeralsDummy numeralsDummy0 = new NumeralsDummy((Dummy4j) null);
      // Undeclared exception!
      try { 
        numeralsDummy0.roman();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      String string0 = numeralsDummy0.roman(17, 105);
      assertEquals("XVII", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      // Undeclared exception!
      try { 
        numeralsDummy0.roman((-1086), 2763);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roman numeral must be greater than zero
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumeralsDummy numeralsDummy0 = new NumeralsDummy((Dummy4j) null);
      // Undeclared exception!
      try { 
        numeralsDummy0.roman(69999, 69999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roman numeral may not be greater than 4999
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      String string0 = numeralsDummy0.roman(2763);
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(702L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      String string0 = numeralsDummy0.roman();
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      NumeralsDummy numeralsDummy0 = dummy4j0.numerals();
      // Undeclared exception!
      try { 
        numeralsDummy0.roman(9917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Roman numeral may not be greater than 4999
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.NumeralsDummy", e);
      }
  }
}
