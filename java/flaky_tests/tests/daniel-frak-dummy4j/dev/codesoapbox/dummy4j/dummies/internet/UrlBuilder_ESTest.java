/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:36:52 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.internet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.internet.UrlBuilder;
import dev.codesoapbox.dummy4j.dummies.internet.UrlProtocol;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UrlBuilder_ESTest extends UrlBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      urlBuilder0.withGenericTopLevelDomain();
      urlBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      urlBuilder0.withPort((-3637));
      urlBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("{j?CM]nlroDwi'", "{j?CM]nlroDwi'", "{j?CM]nlroDwi'", "{j?CM]nlroDwi'", (String) null).when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.minLength(9999);
      urlBuilder0.build();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("N%*=@CCBGa:_Uy2", "N%*=@CCBGa:_Uy2").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.minLength(48);
      urlBuilder0.withPort(48);
      urlBuilder0.build();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("N%*=@CCBGa:_Uy2", "?").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.build();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.withCountryTopLevelDomain();
      // Undeclared exception!
      try { 
        urlBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The root domain can't be null or empty
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.UrlHost", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        urlBuilder0.withQueryParams((-333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The specified amount of query params must be a positive number, but \"-333\" was given
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      urlBuilder0.withQueryParams(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.withQueryParams(1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        urlBuilder0.withRandomProtocol((UrlProtocol[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        urlBuilder0.withRandomPort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("{j?AM]n/.oDwi'", "{j?AM]n/.oDwi'").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      // Undeclared exception!
      try { 
        urlBuilder0.build();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Url could not be created due to the following error: [ Illegal character found in host: '/' ]
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("{?CM]nlroDwi'", "{?CM]nlroDwi'", "{?CM]nlroDwi'", "{?CM]nlroDwi'", (String) null).when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      UrlBuilder urlBuilder1 = urlBuilder0.withQueryParams(9999);
      // Undeclared exception!
      urlBuilder1.build();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        urlBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.UrlBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("N%*=@CCBGa:_Uy2", "N%*=@CCBGa:_Uy2", "N%*=@CCBGa:_Uy2", "N%*=@CCBGa:_Uy2", "N%*=@CCBGa:_Uy2").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.minLength(1000);
      UrlBuilder urlBuilder1 = urlBuilder0.withFilePath();
      urlBuilder1.withQueryParam();
      urlBuilder1.build();
      //  // Unstable assertion: assertEquals(1759238203L, (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals(1759238203L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("{?CM]nlroDwi'").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.withTopLevelDomain("{?CM]nlroDwi'");
      urlBuilder0.build();
      //  // Unstable assertion: assertEquals((-405998181L), (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals((-405998181L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      UrlProtocol[] urlProtocolArray0 = new UrlProtocol[8];
      urlBuilder0.withRandomProtocol(urlProtocolArray0);
      //  // Unstable assertion: assertEquals((-1224175288L), (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals((-1224175288L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      doReturn("{j?CM]nlroDwi'", "{j?CM]nlroDwi'", "{j?CM]nlroDwi'", "{j?CM]nlroDwi'", "{j?CM]nlroDwi'").when(expressionResolver0).resolve(anyString());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.minLength(1000);
      urlBuilder0.withFilePath();
      urlBuilder0.build();
      //  // Unstable assertion: assertEquals((-1007164501L), (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals((-1007164501L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.withRandomPort();
      //  // Unstable assertion: assertEquals((-1607268467L), (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals((-1607268467L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpressionResolver expressionResolver0 = mock(ExpressionResolver.class, new ViolatedAssumptionAnswer());
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j(expressionResolver0, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      UrlProtocol urlProtocol0 = UrlProtocol.JAR;
      urlBuilder0.withProtocol(urlProtocol0);
      //  // Unstable assertion: assertEquals(2087304177L, (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals(2087304177L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UrlBuilder urlBuilder0 = new UrlBuilder((Dummy4j) null);
      UrlBuilder urlBuilder1 = urlBuilder0.withoutWwwPrefix();
      assertEquals(9999, UrlBuilder.MAX_PORT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      UrlBuilder urlBuilder0 = new UrlBuilder(dummy4j0);
      urlBuilder0.withPopularTopLevelDomain();
      //  // Unstable assertion: assertEquals(1366021804L, (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals(1366021804L, defaultRandomService0.getSeed());
  }
}
