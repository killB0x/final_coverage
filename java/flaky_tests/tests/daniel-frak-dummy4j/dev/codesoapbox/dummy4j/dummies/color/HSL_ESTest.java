/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:52:32 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.color;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.color.HSL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HSL_ESTest extends HSL_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.34012145F);
      hSL0.hashCode();
      assertEquals(0.34F, hSL0.getLightness(), 0.01F);
      assertEquals(0.34F, hSL0.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.0F);
      hSL0.hashCode();
      assertEquals(0.0F, hSL0.getLightness(), 0.01F);
      assertEquals(0.34F, hSL0.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 0.0F, 1.0F);
      boolean boolean0 = hSL1.equals(hSL0);
      assertFalse(boolean0);
      assertEquals(1.0F, hSL1.getLightness(), 0.01F);
      assertFalse(hSL0.equals((Object)hSL1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 0.0F, 1.0F);
      boolean boolean0 = hSL0.equals(hSL1);
      assertEquals(1.0F, hSL1.getLightness(), 0.01F);
      assertFalse(hSL1.equals((Object)hSL0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 1.0F, 0.0F);
      boolean boolean0 = hSL1.equals(hSL0);
      assertEquals(0.0F, hSL1.getLightness(), 0.01F);
      assertFalse(boolean0);
      assertFalse(hSL0.equals((Object)hSL1));
      assertEquals(1.0F, hSL1.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HSL hSL0 = new HSL(0.4164234F, 0.0F, 0.4164234F);
      HSL hSL1 = new HSL(0.0F, 0.4164234F, 0.42F);
      boolean boolean0 = hSL1.equals(hSL0);
      assertEquals(0.42F, hSL0.getLightness(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.42F, hSL0.getHue(), 0.01F);
      assertEquals(0.42F, hSL1.getSaturation(), 0.01F);
      assertEquals(0.42F, hSL1.getLightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HSL hSL0 = new HSL(0.759072F, 0.0F, 0.0F);
      String string0 = hSL0.toString();
      assertEquals("hsl(0.76, 0%, 0%)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.0F);
      String string0 = hSL0.toString();
      assertEquals("hsl(0, 34%, 0%)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.34012145F);
      float[] floatArray0 = hSL0.toArray();
      assertArrayEquals(new float[] {0.0F, 0.34F, 0.34F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HSL hSL0 = new HSL(1.0F, 0.0F, 0.0F);
      float float0 = hSL0.getLightness();
      assertEquals(0.0F, hSL0.getSaturation(), 0.01F);
      assertEquals(1.0F, hSL0.getHue(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 1.0F);
      float float0 = hSL0.getSaturation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, hSL0.getLightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.4164234F, 0.42F);
      float float0 = hSL0.getSaturation();
      assertEquals(0.42F, hSL0.getLightness(), 0.01F);
      assertEquals(0.42F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HSL hSL0 = new HSL(0.4164234F, 0.0F, 0.4164234F);
      float float0 = hSL0.getLightness();
      assertEquals(0.42F, float0, 0.01F);
      assertEquals(0.42F, hSL0.getHue(), 0.01F);
      assertEquals(0.0F, hSL0.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HSL hSL0 = new HSL(0.4164234F, 0.0F, 0.4164234F);
      float float0 = hSL0.getHue();
      assertEquals(0.0F, hSL0.getSaturation(), 0.01F);
      assertEquals(0.42F, hSL0.getLightness(), 0.01F);
      assertEquals(0.42F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HSL hSL0 = new HSL((-359.82687F), 1.0F, 1.0F);
      float float0 = hSL0.getHue();
      assertEquals(1.0F, hSL0.getSaturation(), 0.01F);
      assertEquals(1.0F, hSL0.getLightness(), 0.01F);
      assertEquals((-359.83F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HSL hSL0 = null;
      try {
        hSL0 = new HSL(0.0F, 0.0F, 143.0F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Given value (143.0) is out of range (0.0-1.0).
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.shared.math.NumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 0.34012145F, 0.34012145F);
      boolean boolean0 = hSL1.equals(hSL0);
      assertFalse(boolean0);
      assertEquals(0.34F, hSL1.getLightness(), 0.01F);
      assertFalse(hSL0.equals((Object)hSL1));
      assertEquals(0.34F, hSL1.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 1.0F, 0.0F);
      boolean boolean0 = hSL0.equals(hSL1);
      assertFalse(hSL1.equals((Object)hSL0));
      assertFalse(boolean0);
      assertEquals(0.0F, hSL1.getLightness(), 0.01F);
      assertEquals(1.0F, hSL1.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HSL hSL0 = new HSL(0.76124036F, 0.76124036F, 0.76124036F);
      HSL hSL1 = new HSL(0.0F, 0.0F, 0.76124036F);
      boolean boolean0 = hSL0.equals(hSL1);
      assertEquals(0.76F, hSL0.getSaturation(), 0.01F);
      assertEquals(0.76F, hSL0.getHue(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.76F, hSL1.getLightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      Object object0 = new Object();
      boolean boolean0 = hSL0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSL0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSL0.equals(hSL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      HSL hSL1 = new HSL(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSL1.equals(hSL0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.34012145F, 0.0F);
      float[] floatArray0 = hSL0.toArray();
      assertArrayEquals(new float[] {0.0F, 0.34F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HSL hSL0 = new HSL(0.0F, 0.0F, 0.0F);
      float float0 = hSL0.getHue();
      assertEquals(0.0F, float0, 0.01F);
  }
}
