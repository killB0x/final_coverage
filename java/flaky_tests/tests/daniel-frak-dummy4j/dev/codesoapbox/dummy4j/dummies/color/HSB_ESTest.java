/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:55:58 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.color;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.color.HSB;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HSB_ESTest extends HSB_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 0.0F, 0.0F);
      hSB0.hashCode();
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
      assertEquals(1.0F, hSB0.getHue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 1.0F, 0.0F);
      hSB0.hashCode();
      assertEquals(1.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      HSB hSB1 = new HSB(0.0F, 0.0F, 0.27879068F);
      boolean boolean0 = hSB0.equals(hSB1);
      assertFalse(boolean0);
      assertFalse(hSB1.equals((Object)hSB0));
      assertEquals(0.28F, hSB1.getBrightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      HSB hSB1 = new HSB(0.0F, 1.0F, 0.0F);
      boolean boolean0 = hSB1.equals(hSB0);
      assertFalse(boolean0);
      assertEquals(0.0F, hSB1.getBrightness(), 0.01F);
      assertFalse(hSB0.equals((Object)hSB1));
      assertEquals(1.0F, hSB1.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 0.0F, 1.0F);
      HSB hSB1 = new HSB(0.0F, 0.0F, 1.0F);
      boolean boolean0 = hSB0.equals(hSB1);
      assertEquals(1.0F, hSB1.getBrightness(), 0.01F);
      assertFalse(boolean0);
      assertFalse(hSB1.equals((Object)hSB0));
      assertEquals(1.0F, hSB0.getHue(), 0.01F);
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 0.0F, 1.0F);
      String string0 = hSB0.toString();
      assertEquals("hsb(1, 0%, 100%)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 1.0F, 0.0F);
      float[] floatArray0 = hSB0.toArray();
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 0.0F, 0.0F);
      float float0 = hSB0.getBrightness();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(1.0F, hSB0.getHue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 1.0F, 0.0F);
      float float0 = hSB0.getBrightness();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, hSB0.getSaturation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 1.0F, 0.0F);
      float float0 = hSB0.getSaturation();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      float float0 = hSB0.getHue();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 0.0F, 0.0F);
      float float0 = hSB0.getHue();
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HSB hSB0 = new HSB(1.0F, 1.0F, 1.0F);
      float float0 = hSB0.getBrightness();
      assertEquals(1.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(1.0F, hSB0.getHue(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HSB hSB0 = null;
      try {
        hSB0 = new HSB((-4019.43F), (-4019.43F), (-4019.43F));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Given value (-4019.43) is out of range (-360.0-360.0).
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.shared.math.NumberValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.2197648F);
      HSB hSB1 = new HSB(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSB0.equals(hSB1);
      assertFalse(boolean0);
      assertEquals(0.22F, hSB0.getBrightness(), 0.01F);
      assertFalse(hSB1.equals((Object)hSB0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HSB hSB0 = new HSB(0.18833202F, 0.0F, 0.0F);
      HSB hSB1 = new HSB(0.18833202F, 0.18833202F, 0.18833202F);
      boolean boolean0 = hSB0.equals(hSB1);
      assertEquals(0.19F, hSB1.getSaturation(), 0.01F);
      assertEquals(0.19F, hSB1.getBrightness(), 0.01F);
      assertEquals(0.19F, hSB1.getHue(), 0.01F);
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      HSB hSB1 = new HSB(1.0F, 1.0F, 0.0F);
      boolean boolean0 = hSB0.equals(hSB1);
      assertFalse(boolean0);
      assertEquals(0.0F, hSB1.getBrightness(), 0.01F);
      assertEquals(1.0F, hSB1.getSaturation(), 0.01F);
      assertEquals(1.0F, hSB1.getHue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      Object object0 = new Object();
      boolean boolean0 = hSB0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSB0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.0F);
      boolean boolean0 = hSB0.equals(hSB0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HSB hSB0 = new HSB((-360.0F), 0.0F, 0.0F);
      HSB hSB1 = new HSB((-360.0F), 0.0F, 0.0F);
      boolean boolean0 = hSB1.equals(hSB0);
      assertEquals((-360.0F), hSB1.getHue(), 0.01F);
      assertEquals(0.0F, hSB1.getSaturation(), 0.01F);
      assertEquals(0.0F, hSB1.getBrightness(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HSB hSB0 = new HSB((-360.0F), 0.0F, 0.0F);
      float[] floatArray0 = hSB0.toArray();
      assertArrayEquals(new float[] {(-360.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HSB hSB0 = new HSB((-360.0F), 0.0F, 0.0F);
      float float0 = hSB0.getHue();
      assertEquals((-360.0F), float0, 0.01F);
      assertEquals(0.0F, hSB0.getSaturation(), 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HSB hSB0 = new HSB((-360.0F), 0.0F, 0.0F);
      float float0 = hSB0.getSaturation();
      assertEquals((-360.0F), hSB0.getHue(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, hSB0.getBrightness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HSB hSB0 = new HSB(0.0F, 0.0F, 0.2197648F);
      String string0 = hSB0.toString();
      assertEquals("hsb(0, 0%, 22%)", string0);
  }
}
