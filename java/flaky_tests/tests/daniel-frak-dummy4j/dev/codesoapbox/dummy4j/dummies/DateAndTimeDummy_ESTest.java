/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:39:19 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.RandomService;
import dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DateAndTimeDummy_ESTest extends DateAndTimeDummy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      LocalDateTime localDateTime1 = dateAndTimeDummy0.after(localDateTime0, 0L, chronoUnit0);
      assertSame(localDateTime0, localDateTime1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      dateAndTimeDummy0.future(0L, chronoUnit0);
      assertEquals((-1977664240L), (long)dummy4j0.getSeed());
      assertEquals((-1977664240L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.before((LocalDateTime) null, 0L, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      DateAndTimeDummy dateAndTimeDummy0 = new DateAndTimeDummy((Dummy4j) null, clock0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.past(0L, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      defaultRandomService0.nextDouble();
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      LocalDateTime localDateTime1 = dateAndTimeDummy0.after(localDateTime0, 9223372036854775807L, chronoUnit0);
      LocalDateTime localDateTime2 = dateAndTimeDummy0.between(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDate localDate0 = dateAndTimeDummy0.birthday(0);
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      dateAndTimeDummy0.birthday(101, 1409);
      assertEquals(1011484942L, (long)dummy4j0.getSeed());
      assertEquals(1011484942L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDateTime localDateTime0 = dateAndTimeDummy0.any();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      dateAndTimeDummy0.before(localDateTime0, 1235L, chronoUnit0);
      assertEquals((-680747101L), (long)dummy4j0.getSeed());
      assertEquals((-680747101L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.past(2434L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Forever
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextInt();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.past(4294967295L, chronoUnit0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): -429496726986
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      defaultRandomService0.nextFloat();
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.past(9223372036854775807L, chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.future(511L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Forever
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextFloat(0.0F, 0.0F);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      Clock clock0 = MockClock.systemUTC();
      DateAndTimeDummy dateAndTimeDummy0 = new DateAndTimeDummy(dummy4j0, clock0);
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.future(4294967295L, chronoUnit0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Era (valid values 0 - 1): 429496730
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1472);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      DateAndTimeDummy dateAndTimeDummy0 = new DateAndTimeDummy((Dummy4j) null, clock0);
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.future(1472, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      dateAndTimeDummy0.any();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.future(9223372036854775807L, chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(2146815690, 2146815690);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): -2146813677
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(2089443549);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): -2089441536
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given age must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.between((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.between((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDateTime localDateTime0 = dateAndTimeDummy0.any();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.before(localDateTime0, 1L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Forever
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      LocalDateTime localDateTime0 = dateAndTimeDummy0.future(779L, chronoUnit0);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.before(localDateTime0, 779L, chronoUnit0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Era (valid values 0 - 1): -77
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, (RandomService) null);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.any();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.after(localDateTime0, 1L, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Forever
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      LocalDateTime localDateTime0 = dateAndTimeDummy0.past(1L, chronoUnit0);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.after(localDateTime0, 4294967295L, chronoUnit0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for Year (valid values -999999999 - 999999999): 4294969304
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.after((LocalDateTime) null, 9223372036854775807L, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDate localDate0 = MockLocalDate.now();
      LocalDate localDate1 = dateAndTimeDummy0.between(localDate0, localDate0);
      assertTrue(localDate1.equals((Object)localDate0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      DateAndTimeDummy dateAndTimeDummy0 = new DateAndTimeDummy((Dummy4j) null, clock0);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(230, 230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.NANOS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.after((LocalDateTime) null, (-169L), chronoUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At most must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.DECADES;
      LocalDateTime localDateTime0 = dateAndTimeDummy0.past(717L, chronoUnit0);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.after(localDateTime0, 9223372036854775807L, chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.future((-4177L), chronoUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At most must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.before(localDateTime0, (-4756L), chronoUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At most must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      LocalDateTime localDateTime0 = dateAndTimeDummy0.past(1L, chronoUnit0);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.before(localDateTime0, 9223372036854775807L, chronoUnit0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // long overflow
         //
         verifyException("java.lang.Math", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      ChronoUnit chronoUnit0 = ChronoUnit.WEEKS;
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.past((-4177L), chronoUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At most must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      LocalDate localDate0 = MockLocalDate.now();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDate localDate1 = dateAndTimeDummy0.birthday();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.between(localDate0, localDate1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End date must not precede start date
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(1573, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max age must be greater or equal min age
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(719, (-4787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given age must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday((-2147483647), (-2147483647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given age must be a positive number
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAndTimeDummy dateAndTimeDummy0 = new DateAndTimeDummy((Dummy4j) null, (Clock) null);
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      LocalDateTime localDateTime0 = dateAndTimeDummy0.any();
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.between(localDateTime1, localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // End date must not precede start date
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, (RandomService) null);
      DateAndTimeDummy dateAndTimeDummy0 = dummy4j0.dateAndTime();
      // Undeclared exception!
      try { 
        dateAndTimeDummy0.birthday(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.DateAndTimeDummy", e);
      }
  }
}
