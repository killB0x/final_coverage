/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:10:28 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.finance;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.finance.Replace;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Replace_ESTest extends Replace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      Predicate<Character> predicate0 = Predicate.isEqual((Object) character0);
      Predicate<Character> predicate1 = predicate0.negate();
      String string0 = Replace.replaceCharactersConditionally("C\"", "C\"", predicate1);
      assertEquals("CC", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Replace.replaceCharactersConditionally("dev.codesoapbox.dummy4j.dummies.finance.Replace", "dev.codesoapbox.dummy4j.dummies.finance.Replace", (Predicate<Character>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.finance.Replace", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) "{q:C!(");
      Predicate<Character> predicate1 = predicate0.negate();
      // Undeclared exception!
      try { 
        Replace.replaceCharactersConditionally("{q:C!(", "", predicate1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.finance.Replace", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Predicate<Character> predicate0 = Predicate.isEqual((Object) "R8;VfJg:}mC,MEeMrx");
      Predicate<Character> predicate1 = predicate0.negate();
      String string0 = Replace.replaceCharactersConditionally("R8;VfJg:}mC,MEeMrx", "R8;VfJg:}mC,MEeMrx", predicate1);
      assertEquals("R8;VfJg:}mC,MEeMrx", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      Predicate<Character> predicate0 = Predicate.isEqual((Object) character0);
      // Undeclared exception!
      try { 
        Replace.replaceCharactersConditionally("", "Z", predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Source must be long enough to allocate the replacement
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.finance.Replace", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Character character0 = Character.valueOf('C');
      Predicate<Character> predicate0 = Predicate.isEqual((Object) character0);
      String string0 = Replace.replaceCharactersConditionally("", "", predicate0);
      assertEquals("", string0);
  }
}
