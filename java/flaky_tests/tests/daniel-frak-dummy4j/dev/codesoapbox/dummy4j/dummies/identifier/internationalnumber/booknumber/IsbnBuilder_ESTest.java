/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:47:04 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.InternationalNumberCheckDigitFormulaProvider;
import dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnBuilder;
import dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnType;
import dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsbnBuilder_ESTest extends IsbnBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextLong(4294967312L);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      defaultRandomService0.nextFloat();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withSeparator("No methods found containing 'null'");
      isbnBuilder1.build();
      assertEquals(909702026L, (long)dummy4j0.getSeed());
      assertEquals(909702026L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      Random.setNextRandom(940);
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, (InternationalNumberCheckDigitFormulaProvider) null);
      // Undeclared exception!
      try { 
        isbnBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      isbnBuilder0.withRegistrant("66");
      assertEquals(1181585513L, (long)dummy4j0.getSeed());
      assertEquals(1181585513L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomSeparator(stringArray0);
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomRegistrationGroup(stringArray0);
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomRegistrant(stringArray0);
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomPublication(stringArray0);
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomPrefix(stringArray0);
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRegistrationGroup("-};^y:vZUg*g$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Registration group must be 1-5 digits long, given: -};^y:vZUg*g$
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRegistrationGroup((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRegistrant((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomType((IsbnType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#{book.publisher}";
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomRegistrationGroup(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Registration group must be 1-5 digits long, given: #{book.publisher}
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fq3Y";
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomRegistrant(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only digits allowed, given: fq3Y
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Hg+Ak8pVtQ&JZ-8rOy";
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomPublication(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This part must be 1-7 digits long, given: Hg+Ak8pVtQ&JZ-8rOy
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S?^<cqYLONQ-A%+A$";
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomPrefix(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Prefix must be: 3 digits long, given: S?^<cqYLONQ-A%+A$
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withPublication("`[2$J/r{HBw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This part must be 1-7 digits long, given: `[2$J/r{HBw
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withPublication((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withPrefix("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Prefix must be: 3 digits long, given: 
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, (InternationalNumberCheckDigitFormulaProvider) null);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomRegistrant();
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomPrefix(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      isbnBuilder0.withoutSeparator();
      isbnBuilder0.build();
      assertEquals((-1952853813L), (long)dummy4j0.getSeed());
      assertEquals((-1952853813L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomSeparator();
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomPublication((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomPrefix();
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withPublication("7");
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      defaultRandomService0.nextInt();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomSeparator((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long(0L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnType isbnType0 = IsbnType.ISBN_10;
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withType(isbnType0);
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Long long0 = new Long(0L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder(dummy4j0, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomRegistrationGroup();
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRegistrant("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This part must be 1-7 digits long, given: 
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      String string0 = isbnBuilder0.toString();
      assertEquals("IsbnBuilder{isbnType=null, prefixes=null, registrationGroups=null, registrants=null, publications=null, separators=null}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomType();
      assertSame(isbnBuilder1, isbnBuilder0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomRegistrationGroup((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withPrefix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnValidator isbnValidator0 = new IsbnValidator();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      // Undeclared exception!
      try { 
        isbnBuilder0.withRandomRegistrant((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnType[] isbnTypeArray0 = new IsbnType[0];
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomType(isbnTypeArray0);
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRandomPublication();
      assertSame(isbnBuilder0, isbnBuilder1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      InternationalNumberCheckDigitFormulaProvider internationalNumberCheckDigitFormulaProvider0 = new InternationalNumberCheckDigitFormulaProvider();
      IsbnBuilder isbnBuilder0 = new IsbnBuilder((Dummy4j) null, isbnValidator0, internationalNumberCheckDigitFormulaProvider0);
      IsbnBuilder isbnBuilder1 = isbnBuilder0.withRegistrationGroup("8");
      assertSame(isbnBuilder1, isbnBuilder0);
  }
}
