/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:45:14 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.internet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EmailBuilder_ESTest extends EmailBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      EmailBuilder emailBuilder0 = new EmailBuilder(dummy4j0);
      EmailBuilder emailBuilder1 = emailBuilder0.withLocalPart("(q>gr\u0005\"61");
      // Undeclared exception!
      try { 
        emailBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      EmailBuilder emailBuilder0 = new EmailBuilder(dummy4j0);
      EmailBuilder emailBuilder1 = emailBuilder0.withLocalPart("#{internet.email_safe_domains}");
      EmailBuilder emailBuilder2 = emailBuilder1.withRandomSubAddress();
      // Undeclared exception!
      try { 
        emailBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      EmailBuilder emailBuilder0 = new EmailBuilder(dummy4j0);
      // Undeclared exception!
      try { 
        emailBuilder0.safe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        emailBuilder0.withSubAddresses((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      EmailBuilder emailBuilder1 = emailBuilder0.withDomain("N^`FTpQs");
      emailBuilder1.withLocalPart("N^`FTpQs");
      String string0 = emailBuilder1.build();
      assertEquals("N^`FTpQs@N^`FTpQs", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      String string0 = emailBuilder0.toString();
      assertEquals("EmailBuilder{customDomain='null', customLocalPart='null', customSubAddresses=[], randomizeSubAddress=false, localPartDelimiter='.', sanitize=true}", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      emailBuilder0.notSanitized();
      emailBuilder0.withLocalPart("N^`FTpQs");
      // Undeclared exception!
      try { 
        emailBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        emailBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      String[] stringArray0 = new String[7];
      emailBuilder0.withSubAddresses(stringArray0);
      emailBuilder0.withLocalPart("N^`FTpQs");
      // Undeclared exception!
      try { 
        emailBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.EmailBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      EmailBuilder emailBuilder0 = new EmailBuilder((Dummy4j) null);
      EmailBuilder emailBuilder1 = emailBuilder0.withLocalPartDelimiter(", customLocalPart='");
      assertSame(emailBuilder1, emailBuilder0);
  }
}
