/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:05:46 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.finance;

import org.junit.Test;
import static org.junit.Assert.*;
import dev.codesoapbox.dummy4j.dummies.finance.IINRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IINRange_ESTest extends IINRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IINRange iINRange0 = IINRange.from((-1), (-1));
      IINRange iINRange1 = IINRange.from((-1), 2254);
      boolean boolean0 = iINRange0.equals(iINRange1);
      assertFalse(iINRange1.equals((Object)iINRange0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(548, 548);
      IINRange iINRange1 = IINRange.from((-194), (-1));
      boolean boolean0 = iINRange0.equals(iINRange1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(548, 548);
      int int0 = iINRange0.getMin();
      assertEquals(548, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IINRange iINRange0 = IINRange.from((-517), (-517));
      int int0 = iINRange0.getMin();
      assertEquals((-517), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IINRange iINRange0 = IINRange.from((-93), 0);
      int int0 = iINRange0.getMax();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(1037, 1037);
      int int0 = iINRange0.getMax();
      assertEquals(1037, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IINRange iINRange0 = IINRange.from((-517), (-517));
      IINRange iINRange1 = IINRange.from((-517), (-517));
      boolean boolean0 = iINRange0.equals(iINRange1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(2, 2);
      IINRange iINRange1 = IINRange.from(161, 2);
      boolean boolean0 = iINRange0.equals(iINRange1);
      assertFalse(iINRange1.equals((Object)iINRange0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      Object object0 = new Object();
      boolean boolean0 = iINRange0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IINRange iINRange0 = IINRange.from((-1), (-1));
      boolean boolean0 = iINRange0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(2, 2);
      boolean boolean0 = iINRange0.equals(iINRange0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      IINRange iINRange1 = IINRange.from(0, 0);
      boolean boolean0 = iINRange1.equals(iINRange0);
      assertFalse(iINRange0.equals((Object)iINRange1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      int int0 = iINRange0.getMax();
      assertEquals((-1383), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      int int0 = iINRange0.getMin();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      String string0 = iINRange0.toString();
      assertEquals("IINRange{min=0, max=-1383}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IINRange iINRange0 = IINRange.from(0, (-1383));
      iINRange0.hashCode();
  }
}
