/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:24:17 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.finance;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.finance.PriceBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PriceBuilder_ESTest extends PriceBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((Long) null);
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PriceBuilder priceBuilder0 = new PriceBuilder(dummy4j0);
      priceBuilder0.withRandomCurrency();
      // Undeclared exception!
      try { 
        priceBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.finance.PriceBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PriceBuilder priceBuilder0 = new PriceBuilder((Dummy4j) null);
      PriceBuilder priceBuilder1 = priceBuilder0.withinRange((-1064.2429F), (-835.2927F));
      assertSame(priceBuilder0, priceBuilder1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PriceBuilder priceBuilder0 = new PriceBuilder((Dummy4j) null);
      // Undeclared exception!
      try { 
        priceBuilder0.withRandomCurrency((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PriceBuilder priceBuilder0 = new PriceBuilder(dummy4j0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "sm&{R%_*q0";
      PriceBuilder priceBuilder1 = priceBuilder0.withRandomCurrency(stringArray0);
      String string0 = priceBuilder1.build();
      assertEquals(432520291L, (long)dummy4j0.getSeed());
      assertEquals("sm&{R%_*q0 1", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PriceBuilder priceBuilder0 = new PriceBuilder((Dummy4j) null);
      PriceBuilder priceBuilder1 = priceBuilder0.high();
      assertSame(priceBuilder0, priceBuilder1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PriceBuilder priceBuilder0 = new PriceBuilder(dummy4j0);
      priceBuilder0.withinRange((-94.0F), (-94.0F));
      // Undeclared exception!
      try { 
        priceBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PriceBuilder priceBuilder0 = new PriceBuilder(dummy4j0);
      priceBuilder0.withoutCurrency();
      //  // Unstable assertion: assertEquals(587219869L, (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals(587219869L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PriceBuilder priceBuilder0 = new PriceBuilder(dummy4j0);
      priceBuilder0.withCurrency("V");
      //  // Unstable assertion: assertEquals((-90200010L), (long)dummy4j0.getSeed());
      //  // Unstable assertion: assertEquals((-90200010L), defaultRandomService0.getSeed());
  }
}
