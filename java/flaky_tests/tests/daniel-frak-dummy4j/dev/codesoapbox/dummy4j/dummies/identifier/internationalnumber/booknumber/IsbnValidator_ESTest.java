/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:31:33 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IsbnValidator_ESTest extends IsbnValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidRegistrationGroup("-zR.`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only digits allowed, given: -zR.`
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidPrefix("doKD{c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Prefix must be: 3 digits long, given: doKD{c
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidRegistrationGroup((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidPrefix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidOtherPart((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidOtherPart("WKReOv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only digits allowed, given: WKReOv
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidRegistrationGroup("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only digits allowed, given: W
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      isbnValidator0.testForInvalidOtherPart("7");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidOtherPart("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This part must be 1-7 digits long, given: 
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidRegistrationGroup("DwdX/N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Registration group must be 1-5 digits long, given: DwdX/N
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      isbnValidator0.testForInvalidRegistrationGroup("0");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidRegistrationGroup("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Registration group must be 1-5 digits long, given: 
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidPrefix("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Prefix must be: 3 digits long, given: 
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidPrefix("#h%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Only digits allowed, given: #h%
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IsbnValidator isbnValidator0 = new IsbnValidator();
      // Undeclared exception!
      try { 
        isbnValidator0.testForInvalidOtherPart("dev.codesoapbox.dummy4j.exceptions.InvalidIsbnParameterException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // This part must be 1-7 digits long, given: dev.codesoapbox.dummy4j.exceptions.InvalidIsbnParameterException
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.identifier.internationalnumber.booknumber.IsbnValidator", e);
      }
  }
}
