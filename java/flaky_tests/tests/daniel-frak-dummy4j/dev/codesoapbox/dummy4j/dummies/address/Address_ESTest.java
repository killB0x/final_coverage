/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:29:04 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.address;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.dummies.address.Address;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Address_ESTest extends Address_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Address address0 = new Address("pcod", "pcod", "pcod", "pcod");
      Address address1 = new Address("pcod", "pcod", "pcod", "pcod");
      boolean boolean0 = address1.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      Address address1 = new Address("post code", "post code", "JI", "post code");
      boolean boolean0 = address1.equals(address0);
      assertEquals("post code", address1.getCountry());
      assertEquals("post code", address1.getPostCode());
      assertEquals("post code", address1.getStreet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Address address0 = new Address("^HK(JOGoDNz(", "^HK(JOGoDNz(", "^HK(JOGoDNz(", "]");
      Address address1 = new Address("^HK(JOGoDNz(", "^HK(JOGoDNz(", "^HK(JOGoDNz(", "^HK(JOGoDNz(");
      boolean boolean0 = address0.equals(address1);
      assertEquals("^HK(JOGoDNz(", address0.getStreet());
      assertEquals("^HK(JOGoDNz(", address0.getCity());
      assertEquals("^HK(JOGoDNz(", address0.getPostCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Address address0 = new Address("0!{", "++d", "++d", "++d");
      Address address1 = new Address("++d", "0!{", "++d", "++d");
      boolean boolean0 = address0.equals(address1);
      assertEquals("0!{", address1.getPostCode());
      assertEquals("0!{", address0.getStreet());
      assertFalse(boolean0);
      assertEquals("++d", address1.getCountry());
      assertEquals("++d", address1.getCity());
      assertEquals("++d", address0.getCity());
      assertEquals("++d", address0.getCountry());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      Address address1 = new Address("post code", ", ", "JI", ".");
      boolean boolean0 = address0.equals(address1);
      assertEquals(".", address1.getCountry());
      assertEquals("JI", address1.getCity());
      assertEquals("post code", address1.getStreet());
      assertFalse(boolean0);
      assertEquals(", ", address1.getPostCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      boolean boolean0 = address0.equals(address0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      boolean boolean0 = address0.equals("post code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Address address0 = null;
      try {
        address0 = new Address(" ", " ", " ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing values for the following fields: street, post code, city, country
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.address.Address", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      String string0 = address0.getCountry();
      assertEquals("post code", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      String string0 = address0.getPostCode();
      assertEquals("post code", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Address address0 = new Address("pcod", "pcod", "pcod", "pcod");
      String string0 = address0.toString();
      assertEquals("pcod, pcod pcod, pcod", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Address address0 = new Address("^HK(JOGoDNz(", "^HK(JOGoDNz(", "^HK(JOGoDNz(", "]");
      String string0 = address0.getStreet();
      assertEquals("^HK(JOGoDNz(", string0);
      assertEquals("^HK(JOGoDNz(", address0.getPostCode());
      assertEquals("]", address0.getCountry());
      assertEquals("^HK(JOGoDNz(", address0.getCity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Address address0 = new Address("post code", "post code", "post code", "post code");
      String string0 = address0.getCity();
      assertEquals("post code", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Address address0 = new Address("pcod", "pcod", "pcod", "pcod");
      address0.hashCode();
  }
}
