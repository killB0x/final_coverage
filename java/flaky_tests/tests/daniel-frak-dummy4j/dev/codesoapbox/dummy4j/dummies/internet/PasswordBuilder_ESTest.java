/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:09:06 GMT 2022
 */

package dev.codesoapbox.dummy4j.dummies.internet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import dev.codesoapbox.dummy4j.Dummy4j;
import dev.codesoapbox.dummy4j.ExpressionResolver;
import dev.codesoapbox.dummy4j.dummies.internet.PasswordBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PasswordBuilder_ESTest extends PasswordBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      passwordBuilder0.withLength((-2364));
      // Undeclared exception!
      try { 
        passwordBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum length of the password (-2364) must be GREATER than the number of selected constraints (0). The following constraints were selected: [].
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.PasswordBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMaxLength(0);
      assertSame(passwordBuilder0, passwordBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      passwordBuilder0.withMaxLength(9);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMaxLength(9);
      assertEquals(9, PasswordBuilder.DIGIT_UPPER_BOUND);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      Dummy4j dummy4j0 = new Dummy4j((ExpressionResolver) null, defaultRandomService0);
      PasswordBuilder passwordBuilder0 = new PasswordBuilder(dummy4j0);
      // Undeclared exception!
      try { 
        passwordBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.LoremDummy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      passwordBuilder0.withMaxLength(9);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMinLength(9);
      assertEquals(9, PasswordBuilder.DIGIT_UPPER_BOUND);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMaxLength(56);
      assertSame(passwordBuilder1, passwordBuilder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMinLength(107);
      assertSame(passwordBuilder0, passwordBuilder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withMinLength(9);
      assertEquals(9, PasswordBuilder.DIGIT_UPPER_BOUND);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      String string0 = passwordBuilder0.toString();
      assertEquals("PasswordBuilder{constraintCharacters=[], minLength=12, maxLength=12}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      passwordBuilder0.withSpecialChars();
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withDigits();
      passwordBuilder1.withLength(2);
      // Undeclared exception!
      try { 
        passwordBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum length of the password (2) must be GREATER than the number of selected constraints (2). The following constraints were selected: [with special characters, with digits].
         //
         verifyException("dev.codesoapbox.dummy4j.dummies.internet.PasswordBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PasswordBuilder passwordBuilder0 = new PasswordBuilder((Dummy4j) null);
      PasswordBuilder passwordBuilder1 = passwordBuilder0.withUpperCaseChars();
      assertEquals(9, PasswordBuilder.DIGIT_UPPER_BOUND);
  }
}
