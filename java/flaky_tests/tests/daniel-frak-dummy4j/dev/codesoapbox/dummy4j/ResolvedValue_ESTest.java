/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:50:42 GMT 2022
 */

package dev.codesoapbox.dummy4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.ResolvedValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ResolvedValue_ESTest extends ResolvedValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("", "");
      String string0 = resolvedValue0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("", "#");
      String string0 = resolvedValue0.getLocale();
      assertEquals("#", resolvedValue0.getValue());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      ResolvedValue resolvedValue1 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      boolean boolean0 = resolvedValue0.equals(resolvedValue1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("#", "");
      ResolvedValue resolvedValue1 = ResolvedValue.of("U,|Nl>Wsl", "");
      boolean boolean0 = resolvedValue1.equals(resolvedValue0);
      assertFalse(boolean0);
      assertEquals("", resolvedValue1.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      boolean boolean0 = resolvedValue0.equals("A z~*T\"dZByik;Y:7>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("S", "[EcIeD`");
      boolean boolean0 = resolvedValue0.equals(resolvedValue0);
      assertEquals("S", resolvedValue0.getLocale());
      assertTrue(boolean0);
      assertEquals("[EcIeD`", resolvedValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      ResolvedValue resolvedValue1 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "`t*83,Bv ");
      boolean boolean0 = resolvedValue0.equals(resolvedValue1);
      assertEquals("TW\"BE'wtlV=+3hE'R']", resolvedValue1.getLocale());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResolvedValue.of("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value cannot be null
         //
         verifyException("dev.codesoapbox.dummy4j.ResolvedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResolvedValue.of((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale cannot be null
         //
         verifyException("dev.codesoapbox.dummy4j.ResolvedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      resolvedValue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("TW\"BE'wtlV=+3hE'R']", "TW\"BE'wtlV=+3hE'R']");
      String string0 = resolvedValue0.getValue();
      assertEquals("TW\"BE'wtlV=+3hE'R']", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("U,|Nl>Wsl", "");
      String string0 = resolvedValue0.getLocale();
      assertEquals("U,|Nl>Wsl", string0);
      assertEquals("", resolvedValue0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResolvedValue resolvedValue0 = ResolvedValue.of("U,|Nl>Wsl", "");
      String string0 = resolvedValue0.toString();
      assertEquals("ResolvedValue{locale='U,|Nl>Wsl', value=''}", string0);
  }
}
