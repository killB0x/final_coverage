/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:03:10 GMT 2022
 */

package dev.codesoapbox.dummy4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dev.codesoapbox.dummy4j.DefaultRandomService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultRandomService_ESTest extends DefaultRandomService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-1480293052L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      String string0 = defaultRandomService0.digits(0);
      //  // Unstable assertion: assertEquals((-1480293052L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      long long1 = defaultRandomService0.nextLong((long) 0, 0L);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-99264427L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      Random.setNextRandom(Integer.MAX_VALUE);
      double double0 = defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals((-99264427L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.7, double0, 0.01);
      
      long long0 = defaultRandomService0.nextLong(0L, 9223372036854775792L);
      //  // Unstable assertion: assertEquals((-99264427L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals((-7378697629483821056L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(813286055L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat();
      //  // Unstable assertion: assertEquals(813286055L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      long long0 = defaultRandomService0.nextLong(9223372036854775792L);
      //  // Unstable assertion: assertEquals(813286055L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(922337203685477632L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(314769577L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      Random.setNextRandom(Integer.MAX_VALUE);
      double double0 = defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals(314769577L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.7, double0, 0.01);
      
      long long0 = defaultRandomService0.nextLong((long) Integer.MAX_VALUE);
      //  // Unstable assertion: assertEquals(314769577L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals((-1717986918L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-1623756963L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      long long0 = defaultRandomService0.nextLong();
      //  // Unstable assertion: assertEquals((-1623756963L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      double double0 = defaultRandomService0.nextDouble(2593.829, 2593.829);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertEquals(2593.829, double0, 0.01);
      
      long long1 = defaultRandomService0.nextLong();
      assertEquals(0L, defaultRandomService0.getSeed());
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-1128241474L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat((float) 10012);
      //  // Unstable assertion: assertEquals((-1128241474L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      int int0 = defaultRandomService0.nextInt(Integer.MAX_VALUE);
      //  // Unstable assertion: assertEquals((-1128241474L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(398359786L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat();
      //  // Unstable assertion: assertEquals(398359786L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      int int0 = defaultRandomService0.nextInt();
      //  // Unstable assertion: assertEquals(398359786L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long((-3457L));
      assertEquals((-3457L), (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals((-3457L), defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat((float) 0, (float) 0);
      assertEquals((-3457L), defaultRandomService0.getSeed());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(277297610L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      Random.setNextRandom(Integer.MAX_VALUE);
      double double0 = defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals(277297610L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.7, double0, 0.01);
      
      float float0 = defaultRandomService0.nextFloat();
      //  // Unstable assertion: assertEquals(277297610L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals((-0.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      double double0 = defaultRandomService0.nextDouble(2593.829, 2593.829);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertEquals(2593.829, double0, 0.01);
      
      float float0 = defaultRandomService0.nextFloat(1578.4F);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertEquals(157.84001F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(2058731401L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat((float) 10012);
      //  // Unstable assertion: assertEquals(2058731401L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      double double0 = defaultRandomService0.nextDouble((double) 1899);
      //  // Unstable assertion: assertEquals(2058731401L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(189.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(1702216737L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      Random.setNextRandom(Integer.MAX_VALUE);
      double double0 = defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals(1702216737L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.7, double0, 0.01);
      
      double double1 = defaultRandomService0.nextDouble((double) Integer.MAX_VALUE);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertEquals(1702216737L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals((-1.7179869176000001E9), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Random.setNextRandom(Integer.MAX_VALUE);
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      assertNotNull(mockRandom0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(mockRandom0, (-1280L));
      assertEquals((-1280L), defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      float float0 = defaultRandomService0.nextFloat((float) Integer.MAX_VALUE, (float) Integer.MAX_VALUE);
      assertEquals((-1280L), defaultRandomService0.getSeed());
      assertEquals(2.14748365E9F, float0, 0.01F);
      
      double double0 = defaultRandomService0.nextDouble();
      assertEquals((-1280L), defaultRandomService0.getSeed());
      assertEquals((-0.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(mockRandom0, 0L);
      assertEquals(0L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      long long0 = defaultRandomService0.getSeed();
      assertEquals(0L, defaultRandomService0.getSeed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      assertEquals(9223372036854775807L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(9223372036854775807L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      long long1 = defaultRandomService0.getSeed();
      assertEquals(9223372036854775807L, defaultRandomService0.getSeed());
      assertEquals(9223372036854775807L, long1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 9223372036854775807L);
      assertEquals(9223372036854775807L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 9223372036854775807L);
      assertEquals(9223372036854775807L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong(9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      int int0 = defaultRandomService0.nextInt(1899, 10012);
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(1899, int0);
      
      int int1 = defaultRandomService0.nextInt(1899, 2062);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(1899, int1);
      
      String string0 = defaultRandomService0.digits(9995);
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(string0);
      
      int int2 = defaultRandomService0.nextInt(Integer.MAX_VALUE);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0, int2);
      
      int int3 = defaultRandomService0.nextInt(1);
      //  // Unstable assertion: assertFalse(int3 == int1);
      //  // Unstable assertion: assertFalse(int3 == int0);
      //  // Unstable assertion: assertEquals((-355720126L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0, int3);
      
      // Undeclared exception!
      defaultRandomService0.nextInt(1, 2021);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 1L);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, (-2380L));
      assertEquals((-2380L), defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt(Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 2455);
      assertEquals(2455L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 470L);
      assertEquals(470L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat((float) Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, (-1L));
      assertEquals((-1L), defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(1380770065L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextDouble((-1658.28460733));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 660L);
      assertEquals(660L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextDouble();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, (-2209L));
      assertEquals((-2209L), defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextBoolean();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(1687835500L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      defaultRandomService0.digits(Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 1L);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.digits(1535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, 258L);
      assertEquals(258L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat((float) 258L, (float) 258L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(574757851L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat((float) 0L, (-3733.7F));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(738828797L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      double double0 = defaultRandomService0.nextDouble((double) 0.0F, (double) 0.0F);
      //  // Unstable assertion: assertEquals(738828797L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(946380661L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      long long0 = defaultRandomService0.nextLong(922337203685477632L, 9223372036854775792L);
      //  // Unstable assertion: assertEquals(946380661L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(922337203685477632L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong(4857L, (-401L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-314218097L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      int int0 = defaultRandomService0.nextInt(0, Integer.MAX_VALUE);
      //  // Unstable assertion: assertEquals((-314218097L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      assertEquals(1L, defaultRandomService0.getSeed());
      assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt(3067, (-1464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-633402671L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      String string0 = defaultRandomService0.digits((-242));
      //  // Unstable assertion: assertEquals((-633402671L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals("", string0);
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(784537572L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat(83.84306F, 0.0F);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must not be greater than upper bound
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-2026228990L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat((-883.0F));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(1095595683L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextFloat((-2550.2664F), (float) Integer.MAX_VALUE);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-2140918356L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextDouble(3286.8605871172085, (double) 0.0F);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must not be greater than upper bound
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-1851354768L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextDouble((double) 0, (double) (-242));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals(187263884L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong(9223372036854775807L, 3L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must not be greater than upper bound
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-1952117470L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong((-3285L));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      //  // Unstable assertion: assertEquals((-877135836L), defaultRandomService0.getSeed());
      //  // Unstable assertion: assertNotNull(defaultRandomService0);
      
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong((-1L), (-1L));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextInt(1899, 10012);
      defaultRandomService0.nextInt(1899, 2062);
      defaultRandomService0.digits(9995);
      defaultRandomService0.nextInt(Integer.MAX_VALUE);
      defaultRandomService0.nextInt(1);
      // Undeclared exception!
      defaultRandomService0.nextInt(1899);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt(1370, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must not be greater than upper bound
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt((-4232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Upper bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      // Undeclared exception!
      try { 
        defaultRandomService0.nextInt((-1678), (-1678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Long long0 = new Long(1L);
      DefaultRandomService defaultRandomService0 = new DefaultRandomService(long0);
      // Undeclared exception!
      try { 
        defaultRandomService0.nextDouble((-624.3566678), (-694.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lower bound must be positive or zero
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextLong(9223372036854775792L);
      defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals(595800248L, defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService((java.util.Random) null, (-1L));
      // Undeclared exception!
      try { 
        defaultRandomService0.nextLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dev.codesoapbox.dummy4j.DefaultRandomService", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextFloat();
      float float0 = defaultRandomService0.nextFloat();
      //  // Unstable assertion: assertEquals(1801909742L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      int int0 = defaultRandomService0.nextInt();
      //  // Unstable assertion: assertEquals(1752117648L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      double double0 = defaultRandomService0.nextDouble((double) 9223372036854775807L);
      //  // Unstable assertion: assertEquals(643767310L, defaultRandomService0.getSeed());
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextBoolean();
      //  // Unstable assertion: assertEquals((-1266777159L), defaultRandomService0.getSeed());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      long long0 = defaultRandomService0.getSeed();
      //  // Unstable assertion: assertEquals(498055808L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultRandomService defaultRandomService0 = new DefaultRandomService();
      defaultRandomService0.nextDouble();
      //  // Unstable assertion: assertEquals(988103789L, defaultRandomService0.getSeed());
  }
}
