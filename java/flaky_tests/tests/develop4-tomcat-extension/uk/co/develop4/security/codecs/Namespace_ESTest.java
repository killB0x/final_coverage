/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:22:59 GMT 2022
 */

package uk.co.develop4.security.codecs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Optional;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.co.develop4.security.codecs.Namespace;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Namespace_ESTest extends Namespace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Namespace namespace0 = new Namespace("Po0C&ms");
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      String string0 = namespace0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Namespace namespace0 = new Namespace("uk.co.develop4.security.codecs.Namespace");
      String string0 = namespace0.toString();
      assertEquals("uk.co.develop4.security.codecs.Namespace", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.removeNamespacePrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.isEqual("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      String string0 = namespace0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Namespace namespace0 = new Namespace("l'");
      String string0 = namespace0.getValue();
      assertEquals("l'", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      byte[] byteArray0 = new byte[0];
      String string0 = namespace0.addNamespacePrefix(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.addNamespacePrefix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = new Namespace("K/CM(");
      // Undeclared exception!
      try { 
        namespace0.removeNamespacePrefix("I]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 6
         // ^K/CM(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      // Undeclared exception!
      try { 
        namespace0.removeNamespacePrefix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.codecs.Namespace", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      // Undeclared exception!
      try { 
        namespace0.isValueInNamespace("o^rk8+Z!}~,*^G4,(NZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      // Undeclared exception!
      try { 
        namespace0.isEqual((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Namespace namespace0 = new Namespace("fG]$]\"Bgq-O");
      // Undeclared exception!
      try { 
        namespace0.addNamespacePrefix((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      Namespace namespace1 = new Namespace("3opd;Xq>UFq~Hq+Rn2f");
      boolean boolean0 = namespace0.equals(namespace1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      Namespace namespace1 = new Namespace("^<A]+tr]JP|]N~");
      boolean boolean0 = namespace0.equals(namespace1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      Namespace namespace1 = new Namespace((String) null);
      boolean boolean0 = namespace1.equals(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.equals("((^[a-zA-Z0-9]+://)|(^[a-zA-Z0-9]+:[a-zA-Z0-9]+//))");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.equals(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      Namespace namespace1 = new Namespace("");
      boolean boolean0 = namespace1.equals(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Namespace namespace0 = new Namespace((String) null);
      namespace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Namespace namespace0 = new Namespace("a");
      boolean boolean0 = namespace0.isValueInNamespace("^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.isValueInNamespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.isValueInNamespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Optional<Namespace> optional0 = Namespace.valueOf("");
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      byte[] byteArray0 = new byte[6];
      String string0 = namespace0.addNamespacePrefix(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      boolean boolean0 = namespace0.isEqual("30g-n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.removeNamespacePrefix("^");
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Namespace namespace0 = new Namespace("");
      String string0 = namespace0.addNamespacePrefix("}OlgVGq}y/|P");
      assertEquals("}OlgVGq}y/|P", string0);
  }
}
