/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:29:42 GMT 2022
 */

package uk.co.develop4.security.readers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import uk.co.develop4.security.readers.PropertyFileReader;
import uk.co.develop4.security.readers.PropertyMemoryReader;
import uk.co.develop4.security.readers.PropertyURLReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseReader_ESTest extends BaseReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PropertyMemoryReader propertyMemoryReader0 = new PropertyMemoryReader();
      Properties properties0 = propertyMemoryReader0.read();
      assertNotNull(properties0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PropertyFileReader propertyFileReader0 = new PropertyFileReader();
      // Undeclared exception!
      try { 
        propertyFileReader0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.readers.PropertyFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PropertyFileReader propertyFileReader0 = new PropertyFileReader();
      // Undeclared exception!
      try { 
        propertyFileReader0.init((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.readers.PropertyFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PropertyURLReader propertyURLReader0 = new PropertyURLReader();
      String string0 = propertyURLReader0.toString();
      assertEquals("BaseReader", string0);
  }
}
