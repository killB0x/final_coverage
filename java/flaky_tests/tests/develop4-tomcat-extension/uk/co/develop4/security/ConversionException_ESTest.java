/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:29:01 GMT 2022
 */

package uk.co.develop4.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import uk.co.develop4.security.ConversionException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ConversionException_ESTest extends ConversionException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      ConversionException conversionException0 = null;
      try {
        conversionException0 = new ConversionException("uk.co.develop4.security.ConversionException", mockThrowable0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("h>Sbt`H2O");
      ConversionException conversionException1 = new ConversionException("h>Sbt`H2O", conversionException0, true, true);
      assertFalse(conversionException1.equals((Object)conversionException0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("h>Sbt`H2O", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("h>Sbt`H2O");
      ConversionException conversionException1 = new ConversionException(conversionException0);
      assertFalse(conversionException1.equals((Object)conversionException0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException();
  }
}
