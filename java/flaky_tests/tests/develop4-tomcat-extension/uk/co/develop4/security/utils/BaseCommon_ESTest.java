/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 16:20:57 GMT 2022
 */

package uk.co.develop4.security.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.logging.MockFileHandler;
import org.junit.runner.RunWith;
import uk.co.develop4.security.utils.BaseCommon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseCommon_ESTest extends BaseCommon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Level level0 = Level.FINER;
      String string0 = "";
      String string1 = level0.getLocalizedName();
      Object object0 = BaseCommon.isNull((Object) string0, (Object) string0, (Object) string1);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      Object object0 = BaseCommon.isNull((Object) "c*CC)G?", (Object) logger0, (Object) logger0);
      assertSame(object0, logger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = BaseCommon.isNull(object0, object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = BaseCommon.isNull((Object) null, object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = BaseCommon.isNull("x22dQBMTAS#:-K", "`");
      assertEquals("x22dQBMTAS#:-K", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Level level0 = Level.OFF;
      logger0.setLevel(level0);
      boolean boolean0 = BaseCommon.isOff(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Logger logger0 = Logger.getLogger("da{6K&ux1@>D1wer^,");
      boolean boolean0 = BaseCommon.isInfo(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      boolean boolean0 = BaseCommon.isTrace(logger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      MockFileHandler mockFileHandler0 = new MockFileHandler("Y");
      Level level0 = mockFileHandler0.getLevel();
      logger0.setLevel(level0);
      boolean boolean0 = BaseCommon.isSnoop(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = BaseCommon.prettryPrintProperties(properties0);
      //  // Unstable assertion: assertEquals("\n#dump properties\n#Thu Nov 17 16:20:43 GMT 2022\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = BaseCommon.isNull("uk.co.develop4.security.utils.BaseCommon", (String) null, "Ey*_6g4]^A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = BaseCommon.isNull((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.put(properties0, properties0);
      try { 
        BaseCommon.prettryPrintProperties(properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.Properties cannot be cast to class java.lang.String (java.util.Properties and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isWarning((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isTrace((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isSnoop((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isOff((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isInfo((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseCommon.isDebug((Logger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      Level level0 = Level.OFF;
      logger0.setLevel(level0);
      boolean boolean0 = BaseCommon.isWarning(logger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      boolean boolean0 = BaseCommon.isDebug(logger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = BaseCommon.isNull("", "", "1f,EVEA2Bo");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = BaseCommon.isNull((String) null, (String) null, "x22dQBMTAS#:-K");
      assertEquals("x22dQBMTAS#:-K", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = BaseCommon.isNull((Object) null, object0, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = BaseCommon.isNull((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = BaseCommon.isNull((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      BaseCommon baseCommon0 = new BaseCommon();
      // Undeclared exception!
      try { 
        baseCommon0.setLoggerLevel(logger0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad level \"\"
         //
         verifyException("java.util.logging.Level", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      BaseCommon baseCommon0 = new BaseCommon();
      baseCommon0.setLoggerLevel(logger0, (String) null);
      assertEquals("global", logger0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      boolean boolean0 = BaseCommon.isWarning(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      boolean boolean0 = BaseCommon.isInfo(logger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      boolean boolean0 = BaseCommon.isDebug(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      boolean boolean0 = BaseCommon.isTrace(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      boolean boolean0 = BaseCommon.isSnoop(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Logger logger0 = Logger.getGlobal();
      boolean boolean0 = BaseCommon.isSnoop(logger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      boolean boolean0 = BaseCommon.isOff(logger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      try { 
        BaseCommon.prettryPrintProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("uk.co.develop4.security.utils.BaseCommon", e);
      }
  }
}
