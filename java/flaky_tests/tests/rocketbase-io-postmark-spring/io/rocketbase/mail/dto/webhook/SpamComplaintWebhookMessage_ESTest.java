/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 17:29:18 GMT 2022
 */

package io.rocketbase.mail.dto.webhook;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.rocketbase.mail.dto.webhook.SpamComplaintWebhookMessage;
import io.rocketbase.mail.dto.webhook.WebhookRecordType;
import java.time.Instant;
import java.time.chrono.HijrahDate;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SpamComplaintWebhookMessage_ESTest extends SpamComplaintWebhookMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setTag("SUBSCRIPTION_CHANGE");
      spamComplaintWebhookMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setEmail("SUBSCRIPTION_CHANGE");
      spamComplaintWebhookMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setMessageId("SUBSCRIPTION_CHANGE");
      spamComplaintWebhookMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("", "", "", instant0, "Click", hashMap0, true, false);
      spamComplaintWebhookMessage0.isInactive();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("t>4^yg$j!4", "jL[NWxHe=wOXVPn;?]{", "io.rocketbase.mail.dto.webhook.SpamComplaintWebhookMessage", instant0, "t>4^yg$j!4", hashMap0, true, true);
      spamComplaintWebhookMessage0.isCanActivate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setTag("io.rocketbase.mail.dto.webhook.WebhookRecordType");
      spamComplaintWebhookMessage0.getTag();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.setTag("");
      spamComplaintWebhookMessage0.getTag();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("", "", "", instant0, "Click", hashMap0, true, false);
      spamComplaintWebhookMessage0.getSubject();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("&#\"OkSZ<", "&#\"OkSZ<", "Click", instant0, "", hashMap0, true, false);
      spamComplaintWebhookMessage0.getSubject();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("&#\"OkSZ<", "&#\"OkSZ<", "Click", instant0, "", hashMap0, true, false);
      spamComplaintWebhookMessage0.getMetadata();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spamComplaintWebhookMessage0.setMetadata(hashMap0);
      hashMap0.put("", "");
      spamComplaintWebhookMessage0.getMetadata();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setMessageId("SUBSCRIPTION_CHANGE");
      spamComplaintWebhookMessage0.getMessageId();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setMessageId("");
      spamComplaintWebhookMessage0.getMessageId();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = new SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder();
      spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.email("h");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.getEmail();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, (-1L));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("{R9dN%/OzWUtd@#sXP", "", "{R9dN%/OzWUtd@#sXP", instant0, "", hashMap0, true, false);
      spamComplaintWebhookMessage0.getEmail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("", "", "", instant0, "Click", hashMap0, true, false);
      spamComplaintWebhookMessage0.getBouncedAt();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = new SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.canEqual(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      spamComplaintWebhookMessage0.canEqual(hijrahDate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.getTag();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.isInactive();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.getMessageId();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.getBouncedAt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.getSubject();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.getEmail();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.getMetadata();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.isCanActivate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spamComplaintWebhookMessage1.setMetadata(hashMap0);
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.metadata(hashMap0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1.build();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setSubject("^gW!K");
      spamComplaintWebhookMessage1.setSubject("^gW!K");
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setSubject("L:CH!<[tDU<v2a~M");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setSubject("^gW!K");
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      Instant instant0 = MockInstant.now();
      spamComplaintWebhookMessage0.setBouncedAt(instant0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setBouncedAt(instant0);
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      spamComplaintWebhookMessage0.setBouncedAt(instant0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.tag("");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setEmail(";k_0vbh/JJN");
      spamComplaintWebhookMessage1.setEmail(";k_0vbh/JJN");
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setEmail(";m'wsJ}Xc~O'9n5Q4]");
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setEmail(";k_0vbh/JJN");
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setMessageId("");
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setCanActivate(true);
      spamComplaintWebhookMessage1.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage1.setInactive(true);
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.canActivate(true);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1.build();
      spamComplaintWebhookMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage("", "", "", instant0, "Click", hashMap0, true, false);
      spamComplaintWebhookMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = new SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.tag("");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1.build();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = new SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.messageId("");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1.build();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.bouncedAt((Instant) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.metadata(hashMap0);
      hashMap0.put((String) null, spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1.build();
      // Undeclared exception!
      spamComplaintWebhookMessage0.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = new SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.inactive(false);
      assertSame(spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0, spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.subject((String) null);
      assertSame(spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0, spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      String string0 = spamComplaintWebhookMessage0.toString();
      assertEquals("SpamComplaintWebhookMessage(messageId=null, email=null, tag=null, bouncedAt=null, subject=null, metadata=null, inactive=false, canActivate=false)", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      spamComplaintWebhookMessage0.setMessageId("");
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      boolean boolean0 = spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SpamComplaintWebhookMessage.SpamComplaintWebhookMessageBuilder spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0 = SpamComplaintWebhookMessage.builder();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = spamComplaintWebhookMessage_SpamComplaintWebhookMessageBuilder0.build();
      assertTrue(spamComplaintWebhookMessage1.equals((Object)spamComplaintWebhookMessage0));
      
      spamComplaintWebhookMessage1.setTag("vy");
      boolean boolean0 = spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
      assertFalse(spamComplaintWebhookMessage1.equals((Object)spamComplaintWebhookMessage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      spamComplaintWebhookMessage0.setMetadata(hashMap0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      boolean boolean0 = spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      WebhookRecordType webhookRecordType0 = spamComplaintWebhookMessage0.getRecordType();
      assertEquals("SpamComplaint", webhookRecordType0.getValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SpamComplaintWebhookMessage spamComplaintWebhookMessage0 = new SpamComplaintWebhookMessage();
      Instant instant0 = MockInstant.now();
      spamComplaintWebhookMessage0.setBouncedAt(instant0);
      SpamComplaintWebhookMessage spamComplaintWebhookMessage1 = new SpamComplaintWebhookMessage();
      boolean boolean0 = spamComplaintWebhookMessage0.equals(spamComplaintWebhookMessage1);
      assertFalse(boolean0);
  }
}
