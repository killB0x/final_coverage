/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 05:58:20 GMT 2022
 */

package org.hisp.dhis.commons.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hisp.dhis.commons.util.StreamUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamUtils_ESTest extends StreamUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      InputStream inputStream0 = StreamUtils.wrapAndCheckCompressionFormat(byteArrayInputStream0);
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipInputStream zipInputStream0 = new ZipInputStream(byteArrayInputStream0);
      ZipEntry zipEntry0 = StreamUtils.getNextZipEntry(zipInputStream0);
      assertNull(zipEntry0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.wrapAndCheckCompressionFormat((InputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read header from stream 
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      // Undeclared exception!
      try { 
        StreamUtils.readContent((File) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[0];
      hashMap0.put(stringArray0, "UTF-8");
      // Undeclared exception!
      try { 
        StreamUtils.readContent(file0, hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      File file0 = MockFile.createTempFile("UTF-8", "");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      try { 
        StreamUtils.readContent(file0, hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      try { 
        StreamUtils.readContent(mockFile0, hashMap0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2269);
      // Undeclared exception!
      try { 
        StreamUtils.isZip(bufferedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read header from stream 
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.isZip((BufferedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 98);
      // Undeclared exception!
      try { 
        StreamUtils.isGZip(bufferedInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't read header from stream 
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.isGZip((BufferedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = (BufferedInputStream)StreamUtils.wrapAndCheckCompressionFormat(pushbackInputStream0);
      boolean boolean0 = StreamUtils.isGZip(bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = (BufferedInputStream)StreamUtils.wrapAndCheckCompressionFormat(pushbackInputStream0);
      boolean boolean0 = StreamUtils.isGZip(bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = (BufferedInputStream)StreamUtils.wrapAndCheckCompressionFormat(pushbackInputStream0);
      boolean boolean0 = StreamUtils.isZip(bufferedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "bh";
      hashMap0.put(stringArray0, "bh");
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, hashMap0);
      assertEquals(3, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "UTF-8";
      hashMap0.put(stringArray0, "UTF-8");
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, hashMap0);
      assertEquals(6, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      hashMap0.put(stringArray0, "");
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, hashMap0);
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      hashMap0.put(stringArray0, "");
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, hashMap0);
      assertEquals("bh\n", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      String[] stringArray0 = new String[5];
      hashMap0.put(stringArray0, "");
      // Undeclared exception!
      try { 
        StreamUtils.readContent(file0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-80");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "bh");
      File file0 = MockFile.createTempFile("UTF-8", "");
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, (Map<String[], String>) null);
      assertEquals(3, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile("UTF-8", "");
      HashMap<String[], String> hashMap0 = new HashMap<String[], String>();
      StringBuffer stringBuffer0 = StreamUtils.readContent(file0, hashMap0);
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.getNextZipEntry((ZipInputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to get next entry in ZIP-file
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StreamUtils streamUtils0 = new StreamUtils();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.closeZipEntry((ZipOutputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to close the current ZipEntry
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.finishZipEntry((ZipOutputStream) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to finish the content of the ZipOutputStream
         //
         verifyException("org.hisp.dhis.commons.util.StreamUtils", e);
      }
  }
}
