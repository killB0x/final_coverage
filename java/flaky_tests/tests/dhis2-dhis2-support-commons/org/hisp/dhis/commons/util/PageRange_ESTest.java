/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 06:06:24 GMT 2022
 */

package org.hisp.dhis.commons.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hisp.dhis.commons.util.PageRange;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PageRange_ESTest extends PageRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageRange pageRange0 = new PageRange((-52));
      PageRange pageRange1 = pageRange0.setPages((-12));
      pageRange1.pageCount();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PageRange pageRange0 = new PageRange((-12));
      pageRange0.nextPage();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2);
      pageRange0.setPages(2);
      pageRange0.nextPage();
      pageRange0.nextPage();
      pageRange0.setPages((-669));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2);
      pageRange0.setPageSize(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2);
      PageRange pageRange1 = pageRange0.setPages(2);
      pageRange0.nextPage();
      pageRange0.nextPage();
      pageRange1.setPageSize(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2191);
      PageRange pageRange1 = pageRange0.setPageSize((-1633));
      pageRange1.pageCount();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageRange pageRange0 = new PageRange(1180);
      pageRange0.setPageSize((-1));
      pageRange0.nextPage();
      pageRange0.getToIndex();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageRange pageRange0 = new PageRange(1742);
      pageRange0.setPages(0);
      pageRange0.nextPage();
      pageRange0.getPages();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2);
      pageRange0.setPages(2);
      pageRange0.getPageSize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PageRange pageRange0 = new PageRange((-1));
      PageRange pageRange1 = pageRange0.setPageSize((-51));
      pageRange1.getPageSize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PageRange pageRange0 = new PageRange(456);
      PageRange pageRange1 = pageRange0.setPages((-339));
      // Undeclared exception!
      pageRange1.getPages();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2);
      // Undeclared exception!
      try { 
        pageRange0.getToIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // nextPage() must be called before getToIndex()
         //
         verifyException("org.hisp.dhis.commons.util.PageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PageRange pageRange0 = new PageRange(1742);
      pageRange0.setPages(1742);
      pageRange0.nextPage();
      int int0 = pageRange0.getToIndex();
      assertEquals(1, pageRange0.getPageSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      int int0 = pageRange0.getFromIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      pageRange0.setPages(0);
      int int0 = pageRange0.pageCount();
      assertEquals(Integer.MAX_VALUE, pageRange0.getPageSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PageRange pageRange0 = new PageRange(2360);
      PageRange pageRange1 = pageRange0.setPageSize(2360);
      List<int[]> list0 = pageRange1.getPages();
      assertEquals(2360, pageRange0.getPageSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      pageRange0.reset();
      assertEquals(0, pageRange0.getFromIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      PageRange pageRange1 = pageRange0.setPages(1152);
      pageRange1.nextPage();
      pageRange0.nextPage();
      int int0 = pageRange0.getFromIndex();
      assertEquals(1, pageRange0.getPageSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PageRange pageRange0 = new PageRange();
      // Undeclared exception!
      try { 
        pageRange0.pageCount();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.hisp.dhis.commons.util.PageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      PageRange pageRange1 = pageRange0.setPageSize((-1));
      int int0 = pageRange1.pageCount();
      assertEquals((-1), pageRange0.getPageSize());
      assertEquals((-286), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PageRange pageRange0 = new PageRange(286);
      int int0 = pageRange0.getPageSize();
      assertEquals(0, int0);
      assertEquals(0, pageRange0.getFromIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PageRange pageRange0 = new PageRange(1);
      // Undeclared exception!
      try { 
        pageRange0.getPages();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // nextPage() must be called before getToIndex()
         //
         verifyException("org.hisp.dhis.commons.util.PageRange", e);
      }
  }
}
