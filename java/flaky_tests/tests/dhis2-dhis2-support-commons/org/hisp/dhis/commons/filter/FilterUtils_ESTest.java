/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 06 06:05:02 GMT 2022
 */

package org.hisp.dhis.commons.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.hisp.dhis.commons.filter.Filter;
import org.hisp.dhis.commons.filter.FilterUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilterUtils_ESTest extends FilterUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(507);
      linkedList0.add(integer0);
      Filter<Integer> filter0 = (Filter<Integer>) mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(filter0).retain(anyInt());
      FilterUtils.inverseFilter(linkedList0, filter0);
      //  // Unstable assertion: assertFalse(linkedList0.contains(507));
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Filter<Integer> filter0 = (Filter<Integer>) mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(filter0).retain(anyInt());
      FilterUtils.inverseFilter(linkedList0, filter0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = FilterUtils.inverseFilter(linkedList0, (Filter<Integer>) null);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1492));
      linkedList0.add(integer0);
      Filter<Integer> filter0 = (Filter<Integer>) mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(filter0).retain(anyInt());
      FilterUtils.filter(linkedList0, filter0);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Filter<Integer> filter0 = (Filter<Integer>) mock(Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(filter0).retain(anyInt());
      FilterUtils.filter(linkedList0, filter0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = FilterUtils.filter(linkedList0, (Filter<Integer>) null);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = FilterUtils.filter((LinkedList<Integer>) null, (Filter<Integer>) null);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FilterUtils filterUtils0 = new FilterUtils();
  }
}
