/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 10:11:45 GMT 2022
 */

package com.peertopark.java.geocalc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.peertopark.java.geocalc.DMSCoordinate;
import com.peertopark.java.geocalc.DegreeCoordinate;
import com.peertopark.java.geocalc.GPSCoordinate;
import com.peertopark.java.geocalc.RadianCoordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Coordinate_ESTest extends Coordinate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      DegreeCoordinate degreeCoordinate0 = radianCoordinate0.getDegreeCoordinate();
      double double0 = degreeCoordinate0.getValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(2734.0);
      double double0 = degreeCoordinate0.getValue();
      assertEquals(2734.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(2734.0);
      GPSCoordinate gPSCoordinate0 = degreeCoordinate0.getGPSCoordinate();
      assertEquals(2734.0, gPSCoordinate0.getDecimalDegrees(), 0.01);
      
      gPSCoordinate0.decimalDegrees = 0.0;
      gPSCoordinate0.getRadianCoordinate();
      assertEquals(0.0, gPSCoordinate0.getMinutes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-2908.416), 2490.385133379825, 2733.4);
      dMSCoordinate0.decimalDegrees = 378.11;
      RadianCoordinate radianCoordinate0 = dMSCoordinate0.getRadianCoordinate();
      assertEquals(378.11000000000007, radianCoordinate0.getDecimalDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-2908.416), 2490.385133379825, 2733.4);
      RadianCoordinate radianCoordinate0 = dMSCoordinate0.getRadianCoordinate();
      assertEquals((-2950.6816966674414), radianCoordinate0.getDecimalDegrees(), 0.01);
      
      radianCoordinate0.decimalDegrees = 0.0;
      DegreeCoordinate degreeCoordinate0 = radianCoordinate0.getDegreeCoordinate();
      GPSCoordinate gPSCoordinate0 = degreeCoordinate0.getGPSCoordinate();
      assertEquals(0.0, gPSCoordinate0.getDecimalDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(2490.385133379825);
      GPSCoordinate gPSCoordinate0 = degreeCoordinate0.getGPSCoordinate();
      DegreeCoordinate degreeCoordinate1 = gPSCoordinate0.getDegreeCoordinate();
      assertEquals(2490.383333333333, degreeCoordinate1.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-2908.416), 2490.385133379825, 2733.4);
      RadianCoordinate radianCoordinate0 = dMSCoordinate0.getRadianCoordinate();
      radianCoordinate0.decimalDegrees = 0.0;
      double double0 = radianCoordinate0.getDecimalDegrees();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate(1.0, 1114.271012958);
      double double0 = gPSCoordinate0.getDecimalDegrees();
      assertEquals(19.5711835493, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(2734.0);
      DMSCoordinate dMSCoordinate0 = degreeCoordinate0.getDMSCoordinate();
      assertEquals(0.0, dMSCoordinate0.getSeconds(), 0.01);
      assertEquals(0.0, dMSCoordinate0.getMinutes(), 0.01);
      assertEquals(2734.0, dMSCoordinate0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-579.12468993113));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      DegreeCoordinate degreeCoordinate0 = dMSCoordinate0.getDegreeCoordinate();
      assertEquals((-33181.40054488889), degreeCoordinate0.getValue(), 0.01);
      assertEquals(1.9616, dMSCoordinate0.getSeconds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-579.12468993113));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      String string0 = gPSCoordinate0.toString();
      assertEquals(1.9616, dMSCoordinate0.getSeconds(), 0.01);
      assertEquals("DegreeCoordinate{decimalDegrees=-33182.583333333336 degrees}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-579.12468993113));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      double double0 = dMSCoordinate0.getValue();
      assertEquals(24.0, dMSCoordinate0.getMinutes(), 0.01);
      assertEquals((-33181.40054488889), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-579.12468993113));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      double double0 = dMSCoordinate0.getDecimalDegrees();
      assertEquals((-33181.40054488889), double0, 0.01);
      assertEquals(24.0, dMSCoordinate0.getMinutes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(0.0, 0.0, 0.0);
      DMSCoordinate dMSCoordinate1 = dMSCoordinate0.getDMSCoordinate();
      assertEquals(0.0, dMSCoordinate1.getMinutes(), 0.01);
      assertEquals(0.0, dMSCoordinate1.getWholeDegrees(), 0.01);
      assertEquals(0.0, dMSCoordinate1.getSeconds(), 0.01);
  }
}
