/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 10:08:11 GMT 2022
 */

package com.peertopark.java.geocalc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.peertopark.java.geocalc.BoundingArea;
import com.peertopark.java.geocalc.Coordinate;
import com.peertopark.java.geocalc.DMSCoordinate;
import com.peertopark.java.geocalc.DegreeCoordinate;
import com.peertopark.java.geocalc.GPSCoordinate;
import com.peertopark.java.geocalc.Point;
import com.peertopark.java.geocalc.RadianCoordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoundingArea_ESTest extends BoundingArea_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1942.1624562272);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      boundingArea0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(261.3530202536, 1739.0, (-449.7160291313264));
      Point point1 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) dMSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point1, point0);
      boolean boolean0 = boundingArea0.isContainedWithin(point0);
      assertEquals(290.2114324677302, boundingArea0.getEastLongitude(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate((-1865.6291299697323), (-1865.6291299697323));
      Point point0 = new Point(gPSCoordinate0, gPSCoordinate0);
      Point point1 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      point0.longitude = (-1865.6291299697323);
      BoundingArea boundingArea0 = new BoundingArea(point0, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertTrue(boolean0);
      assertEquals((-1865.6291299697323), boundingArea0.getEastLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(821.7110079612888);
      Point point0 = Point.build(double0, double0);
      Double double1 = new Double(79.41230744455495);
      Point point1 = Point.build(double0, double1);
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(60.0, 60.0, 1353.154);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(60.0);
      Point point2 = Point.build((Coordinate) radianCoordinate0, (Coordinate) dMSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point2, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point0);
      assertFalse(boolean0);
      assertEquals(61.37587611111111, boundingArea0.getEastLongitude(), 0.01);
      assertEquals(821.7110079612888, boundingArea0.getSouthLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = Point.build(double0, double0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(1.0);
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate((-180.0), (-180.0));
      Point point1 = Point.build((Coordinate) radianCoordinate0, (Coordinate) gPSCoordinate0);
      point1.longitude = (-180.0);
      BoundingArea boundingArea0 = new BoundingArea(point1, point0);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertTrue(boolean0);
      assertEquals(1.0, boundingArea0.getWestLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      Double double0 = new Double(0.0);
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(0.0, (-449.7160291313264), 0.0);
      Double double1 = new Double(2264.0);
      Point point1 = Point.build(double0, double1);
      BoundingArea boundingArea0 = new BoundingArea(point0, point1);
      Point point2 = new Point(radianCoordinate0, dMSCoordinate0);
      boolean boolean0 = boundingArea0.isContainedWithin(point2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(675.98215);
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-1794.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point1 = new Point(gPSCoordinate0, radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point0);
      assertTrue(boolean0);
      assertEquals((-102788.62844646968), boundingArea0.getWestLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getWestLongitude();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(2314.247887);
      Point point0 = new Point(radianCoordinate0, radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getWestLongitude();
      assertEquals(132596.63667216865, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(0.0);
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthWest();
      assertEquals(0.0, point1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(1942.1624562272);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthWest();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getSouthLatitude();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build((-3855.7929605));
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getSouthLatitude();
      assertEquals((-3855.7929605), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double(1942.1624562272);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthEast();
      assertEquals(1942.1624562272, point1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthEast();
      assertNotSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthWest();
      assertEquals(0.0, point1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build((-1.0));
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthWest();
      assertNotSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getNorthLatitude();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getNorthLatitude();
      assertEquals((-10314.75), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthEast();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      DegreeCoordinate degreeCoordinate0 = radianCoordinate0.getDegreeCoordinate();
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthEast();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getEastLongitude();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getEastLongitude();
      assertEquals((-10314.75), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(3600.0);
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      // Undeclared exception!
      try { 
        boundingArea0.isContainedWithin((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.BoundingArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BoundingArea boundingArea0 = null;
      try {
        boundingArea0 = new BoundingArea((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.BoundingArea", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-634.327728515));
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthWest();
      assertEquals((-634.327728515), point1.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(822.22251);
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthEast();
      assertSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = Point.build(double0, double0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(1.0);
      Point point1 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point1, point1);
      BoundingArea boundingArea1 = new BoundingArea(point1, point0);
      boolean boolean0 = boundingArea1.equals(boundingArea0);
      assertFalse(boolean0);
      assertEquals(57.29577951308232, boundingArea1.getEastLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = Point.build(double0, double0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(1.0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea1 = new BoundingArea(point1, point0);
      boolean boolean0 = boundingArea1.equals(boundingArea0);
      assertFalse(boolean0);
      assertEquals(1.0, boundingArea1.getWestLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(1.0166666666666666);
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea1 = new BoundingArea(point1, point1);
      boolean boolean0 = boundingArea0.equals(boundingArea1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = DegreeCoordinate.build(822.22251);
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      boolean boolean0 = boundingArea0.equals(boundingArea0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Double double0 = new Double(764.216);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      boolean boolean0 = boundingArea0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-0.07861440570007855));
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-0.07861440570007855));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      boolean boolean0 = boundingArea0.equals(dMSCoordinate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(577.2272208954755);
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate(577.2272208954755, 577.2272208954755);
      Point point1 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-5762.0));
      Point point0 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate((-5762.0), (-5762.0));
      Point point1 = Point.build((Coordinate) radianCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point1, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate((-1865.6291299697), (-1865.6291299697));
      Point point0 = new Point(gPSCoordinate0, gPSCoordinate0);
      Point point1 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      point0.longitude = (-1865.6291299697);
      BoundingArea boundingArea0 = new BoundingArea(point0, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point0);
      assertEquals((-1865.6291299697), boundingArea0.getEastLongitude(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-0.07861440570007855));
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-0.07861440570007855));
      DMSCoordinate dMSCoordinate0 = radianCoordinate0.getDMSCoordinate();
      DegreeCoordinate degreeCoordinate1 = DegreeCoordinate.build(180.0);
      Point point1 = new Point(dMSCoordinate0, degreeCoordinate1);
      BoundingArea boundingArea0 = new BoundingArea(point0, point1);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertEquals((-0.07861440570007855), boundingArea0.getNorthLatitude(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double((-4491.894907294894));
      Double double1 = new Double((-3426.03717));
      Point point0 = Point.build(double0, double1);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = Point.build(double1, double1);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.82);
      Point point0 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(0.82);
      Point point1 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point1, point0);
      boolean boolean0 = boundingArea0.isContainedWithin(point1);
      assertFalse(boolean0);
      assertEquals(0.82, boundingArea0.getNorthLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-0.07861440570007855));
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      String string0 = boundingArea0.toString();
      assertEquals("BoundingArea{northEast=Point{latitude=-0.07861440570007855, longitude=-0.07861440570007855}, southWest=Point{latitude=-0.07861440570007855, longitude=-0.07861440570007855}}", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(0.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getSouthEast();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-0.07861440570007855));
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      // Undeclared exception!
      try { 
        boundingArea0.getTopLeft();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double double0 = new Double(1.0);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      // Undeclared exception!
      try { 
        boundingArea0.getBottomRight();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Double double0 = new Double(2126.0964132);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getNorthLatitude();
      assertEquals(2126.0964132, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-180.0));
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double0 = boundingArea0.getWestLongitude();
      assertEquals((-10314.75), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Double double0 = new Double(821.7110079612888);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getEastLongitude();
      assertEquals(821.7110079612888, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Double double0 = new Double(821.7110079612888);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      double double1 = boundingArea0.getSouthLatitude();
      assertEquals(821.7110079612888, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(822.22251);
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      BoundingArea boundingArea0 = new BoundingArea(point0, point0);
      Point point1 = boundingArea0.getNorthWest();
      assertNotSame(point1, point0);
  }
}
