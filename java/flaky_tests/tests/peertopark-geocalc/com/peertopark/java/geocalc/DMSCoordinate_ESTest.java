/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 10:11:05 GMT 2022
 */

package com.peertopark.java.geocalc;

import org.junit.Test;
import static org.junit.Assert.*;
import com.peertopark.java.geocalc.DMSCoordinate;
import com.peertopark.java.geocalc.GPSCoordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DMSCoordinate_ESTest extends DMSCoordinate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(1444.98758, (-1.0), 1764.1561);
      assertEquals(1445.4609566944443, dMSCoordinate0.getDecimalDegrees(), 0.01);
      
      dMSCoordinate0.decimalDegrees = 0.0;
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      double double0 = gPSCoordinate0.getWholeDegrees();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(1444.98758, (-1.0), 1764.1561);
      double double0 = dMSCoordinate0.getWholeDegrees();
      assertEquals(1764.1561, dMSCoordinate0.getSeconds(), 0.01);
      assertEquals(1444.98758, double0, 0.01);
      assertEquals((-1.0), dMSCoordinate0.getMinutes(), 0.01);
      assertEquals(1445.4609566944443, dMSCoordinate0.getValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(1444.98758, (-1.0), 1764.1561);
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      double double0 = gPSCoordinate0.getSeconds();
      assertEquals(1445.0, gPSCoordinate0.getWholeDegrees(), 0.01);
      assertEquals(27.0, gPSCoordinate0.getMinutes(), 0.01);
      assertEquals(1445.4609566944443, dMSCoordinate0.getValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-808.587), (-1.0), (-1.0));
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      DMSCoordinate dMSCoordinate1 = gPSCoordinate0.getDMSCoordinate();
      double double0 = dMSCoordinate1.getSeconds();
      assertEquals((-808.587), dMSCoordinate0.getWholeDegrees(), 0.01);
      assertEquals((-809.4166666666666), dMSCoordinate1.getValue(), 0.01);
      assertEquals(25.0, gPSCoordinate0.getMinutes(), 0.01);
      assertEquals(60.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(1444.98758, (-1.0), 1764.1561);
      assertEquals(1445.4609566944443, dMSCoordinate0.getDecimalDegrees(), 0.01);
      
      dMSCoordinate0.decimalDegrees = 0.0;
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      double double0 = gPSCoordinate0.getMinutes();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-808.587), (-1.0), (-1.0));
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      double double0 = gPSCoordinate0.getMinutes();
      assertEquals((-808.5700555555555), dMSCoordinate0.getValue(), 0.01);
      assertEquals((-809.4166666666666), gPSCoordinate0.getValue(), 0.01);
      assertEquals(0.0, gPSCoordinate0.getSeconds(), 0.01);
      assertEquals((-1.0), dMSCoordinate0.getSeconds(), 0.01);
      assertEquals((-808.587), dMSCoordinate0.getWholeDegrees(), 0.01);
      assertEquals(25.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-808.587), (-1.0), (-1.0));
      GPSCoordinate gPSCoordinate0 = dMSCoordinate0.getGPSCoordinate();
      double double0 = gPSCoordinate0.getWholeDegrees();
      assertEquals(0.0, gPSCoordinate0.getSeconds(), 0.01);
      assertEquals((-809.0), double0, 0.01);
      assertEquals((-808.5700555555555), dMSCoordinate0.getValue(), 0.01);
      assertEquals((-1.0), dMSCoordinate0.getSeconds(), 0.01);
      assertEquals(25.0, gPSCoordinate0.getMinutes(), 0.01);
      assertEquals((-809.4166666666666), gPSCoordinate0.getDecimalDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate((-808.587), (-1.0), (-1.0));
      double double0 = dMSCoordinate0.getSeconds();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), dMSCoordinate0.getMinutes(), 0.01);
      assertEquals((-808.5700555555555), dMSCoordinate0.getValue(), 0.01);
      assertEquals((-808.587), dMSCoordinate0.getWholeDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(1.0, (-4272.172634160322), (-4272.172634160322));
      double double0 = dMSCoordinate0.getMinutes();
      assertEquals((-4272.172634160322), double0, 0.01);
      assertEquals((-4272.172634160322), dMSCoordinate0.getSeconds(), 0.01);
      assertEquals((-71.38959185660545), dMSCoordinate0.getValue(), 0.01);
      assertEquals(1.0, dMSCoordinate0.getWholeDegrees(), 0.01);
  }
}
