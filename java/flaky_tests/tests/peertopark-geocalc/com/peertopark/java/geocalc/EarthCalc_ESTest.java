/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 10:09:40 GMT 2022
 */

package com.peertopark.java.geocalc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.peertopark.java.geocalc.BoundingArea;
import com.peertopark.java.geocalc.Coordinate;
import com.peertopark.java.geocalc.DMSCoordinate;
import com.peertopark.java.geocalc.DegreeCoordinate;
import com.peertopark.java.geocalc.EarthCalc;
import com.peertopark.java.geocalc.GPSCoordinate;
import com.peertopark.java.geocalc.Point;
import com.peertopark.java.geocalc.RadianCoordinate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EarthCalc_ESTest extends EarthCalc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(3182.790619958);
      Point point0 = Point.build(double0, double0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-1.0));
      DegreeCoordinate degreeCoordinate0 = radianCoordinate0.getDegreeCoordinate();
      Point point1 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) radianCoordinate0);
      double double1 = EarthCalc.getBearing(point0, point1);
      assertEquals(208.37425109138616, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(6356752.314245);
      Point point0 = Point.build(double0, double0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 0.0, 6356752.314245);
      double double1 = EarthCalc.getHarvesineDistance(point0, point1);
      assertEquals(2024190.3661427256, double1, 0.01);
      assertEquals(6356572.314245, point1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(6356752.314245);
      Point point0 = Point.build(double0, double0);
      double double1 = EarthCalc.getHarvesineDistance(point0, point0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(6371010.0);
      GPSCoordinate gPSCoordinate0 = radianCoordinate0.getGPSCoordinate();
      Point point0 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) radianCoordinate0);
      Point point1 = new Point(radianCoordinate0, gPSCoordinate0);
      double double0 = EarthCalc.getDistance(point0, point1);
      assertEquals(258.06908679871543, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate((-180.0));
      Point point0 = new Point(degreeCoordinate0, degreeCoordinate0);
      Point point1 = EarthCalc.pointRadialDistance(point0, (-180.0), 647.208);
      assertEquals(0.005820472243342622, point1.getLatitude(), 0.01);
      assertEquals((-180.0), point1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = Point.build(double0, double0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 0.0, 0.0);
      assertTrue(point1.equals((Object)point0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(16.0);
      Point point0 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      double double0 = EarthCalc.getVincentyFinalBearing(point0, point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(6371010.0);
      Point point0 = new Point(radianCoordinate0, radianCoordinate0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 6371010.0, 6371010.0);
      double double0 = EarthCalc.getVincentyDistance(point0, point1);
      assertEquals(1.353972660274915E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(6356752.314245);
      Point point0 = Point.build(double0, double0);
      double double1 = EarthCalc.getVincentyBearing(point0, point0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double((-180.0));
      Point point0 = Point.build(double0, double0);
      double double1 = EarthCalc.getDistance(point0, point0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(3182.790619958);
      Double double1 = new Double(0.0);
      Point point0 = Point.build(double0, double1);
      BoundingArea boundingArea0 = EarthCalc.getBoundingArea(point0, 496.0);
      assertEquals((-57.20622576682634), boundingArea0.getNorthLatitude(), 0.01);
      assertEquals((-0.0058245591934563854), boundingArea0.getWestLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(6378137.0);
      Point point0 = Point.build(double0, double0);
      BoundingArea boundingArea0 = EarthCalc.getBoundingArea(point0, 0.0);
      assertEquals(16.999999999615763, boundingArea0.getNorthLatitude(), 0.01);
      assertEquals(16.999999999615763, boundingArea0.getSouthLatitude(), 0.01);
      assertEquals(6378137.0, boundingArea0.getWestLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(0.0, 0.0, 0.0);
      Point point0 = Point.build((Coordinate) dMSCoordinate0, (Coordinate) dMSCoordinate0);
      BoundingArea boundingArea0 = EarthCalc.getBoundingArea(point0, 0.0);
      assertEquals(0.0, boundingArea0.getSouthLatitude(), 0.01);
      assertEquals(0.0, boundingArea0.getWestLongitude(), 0.01);
      assertEquals(0.0, boundingArea0.getEastLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(16.0);
      Point point0 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      double double0 = EarthCalc.getBearing(point0, point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double(6356752.314245);
      Point point0 = Point.build(double0, double0);
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate(0.0, 0.0);
      Point point1 = Point.build((Coordinate) gPSCoordinate0, (Coordinate) gPSCoordinate0);
      double double1 = EarthCalc.getBearing(point1, point0);
      assertEquals(148.56129125503526, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RadianCoordinate radianCoordinate0 = new RadianCoordinate((-2918.614994634042));
      Point point0 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      point0.longitude = 9.27539395179674E-4;
      Point point1 = EarthCalc.pointRadialDistance(point0, 924.434244184, 3600.0);
      point1.longitude = 180.0;
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyFinalBearing(point1, point0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Formula failed to converge
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = Point.build((Double) 6371010.0, (Double) 6371010.0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 6371010.0, 6371010.0);
      RadianCoordinate radianCoordinate0 = new RadianCoordinate(5.0445123633835465E-9);
      point1.latitude = 5.0445123633835465E-9;
      Point point2 = Point.build((Coordinate) radianCoordinate0, (Coordinate) radianCoordinate0);
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyBearing(point1, point2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Formula failed to converge
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getBoundingArea((Point) null, 1060.64680991);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GPSCoordinate gPSCoordinate0 = new GPSCoordinate(0.0, 0.0);
      Point point0 = new Point(gPSCoordinate0, gPSCoordinate0);
      Double double0 = new Double(180.0);
      Point point1 = Point.build(double0, double0);
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyDistance(point0, point1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Formula failed to converge
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DegreeCoordinate degreeCoordinate0 = new DegreeCoordinate(0.0);
      Point point0 = Point.build((Coordinate) degreeCoordinate0, (Coordinate) degreeCoordinate0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 6371010.0, 6371010.0);
      double double0 = EarthCalc.getVincentyBearing(point0, point1);
      assertEquals(89.99999999950211, double0, 0.01);
      assertEquals(57.29577951308232, point1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Point point0 = Point.build((Double) 6371010.0, (Double) 6371010.0);
      Point point1 = EarthCalc.pointRadialDistance(point0, 6371010.0, 6371010.0);
      double double0 = EarthCalc.getVincentyFinalBearing(point0, point1);
      assertEquals(179.99999999940357, double0, 0.01);
      assertEquals(6371100.0, point1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Point point0 = Point.build((Double) 6371010.0, (Double) 6371010.0);
      double double0 = EarthCalc.getVincentyDistance(point0, point0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getBearing((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EarthCalc earthCalc0 = new EarthCalc();
      assertEquals(6371010.0, EarthCalc.EARTH_DIAMETER, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getHarvesineDistance((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyFinalBearing((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getDistance((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyBearing((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DMSCoordinate dMSCoordinate0 = new DMSCoordinate(0.0, 0.0, 0.0);
      Point point0 = Point.build((Coordinate) dMSCoordinate0, (Coordinate) dMSCoordinate0);
      BoundingArea boundingArea0 = EarthCalc.getBoundingArea(point0, (-180.0));
      assertEquals(0.0011446477343219912, boundingArea0.getWestLongitude(), 0.01);
      assertEquals((-0.0011446477340935682), boundingArea0.getNorthLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.pointRadialDistance((Point) null, 0.8995826672385138, 0.8995826672385138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        EarthCalc.getVincentyDistance((Point) null, (Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.peertopark.java.geocalc.EarthCalc", e);
      }
  }
}
