/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:35:27 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.PatternBasedVersionFetcher;
import eu.bitwalker.useragentutils.Version;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PatternBasedVersionFetcher_ESTest extends PatternBasedVersionFetcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher((Pattern) null);
      // Undeclared exception!
      try { 
        patternBasedVersionFetcher0.version("~g/D3B~VIErXT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.PatternBasedVersionFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher(".");
      // Undeclared exception!
      try { 
        patternBasedVersionFetcher0.createVersion((Matcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.PatternBasedVersionFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("TH6k&TS:nm");
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher(pattern0);
      Matcher matcher0 = pattern0.matcher("TH6k&TS:nm");
      // Undeclared exception!
      try { 
        patternBasedVersionFetcher0.createVersion(matcher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = null;
      try {
        patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("|{UFv|Fcn-en");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // |{UFv|Fcn-en
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = null;
      try {
        patternBasedVersionFetcher0 = new PatternBasedVersionFetcher((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("n^");
      Version version0 = patternBasedVersionFetcher0.version("n^");
      assertNull(version0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("eo|dEX!R()\"0}");
      // Undeclared exception!
      try { 
        patternBasedVersionFetcher0.version("eo|dEX!R()\"0}");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 2
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("&9");
      Pattern pattern0 = Pattern.compile("&9");
      Matcher matcher0 = pattern0.matcher("&9");
      matcher0.matches();
      // Undeclared exception!
      try { 
        patternBasedVersionFetcher0.createVersion(matcher0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }
}
