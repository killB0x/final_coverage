/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:34:30 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.PatternBasedVersionFetcher;
import eu.bitwalker.useragentutils.SequentialVersionFetcher;
import eu.bitwalker.useragentutils.Version;
import eu.bitwalker.useragentutils.VersionFetcher;
import eu.bitwalker.useragentutils.VersionFetcherFromMap;
import java.util.HashMap;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SequentialVersionFetcher_ESTest extends SequentialVersionFetcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VersionFetcher[] versionFetcherArray0 = new VersionFetcher[1];
      SequentialVersionFetcher sequentialVersionFetcher0 = new SequentialVersionFetcher(versionFetcherArray0[0], versionFetcherArray0);
      // Undeclared exception!
      try { 
        sequentialVersionFetcher0.version("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.SequentialVersionFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("PG\" J69I>Iqk,> EW");
      VersionFetcher[] versionFetcherArray0 = new VersionFetcher[0];
      SequentialVersionFetcher sequentialVersionFetcher0 = new SequentialVersionFetcher(patternBasedVersionFetcher0, versionFetcherArray0);
      // Undeclared exception!
      try { 
        sequentialVersionFetcher0.version("PG\" J69I>Iqk,> EW");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SequentialVersionFetcher sequentialVersionFetcher0 = null;
      try {
        sequentialVersionFetcher0 = new SequentialVersionFetcher((VersionFetcher) null, (VersionFetcher[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.SequentialVersionFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PatternBasedVersionFetcher patternBasedVersionFetcher0 = new PatternBasedVersionFetcher("3@R-Ee>$.d9v.^lT");
      VersionFetcher[] versionFetcherArray0 = new VersionFetcher[6];
      versionFetcherArray0[0] = (VersionFetcher) patternBasedVersionFetcher0;
      Pattern pattern0 = Pattern.compile("3@R-Ee>$.d9v.^lT");
      HashMap<String, Version> hashMap0 = new HashMap<String, Version>();
      VersionFetcherFromMap versionFetcherFromMap0 = new VersionFetcherFromMap(pattern0, hashMap0);
      versionFetcherArray0[1] = (VersionFetcher) versionFetcherFromMap0;
      versionFetcherArray0[2] = (VersionFetcher) patternBasedVersionFetcher0;
      versionFetcherArray0[3] = (VersionFetcher) patternBasedVersionFetcher0;
      versionFetcherArray0[4] = (VersionFetcher) patternBasedVersionFetcher0;
      versionFetcherArray0[5] = (VersionFetcher) patternBasedVersionFetcher0;
      SequentialVersionFetcher sequentialVersionFetcher0 = new SequentialVersionFetcher(patternBasedVersionFetcher0, versionFetcherArray0);
      Version version0 = sequentialVersionFetcher0.version("3@R-Ee>$.d9v.^lT");
      assertNull(version0);
  }
}
