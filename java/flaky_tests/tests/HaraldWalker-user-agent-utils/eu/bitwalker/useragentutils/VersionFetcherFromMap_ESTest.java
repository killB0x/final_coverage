/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:37:27 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.Version;
import eu.bitwalker.useragentutils.VersionFetcherFromMap;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VersionFetcherFromMap_ESTest extends VersionFetcherFromMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      HashMap<String, Version> hashMap0 = new HashMap<String, Version>();
      VersionFetcherFromMap versionFetcherFromMap0 = new VersionFetcherFromMap(pattern0, hashMap0);
      Matcher matcher0 = pattern0.matcher("");
      matcher0.replaceFirst("");
      // Undeclared exception!
      try { 
        versionFetcherFromMap0.createVersion(matcher0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 1
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      HashMap<String, Version> hashMap0 = new HashMap<String, Version>();
      VersionFetcherFromMap versionFetcherFromMap0 = new VersionFetcherFromMap(pattern0, hashMap0);
      Matcher matcher0 = pattern0.matcher("");
      // Undeclared exception!
      try { 
        versionFetcherFromMap0.createVersion(matcher0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VersionFetcherFromMap versionFetcherFromMap0 = null;
      try {
        versionFetcherFromMap0 = new VersionFetcherFromMap((Pattern) null, (Map<String, Version>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Version> hashMap0 = new HashMap<String, Version>();
      VersionFetcherFromMap versionFetcherFromMap0 = new VersionFetcherFromMap((Pattern) null, hashMap0);
      // Undeclared exception!
      try { 
        versionFetcherFromMap0.createVersion((Matcher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.VersionFetcherFromMap", e);
      }
  }
}
