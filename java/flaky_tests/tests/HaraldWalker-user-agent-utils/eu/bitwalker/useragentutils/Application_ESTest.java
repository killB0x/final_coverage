/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:33:28 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.Application;
import eu.bitwalker.useragentutils.ApplicationType;
import eu.bitwalker.useragentutils.Manufacturer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Application_ESTest extends Application_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Application[] applicationArray0 = Application.values();
      assertEquals(10, applicationArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Application application0 = Application.valueOf((short)256);
      assertEquals((short)256, application0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Application application0 = Application.valueOf("GMAIL");
      assertEquals("Gmail", application0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Application application0 = Application.parseReferrerString("mail.live.com");
      boolean boolean0 = application0.isInReferrerString("mail.live.com");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Application application0 = Application.GMAIL;
      short short0 = application0.getId();
      assertEquals((short)3845, short0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Application application0 = Application.parseReferrerString("Webmail client");
      assertEquals(Application.OTHER_WEBMAIL, application0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Application application0 = Application.parseReferrerString("");
      assertEquals(Application.UNKNOWN, application0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Application application0 = Application.parseReferrerString((String) null);
      // Undeclared exception!
      try { 
        application0.isInReferrerString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.Application", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Application application0 = Application.parseReferrerString("}DsL@:4$p");
      assertEquals(Application.UNKNOWN, application0);
      
      boolean boolean0 = application0.isInReferrerString("Webmail client");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Application application0 = Application.HORDE;
      Manufacturer manufacturer0 = application0.getManufacturer();
      assertEquals((short)1, manufacturer0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Application application0 = Application.HORDE;
      String string0 = application0.getName();
      assertEquals("horde", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Application.valueOf((short)8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum const for id 8
         //
         verifyException("eu.bitwalker.useragentutils.Application", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Application application0 = Application.parseReferrerString("}DsL@:4$p");
      ApplicationType applicationType0 = application0.getApplicationType();
      assertEquals(ApplicationType.UNKNOWN, applicationType0);
  }
}
