/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:23:27 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.Version;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Version_ESTest extends Version_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Version version0 = new Version("`", "", (String) null);
      version0.hashCode();
      assertEquals("", version0.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Version version0 = new Version("", "", "");
      version0.minorVersion = "";
      String string0 = version0.getMajorVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Version version0 = new Version("1P>vBG'Ttj!/|X5", "=;FgPZ8ri60", "yn6F~od4}q%+0t(}");
      int int0 = version0.compareTo(version0);
      assertEquals(0, int0);
      assertEquals("=;FgPZ8ri60", version0.getMajorVersion());
      assertEquals("yn6F~od4}q%+0t(}", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Version version0 = new Version(".", ".", "");
      String string0 = version0.toString();
      assertEquals(".", string0);
      assertEquals("", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Version version0 = new Version("", "", "");
      String string0 = version0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.getMinorVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Version version0 = new Version(".", ".", "");
      String string0 = version0.getMinorVersion();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Version version0 = new Version();
      String string0 = version0.getMajorVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Version version0 = new Version("1P>vBG'Ttj!/|X5", "=;FgPZ8ri60", "yn6F~od4}q%+0t(}");
      Version version1 = new Version();
      // Undeclared exception!
      try { 
        version1.compareTo(version0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.Version", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Version version0 = new Version("`", "", (String) null);
      Version version1 = new Version("", "XVmTI", "");
      version1.version = "y=q/{T";
      int int0 = version1.compareTo(version0);
      assertEquals("", version1.getMinorVersion());
      assertEquals("XVmTI", version1.getMajorVersion());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Version version0 = new Version("`", "", (String) null);
      Version version1 = new Version("", "XVmTI", "");
      int int0 = version1.compareTo(version0);
      assertEquals("", version1.getMinorVersion());
      assertEquals((-1), int0);
      assertEquals("XVmTI", version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Version version0 = new Version(".", ".", ">");
      Version version1 = new Version("", ".", ">");
      int int0 = version0.compareTo(version1);
      assertEquals((-1), int0);
      assertEquals(">", version1.getMinorVersion());
      assertEquals(".", version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Version version0 = new Version(".", ".", ">");
      Version version1 = new Version("", ".", ">");
      assertFalse(version1.equals((Object)version0));
      
      int int0 = version1.compareTo(version0);
      assertEquals(".", version1.getMajorVersion());
      assertEquals(1, int0);
      assertEquals(">", version1.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Version version0 = new Version("", "", "");
      int int0 = version0.compareTo((Version) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Version version0 = new Version("", "", "");
      Version version1 = new Version("", "", "");
      boolean boolean0 = version1.equals(version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Version version0 = new Version();
      Version version1 = new Version();
      assertTrue(version1.equals((Object)version0));
      
      version1.version = "/";
      boolean boolean0 = version0.equals(version1);
      assertFalse(version1.equals((Object)version0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Version version0 = new Version(".", ".", ".");
      Version version1 = new Version(".", ".", "Y8");
      boolean boolean0 = version1.equals(version0);
      assertFalse(boolean0);
      assertFalse(version0.equals((Object)version1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Version version0 = new Version();
      Version version1 = new Version();
      assertTrue(version1.equals((Object)version0));
      
      version1.minorVersion = "";
      boolean boolean0 = version0.equals(version1);
      assertFalse(version1.equals((Object)version0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Version version0 = new Version("`", "", (String) null);
      Version version1 = new Version("", "XVmTI", "");
      boolean boolean0 = version1.equals(version0);
      assertEquals("XVmTI", version1.getMajorVersion());
      assertFalse(boolean0);
      assertEquals("", version1.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Version version0 = new Version();
      Version version1 = new Version("yE", "yE", "yE");
      boolean boolean0 = version0.equals(version1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Version version0 = new Version();
      Version version1 = new Version();
      boolean boolean0 = version0.equals(version1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Version version0 = new Version("", "", "");
      Object object0 = new Object();
      boolean boolean0 = version0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Version version0 = new Version("", "", "");
      boolean boolean0 = version0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Version version0 = new Version();
      boolean boolean0 = version0.equals(version0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Version version0 = new Version(".", ".", ">");
      Version version1 = new Version("", ".", ">");
      boolean boolean0 = version0.equals(version1);
      assertEquals(">", version1.getMinorVersion());
      assertFalse(version1.equals((Object)version0));
      assertEquals(".", version1.getMajorVersion());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Version version0 = new Version();
      version0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Version version0 = new Version("", "\"EnU,(|u:-t#$g", "\"EnU,(|u:-t#$g");
      String string0 = version0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("\"EnU,(|u:-t#$g", version0.getMajorVersion());
      assertEquals("\"EnU,(|u:-t#$g", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Version version0 = new Version("", "\"EnU,(|u:-t#$g", "\"EnU,(|u:-t#$g");
      String string0 = version0.getMajorVersion();
      assertEquals("\"EnU,(|u:-t#$g", string0);
      assertNotNull(string0);
      assertEquals("\"EnU,(|u:-t#$g", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Version version0 = new Version("1P>vBG'Ttj!/|X5", "=;FgPZ8ri60", " b");
      String string0 = version0.getMinorVersion();
      assertEquals("=;FgPZ8ri60", version0.getMajorVersion());
      assertEquals(" b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Version version0 = new Version("1P>vBG'Ttj!/|X5", "=;FgPZ8ri60", " b");
      String string0 = version0.getVersion();
      assertEquals("1P>vBG'Ttj!/|X5", string0);
      assertEquals("=;FgPZ8ri60", version0.getMajorVersion());
      assertNotNull(string0);
      assertEquals(" b", version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Version version0 = new Version(".", ".", ">");
      version0.hashCode();
      assertEquals(">", version0.getMinorVersion());
  }
}
