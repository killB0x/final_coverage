/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 15 10:28:39 GMT 2022
 */

package eu.bitwalker.useragentutils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import eu.bitwalker.useragentutils.Browser;
import eu.bitwalker.useragentutils.OperatingSystem;
import eu.bitwalker.useragentutils.UserAgent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UserAgent_ESTest extends UserAgent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      UserAgent userAgent1 = UserAgent.parseUserAgentString("Android 3.x Tablet");
      boolean boolean0 = userAgent1.equals(userAgent0);
      //  // Unstable assertion: assertEquals(16843022, userAgent0.getId());
      //  // Unstable assertion: assertEquals("Android 3.x Tablet", userAgent1.getUserAgentString());
      //  // Unstable assertion: assertEquals(253624590, userAgent1.getId());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserAgent.valueOf("(?:Trident/7|IE)(?:.[0-9]*;)?(?:.*rv:| )(([0-9]+).?([0-9]+))");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid string for userAgent (?:Trident/7|IE)(?:.[0-9]*;)?(?:.*rv:| )(([0-9]+).?([0-9]+))
         //
         verifyException("eu.bitwalker.useragentutils.UserAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserAgent.valueOf((-2033));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum const for id -1
         //
         verifyException("eu.bitwalker.useragentutils.OperatingSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OperatingSystem operatingSystem0 = OperatingSystem.MAC_OS_X_IPOD;
      Browser browser0 = Browser.OPERA31;
      UserAgent userAgent0 = new UserAgent(operatingSystem0, browser0);
      assertEquals(52300831, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserAgent userAgent0 = UserAgent.valueOf("UNKNOWN-UNKNOWN");
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent("OPERA50");
      String string0 = userAgent0.getUserAgentString();
      assertEquals(16845825, userAgent0.getId());
      assertEquals("OPERA50", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent("Chrome/13");
      userAgent0.getBrowserVersion();
      //  // Unstable assertion: assertEquals(16846610, userAgent0.getId());
      //  // Unstable assertion: assertEquals("Chrome/13", userAgent0.getUserAgentString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OperatingSystem operatingSystem0 = OperatingSystem.MAC_OS_X_IPOD;
      UserAgent userAgent0 = null;
      try {
        userAgent0 = new UserAgent(operatingSystem0, (Browser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("eu.bitwalker.useragentutils.UserAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      UserAgent userAgent1 = new UserAgent();
      boolean boolean0 = userAgent1.equals(userAgent0);
      assertEquals(16843022, userAgent1.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      UserAgent userAgent1 = UserAgent.parseUserAgentString("CHROME37");
      boolean boolean0 = userAgent0.equals(userAgent1);
      assertFalse(boolean0);
      assertEquals(16846593, userAgent1.getId());
      assertEquals(16843022, userAgent0.getId());
      assertEquals("CHROME37", userAgent1.getUserAgentString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      UserAgent userAgent1 = UserAgent.valueOf(253624590);
      boolean boolean0 = userAgent0.equals(userAgent1);
      assertEquals(253624590, userAgent1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      boolean boolean0 = userAgent0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      boolean boolean0 = userAgent0.equals(userAgent0);
      assertTrue(boolean0);
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      Object object0 = new Object();
      boolean boolean0 = userAgent0.equals(object0);
      assertEquals(16843022, userAgent0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      userAgent0.hashCode();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserAgent.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("eu.bitwalker.useragentutils.UserAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserAgent.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid string for userAgent 
         //
         verifyException("eu.bitwalker.useragentutils.UserAgent", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent((String) null);
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      userAgent0.getBrowserVersion();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      userAgent0.getUserAgentString();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      userAgent0.getOperatingSystem();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      userAgent0.getBrowser();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      int int0 = userAgent0.getId();
      assertEquals(16843022, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserAgent userAgent0 = UserAgent.parseUserAgentString("");
      userAgent0.getUserAgentString();
      assertEquals(16843022, userAgent0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserAgent userAgent0 = new UserAgent();
      String string0 = userAgent0.toString();
      assertEquals(16843022, userAgent0.getId());
      assertEquals("UNKNOWN-UNKNOWN", string0);
  }
}
