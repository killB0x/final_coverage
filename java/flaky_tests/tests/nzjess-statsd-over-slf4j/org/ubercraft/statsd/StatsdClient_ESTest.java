/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 10:55:00 GMT 2022
 */

package org.ubercraft.statsd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.ubercraft.statsd.StatsdClient;
import org.ubercraft.statsd.StatsdStatType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatsdClient_ESTest extends StatsdClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("$vl(mWG");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("$vl(mWG/200.42.42.0", inetAddress0.toString());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, (-2146470205), (Logger) null, 195225809);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("$vl(mWG/200.42.42.0", inetAddress0.toString());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("$vl(mWG/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.time("$vl(mWG", (long) 195225809);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("$vl(mWG/200.42.42.0", inetAddress0.toString());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("$vl(mWG/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 2105622368, logger0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:2105622368", statsdClient0.toString());
      
      StatsdStatType statsdStatType0 = StatsdStatType.GAUGE;
      boolean boolean0 = statsdClient0.gauge("", 2570);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:2105622368", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.stat(statsdStatType0, "", 1L, 1L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean1);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:2105622368", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.count("", 2105622368);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean2);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:2105622368", statsdClient0.toString());
      
      MockException mockException0 = new MockException("");
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException("c[Tr>$7cw");
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      MockException mockException2 = new MockException("GAUGE");
      assertNotNull(mockException2);
      assertFalse(mockException2.equals((Object)mockException1));
      assertFalse(mockException2.equals((Object)mockException0));
      
      Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2;
      String string0 = ")F:fSfdo\\$PV%i";
      int int1 = (-2858);
      StatsdClient statsdClient0 = null;
      try {
        statsdClient0 = new StatsdClient((InetAddress) null, 419, (-2858));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null host
         //
         verifyException("org.ubercraft.statsd.StatsdClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2;
      String string0 = "=7'9oknv+!aP0";
      StatsdClient statsdClient0 = new StatsdClient("=7'9oknv+!aP0", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("=7'9oknv+!aP0/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      int int1 = 2635;
      StatsdClient statsdClient1 = null;
      try {
        statsdClient1 = new StatsdClient((InetAddress) null, 2635, (Logger) null, 2635);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null host
         //
         verifyException("org.ubercraft.statsd.StatsdClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      int int1 = 2146676681;
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 2146676681, 2146676681);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.setQueueOfferTimeout(8125);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(8125L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.time("hi'>v0@`S/#<v#,z", 0L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(8125L, statsdClient0.getQueueOfferTimeout());
      
      StatsdClient statsdClient1 = new StatsdClient(">.~i@k&U", (-2145034517), 8125);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient1);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals(">.~i@k&U/200.42.42.1:8125", statsdClient1.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      statsdClient1.errorEnqueueFailed("fZ1}", (Exception) null);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals(">.~i@k&U/200.42.42.1:8125", statsdClient1.toString());
      
      StatsdClient statsdClient2 = new StatsdClient("COUNTER", (-608), 8125);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient2);
      assertFalse(statsdClient2.equals((Object)statsdClient0));
      assertFalse(statsdClient2.equals((Object)statsdClient1));
      assertEquals("COUNTER/200.42.42.2:8125", statsdClient2.toString());
      assertEquals(0L, statsdClient2.getQueueOfferTimeout());
      
      boolean boolean2 = statsdClient2.count("COUNTER", (double) 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient2.equals((Object)statsdClient0));
      assertFalse(statsdClient2.equals((Object)statsdClient1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(statsdClient2, statsdClient0);
      assertNotSame(statsdClient2, statsdClient1);
      assertEquals("COUNTER/200.42.42.2:8125", statsdClient2.toString());
      assertEquals(0L, statsdClient2.getQueueOfferTimeout());
      
      long long0 = statsdClient0.getQueueOfferTimeout();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient0.equals((Object)statsdClient1));
      assertFalse(statsdClient0.equals((Object)statsdClient2));
      assertEquals(8125L, long0);
      assertNotSame(statsdClient0, statsdClient1);
      assertNotSame(statsdClient0, statsdClient2);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(8125L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient(";{d6tZ", (-2574), (Logger) null);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.count("EoM6C");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.errorQueueFull((String) null);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.errorQueueFull("c3[^u}EB.z2l");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals(";{d6tZ/200.42.42.0:8125", string0);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean1 = statsdClient0.gauge(";{d6tZ/200.42.42.0:8125", (-2574));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string1 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string1);
      assertEquals(";{d6tZ/200.42.42.0:8125", string1);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.setQueueOfferTimeout((-159L));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals((-159L), statsdClient0.getQueueOfferTimeout());
      
      String string2 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string2);
      assertEquals(";{d6tZ/200.42.42.0:8125", string2);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals((-159L), statsdClient0.getQueueOfferTimeout());
      
      Random.setNextRandom((-2574));
      String string3 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string3);
      assertEquals(";{d6tZ/200.42.42.0:8125", string3);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals((-159L), statsdClient0.getQueueOfferTimeout());
      
      StatsdStatType statsdStatType0 = StatsdStatType.GAUGE;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = statsdClient0.stat(statsdStatType0, ";{d6tZ", 3498L, 2661.1801);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals((-159L), statsdClient0.getQueueOfferTimeout());
      
      long long0 = statsdClient0.getQueueOfferTimeout();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals((-159L), long0);
      assertEquals(";{d6tZ/200.42.42.0:8125", statsdClient0.toString());
      assertEquals((-159L), statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.setQueueOfferTimeout(0L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.count("", (double) 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient1 = null;
      try {
        statsdClient1 = new StatsdClient((InetAddress) null, 8125, logger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null host
         //
         verifyException("org.ubercraft.statsd.StatsdClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      StatsdClient statsdClient1 = new StatsdClient("", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient1);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertEquals("/127.0.0.1:0", statsdClient1.toString());
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient1.time("", (-2457L));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertTrue(boolean0);
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals("/127.0.0.1:0", statsdClient1.toString());
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = statsdClient0.count("", 0.9801019989127129);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient0.equals((Object)statsdClient1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(statsdClient0, statsdClient1);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      long long0 = statsdClient0.getQueueOfferTimeout();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient0.equals((Object)statsdClient1));
      assertEquals(0L, long0);
      assertNotSame(statsdClient0, statsdClient1);
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient0 = new StatsdClient("", 2147157511, logger0, 2147157511);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1431655765);
      StatsdClient statsdClient0 = null;
      try {
        statsdClient0 = new StatsdClient((InetAddress) null, (-1431655765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null host
         //
         verifyException("org.ubercraft.statsd.StatsdClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.gauge("", 1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean1 = statsdClient0.time("hi'>v0@`S/#<v#,z", 0L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean2 = statsdClient0.count("", (double) 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean2);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", string0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2146406945, (-2253));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2146406945", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", 2146939662);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2146406945", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient("GAUGE", 2145765111, logger0, (-2051));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("GAUGE/200.42.42.0:2145765111", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.time("$VALUES", 1145L, (double) 1145L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("GAUGE/200.42.42.0:2145765111", statsdClient0.toString());
      
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger1).isErrorEnabled();
      StatsdClient statsdClient1 = new StatsdClient((String) null, 1791, logger1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient1);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1791", statsdClient1.toString());
      
      StatsdStatType statsdStatType0 = StatsdStatType.COUNTER;
      boolean boolean1 = statsdClient0.stat(statsdStatType0, "org.ubercraft.statsd.StatsdClient$SendThread", 8125, 1008.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient0.equals((Object)statsdClient1));
      assertFalse(boolean1);
      assertNotSame(statsdClient0, statsdClient1);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("GAUGE/200.42.42.0:2145765111", statsdClient0.toString());
      
      boolean boolean2 = statsdClient1.count("[%*1NPrtJYXe~e", 1791, (double) (-2984L));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertFalse(boolean2);
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1791", statsdClient1.toString());
      
      statsdClient1.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1791", statsdClient1.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException0 = new MockException(mockThrowable0);
      assertNotNull(mockException0);
      
      statsdClient1.handleError("%s:%d|c", "org.ubercraft.statsd.StatsdStatType", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1791", statsdClient1.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("", 195225787, 195225787);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("Enqueue failed", 0, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("Enqueue failed/200.42.42.0:0", statsdClient0.toString());
      
      MockException mockException0 = new MockException("Enqueue failed");
      assertNotNull(mockException0);
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient1 = new StatsdClient("%s:%d|c", 2162, logger0, 2938);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient1);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%s:%d|c/200.42.42.1:2162", statsdClient1.toString());
      
      boolean boolean0 = statsdClient1.time("|;?LbKJ|`@s", (-2984L), 1008.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertTrue(boolean0);
      assertNotSame(statsdClient1, statsdClient0);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%s:%d|c/200.42.42.1:2162", statsdClient1.toString());
      
      Logger logger1 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient2 = new StatsdClient("", 8125, logger1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient2);
      assertFalse(statsdClient2.equals((Object)statsdClient1));
      assertFalse(statsdClient2.equals((Object)statsdClient0));
      assertEquals("/127.0.0.1:8125", statsdClient2.toString());
      assertEquals(0L, statsdClient2.getQueueOfferTimeout());
      
      StatsdStatType statsdStatType0 = StatsdStatType.GAUGE;
      boolean boolean1 = statsdClient2.stat(statsdStatType0, "rHb Hx[&+^c#{umH", 8125, 0.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient2.equals((Object)statsdClient1));
      assertFalse(statsdClient2.equals((Object)statsdClient0));
      assertTrue(boolean1);
      assertNotSame(statsdClient2, statsdClient1);
      assertNotSame(statsdClient2, statsdClient0);
      assertEquals("/127.0.0.1:8125", statsdClient2.toString());
      assertEquals(0L, statsdClient2.getQueueOfferTimeout());
      
      boolean boolean2 = statsdClient1.count("%s:%d|c", 1983, 0.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertFalse(statsdClient1.equals((Object)statsdClient2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(statsdClient1, statsdClient0);
      assertNotSame(statsdClient1, statsdClient2);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%s:%d|c/200.42.42.1:2162", statsdClient1.toString());
      
      statsdClient1.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertFalse(statsdClient1.equals((Object)statsdClient2));
      assertNotSame(statsdClient1, statsdClient0);
      assertNotSame(statsdClient1, statsdClient2);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%s:%d|c/200.42.42.1:2162", statsdClient1.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException1 = new MockException(mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      statsdClient1.handleError("m7z-zoCz<KS9Az", "Yj|U5Qp2tTf|*8ab", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertFalse(statsdClient1.equals((Object)statsdClient2));
      assertNotSame(mockException0, mockException1);
      assertNotSame(statsdClient1, statsdClient0);
      assertNotSame(statsdClient1, statsdClient2);
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%s:%d|c/200.42.42.1:2162", statsdClient1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0, logger0, 514);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("{}: sending {} to {}", 0, (-16.6818470235555));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      statsdClient0.setQueueOfferTimeout(0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      statsdClient0.handleError("org.ubercraft.statsd.StatsdClient", "Send failed", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:0", string0);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.time("$vl(mWG", (long) 514);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0, logger0, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:0", string0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.sendToServer("h8<45S_(@mt(r3~:q");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.errorQueueFull("{}: sending {} to {}");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 1, 1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException0 = new MockException(mockThrowable0);
      assertNotNull(mockException0);
      
      String string0 = mockException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      statsdClient0.errorSendFailed("f-~\"BafmLrkKv0x=Tn4", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      
      boolean boolean0 = statsdClient0.gauge("/;CNk", 1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.time((String) null, (long) 1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.time("", (-432L), 0.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean2);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      
      boolean boolean3 = statsdClient0.count("");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean3);
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient(")F:fSfdo$PV%i", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.time("", (long) 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.time("", (-2502L), 0.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.count("");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "IU1";
      int int0 = 0;
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient("IU1", 0, logger0, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      StatsdStatType statsdStatType0 = StatsdStatType.TIMER;
      boolean boolean0 = statsdClient0.count("X9@vzr8<u1X5", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      String string1 = "9*/u#}z2h;J";
      long long0 = (-1L);
      boolean boolean1 = statsdClient0.stat(statsdStatType0, "9*/u#}z2h;J", (-1L), (-979.0));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      statsdClient0.errorQueueFull("X9@vzr8<u1X5");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.gauge("IU1", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      int int1 = 0;
      boolean boolean3 = statsdClient0.gauge("`", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      String string2 = "p+':W[!L@Gtx(n7";
      String string3 = ">";
      statsdClient0.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("IU1/200.42.42.0:0", statsdClient0.toString());
      
      MockException mockException0 = new MockException(">");
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException(mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      StackTraceElement[] stackTraceElementArray0 = mockException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertNotSame(mockException0, mockException1);
      assertEquals(3, stackTraceElementArray0.length);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "hi'>v0@`S/#<v#,z";
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      
      // Undeclared exception!
      try { 
        statsdClient0.sendToServer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ubercraft.statsd.StatsdClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 8125, logger0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.time("", (long) 8125);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.count("", 0, 0.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean2);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean3 = statsdClient0.gauge("hq7H{Lo>O8", 3);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean3);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:8125", string0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean4 = statsdClient0.count("", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean4);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      boolean boolean5 = statsdClient0.count("hq7H{Lo>O8", (-2489.26913405));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      
      statsdClient0.setQueueOfferTimeout((-249L));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      assertEquals((-249L), statsdClient0.getQueueOfferTimeout());
      
      boolean boolean6 = statsdClient0.count("/192.168.1.42:8125");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/192.168.1.42:8125", statsdClient0.toString());
      assertEquals((-249L), statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient(")F:fSfdo$PV%i", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.setQueueOfferTimeout(2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      assertEquals(2L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.count(")F:fSfdo$PV%i", (double) 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:2", statsdClient0.toString());
      assertEquals(2L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0, logger0, 514);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("{}: sending {} to {}", 0, (-16.6818470235555));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      statsdClient0.setQueueOfferTimeout(0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      statsdClient0.handleError("org.ubercraft.statsd.StatsdClient", "Send failed", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:0", string0);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.time("$vl(mWG", (long) 514);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 220, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:220", statsdClient0.toString());
      
      MockException mockException0 = new MockException("Cp,zh\u0007X&5Rk<`");
      assertNotNull(mockException0);
      
      MockFile mockFile0 = new MockFile("Cp,zh\u0007X&5Rk<`", "");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("Cp,zh\u0007X&5Rk<`", "fE 1<p4w_s", (File) mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Cp,zh\u0007X&5Rk<`", mockFile0.getName());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`/Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      mockException0.printStackTrace();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      mockPrintWriter0.print(object1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(object1, object0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Cp,zh\u0007X&5Rk<`", mockFile0.getName());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`/Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) statsdClient0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("fE 1<p4w_s", objectArray0);
      assertNotNull(printWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Cp,zh\u0007X&5Rk<`", mockFile0.getName());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`/Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(5, objectArray0.length);
      
      mockException0.printStackTrace(printWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/user", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("Cp,zh\u0007X&5Rk<`", mockFile0.getName());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/user/Cp,zh\u0007X&5Rk<`/Cp,zh\u0007X&5Rk<`0fE 1<p4w_s", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(5, objectArray0.length);
      
      statsdClient0.errorSendFailed("Cp,zh\u0007X&5Rk<`", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:220", statsdClient0.toString());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/127.0.0.1:220", string0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:220", statsdClient0.toString());
      
      statsdClient0.errorQueueFull("Cp,zh\u0007X&5Rk<`");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:220", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:220", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 1, 1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("/127.0.0.1:1", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      StatsdClient statsdClient1 = new StatsdClient("%iN{-'", (-434));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient1);
      assertFalse(statsdClient1.equals((Object)statsdClient0));
      assertEquals(0L, statsdClient1.getQueueOfferTimeout());
      assertEquals("%iN{-'/200.42.42.0:8125", statsdClient1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("2`$)9 \"q/", 2, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.sendToServer("2`$)9 \"q/");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.time("7G\"6w", (long) 2, (double) 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean1 = statsdClient0.time("7G\"6w", 1L, (double) 1L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean2 = statsdClient0.time("", 1976L);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean2);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      MockException mockException0 = new MockException("7G\"6w");
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException("org.ubercraft.statsd.StatsdClient$1", mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      StackTraceElement[] stackTraceElementArray0 = mockException1.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertEquals(3, stackTraceElementArray0.length);
      
      statsdClient0.errorEnqueueFailed("", mockException1);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean3 = statsdClient0.count("cFFZCU|UF{b{E3", (double) 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals("2`$)9 \"q//200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, (-897));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("", (double) (-897));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean0);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      boolean boolean1 = statsdClient0.count("", (-897), (double) (-897));
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean1);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      boolean boolean2 = statsdClient0.count("", 1873);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      statsdClient0.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      boolean boolean3 = statsdClient0.count("GAUGE", 1194.485);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
      
      MockException mockException0 = new MockException("");
      assertNotNull(mockException0);
      
      statsdClient0.handleError("rp@RD{z#M", "GAUGE", mockException0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:8125", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient0 = new StatsdClient("$VALUES", (-3178), logger0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("$VALUES/200.42.42.0:8125", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("$VALUES");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("$VALUES/200.42.42.0:8125", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("$VALUES", (-2146764482), (Logger) null);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("$VALUES/200.42.42.0:8125", statsdClient0.toString());
      
      boolean boolean0 = statsdClient0.count("@_`7Ja9yingSN");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("$VALUES/200.42.42.0:8125", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertNotNull(inetAddress0);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 4, logger0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.shutdown();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean0 = statsdClient0.count((String) null, 4, 1.0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean0);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      statsdClient0.sendToServer(";b%i");
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean1 = statsdClient0.count(";b%i", 3519);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean1);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("/192.168.1.42:4", string0);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      boolean boolean2 = statsdClient0.count("/192.168.1.42:4", 3519, 1744.09562);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertTrue(boolean2);
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/192.168.1.42:4", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string1 = ":";
      String string2 = "Y^Qosf|:PtzRbtF";
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      MockException mockException1 = new MockException(mockException0);
      assertNotNull(mockException1);
      assertFalse(mockException1.equals((Object)mockException0));
      
      Throwable throwable0 = mockException0.initCause(mockException1);
      assertNotNull(throwable0);
      assertFalse(mockException0.equals((Object)mockException1));
      assertFalse(mockException1.equals((Object)mockException0));
      assertNotSame(mockException0, mockException1);
      assertNotSame(mockException1, mockException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      
      // Undeclared exception!
      try { 
        mockException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("COUNTER");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("COUNTER/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 8125, (Logger) null);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("COUNTER/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("COUNTER/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      
      String string0 = statsdClient0.toString();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(string0);
      assertEquals("COUNTER/200.42.42.0:8125", string0);
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("COUNTER/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("COUNTER/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40), (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/0.216.255.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("0.216.255.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals(4, byteArray0.length);
      
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, (-237), logger0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-40), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("/0.216.255.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("0.216.255.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/0.216.255.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      
      StatsdClient statsdClient0 = new StatsdClient("", 0, 0);
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertNotNull(statsdClient0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
      
      long long0 = statsdClient0.getQueueOfferTimeout();
      assertEquals(8125, StatsdClient.DEFAULT_PORT);
      assertEquals(0L, long0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0);
      boolean boolean0 = statsdClient0.time("org.ubercraft.statsd.StatsdStatType", 1859L);
      assertTrue(boolean0);
      
      statsdClient0.sendToServer("org.ubercraft.statsd.StatsdStatType");
      MockException mockException0 = new MockException();
      statsdClient0.errorEnqueueFailed("org.ubercraft.statsd.StatsdStatType", mockException0);
      statsdClient0.count("org.ubercraft.statsd.StatsdStatType", 1);
      statsdClient0.count("~B4Cc2~");
      boolean boolean1 = statsdClient0.gauge("org.ubercraft.statsd.StatsdStatType", 0);
      assertTrue(boolean1);
      
      statsdClient0.count("6StBo 8W)#YO>P", 0);
      statsdClient0.count("~B4Cc2~", 0);
      statsdClient0.errorQueueFull("u7+dG=.f/IOpgSN|");
      statsdClient0.errorQueueFull("_");
      boolean boolean2 = statsdClient0.count("_", 0, (-1853.483434253));
      assertFalse(boolean2);
      
      boolean boolean3 = statsdClient0.count((String) null);
      assertTrue(boolean3);
      
      statsdClient0.shutdown();
      long long0 = statsdClient0.getQueueOfferTimeout();
      assertEquals(0L, long0);
      
      statsdClient0.errorQueueFull("<~8~X6e5\"+16ENF&A");
      statsdClient0.count("u7+dG=.f/IOpgSN|", 0);
      statsdClient0.toString();
      statsdClient0.toString();
      boolean boolean4 = statsdClient0.time("_", 18L, 0.0);
      assertFalse(boolean4);
      assertEquals("/192.168.1.42:0", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("Z>068#8],rSon6MuUd", 3057, 3057);
      assertEquals("Z>068#8],rSon6MuUd/200.42.42.0:3057", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("Rhi'>v0@`S/#<v#,z", 2, 2);
      statsdClient0.shutdown();
      boolean boolean0 = statsdClient0.count("Rhi'>v0@`S/#<v#,z", (double) 2);
      assertEquals("Rhi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient("", 195225787, logger0, (-3514));
      StatsdStatType statsdStatType0 = StatsdStatType.COUNTER;
      boolean boolean0 = statsdClient0.stat(statsdStatType0, "", 195225787, 195225787);
      assertFalse(boolean0);
      assertEquals("/127.0.0.1:195225787", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(logger0).isErrorEnabled();
      StatsdClient statsdClient0 = new StatsdClient((String) null, 5288, logger0, 5288);
      StatsdStatType statsdStatType0 = StatsdStatType.COUNTER;
      boolean boolean0 = statsdClient0.time("", (long) (-2008), 3947.6876663957);
      assertTrue(boolean0);
      
      statsdClient0.stat(statsdStatType0, "", 5288, 3052.5283660476);
      boolean boolean1 = statsdClient0.count((String) null, (-2008), (double) (-2008));
      assertFalse(boolean1);
      
      statsdClient0.shutdown();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(mockThrowable0);
      statsdClient0.handleError("Yj|U5Qp2tTf|*8ab", "", mockException0);
      assertEquals("/127.0.0.1:5288", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 0);
      boolean boolean0 = statsdClient0.count("org.ubercraft.statsd.StatsdClient$1", 0);
      assertEquals("/127.0.0.1:0", statsdClient0.toString());
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z");
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", (double) 2);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("COUNTER");
      StatsdClient statsdClient0 = new StatsdClient(inetAddress0, 1008);
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException(mockException0);
      mockException1.getMessage();
      statsdClient0.handleError("COUNTER", "COUNTER", mockException1);
      boolean boolean0 = statsdClient0.count((String) null, (double) 1008);
      assertTrue(boolean0);
      
      statsdClient0.sendToServer("org.evosuite.runtime.mock.java.lang.MockThrowable");
      boolean boolean1 = statsdClient0.count("COUNTER");
      assertTrue(boolean1);
      assertEquals("COUNTER/200.42.42.0:1008", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("Rhi'>v0@`S/#<v#,z", (-35), (-35));
      boolean boolean0 = statsdClient0.count("Rhi'>v0@`S/#<v#,z", (double) (-35));
      assertFalse(boolean0);
      assertEquals("Rhi'>v0@`S/#<v#,z/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("", 2652);
      boolean boolean0 = statsdClient0.gauge("", 2652);
      assertTrue(boolean0);
      assertEquals("/127.0.0.1:2652", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient(")F:fSfdo$PV%i", 0, 0);
      boolean boolean0 = statsdClient0.count(")F:fSfdo$PV%i", (double) 0);
      assertTrue(boolean0);
      assertEquals(")F:fSfdo$PV%i/200.42.42.0:0", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", 2);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      boolean boolean0 = statsdClient0.time("hi'>v0@`S/#<v#,z", (long) 2);
      assertTrue(boolean0);
      
      boolean boolean1 = statsdClient0.count("hi'>v0@`S/#<v#,z", 2);
      assertTrue(boolean1);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("u'_`q$", (-822), (Logger) null, (-822));
      StatsdStatType statsdStatType0 = StatsdStatType.COUNTER;
      boolean boolean0 = statsdClient0.count("u'_`q$", 1683);
      assertTrue(boolean0);
      
      statsdClient0.shutdown();
      boolean boolean1 = statsdClient0.stat(statsdStatType0, "u'_`q$", 3399L, (-1.0));
      assertFalse(boolean1);
      
      MockException mockException0 = new MockException("u'_`q$");
      statsdClient0.sendToServer("u'_`q$");
      statsdClient0.errorSendFailed("%s:%d|ms", mockException0);
      statsdClient0.toString();
      boolean boolean2 = statsdClient0.time("D_&q", 0L);
      assertTrue(boolean2);
      
      statsdClient0.toString();
      boolean boolean3 = statsdClient0.time("u'_`q$", (long) (-822), (double) 1683);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("u'_`q$/200.42.42.0:8125", statsdClient0.toString());
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>0]@`f/<vW,z", (-4));
      assertEquals("hi'>0]@`f/<vW,z/200.42.42.0:8125", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2);
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", (double) 2);
      assertTrue(boolean0);
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>@`S/#<vW,z", 2);
      String string0 = statsdClient0.toString();
      assertEquals("hi'>@`S/#<vW,z/200.42.42.0:2", string0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("COUNTER", 2147483636);
      StatsdStatType statsdStatType0 = StatsdStatType.GAUGE;
      boolean boolean0 = statsdClient0.stat(statsdStatType0, "COUNTER", 2147483636, 2147483636);
      assertFalse(boolean0);
      assertEquals("COUNTER/200.42.42.0:2147483636", statsdClient0.toString());
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("N8pXN", 12);
      MockException mockException0 = new MockException();
      statsdClient0.errorEnqueueFailed("N8pXN", mockException0);
      String string0 = statsdClient0.toString();
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("N8pXN/200.42.42.0:12", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("K ~Id&(Ae9g[", (-1316));
      statsdClient0.shutdown();
      Random.setNextRandom((-805));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>0@`S/#<vW,z", 2);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>0@`S/#<vW,z/200.42.42.0:2", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("hi'>v0@`S/#<v#,z", 2, 2);
      statsdClient0.errorQueueFull("hi'>v0@`S/#<v#,z");
      boolean boolean0 = statsdClient0.count("hi'>v0@`S/#<v#,z", (double) 2);
      assertTrue(boolean0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
      assertEquals("hi'>v0@`S/#<v#,z/200.42.42.0:2", statsdClient0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StatsdClient statsdClient0 = new StatsdClient("A.2G(N/PBX", 116);
      MockException mockException0 = new MockException("A.2G(N/PBX");
      MockException mockException1 = new MockException("COUNTER", mockException0);
      MockException mockException2 = new MockException(mockException1);
      statsdClient0.errorSendFailed("A.2G(N/PBX", mockException2);
      String string0 = statsdClient0.toString();
      assertEquals("A.2G(N/PBX/200.42.42.0:116", string0);
      
      statsdClient0.errorQueueFull("COUNTER");
      statsdClient0.shutdown();
      statsdClient0.errorEnqueueFailed("COUNTER", mockException0);
      assertEquals(0L, statsdClient0.getQueueOfferTimeout());
  }
}
