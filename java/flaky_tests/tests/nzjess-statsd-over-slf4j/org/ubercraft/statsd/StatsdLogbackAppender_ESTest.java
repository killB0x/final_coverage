/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 10:56:33 GMT 2022
 */

package org.ubercraft.statsd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.spi.ILoggingEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.ubercraft.statsd.StatsdLogbackAppender;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StatsdLogbackAppender_ESTest extends StatsdLogbackAppender_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      Object[] objectArray0 = new Object[5];
      ILoggingEvent iLoggingEvent0 = mock(ILoggingEvent.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0).when(iLoggingEvent0).getArgumentArray();
      statsdLogbackAppender0.append(iLoggingEvent0);
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(8125, statsdLogbackAppender0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      
      statsdLogbackAppender0.setQueueSize(0);
      int int0 = statsdLogbackAppender0.getQueueSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setQueueSize((-3438));
      int int0 = statsdLogbackAppender0.getQueueSize();
      assertEquals((-3438), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setQueueOfferTimeout(562);
      long long0 = statsdLogbackAppender0.getQueueOfferTimeout();
      assertEquals(562L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      
      statsdLogbackAppender0.setQueueOfferTimeout((-1L));
      long long0 = statsdLogbackAppender0.getQueueOfferTimeout();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      assertEquals(8125, statsdLogbackAppender0.getPort());
      
      statsdLogbackAppender0.setPort(0);
      int int0 = statsdLogbackAppender0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setPort((-1318));
      int int0 = statsdLogbackAppender0.getPort();
      assertEquals((-1318), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setHost("GAUGE");
      statsdLogbackAppender0.getHost();
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(8125, statsdLogbackAppender0.getPort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setHost("");
      statsdLogbackAppender0.getHost();
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      // Undeclared exception!
      try { 
        statsdLogbackAppender0.append((ILoggingEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ubercraft.statsd.StatsdLogbackAppender", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      Object[] objectArray0 = new Object[2];
      ILoggingEvent iLoggingEvent0 = mock(ILoggingEvent.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0).when(iLoggingEvent0).getArgumentArray();
      statsdLogbackAppender0.append(iLoggingEvent0);
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      Object[] objectArray0 = new Object[3];
      ILoggingEvent iLoggingEvent0 = mock(ILoggingEvent.class, new ViolatedAssumptionAnswer());
      doReturn(objectArray0).when(iLoggingEvent0).getArgumentArray();
      statsdLogbackAppender0.append(iLoggingEvent0);
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      ILoggingEvent iLoggingEvent0 = mock(ILoggingEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Object[]) null).when(iLoggingEvent0).getArgumentArray();
      statsdLogbackAppender0.append(iLoggingEvent0);
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.stop();
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setHost("");
      statsdLogbackAppender0.start();
      statsdLogbackAppender0.stop();
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      // Undeclared exception!
      try { 
        statsdLogbackAppender0.start();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host property is required for appender: null
         //
         verifyException("org.ubercraft.statsd.StatsdLogbackAppender", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      int int0 = statsdLogbackAppender0.getPort();
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(8125, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.getHost();
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
      assertEquals(8125, statsdLogbackAppender0.getPort());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      long long0 = statsdLogbackAppender0.getQueueOfferTimeout();
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(0L, long0);
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      int int0 = statsdLogbackAppender0.getQueueSize();
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(500, int0);
      assertEquals(8125, statsdLogbackAppender0.getPort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StatsdLogbackAppender statsdLogbackAppender0 = new StatsdLogbackAppender();
      statsdLogbackAppender0.setHost("");
      statsdLogbackAppender0.start();
      statsdLogbackAppender0.start();
      assertEquals(0L, statsdLogbackAppender0.getQueueOfferTimeout());
      assertEquals(8125, statsdLogbackAppender0.getPort());
      assertEquals(500, statsdLogbackAppender0.getQueueSize());
  }
}
