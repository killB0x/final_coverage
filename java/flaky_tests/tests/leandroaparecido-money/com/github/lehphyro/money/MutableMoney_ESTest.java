/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 27 17:39:20 GMT 2022
 */

package com.github.lehphyro.money;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.lehphyro.money.Money;
import com.github.lehphyro.money.MutableMoney;
import java.math.BigDecimal;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableMoney_ESTest extends MutableMoney_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.of(1688L);
      mutableMoney0.equals(mutableMoney1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.setMajor((-385L));
      mutableMoney1.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.setMinor(492);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      mutableMoney0.percentageOf(mutableMoney0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      mutableMoney0.isNegativeOrZero();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      mutableMoney0.isPositiveOrZero();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      mutableMoney0.negate();
      mutableMoney0.isPositive();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      mutableMoney0.negate();
      mutableMoney0.isZero();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      // Undeclared exception!
      try { 
        mutableMoney0.isLessThan(mutableMoney0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.isLessThan(mutableMoney1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.of(1904L);
      // Undeclared exception!
      try { 
        mutableMoney0.isGreaterThan(mutableMoney0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.isGreaterThan(mutableMoney1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      List<MutableMoney> list0 = mutableMoney0.divide(1589);
      assertEquals(1589, list0.size());
      assertTrue(list0.contains(mutableMoney0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      // Undeclared exception!
      try { 
        mutableMoney0.ONE.minus(mutableMoney0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      // Undeclared exception!
      try { 
        mutableMoney0.plus((MutableMoney) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableMoney.of(2719L, 100);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.setMajor(0L);
      assertTrue(mutableMoney1.isZero());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = mutableMoney0.setMajor(0L);
      assertEquals(79, mutableMoney1.getAmountMinor());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      mutableMoney0.ONE.setMajor(378L);
      assertEquals(1, mutableMoney0.getAmountMinor());
      assertTrue(mutableMoney0.isPositive());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      mutableMoney0.plus(0L, 2798);
      assertEquals(8, mutableMoney0.getAmountMinor());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      mutableMoney0.plus((-385L), 2755);
      assertFalse(mutableMoney0.isZero());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.TEN;
      double double0 = mutableMoney0.percentageOf(mutableMoney1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.of((-2777L));
      assertEquals((-27L), mutableMoney0.getAmountMajor());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.negate();
      assertSame(mutableMoney1, mutableMoney0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      mutableMoney0.minus(3999L, 854);
      mutableMoney0.negate();
      assertFalse(mutableMoney0.isNegativeOrZero());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.of((long) 1734);
      MutableMoney mutableMoney1 = mutableMoney0.negate();
      assertFalse(mutableMoney1.isPositiveOrZero());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      mutableMoney0.multiply(2972L);
      assertEquals(72, mutableMoney0.getAmountMinor());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      mutableMoney0.multiply((-477L));
      assertFalse(mutableMoney0.isPositiveOrZero());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.minus(4135L, (-987));
      mutableMoney1.abs();
      assertTrue(mutableMoney0.isPositive());
      
      mutableMoney1.minus(4135L, (-987));
      assertFalse(mutableMoney0.isPositive());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = mutableMoney0.minus((-3245L), 2);
      assertEquals(99, mutableMoney1.getAmountMinor());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      Money money0 = mutableMoney0.immutableCopy();
      assertTrue(money0.isNegativeOrZero());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.of(2938L);
      Money money0 = mutableMoney0.immutableCopy();
      assertTrue(money0.isPositive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = mutableMoney0.TEN.minus(442L, 0);
      Money money0 = mutableMoney1.immutableCopy();
      assertEquals(90, money0.getAmountMinor());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      int int0 = mutableMoney0.getAmountMinor();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.of(2938L);
      long long0 = mutableMoney0.getAmountMajor();
      assertEquals(29L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      long long0 = mutableMoney0.getAmountMajor();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.abs();
      assertSame(mutableMoney0, mutableMoney1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      // Undeclared exception!
      try { 
        mutableMoney0.percentageOf((MutableMoney) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableMoney.parse("(v|;Y,\"nEb.bmIF(`*");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableMoney.of((BigDecimal) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      mutableMoney0.divide(1952257861);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.divide((-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -352
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      // Undeclared exception!
      try { 
        mutableMoney0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      // Undeclared exception!
      try { 
        mutableMoney0.compareTo((MutableMoney) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.isNegative();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      int int0 = mutableMoney0.getAmountMinor();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.equals(mutableMoney1);
      assertFalse(boolean0);
      assertFalse(mutableMoney1.equals((Object)mutableMoney0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.equals("0,00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      boolean boolean0 = mutableMoney0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      boolean boolean0 = mutableMoney0.equals(mutableMoney0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.of(0L);
      boolean boolean0 = mutableMoney0.equals(mutableMoney1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = MutableMoney.ONE;
      int int0 = mutableMoney0.compareTo(mutableMoney1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = MutableMoney.ZERO;
      int int0 = mutableMoney0.compareTo(mutableMoney1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      int int0 = mutableMoney0.compareTo(mutableMoney0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.setMinor(38);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.setMinor(100);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.isNegativeOrZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      boolean boolean0 = mutableMoney0.isNegative();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.isPositiveOrZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      boolean boolean0 = mutableMoney0.isPositive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.isPositive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      boolean boolean0 = mutableMoney0.isZero();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      boolean boolean0 = mutableMoney0.isZero();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        MutableMoney.of(bigDecimal0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-105.7139293));
      // Undeclared exception!
      try { 
        MutableMoney.of(bigDecimal0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableMoney.of((long) 0, 2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableMoney.of((-716L), 527);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      double double0 = mutableMoney0.percentageOf(mutableMoney0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      // Undeclared exception!
      try { 
        mutableMoney0.minus(mutableMoney0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/google/common/base/Preconditions
         //
         verifyException("com.github.lehphyro.money.MutableMoney", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      MutableMoney mutableMoney1 = mutableMoney0.plus((long) 0, 0);
      assertTrue(mutableMoney1.isZero());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.TEN;
      mutableMoney0.negate();
      boolean boolean0 = mutableMoney0.isPositiveOrZero();
      assertTrue(mutableMoney0.isNegativeOrZero());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ONE;
      MutableMoney mutableMoney1 = mutableMoney0.ZERO.multiply((-4823L));
      assertEquals(0L, mutableMoney1.getAmountMajor());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableMoney mutableMoney0 = MutableMoney.ZERO;
      String string0 = mutableMoney0.toString();
      assertEquals("0,00", string0);
  }
}
