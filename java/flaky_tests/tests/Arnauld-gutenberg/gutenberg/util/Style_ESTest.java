/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:02:29 GMT 2022
 */

package gutenberg.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gutenberg.util.RGB;
import gutenberg.util.Style;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Style_ESTest extends Style_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.underline();
      assertNotSame(style2, style0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.italic();
      Style style2 = style1.underline();
      assertNotSame(style2, style0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.bold();
      Style style2 = style1.underline();
      assertTrue(style2.isUnderline());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.underline();
      Style style2 = style1.strikethrough();
      assertFalse(style2.isBold());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.italic();
      Style style2 = style1.strikethrough();
      assertFalse(style2.isUnderline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.bold();
      Style style2 = style1.strikethrough();
      assertNotSame(style1, style2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style0.overrides(style1);
      assertFalse(style2.isBold());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.overrides(style1);
      assertNotSame(style2, style1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bold();
      Style style2 = style0.overrides(style1);
      assertNotSame(style2, style1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.noUnderline();
      assertNotSame(style2, style1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.italic();
      Style style2 = style1.noUnderline();
      assertNotSame(style1, style2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.bold();
      Style style2 = style1.noUnderline();
      assertNotSame(style2, style0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style1.noStrikethrough();
      assertFalse(style2.isStrikethrough());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.italic();
      Style style2 = style1.noStrikethrough();
      assertFalse(style2.isBold());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style1.noItalic();
      assertNotSame(style0, style2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.noItalic();
      assertNotSame(style0, style2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bold();
      Style style2 = style1.noStrikethrough();
      Style style3 = style2.noItalic();
      assertTrue(style3.isBold());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style1.noBold();
      assertFalse(style2.isItalic());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.noBold();
      assertFalse(style2.isBold());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.italic();
      Style style2 = style1.overrides(style0);
      Style style3 = style2.noBold();
      assertFalse(style3.isBold());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style1.italic();
      assertFalse(style2.isStrikethrough());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.italic();
      assertFalse(style2.isUnderline());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bold();
      Style style2 = style1.italic();
      assertFalse(style2.isStrikethrough());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.underline();
      RGB rGB0 = new RGB(2, 2, 0);
      Style style2 = style1.fg(rGB0);
      assertFalse(style2.isItalic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.strikethrough();
      RGB rGB0 = new RGB((-2260), 0, (-1));
      Style style2 = style1.fg(rGB0);
      assertNotSame(style2, style1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bold();
      Style style2 = style1.fg((RGB) null);
      assertFalse(style2.isItalic());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Style style0 = new Style();
      RGB rGB0 = new RGB(0, 0, 0, 0);
      Style style1 = style0.fg(rGB0);
      RGB rGB1 = style1.fg();
      assertEquals(0, rGB1.rgba());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Style style0 = new Style();
      RGB rGB0 = new RGB(818, 818, 0);
      Style style1 = style0.fg(rGB0);
      RGB rGB1 = style1.fg();
      assertSame(rGB0, rGB1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Style style0 = new Style();
      RGB rGB0 = new RGB((-2260), 0, (-1));
      Style style1 = style0.fg(rGB0);
      RGB rGB1 = style1.fg();
      assertEquals(44, rGB1.r());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.strikethrough();
      Style style2 = style1.bold();
      assertTrue(style2.isBold());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.italic();
      Style style2 = style1.bold();
      assertNotSame(style2, style0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.underline();
      Style style2 = style1.bg((RGB) null);
      assertNotSame(style0, style2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.bold();
      RGB rGB0 = new RGB(1, 0, 0);
      Style style2 = style1.bg(rGB0);
      assertFalse(style2.isUnderline());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = new RGB(0, 255, 0, 0);
      Style style1 = style0.bg(rGB0);
      RGB rGB1 = style1.bg();
      assertEquals(0, rGB1.a());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = new RGB(0, 0, 0, 0);
      Style style1 = style0.bg(rGB0);
      RGB rGB1 = style1.bg();
      assertEquals(0, rGB1.a());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Style style0 = new Style();
      RGB rGB0 = new RGB(1049, 1049, 1049);
      Style style1 = style0.bg(rGB0);
      RGB rGB1 = style1.bg();
      assertEquals(25, rGB1.r());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Style style0 = new Style();
      // Undeclared exception!
      try { 
        style0.overrides((Style) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gutenberg.util.Style", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Style style0 = Style.style();
      // Undeclared exception!
      try { 
        style0.fg((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Style style0 = Style.style();
      // Undeclared exception!
      try { 
        style0.bg((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Style style0 = Style.style();
      // Undeclared exception!
      try { 
        style0.bg("Pi_oj@8*5NQ^+^O+\\1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.noItalic();
      Style style2 = style0.overrides(style1);
      assertNotSame(style0, style2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = new RGB((-2161), 0, (-2161), (-2161));
      Style style1 = style0.bg(rGB0);
      Style style2 = style0.overrides(style1);
      assertNotSame(style2, style0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = new RGB(0, 0, 0, 0);
      Style style1 = style0.fg(rGB0);
      Style style2 = style0.overrides(style1);
      assertFalse(style2.isStrikethrough());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.strikethrough();
      boolean boolean0 = style1.isStrikethrough();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Style style0 = new Style();
      boolean boolean0 = style0.isStrikethrough();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.underline();
      boolean boolean0 = style1.isUnderline();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Style style0 = Style.style();
      boolean boolean0 = style0.isUnderline();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.italic();
      boolean boolean0 = style1.isItalic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Style style0 = Style.style();
      boolean boolean0 = style0.isItalic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Style style0 = Style.style();
      boolean boolean0 = style0.isBold();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.strikethrough();
      RGB rGB0 = new RGB(1, 0, 0);
      Style style2 = style1.bg(rGB0);
      assertNotSame(style0, style2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Style style0 = Style.style();
      Style style1 = style0.italic();
      RGB rGB0 = new RGB((-3635), (-3635), 2);
      Style style2 = style1.bg(rGB0);
      Style style3 = style2.fg((RGB) null);
      assertNotSame(style3, style2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = style0.bg();
      assertNull(rGB0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = new RGB(16, 16, 16, 0);
      Style style1 = style0.fg(rGB0);
      RGB rGB1 = style1.fg();
      assertEquals(0, rGB1.a());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bg("dEe");
      assertFalse(style1.isBold());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Style style0 = Style.style();
      // Undeclared exception!
      try { 
        style0.fg("HNfcEi)ed&,Me;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Style style0 = Style.style();
      RGB rGB0 = style0.fg();
      assertNull(rGB0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.bold();
      boolean boolean0 = style1.isBold();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Style style0 = new Style();
      Style style1 = style0.underline();
      Style style2 = style1.bold();
      assertNotSame(style2, style0);
  }
}
