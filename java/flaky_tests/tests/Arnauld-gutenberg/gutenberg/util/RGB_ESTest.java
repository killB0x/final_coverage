/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:08:31 GMT 2022
 */

package gutenberg.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gutenberg.util.RGB;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RGB_ESTest extends RGB_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RGB rGB0 = new RGB(1522, 1522, 1522);
      RGB rGB1 = new RGB(0, (-2733), 0);
      boolean boolean0 = rGB0.equals(rGB1);
      assertEquals((-855310), rGB0.rgba());
      assertFalse(boolean0);
      assertEquals((-16755968), rGB1.rgba());
      assertFalse(rGB1.equals((Object)rGB0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RGB rGB0 = new RGB(0, 0, 0, 0);
      int int0 = rGB0.rgba();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RGB rGB0 = new RGB(1, 1, 1);
      int int0 = rGB0.rgba();
      assertEquals((-16711423), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RGB rGB0 = new RGB((-1735), 0, (-1735));
      int int0 = rGB0.r();
      assertEquals(57, int0);
      assertEquals((-13041607), rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RGB rGB0 = new RGB(0, 0, (-1));
      int int0 = rGB0.g();
      assertEquals((-16776961), rGB0.rgba());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RGB rGB0 = new RGB(1522, 1522, 1522);
      int int0 = rGB0.b();
      assertEquals(242, int0);
      assertEquals((-855310), rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RGB rGB0 = new RGB((-769), (-769), (-769));
      int int0 = rGB0.a();
      assertEquals((-1), rGB0.rgba());
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        RGB.rgb((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RGB rGB0 = new RGB(1522, 957, 1522, (-764));
      int int0 = rGB0.rgba();
      assertEquals(83017202, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RGB rGB0 = new RGB((-2004), (-2004), (-2004));
      RGB rGB1 = new RGB((-2004), (-2004), (-2004));
      boolean boolean0 = rGB0.equals(rGB1);
      assertTrue(boolean0);
      assertEquals((-13882324), rGB1.rgba());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RGB rGB0 = new RGB(14, 14, 14);
      boolean boolean0 = rGB0.equals("RGB{-15856114}");
      assertFalse(boolean0);
      assertEquals((-15856114), rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RGB rGB0 = new RGB((-16), (-16), (-16));
      RGB rGB1 = new RGB((-2733), (-2733), (-16), (-2733));
      boolean boolean0 = rGB0.equals(rGB1);
      assertFalse(rGB1.equals((Object)rGB0));
      assertFalse(boolean0);
      assertEquals((-986896), rGB0.rgba());
      assertEquals(1397969904, rGB1.rgba());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RGB rGB0 = new RGB((-2000), (-2000), (-2000));
      boolean boolean0 = rGB0.equals(rGB0);
      assertEquals((-13619152), rGB0.rgba());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RGB rGB0 = new RGB(1522, 957, 1522, (-764));
      boolean boolean0 = rGB0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(83017202, rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RGB.rgb("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("gutenberg.util.RGB", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RGB.rgb("000");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RGB rGB0 = new RGB(0, (-3225), 0);
      String string0 = rGB0.toString();
      assertEquals("RGB{-16750848}", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RGB rGB0 = new RGB(0, 0, 0, 0);
      int int0 = rGB0.r();
      assertEquals(0, rGB0.rgba());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RGB rGB0 = new RGB(0, (-3225), 0);
      rGB0.hashCode();
      assertEquals((-16750848), rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RGB rGB0 = new RGB(0, (-3225), 0);
      int int0 = rGB0.b();
      assertEquals(0, int0);
      assertEquals((-16750848), rGB0.rgba());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RGB rGB0 = new RGB(0, 0, 0, 0);
      int int0 = rGB0.a();
      assertEquals(0, rGB0.rgba());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RGB rGB0 = new RGB((-27), (-27), (-27));
      int int0 = rGB0.g();
      assertEquals((-1710619), rGB0.rgba());
      assertEquals(229, int0);
  }
}
