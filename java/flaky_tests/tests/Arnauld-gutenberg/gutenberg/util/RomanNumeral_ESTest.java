/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:16:52 GMT 2022
 */

package gutenberg.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gutenberg.util.RomanNumeral;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RomanNumeral_ESTest extends RomanNumeral_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RomanNumeral romanNumeral0 = new RomanNumeral();
      // Undeclared exception!
      try { 
        romanNumeral0.format((-1425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative number not allowed: -1425
         //
         verifyException("gutenberg.util.RomanNumeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RomanNumeral romanNumeral0 = new RomanNumeral();
      String string0 = romanNumeral0.format(40);
      assertEquals("xl", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RomanNumeral romanNumeral0 = new RomanNumeral();
      // Undeclared exception!
      try { 
        romanNumeral0.format(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative number not allowed: 0
         //
         verifyException("gutenberg.util.RomanNumeral", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RomanNumeral romanNumeral0 = new RomanNumeral();
      String string0 = romanNumeral0.format(2001);
      assertEquals("mmi", string0);
      assertNotNull(string0);
  }
}
