/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 24 19:10:11 GMT 2022
 */

package gutenberg.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gutenberg.util.Dimension;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Dimension_ESTest extends Dimension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Percent;
      Dimension dimension0 = new Dimension((-1.0F), dimension_Unit0);
      dimension0.hashCode();
      assertEquals((-1.0F), dimension0.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Percent;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      Dimension dimension1 = new Dimension((-1608.3267F), dimension_Unit0);
      boolean boolean0 = dimension0.equals(dimension1);
      assertEquals((-1608.3267F), dimension1.amount(), 0.01F);
      assertFalse(boolean0);
      assertFalse(dimension1.equals((Object)dimension0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      dimension0.unit();
      assertEquals(0.0F, dimension0.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      float float0 = dimension0.amount();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension((-134.6769F), dimension_Unit0);
      float float0 = dimension0.amount();
      assertEquals((-134.6769F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Dimension dimension0 = new Dimension(1290.3988F, (Dimension.Unit) null);
      // Undeclared exception!
      try { 
        dimension0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gutenberg.util.Dimension", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      dimension0.hashCode();
      assertEquals(0.0F, dimension0.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      Dimension.Unit dimension_Unit1 = Dimension.Unit.Percent;
      Dimension dimension1 = new Dimension(0.0F, dimension_Unit1);
      boolean boolean0 = dimension0.equals(dimension1);
      assertFalse(boolean0);
      assertEquals(0.0F, dimension1.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Percent;
      Dimension dimension0 = new Dimension(1.0F, dimension_Unit0);
      Dimension dimension1 = new Dimension((-1.0F), dimension_Unit0);
      boolean boolean0 = dimension1.equals(dimension0);
      assertFalse(boolean0);
      assertEquals((-1.0F), dimension1.amount(), 0.01F);
      assertFalse(dimension0.equals((Object)dimension1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Percent;
      Dimension dimension0 = new Dimension(1.0F, dimension_Unit0);
      Object object0 = new Object();
      boolean boolean0 = dimension0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1.0F, dimension0.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(1006.05145F, dimension_Unit0);
      boolean boolean0 = dimension0.equals((Object) null);
      assertEquals(1006.05145F, dimension0.amount(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension((-2185.0F), dimension_Unit0);
      boolean boolean0 = dimension0.equals(dimension0);
      assertEquals((-2185.0F), dimension0.amount(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      Dimension dimension1 = new Dimension(0.0F, dimension_Unit0);
      boolean boolean0 = dimension0.equals(dimension1);
      assertEquals(0.0F, dimension1.amount(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Dimension dimension0 = new Dimension((-2265.219F), (Dimension.Unit) null);
      dimension0.unit();
      assertEquals((-2265.219F), dimension0.amount(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(3307.9556F, dimension_Unit0);
      float float0 = dimension0.amount();
      assertEquals(3307.9556F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Dimension.Unit dimension_Unit0 = Dimension.Unit.Px;
      Dimension dimension0 = new Dimension(0.0F, dimension_Unit0);
      String string0 = dimension0.toString();
      assertEquals("Dimension{0.0Px}", string0);
  }
}
