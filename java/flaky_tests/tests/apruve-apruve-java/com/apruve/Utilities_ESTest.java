/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:39:28 GMT 2022
 */

package com.apruve;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.apruve.Utilities;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Utilities_ESTest extends Utilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utilities.parseTimestamp("X");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utilities.formatTimestamp((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = Utilities.hasText((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      boolean boolean0 = Utilities.hasText("parseTimestamp - ParseException caught.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      boolean boolean0 = Utilities.hasText("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Date date0 = Utilities.parseTimestamp((String) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Date date0 = Utilities.parseTimestamp("2014-02-14T20:21:21Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Utilities utilities0 = new Utilities();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String string0 = Utilities.formatTimestamp(mockDate0);
      assertEquals("2014-02-14T20:21:21Z", string0);
  }
}
