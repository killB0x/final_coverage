/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:40:27 GMT 2022
 */

package com.apruve.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.apruve.models.Payment;
import com.apruve.models.PaymentCreateResponse;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentCreateResponse_ESTest extends PaymentCreateResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("eclipselink.media-type", "w,Uw8*A", 0, "eclipselink.media-type", uRLStreamHandler0);
      paymentCreateResponse0.setViewUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getViewUrl();
      assertEquals("eclipselink.media-type", uRL1.getFile());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("ALUE<(*Jn58c(7", "ALUE<(*Jn58c(7", 3, "", uRLStreamHandler0);
      paymentCreateResponse0.setViewUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getViewUrl();
      assertNull(uRL1.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      Payment.PaymentStatus payment_PaymentStatus0 = Payment.PaymentStatus.CAPTURED;
      paymentCreateResponse0.setStatus(payment_PaymentStatus0);
      Payment.PaymentStatus payment_PaymentStatus1 = paymentCreateResponse0.getStatus();
      assertSame(payment_PaymentStatus1, payment_PaymentStatus0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      paymentCreateResponse0.setPaymentRequestId(";1)-g@T");
      String string0 = paymentCreateResponse0.getPaymentRequestId();
      assertEquals(";1)-g@T", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      paymentCreateResponse0.setPaymentRequestId("");
      String string0 = paymentCreateResponse0.getPaymentRequestId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      paymentCreateResponse0.setId(";1)-g@T");
      String string0 = paymentCreateResponse0.getId();
      assertEquals(";1)-g@T", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      paymentCreateResponse0.setId("");
      String string0 = paymentCreateResponse0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("FAILED", "FAILED", 0, "FAILED", uRLStreamHandler0);
      paymentCreateResponse0.setApiUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getApiUrl();
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("1bHkPshbmew'AHAU|", "1bHkPshbmew'AHAU|", 2, "", uRLStreamHandler0);
      paymentCreateResponse0.setApiUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getApiUrl();
      assertEquals("", uRL1.getFile());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URL uRL0 = MockURL.getFtpExample();
      paymentCreateResponse0.setApiUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getApiUrl();
      assertEquals((-1), uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      // Undeclared exception!
      try { 
        paymentCreateResponse0.toJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      paymentCreateResponse0.getStatus();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URL uRL0 = paymentCreateResponse0.getViewUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      String string0 = paymentCreateResponse0.getPaymentRequestId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URL uRL0 = paymentCreateResponse0.getApiUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      String string0 = paymentCreateResponse0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      URL uRL0 = MockURL.getFtpExample();
      paymentCreateResponse0.setViewUrl(uRL0);
      URL uRL1 = paymentCreateResponse0.getViewUrl();
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentCreateResponse paymentCreateResponse0 = new PaymentCreateResponse();
      // Undeclared exception!
      try { 
        paymentCreateResponse0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }
}
