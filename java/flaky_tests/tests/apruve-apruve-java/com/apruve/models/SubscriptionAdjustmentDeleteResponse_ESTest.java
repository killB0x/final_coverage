/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:46:10 GMT 2022
 */

package com.apruve.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.apruve.models.SubscriptionAdjustmentDeleteResponse;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscriptionAdjustmentDeleteResponse_ESTest extends SubscriptionAdjustmentDeleteResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      subscriptionAdjustmentDeleteResponse0.setSubscriptionId("");
      String string0 = subscriptionAdjustmentDeleteResponse0.getSubscriptionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      subscriptionAdjustmentDeleteResponse0.setId("");
      String string0 = subscriptionAdjustmentDeleteResponse0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("zYxE<", "zYxE<", 1, "", uRLStreamHandler0);
      subscriptionAdjustmentDeleteResponse0.setApiUrl(uRL0);
      URL uRL1 = subscriptionAdjustmentDeleteResponse0.getApiUrl();
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("`x", "`x", 0, "L:w[go#K+|4^s\"gEH}", uRLStreamHandler0);
      subscriptionAdjustmentDeleteResponse0.setApiUrl(uRL0);
      URL uRL1 = subscriptionAdjustmentDeleteResponse0.getApiUrl();
      assertEquals(0, uRL1.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      URL uRL0 = MockURL.getFileExample();
      subscriptionAdjustmentDeleteResponse0.setApiUrl(uRL0);
      URL uRL1 = subscriptionAdjustmentDeleteResponse0.getApiUrl();
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      subscriptionAdjustmentDeleteResponse0.setSubscriptionId("nt");
      String string0 = subscriptionAdjustmentDeleteResponse0.getSubscriptionId();
      assertEquals("nt", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      URL uRL0 = subscriptionAdjustmentDeleteResponse0.getApiUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      subscriptionAdjustmentDeleteResponse0.setId("nt");
      String string0 = subscriptionAdjustmentDeleteResponse0.getId();
      assertEquals("nt", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      String string0 = subscriptionAdjustmentDeleteResponse0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      // Undeclared exception!
      try { 
        subscriptionAdjustmentDeleteResponse0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      // Undeclared exception!
      try { 
        subscriptionAdjustmentDeleteResponse0.toJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubscriptionAdjustmentDeleteResponse subscriptionAdjustmentDeleteResponse0 = new SubscriptionAdjustmentDeleteResponse();
      String string0 = subscriptionAdjustmentDeleteResponse0.getSubscriptionId();
      assertNull(string0);
  }
}
