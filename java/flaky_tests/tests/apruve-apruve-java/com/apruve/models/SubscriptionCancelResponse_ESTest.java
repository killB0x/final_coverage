/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:46:52 GMT 2022
 */

package com.apruve.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.apruve.models.SubscriptionCancelResponse;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubscriptionCancelResponse_ESTest extends SubscriptionCancelResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("X>d.~sJm@ti'H_G", "", 0, "X>d.~sJm@ti'H_G", uRLStreamHandler0);
      subscriptionCancelResponse0.setSubscriptionApiUrl(uRL0);
      URL uRL1 = subscriptionCancelResponse0.getSubscriptionApiUrl();
      assertNull(uRL1.getRef());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("X>d.~sJm@ti'H_G", "", 1609, "X>d.~sJm@ti'H_G", uRLStreamHandler0);
      subscriptionCancelResponse0.setSubscriptionApiUrl(uRL0);
      URL uRL1 = subscriptionCancelResponse0.getSubscriptionApiUrl();
      assertEquals(0, uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      URL uRL0 = MockURL.getFtpExample();
      subscriptionCancelResponse0.setSubscriptionApiUrl(uRL0);
      URL uRL1 = subscriptionCancelResponse0.getSubscriptionApiUrl();
      assertEquals("ftp", uRL1.getProtocol());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      subscriptionCancelResponse0.setId("b-\"vt:TB");
      String string0 = subscriptionCancelResponse0.getId();
      assertEquals("b-\"vt:TB", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      subscriptionCancelResponse0.setId("");
      String string0 = subscriptionCancelResponse0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      MockDate mockDate0 = new MockDate((-5871L));
      subscriptionCancelResponse0.setEndAt(mockDate0);
      Date date0 = subscriptionCancelResponse0.getEndAt();
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      MockDate mockDate0 = new MockDate(1609, 1609, 0);
      subscriptionCancelResponse0.setCanceledAt(mockDate0);
      Date date0 = subscriptionCancelResponse0.getCanceledAt();
      assertEquals("Sat Jan 31 00:00:00 GMT 3643", date0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      // Undeclared exception!
      try { 
        subscriptionCancelResponse0.toJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      // Undeclared exception!
      try { 
        subscriptionCancelResponse0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      URL uRL0 = subscriptionCancelResponse0.getSubscriptionApiUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      Date date0 = subscriptionCancelResponse0.getEndAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      Date date0 = subscriptionCancelResponse0.getCanceledAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubscriptionCancelResponse subscriptionCancelResponse0 = new SubscriptionCancelResponse();
      String string0 = subscriptionCancelResponse0.getId();
      assertNull(string0);
  }
}
