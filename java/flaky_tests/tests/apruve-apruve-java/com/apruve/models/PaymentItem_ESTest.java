/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 15:41:51 GMT 2022
 */

package com.apruve.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.apruve.models.PaymentItem;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PaymentItem_ESTest extends PaymentItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 1, "", uRLStreamHandler0);
      paymentItem0.setViewProductUrl(uRL0);
      URL uRL1 = paymentItem0.getViewProductUrl();
      assertEquals(0, uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "application/json", 0, "", uRLStreamHandler0);
      paymentItem0.setViewProductUrl(uRL0);
      URL uRL1 = paymentItem0.getViewProductUrl();
      assertEquals(0, uRL1.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      URL uRL0 = MockURL.getFileExample();
      paymentItem0.setViewProductUrl(uRL0);
      URL uRL1 = paymentItem0.getViewProductUrl();
      assertSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setVendor("<Z0?(Q~sP%");
      String string0 = paymentItem0.getVendor();
      assertEquals("<Z0?(Q~sP%", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setVariantInfo("t2gyRth0=>q0;");
      String string0 = paymentItem0.getVariantInfo();
      assertEquals("t2gyRth0=>q0;", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setTitle("com.apruve.models.PaymentItem");
      String string0 = paymentItem0.getTitle();
      assertEquals("com.apruve.models.PaymentItem", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setSku("<Z0?(Q~sP%");
      String string0 = paymentItem0.getSku();
      assertEquals("<Z0?(Q~sP%", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setSku("");
      String string0 = paymentItem0.getSku();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(0);
      paymentItem0.setQuantity(integer0);
      Integer integer1 = paymentItem0.getQuantity();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(1746);
      paymentItem0.setQuantity(integer0);
      Integer integer1 = paymentItem0.getQuantity();
      assertEquals(1746, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer((-991));
      paymentItem0.setQuantity(integer0);
      Integer integer1 = paymentItem0.getQuantity();
      assertEquals((-991), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(0);
      paymentItem0.setPriceEachCents(integer0);
      Integer integer1 = paymentItem0.getPriceEachCents();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer((-1635));
      paymentItem0.setPriceEachCents(integer0);
      Integer integer1 = paymentItem0.getPriceEachCents();
      assertEquals((-1635), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setMerchantNotes("com.apruve.models.PaymentItem");
      String string0 = paymentItem0.getMerchantNotes();
      assertEquals("com.apruve.models.PaymentItem", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setDescription("b[k1k(5p;76f>vAP]X1");
      String string0 = paymentItem0.getDescription();
      assertEquals("b[k1k(5p;76f>vAP]X1", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(0);
      paymentItem0.setAmountCents(integer0);
      Integer integer1 = paymentItem0.getAmountCents();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer((-533));
      paymentItem0.setAmountCents(integer0);
      Integer integer1 = paymentItem0.getAmountCents();
      assertEquals((-533), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setMerchantNotes("");
      String string0 = paymentItem0.getMerchantNotes();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      // Undeclared exception!
      try { 
        paymentItem0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = paymentItem0.getPriceEachCents();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getVariantInfo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      URL uRL0 = paymentItem0.getViewProductUrl();
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setVariantInfo("");
      String string0 = paymentItem0.getVariantInfo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setTitle("");
      String string0 = paymentItem0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      // Undeclared exception!
      try { 
        paymentItem0.toJson();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setDescription("");
      String string0 = paymentItem0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = paymentItem0.getQuantity();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(1746);
      paymentItem0.setAmountCents(integer0);
      Integer integer1 = paymentItem0.getAmountCents();
      assertEquals(1746, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      paymentItem0.setVendor("");
      String string0 = paymentItem0.getVendor();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getSku();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getMerchantNotes();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = paymentItem0.getAmountCents();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      String string0 = paymentItem0.getVendor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaymentItem paymentItem0 = new PaymentItem();
      Integer integer0 = new Integer(2488);
      paymentItem0.setPriceEachCents(integer0);
      Integer integer1 = paymentItem0.getPriceEachCents();
      assertEquals(2488, (int)integer1);
  }
}
