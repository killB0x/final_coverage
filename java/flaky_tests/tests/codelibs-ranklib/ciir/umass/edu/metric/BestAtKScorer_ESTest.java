/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:17:35 GMT 2022
 */

package ciir.umass.edu.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.metric.BestAtKScorer;
import ciir.umass.edu.metric.MetricScorer;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BestAtKScorer_ESTest extends BestAtKScorer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer();
      bestAtKScorer0.swapChange(rankList0);
      assertEquals(10, bestAtKScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer();
      // Undeclared exception!
      try { 
        bestAtKScorer0.swapChange((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.BestAtKScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer();
      // Undeclared exception!
      try { 
        bestAtKScorer0.score((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.BestAtKScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer(9);
      RankList rankList0 = new RankList(linkedList0);
      int int0 = bestAtKScorer0.maxToK(rankList0, 9);
      assertEquals(9, bestAtKScorer0.getK());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer(0);
      MetricScorer metricScorer0 = bestAtKScorer0.copy();
      assertEquals(10, metricScorer0.getK());
      assertEquals(0, bestAtKScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer(1);
      RankList rankList0 = new RankList(linkedList0);
      // Undeclared exception!
      try { 
        bestAtKScorer0.score(rankList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.RankList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer(0);
      bestAtKScorer0.name();
      assertEquals(0, bestAtKScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BestAtKScorer bestAtKScorer0 = new BestAtKScorer();
      // Undeclared exception!
      try { 
        bestAtKScorer0.maxToK((RankList) null, (-232));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.BestAtKScorer", e);
      }
  }
}
