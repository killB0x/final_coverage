/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:12:01 GMT 2022
 */

package ciir.umass.edu.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.metric.MetricScorer;
import ciir.umass.edu.metric.ReciprocalRankScorer;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReciprocalRankScorer_ESTest extends ReciprocalRankScorer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      reciprocalRankScorer0.k = 3592;
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double[][] doubleArray0 = reciprocalRankScorer0.swapChange(rankList0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      assertEquals(0, reciprocalRankScorer0.getK());
      
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      reciprocalRankScorer0.setK(202);
      double double0 = reciprocalRankScorer0.score(rankList0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      // Undeclared exception!
      try { 
        reciprocalRankScorer0.swapChange((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.ReciprocalRankScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      // Undeclared exception!
      try { 
        reciprocalRankScorer0.score((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.ReciprocalRankScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      reciprocalRankScorer0.setK((-2439));
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double[][] doubleArray0 = reciprocalRankScorer0.swapChange(rankList0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      reciprocalRankScorer0.swapChange(rankList0);
      assertEquals(0, reciprocalRankScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      assertEquals(0, reciprocalRankScorer0.getK());
      
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      reciprocalRankScorer0.k = (-2667);
      RankList rankList0 = new RankList(linkedList0);
      double double0 = reciprocalRankScorer0.score(rankList0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double double0 = reciprocalRankScorer0.score(rankList0);
      assertEquals(0, reciprocalRankScorer0.getK());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      MetricScorer metricScorer0 = reciprocalRankScorer0.copy();
      assertEquals(0, metricScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ReciprocalRankScorer reciprocalRankScorer0 = new ReciprocalRankScorer();
      reciprocalRankScorer0.name();
      assertEquals(0, reciprocalRankScorer0.getK());
  }
}
