/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:25:22 GMT 2022
 */

package ciir.umass.edu.metric;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.metric.ERRScorer;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ERRScorer_ESTest extends ERRScorer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer(0);
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      eRRScorer0.swapChange(rankList0);
      assertEquals(0, eRRScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer(0);
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double double0 = eRRScorer0.score(rankList0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, eRRScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      // Undeclared exception!
      try { 
        eRRScorer0.swapChange((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.ERRScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      // Undeclared exception!
      try { 
        eRRScorer0.score((RankList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.metric.ERRScorer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      eRRScorer0.swapChange(rankList0);
      assertEquals(10, eRRScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer((-13));
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double double0 = eRRScorer0.score(rankList0);
      assertEquals((-13), eRRScorer0.getK());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      double double0 = eRRScorer0.score(rankList0);
      assertEquals(10, eRRScorer0.getK());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      eRRScorer0.name();
      assertEquals(10, eRRScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer((-15));
      LinkedList<DataPoint> linkedList0 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList0);
      eRRScorer0.swapChange(rankList0);
      assertEquals((-15), eRRScorer0.getK());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ERRScorer eRRScorer0 = new ERRScorer();
      ERRScorer eRRScorer1 = eRRScorer0.copy();
      assertEquals(10, eRRScorer1.getK());
  }
}
