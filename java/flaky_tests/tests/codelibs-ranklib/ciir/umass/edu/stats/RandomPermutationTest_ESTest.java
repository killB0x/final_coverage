/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:37:34 GMT 2022
 */

package ciir.umass.edu.stats;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.stats.RandomPermutationTest;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomPermutationTest_ESTest extends RandomPermutationTest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      assertEquals(10000, RandomPermutationTest.nPermutation);
      assertNotNull(randomPermutationTest0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put("TIA&3LFOPy`", double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      randomPermutationTest0.test(hashMap0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      assertEquals(10000, RandomPermutationTest.nPermutation);
      assertNotNull(randomPermutationTest0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Double double0 = new Double(10000);
      assertEquals(10000.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.put("0000", double0);
      assertNull(double1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      
      // Undeclared exception!
      randomPermutationTest0.test(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      assertEquals(10000, RandomPermutationTest.nPermutation);
      assertNotNull(randomPermutationTest0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>(hashMap0);
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        randomPermutationTest0.test(hashMap0, hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in BasicStats::mean(): Empty input array.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      assertEquals(10000, RandomPermutationTest.nPermutation);
      assertNotNull(randomPermutationTest0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Double double0 = new Double((-2428.661828446819));
      assertEquals((-2428.661828446819), (double)double0, 0.01);
      assertNotNull(double0);
      
      RandomPermutationTest.nPermutation = (-2483);
      Double double1 = hashMap0.put("k@eK<knh", double0);
      assertNull(double1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      double double2 = randomPermutationTest0.test(hashMap0, hashMap0);
      assertEquals(-0.0, double2, 0.01);
      assertEquals((-2483), RandomPermutationTest.nPermutation);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      assertEquals(10000, RandomPermutationTest.nPermutation);
      assertNotNull(randomPermutationTest0);
      
      // Undeclared exception!
      try { 
        randomPermutationTest0.test((Map<String, Double>) null, (Map<String, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.stats.RandomPermutationTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RandomPermutationTest randomPermutationTest0 = new RandomPermutationTest();
      RandomPermutationTest.nPermutation = 646;
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(962.3317);
      hashMap0.put("", double0);
      double double1 = randomPermutationTest0.test(hashMap0, hashMap0);
      assertEquals(1.0, double1, 0.01);
  }
}
