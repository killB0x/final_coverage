/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:50:45 GMT 2022
 */

package ciir.umass.edu.learning.boosting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.SparseDataPoint;
import ciir.umass.edu.learning.boosting.RBWeakRanker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RBWeakRanker_ESTest extends RBWeakRanker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker(0, 0);
      double double0 = rBWeakRanker0.getThreshold();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, rBWeakRanker0.getFid());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker(2210, 2210);
      double double0 = rBWeakRanker0.getThreshold();
      assertEquals(2210.0, double0, 0.01);
      assertEquals(2210, rBWeakRanker0.getFid());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker(0, 106.491136664663);
      int int0 = rBWeakRanker0.getFid();
      assertEquals(106.491136664663, rBWeakRanker0.getThreshold(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker((-1), (-1));
      int int0 = rBWeakRanker0.getFid();
      assertEquals((-1.0), rBWeakRanker0.getThreshold(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker((-66), (-66));
      SparseDataPoint sparseDataPoint0 = new SparseDataPoint("9 2Sb>&nV+pG");
      // Undeclared exception!
      try { 
        rBWeakRanker0.score(sparseDataPoint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in SparseDataPoint::getFeatureValue(): requesting unspecified feature, fid=-66
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker(2210, 2210);
      // Undeclared exception!
      try { 
        rBWeakRanker0.score((DataPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.boosting.RBWeakRanker", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker((-1), (-1));
      double double0 = rBWeakRanker0.getThreshold();
      assertEquals((-1), rBWeakRanker0.getFid());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker(1, 1);
      int int0 = rBWeakRanker0.getFid();
      assertEquals(1, int0);
      assertEquals(1.0, rBWeakRanker0.getThreshold(), 0.01);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RBWeakRanker rBWeakRanker0 = new RBWeakRanker((-1), (-1));
      String string0 = rBWeakRanker0.toString();
      assertEquals("-1:-1.0", string0);
  }
}
