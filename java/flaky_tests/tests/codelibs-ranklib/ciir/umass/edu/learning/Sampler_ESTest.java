/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:38:36 GMT 2022
 */

package ciir.umass.edu.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.learning.Sampler;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sampler_ESTest extends Sampler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      LinkedList<DataPoint> linkedList1 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList1);
      linkedList0.addFirst(rankList0);
      List<RankList> list0 = sampler0.doSampling(linkedList0, (-1280.8915F), true);
      assertFalse(list0.contains(rankList0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      List<RankList> list0 = sampler0.doSampling(linkedList0, 1005, true);
      List<RankList> list1 = sampler0.getRemains();
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      linkedList0.add((RankList) null);
      List<RankList> list0 = sampler0.doSampling(linkedList0, 1217.9484F, true);
      // Undeclared exception!
      sampler0.doSampling(list0, 1217.9484F, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      // Undeclared exception!
      try { 
        sampler0.doSampling((List<RankList>) null, (-4224.0054F), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      linkedList0.add((RankList) null);
      // Undeclared exception!
      try { 
        sampler0.doSampling(linkedList0, 1687.27F, false);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      linkedList0.add((RankList) null);
      List<RankList> list0 = sampler0.doSampling(linkedList0, 1.0F, false);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      linkedList0.add((RankList) null);
      List<RankList> list0 = sampler0.doSampling(linkedList0, 0.0F, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      LinkedList<DataPoint> linkedList1 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList1);
      linkedList0.add(rankList0);
      linkedList0.addFirst(rankList0);
      List<RankList> list0 = sampler0.doSampling(linkedList0, 1.0F, true);
      assertEquals(2, list0.size());
      
      List<RankList> list1 = sampler0.getRemains();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      LinkedList<DataPoint> linkedList1 = new LinkedList<DataPoint>();
      RankList rankList0 = new RankList(linkedList1);
      linkedList0.add(rankList0);
      sampler0.doSampling(linkedList0, 1.0F, true);
      List<RankList> list0 = sampler0.getSamples();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      List<RankList> list0 = sampler0.doSampling(linkedList0, (-1280.8915F), true);
      List<RankList> list1 = sampler0.getSamples();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      List<RankList> list0 = sampler0.getSamples();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      List<RankList> list0 = sampler0.getRemains();
      assertNull(list0);
  }
}
