/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:01:51 GMT 2022
 */

package ciir.umass.edu.learning.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.DenseDataPoint;
import ciir.umass.edu.learning.SparseDataPoint;
import ciir.umass.edu.learning.tree.FeatureHistogram;
import ciir.umass.edu.learning.tree.Split;
import ciir.umass.edu.utilities.MyThreadPool;
import ciir.umass.edu.utilities.WorkerThread;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FeatureHistogram_ESTest extends FeatureHistogram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      
      int[] intArray0 = new int[2];
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = null;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      featureHistogram0.count = intArray1;
      intArray0[0] = 1;
      featureHistogram0.sampleToThresholdMap = intArray1;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(intArray0, 420, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[2];
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = null;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      featureHistogram0.count = intArray1;
      intArray0[0] = 1;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(intArray0, 1, 0, 5020);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[2];
      int[][] intArray1 = new int[7][0];
      intArray1[0] = null;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = null;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      featureHistogram0.count = intArray1;
      intArray0[0] = 1;
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(intArray0, 1, 1, 5020);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[20];
      int int0 = 7139;
      MyThreadPool.init(7139);
      featureHistogram0.count = null;
      featureHistogram1.features = intArray0;
      featureHistogram0.construct(featureHistogram1, intArray0, (double[]) null);
      // Undeclared exception!
      featureHistogram0.construct(featureHistogram1, featureHistogram1.features, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      MyThreadPool.init(3059);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      int[] intArray0 = new int[3];
      intArray0[0] = 2851;
      intArray0[1] = (-132);
      intArray0[2] = (-2090);
      featureHistogram0.features = intArray0;
      int[] intArray1 = new int[0];
      featureHistogram0.features = intArray1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1.0F;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("ciir.umass.edu.utilities.MyThreadPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      int[] intArray0 = new int[0];
      featureHistogram0.features = intArray0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = 0.0;
      featureHistogram0.update(doubleArray0);
      Split split0 = null;
      try {
        split0 = new Split((int[][]) null, 1.0, 1.0, 1818.169543005);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[1] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = null;
      featureHistogram0.sum = doubleArray1;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0, (-20), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -20 out of bounds for length 9
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(3311, 3311, 3311);
      FeatureHistogram.samplingRate = (float) 3311;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, (double[]) null, 3311);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[10];
      featureHistogram0.features = intArray0;
      Split split0 = new Split(featureHistogram0.features, featureHistogram0, 0.0, 1.0F);
      // Undeclared exception!
      try { 
        split0.hist.construct((DataPoint[]) null, (double[]) null, (int[][]) null, (float[][]) null, 14, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 14 out of bounds for length 10
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[][] doubleArray0 = new double[8][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1200.487269695266;
      doubleArray1[2] = (-675.881204420281);
      doubleArray1[3] = 1806.413979;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = 0.0;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1200.487269695266;
      doubleArray2[1] = 1200.487269695266;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (-207.19686273);
      doubleArray2[4] = (double) 1.0F;
      doubleArray2[5] = 0.0;
      doubleArray0[3] = doubleArray2;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      featureHistogram0.sum = doubleArray0;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 1;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray3, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[10];
      featureHistogram0.features = intArray0;
      // Undeclared exception!
      try { 
        featureHistogram1.construct(featureHistogram0, featureHistogram0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[][] intArray0 = new int[8][7];
      intArray0[0] = null;
      intArray0[1] = null;
      intArray0[2] = null;
      intArray0[3] = null;
      intArray0[4] = null;
      intArray0[5] = null;
      intArray0[6] = null;
      intArray0[7] = null;
      int[] intArray1 = new int[5];
      intArray1[0] = (-1);
      intArray1[1] = (-52);
      intArray1[2] = 502;
      intArray1[3] = 35;
      intArray1[4] = (-4154);
      float[][] floatArray0 = new float[1][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) (-52);
      floatArray1[1] = 1.0F;
      floatArray1[2] = (float) (-4154);
      floatArray1[3] = (float) (-1);
      floatArray1[4] = (float) (-1);
      floatArray1[5] = (float) (-1);
      floatArray1[6] = (float) (-52);
      floatArray1[7] = (float) 35;
      floatArray0[0] = floatArray1;
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, (double[]) null, intArray0, intArray1, floatArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[10];
      featureHistogram0.features = intArray0;
      Split split0 = new Split();
      Split split1 = new Split(featureHistogram0.features, (FeatureHistogram) null, 1.0F, 1.0F);
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split1, (double[]) null, (-2143875786));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      float[][] floatArray0 = new float[2][1];
      floatArray0[0] = null;
      floatArray0[1] = null;
      featureHistogram0.thresholds = floatArray0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, (int[]) null, (double[]) null, 19, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 19 out of bounds for length 2
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(3292, 3292, 3292);
      FeatureHistogram.samplingRate = (-2275.539F);
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, (double[]) null, 3292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(3292, 3292, (-594.2233806526824));
      FeatureHistogram.samplingRate = (-2275.539F);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, doubleArray0, 3292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      float[][] floatArray0 = new float[8][2];
      floatArray0[0] = null;
      floatArray0[1] = null;
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 1.0F;
      floatArray2[1] = 335.0F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 1.0F;
      floatArray2[6] = 1.0F;
      floatArray2[7] = 1.0F;
      floatArray0[3] = floatArray2;
      floatArray0[4] = null;
      floatArray0[5] = null;
      floatArray0[6] = null;
      floatArray0[7] = null;
      featureHistogram0.thresholds = floatArray0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      int int0 = 1;
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.impacts = null;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, (int[]) null, (double[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[0];
      int[][] intArray0 = new int[0][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 3833;
      float[][] floatArray0 = new float[5][3];
      floatArray0[0] = null;
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, doubleArray0, intArray0, intArray1, floatArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (double[]) null);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      
      featureHistogram_Worker0.usedFeatures = null;
      featureHistogram_Worker0.type = 3934;
      featureHistogram_Worker0.run();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0E8);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0, (-1864), (-1864));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[7];
      intArray0[2] = (-1914);
      featureHistogram1.sampleToThresholdMap = null;
      featureHistogram1.features = intArray0;
      intArray0[6] = (-1914);
      // Undeclared exception!
      try { 
        featureHistogram1.update((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.sampleToThresholdMap = null;
      featureHistogram1.sumResponse = (-1.0);
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[24];
      featureHistogram0.construct(featureHistogram0, intArray0, (double[]) null, 0, (-7));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      MyThreadPool.init(3934);
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      float[][] floatArray0 = new float[5][5];
      floatArray0[0] = null;
      MyThreadPool.init(51);
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      featureHistogram0.thresholds = floatArray0;
      float[][] floatArray1 = new float[4][7];
      floatArray1[0] = null;
      floatArray1[2] = null;
      floatArray1[3] = null;
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, intArray0, floatArray1, (double[]) null);
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      FeatureHistogram featureHistogram1 = null;
      FeatureHistogram featureHistogram2 = new FeatureHistogram();
      float[][] floatArray2 = new float[2][2];
      floatArray2[0] = null;
      floatArray2[1] = null;
      // Undeclared exception!
      try { 
        featureHistogram2.construct((DataPoint[]) null, (double[]) null, featureHistogram0.count, floatArray2, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      float[][] floatArray0 = new float[5][5];
      floatArray0[0] = null;
      MyThreadPool.init(51);
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      featureHistogram0.thresholds = floatArray0;
      float[][] floatArray1 = new float[4][7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = null;
      floatArray1[2] = null;
      floatArray1[3] = null;
      int[] intArray0 = new int[5];
      intArray0[0] = 3069;
      featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, intArray0, floatArray1, (double[]) null);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertArrayEquals(new int[] {3069, 0, 0, 0, 0}, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(floatArray1, floatArray0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram_Worker0);
      
      FeatureHistogram featureHistogram1 = null;
      FeatureHistogram featureHistogram2 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram2.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram2.sumResponse, 0.01);
      assertNotNull(featureHistogram2);
      assertFalse(featureHistogram2.equals((Object)featureHistogram0));
      
      // Undeclared exception!
      try { 
        featureHistogram2.construct((DataPoint[]) null, (double[]) null, featureHistogram0.count, (float[][]) null, 51, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram0.sum = null;
      int[] intArray0 = new int[3];
      intArray0[0] = 397;
      intArray0[1] = (-1595);
      intArray0[2] = 3924;
      featureHistogram1.features = intArray0;
      featureHistogram1.sqSumResponse = 0.0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      int[] intArray0 = new int[0];
      float[][] floatArray0 = new float[8][9];
      floatArray0[0] = null;
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      floatArray0[5] = null;
      floatArray0[6] = null;
      floatArray0[7] = null;
      featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, intArray0, floatArray0, (double[]) null);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, floatArray0.length);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.run();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      
      FeatureHistogram.Worker featureHistogram_Worker1 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, intArray0, (double[]) null);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(featureHistogram_Worker1.equals((Object)featureHistogram_Worker0));
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker1.run();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 8
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      Split split0 = new Split();
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertNotNull(split0);
      
      int[][] intArray0 = new int[2][4];
      intArray0[0] = null;
      intArray0[1] = null;
      featureHistogram0.count = intArray0;
      boolean boolean0 = featureHistogram0.findBestSplit(split0, (double[]) null, 3326);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit((int[]) null, 3326, 3326, 3326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3326 out of bounds for length 2
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      featureHistogram0.sqSumResponse = (-1133.2764330706);
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, featureHistogram0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (DataPoint[]) null, (double[]) null, (int[][]) null, (float[][]) null);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.set(4950, 2615);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      
      featureHistogram_Worker0.run();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[20];
      MyThreadPool.init(7139);
      featureHistogram0.count = null;
      featureHistogram1.features = intArray0;
      featureHistogram0.construct(featureHistogram1, intArray0, (double[]) null);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertFalse(featureHistogram0.equals((Object)featureHistogram1));
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      assertEquals(20, intArray0.length);
      assertNotSame(featureHistogram0, featureHistogram1);
      assertNotSame(featureHistogram1, featureHistogram0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      double[] doubleArray0 = new double[0];
      featureHistogram0.update(doubleArray0, 4, (-1912));
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram0.sum = null;
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = (-1912);
      intArray0[3] = 4;
      featureHistogram1.sampleToThresholdMap = null;
      featureHistogram1.features = intArray0;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = (-1912);
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, intArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[16];
      featureHistogram1.features = intArray0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, intArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      double[] doubleArray0 = new double[0];
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[9];
      intArray1[0] = 3069;
      intArray1[1] = 3069;
      intArray1[2] = 1;
      intArray1[3] = 3069;
      intArray1[4] = 3069;
      intArray1[5] = 2;
      intArray1[6] = 3069;
      intArray1[7] = 3069;
      intArray1[8] = 3069;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      intArray0[2] = null;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 3069;
      intArray3[1] = 1;
      intArray3[2] = 2;
      intArray3[3] = 3069;
      intArray3[4] = 1;
      intArray3[5] = 3069;
      intArray3[6] = 2;
      intArray3[7] = 2;
      float[][] floatArray0 = new float[1][2];
      floatArray0[0] = null;
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, doubleArray0, intArray0, intArray3, floatArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      Split split0 = new Split();
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertNotNull(split0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 283;
      boolean boolean0 = featureHistogram0.findBestSplit(split0, doubleArray0, 1170);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 283.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.run();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      int int0 = (-566);
      int int1 = 2180;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, (int[]) null, (double[]) null, (-566), 2180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      Split split0 = new Split(0, 0, (-1.0));
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals((-1.0), split0.getDeviance(), 0.01);
      assertNotNull(split0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker((FeatureHistogram) null, featureHistogram0, (FeatureHistogram) null);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram$Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      float[][] floatArray0 = new float[4][7];
      floatArray0[0] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, intArray0, floatArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      float[][] floatArray0 = new float[4][7];
      floatArray0[0] = null;
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      int[] intArray0 = new int[8];
      intArray0[0] = 3069;
      intArray0[1] = 3069;
      intArray0[2] = 3069;
      intArray0[3] = 3069;
      intArray0[4] = 3211;
      intArray0[5] = 3069;
      intArray0[6] = 3069;
      intArray0[7] = 3069;
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, intArray0, floatArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      MyThreadPool.init(2);
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram_Worker0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      MyThreadPool.init(23);
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, featureHistogram0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      DataPoint[] dataPointArray0 = new DataPoint[0];
      // Undeclared exception!
      try { 
        featureHistogram1.construct(dataPointArray0, (double[]) null, (int[][]) null, (int[]) null, (float[][]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      float[][] floatArray0 = new float[5][3];
      floatArray0[0] = null;
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      featureHistogram0.thresholds = floatArray0;
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      DataPoint[] dataPointArray0 = new DataPoint[0];
      // Undeclared exception!
      try { 
        featureHistogram0.construct(dataPointArray0, (double[]) null, (int[][]) null, (int[]) null, floatArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      MyThreadPool.init(2);
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram_Worker0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, 51, 1314);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      featureHistogram0.construct((FeatureHistogram) null, (FeatureHistogram) null, 3, (-1265));
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram0.construct(featureHistogram1, featureHistogram1, 2, (-1559));
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertFalse(featureHistogram0.equals((Object)featureHistogram1));
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      assertNotSame(featureHistogram0, featureHistogram1);
      assertNotSame(featureHistogram1, featureHistogram0);
      
      double[][] doubleArray0 = new double[9][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      featureHistogram1.sum = doubleArray0;
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null, 0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram featureHistogram1 = null;
      FeatureHistogram featureHistogram2 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram2.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram2.sumResponse, 0.01);
      assertNotNull(featureHistogram2);
      assertFalse(featureHistogram2.equals((Object)featureHistogram0));
      
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, (float[][]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      DataPoint[] dataPointArray0 = new DataPoint[0];
      float[][] floatArray0 = new float[3][2];
      floatArray0[0] = null;
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      featureHistogram1.construct(dataPointArray0, (double[]) null, (int[][]) null, floatArray0, 3, (-1));
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      assertEquals(0, dataPointArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(featureHistogram1, featureHistogram0);
      
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      DataPoint[] dataPointArray0 = null;
      double[] doubleArray0 = null;
      float[][] floatArray0 = new float[4][7];
      floatArray0[0] = null;
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      int int0 = 3069;
      // Undeclared exception!
      try { 
        featureHistogram0.construct((DataPoint[]) null, (double[]) null, (int[][]) null, floatArray0, 3069, 3069);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      DataPoint[] dataPointArray0 = new DataPoint[0];
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, dataPointArray0, (double[]) null, (int[][]) null, (float[][]) null);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      assertEquals(0, dataPointArray0.length);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, (int[]) null, (double[]) null);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.fh = featureHistogram0;
      WorkerThread workerThread0 = featureHistogram_Worker0.clone();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(workerThread0);
      assertFalse(workerThread0.equals((Object)featureHistogram_Worker0));
      assertNotSame(featureHistogram_Worker0, workerThread0);
      assertNotSame(workerThread0, featureHistogram_Worker0);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (double[]) null);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      WorkerThread workerThread0 = featureHistogram_Worker0.clone();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(workerThread0);
      assertFalse(workerThread0.equals((Object)featureHistogram_Worker0));
      assertNotSame(featureHistogram_Worker0, workerThread0);
      assertNotSame(workerThread0, featureHistogram_Worker0);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (int[]) null, 1853);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (int[]) null, (-1));
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      int int0 = 1500;
      int[][] intArray0 = new int[1][7];
      intArray0[0] = null;
      featureHistogram0.count = intArray0;
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (int[]) null, 1500);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 1
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, (int[]) null, (double[]) null, 3, (-16));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 0.0;
      int[][] intArray0 = new int[9][4];
      intArray0[0] = null;
      intArray0[1] = null;
      intArray0[2] = null;
      intArray0[3] = null;
      intArray0[4] = null;
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, (int[]) null, doubleArray0, 0, (-943));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (double[]) null);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.labels = null;
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertNotNull(featureHistogram0);
      
      Split split0 = new Split();
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertNotNull(split0);
      
      boolean boolean0 = featureHistogram0.findBestSplit(split0, (double[]) null, 3326);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      Split split0 = new Split();
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertNotNull(split0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 0.0;
      featureHistogram0.impacts = doubleArray0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = 0.0;
      boolean boolean0 = featureHistogram0.findBestSplit(split0, doubleArray0, 0);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram1.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram1.sqSumResponse, 0.01);
      assertNotNull(featureHistogram1);
      assertFalse(featureHistogram1.equals((Object)featureHistogram0));
      
      // Undeclared exception!
      try { 
        featureHistogram1.findBestSplit((int[]) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram0);
      
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertNotNull(featureHistogram_Worker0);
      
      featureHistogram_Worker0.run();
      assertEquals(1.0F, FeatureHistogram.samplingRate, 0.01F);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, (int[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      int int0 = 0;
      // Undeclared exception!
      try { 
        featureHistogram1.update((double[]) null, 304, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, (int[]) null, (double[]) null, 35, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[5];
      intArray0[0] = (-4327);
      intArray0[1] = 1;
      intArray0[2] = 780;
      intArray0[3] = (-1);
      intArray0[4] = 3;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1038.04138232;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-1);
      featureHistogram0.construct((FeatureHistogram) null, intArray0, doubleArray0, 923, 3);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      DataPoint[] dataPointArray0 = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = 0.0;
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[2];
      int int0 = 0;
      intArray1[0] = 0;
      int int1 = 0;
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      int int2 = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, (int[]) null, (double[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, featureHistogram0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      DataPoint[] dataPointArray0 = null;
      double[] doubleArray0 = null;
      int[][] intArrayArray0 = null;
      float[][] floatArray0 = new float[5][5];
      floatArray0[0] = null;
      MyThreadPool.init(51);
      floatArray0[1] = null;
      floatArray0[2] = null;
      floatArray0[3] = null;
      floatArray0[4] = null;
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3170.68);
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, featureHistogram0);
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
      
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, (-541), (-541));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, featureHistogram0);
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      int int0 = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      featureHistogram1.sum = featureHistogram1.sum;
      int[] intArray0 = new int[10];
      featureHistogram0.count = null;
      featureHistogram0.features = intArray0;
      Split split0 = new Split();
      Split split1 = new Split(featureHistogram0.features, (FeatureHistogram) null, 1.0F, 1.0F);
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split1, (double[]) null, (-2143875786));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(283, 308.3F, 283);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 283;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, doubleArray0, 1170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(3292, 3292, 3292);
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, (double[]) null, 3292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(3292, 3292, (-594.2233806526824));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, doubleArray0, 3292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(0, 0, (-1.0));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 1.0F;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(split0, doubleArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, featureHistogram0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (double[]) null);
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, featureHistogram1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, featureHistogram0, featureHistogram0);
      DataPoint[] dataPointArray0 = new DataPoint[1];
      DenseDataPoint denseDataPoint0 = null;
      try {
        denseDataPoint0 = new DenseDataPoint("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DataPoint::parse()
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null, (-108), (-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = 0.0;
      int int0 = 10;
      int int1 = 1208;
      // Undeclared exception!
      try { 
        featureHistogram0.update(doubleArray0, 10, 1208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Worker featureHistogram_Worker0 = featureHistogram0.new Worker(featureHistogram0, (double[]) null);
      // Undeclared exception!
      try { 
        featureHistogram_Worker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram0, (int[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2917.8;
      FeatureHistogram featureHistogram1 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.construct(featureHistogram1, (int[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Split split0 = new Split();
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit((int[]) null, 559, 559, 559);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[0];
      featureHistogram0.update(doubleArray0, (-108), (-1073741824));
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      double[] doubleArray0 = new double[1];
      featureHistogram0.update(doubleArray0, (-1), (-108));
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      FeatureHistogram.Config featureHistogram_Config0 = featureHistogram0.new Config();
      assertEquals(0.0, featureHistogram0.sqSumResponse, 0.01);
      assertEquals(0.0, featureHistogram0.sumResponse, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-105);
      intArray0[2] = 906;
      intArray0[3] = (-1985);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1985);
      doubleArray0[2] = (double) (-1985);
      doubleArray0[3] = (double) 906;
      doubleArray0[4] = 0.0;
      featureHistogram0.update(doubleArray0, 906, 0);
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        featureHistogram0.findBestSplit(intArray0, 906, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      // Undeclared exception!
      try { 
        featureHistogram0.update((double[]) null, (-5), (-3403));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.FeatureHistogram", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      DataPoint[] dataPointArray0 = new DataPoint[5];
      String string0 = "*cSbK1f>\\RLtxVeWS";
      DenseDataPoint denseDataPoint0 = null;
      try {
        denseDataPoint0 = new DenseDataPoint("*cSbK1f>RLtxVeWS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DataPoint::parse()
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }
}
