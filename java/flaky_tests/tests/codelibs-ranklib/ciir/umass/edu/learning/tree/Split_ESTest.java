/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:42:33 GMT 2022
 */

package ciir.umass.edu.learning.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.tree.FeatureHistogram;
import ciir.umass.edu.learning.tree.Split;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Split_ESTest extends Split_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Split split0 = new Split();
      split0.set(1, 1443.9F, 1443.9F);
      // Undeclared exception!
      try { 
        split0.eval((DataPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Split split0 = new Split((-2737), 0.0F, (-5128.250340498562));
      // Undeclared exception!
      try { 
        split0.leaves();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Split split0 = new Split(37, 37, 37);
      Split split1 = new Split();
      split0.setLeft(split1);
      // Undeclared exception!
      try { 
        split0.leaves();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Split split0 = new Split(491, 491, 491);
      Split split1 = new Split();
      split0.setLeft(split1);
      split0.setRight(split1);
      assertEquals(0.0, split1.getSumLabel(), 0.01);
      assertEquals(0.0, split1.getSqSumLabel(), 0.01);
      assertEquals(0.0, split1.getDeviance(), 0.01);
      assertFalse(split1.isRoot());
      
      String string0 = split0.toString();
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals("<split>\n\t<feature>491 </feature>\n\t<threshold> 491.0 </threshold>\n\t<split pos=\"left\">\n\t\t<output>0.0 </output>\n\t</split>\n\t<split pos=\"right\">\n\t\t<output>0.0 </output>\n\t</split>\n</split>\n", string0);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(491.0, split0.getDeviance(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Split split0 = new Split(338, 338, 0.0);
      Split split1 = new Split((-1), (-1.0F), 338);
      split0.setLeft(split1);
      // Undeclared exception!
      try { 
        split0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Split split0 = new Split();
      String string0 = split0.toString("FZYMxK;");
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals("FZYMxK;<split>\nFZYMxK;\t<output>0.0 </output>\nFZYMxK;</split>\n", string0);
      assertFalse(split0.isRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[1];
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(intArray0, featureHistogram0, 0.0, 0.0);
      split0.split((double[]) null, 1);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Split split0 = new Split();
      assertFalse(split0.isRoot());
      
      split0.setRoot(true);
      boolean boolean0 = split0.isRoot();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(intArray0, featureHistogram0, 1009.7, 2515.0F);
      double double0 = split0.getSumLabel();
      assertEquals(419.1666666666667, split0.getOutput(), 0.01);
      assertEquals(2515.0, double0, 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(1009.7, split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(intArray0, featureHistogram0, 0.0, (-2826.4751));
      double double0 = split0.getSumLabel();
      assertFalse(split0.isRoot());
      assertEquals((-471.07918333333333), split0.getOutput(), 0.01);
      assertEquals((-2826.4751), double0, 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[8][6];
      Split split0 = new Split(intArray0, (-2423.5428), (-4864), 341);
      double double0 = split0.getSqSumLabel();
      assertEquals((-2423.5428), split0.getDeviance(), 0.01);
      assertEquals((-810.6666666666666), split0.getOutput(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals((-4864.0), split0.getSumLabel(), 0.01);
      assertEquals(341.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[][] intArray0 = new int[6][3];
      Split split0 = new Split(intArray0, (-2184), (-2725.13957986122), (-1.0));
      double double0 = split0.getSqSumLabel();
      assertEquals((-2184.0), split0.getDeviance(), 0.01);
      assertEquals((-908.37985995374), split0.getOutput(), 0.01);
      assertEquals((-2725.13957986122), split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      Split split0 = new Split(intArray0, (-1479.98762313), 100, 581.0);
      split0.getSamples();
      assertFalse(split0.isRoot());
      assertEquals((-1479.98762313), split0.getDeviance(), 0.01);
      assertEquals(581.0, split0.getSqSumLabel(), 0.01);
      assertEquals(100.0, split0.getSumLabel(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, split0.getOutput(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[][] intArray0 = new int[3][9];
      Split split0 = new Split(intArray0, (-3117), 923, 865.638761341);
      split0.getSampleSortedIndex();
      assertEquals(865.638761341, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(102.55555555555556, split0.getOutput(), 0.01);
      assertEquals(923.0, split0.getSumLabel(), 0.01);
      assertEquals((-3117.0), split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Split split0 = new Split();
      int[] intArray0 = new int[3];
      Split split1 = new Split(intArray0, (FeatureHistogram) null, 0.0, 502);
      split0.setRight(split1);
      Split split2 = split0.getRight();
      assertEquals(0.0, split2.getSqSumLabel(), 0.01);
      assertEquals(167.33333333333334, split2.getOutput(), 0.01);
      assertFalse(split0.isRoot());
      assertFalse(split2.isRoot());
      assertEquals(502.0, split2.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split2.getDeviance(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Split split0 = new Split();
      Split split1 = new Split((-2144), 1.0F, 2089.9073088620635);
      split0.setRight(split1);
      Split split2 = split0.getRight();
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(2089.9073088620635, split2.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split2.getOutput(), 0.01);
      assertEquals(0.0, split2.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertFalse(split2.isRoot());
      assertEquals(0.0, split2.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[][] intArray0 = new int[3][5];
      Split split0 = new Split(intArray0, (-1646.299436935), 10, 0.0);
      double double0 = split0.getOutput();
      assertEquals((-1646.299436935), split0.getDeviance(), 0.01);
      assertEquals(2.0, double0, 0.01);
      assertEquals(10.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      Split split0 = new Split(intArray0, (FeatureHistogram) null, (-670.5155848458), (-53));
      double double0 = split0.getOutput();
      assertEquals((-8.833333333333334), double0, 0.01);
      assertEquals((-53.0), split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals((-670.5155848458), split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Split split0 = new Split();
      Split split1 = new Split(1904, 1.0F, (-1.0E8));
      split0.setLeft(split1);
      Split split2 = split0.getLeft();
      assertFalse(split2.isRoot());
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split2.getOutput(), 0.01);
      assertEquals(0.0, split2.getSqSumLabel(), 0.01);
      assertEquals((-1.0E8), split2.getDeviance(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split2.getSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Split split0 = new Split(12, 12, 12);
      double double0 = split0.getDeviance();
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(12.0, double0, 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Split split0 = new Split(18, (-2535.8F), (-2535.8F));
      double double0 = split0.getDeviance();
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals((-2535.800048828125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      int[] intArray0 = new int[9];
      Split split0 = new Split(intArray0, featureHistogram0, 4016.76198038, 87);
      double double0 = split0.eval((DataPoint) null);
      assertFalse(split0.isRoot());
      assertEquals(87.0, split0.getSumLabel(), 0.01);
      assertEquals(9.666666666666666, double0, 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(4016.76198038, split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[][] intArray0 = new int[5][3];
      Split split0 = new Split(intArray0, (-870), (-870), 1341.72295784);
      double double0 = split0.eval((DataPoint) null);
      assertEquals((-870.0), split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals((-870.0), split0.getDeviance(), 0.01);
      assertEquals(1341.72295784, split0.getSqSumLabel(), 0.01);
      assertEquals((-290.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[][] intArray0 = new int[0][1];
      Split split0 = null;
      try {
        split0 = new Split(intArray0, (-1.0E8), (-1.0E8), (-1.0E8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = new Split(intArray0, featureHistogram0, 1009.7, 2515.0F);
      String string0 = split0.getString("");
      assertEquals("<output>419.1666666666667 </output>\n", string0);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(2515.0, split0.getSumLabel(), 0.01);
      assertEquals(1009.7, split0.getDeviance(), 0.01);
      assertFalse(split0.isRoot());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Split split0 = new Split(341, 341, 341);
      // Undeclared exception!
      try { 
        split0.toString("hMzcHno(L#_d3CQB[}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[][] intArray0 = new int[1][6];
      Split split0 = new Split(intArray0, 824, (-1.0), (-2217.6987712138));
      split0.getSamples();
      assertEquals((-0.16666666666666666), split0.getOutput(), 0.01);
      assertEquals((-1.0), split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(824.0, split0.getDeviance(), 0.01);
      assertEquals((-2217.6987712138), split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Split split0 = new Split();
      split0.getSamples();
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertFalse(split0.isRoot());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Split split0 = new Split((-567), (-567), (-567));
      // Undeclared exception!
      try { 
        split0.getString("Invalid search pattern specified for sparse data points.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Split split0 = new Split((-567), (-567), (-567));
      // Undeclared exception!
      try { 
        split0.eval((DataPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Split split0 = new Split();
      double double0 = split0.eval((DataPoint) null);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Split split0 = new Split();
      split0.setLeft(split0);
      Split split1 = split0.getLeft();
      assertEquals(0.0, split1.getSumLabel(), 0.01);
      assertFalse(split1.isRoot());
      assertEquals(0.0, split1.getOutput(), 0.01);
      assertEquals(0.0, split1.getSqSumLabel(), 0.01);
      assertEquals(0.0, split1.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Split split0 = new Split();
      split0.setOutput(1030.3F);
      assertEquals(1030.300048828125, split0.getOutput(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Split split0 = new Split();
      split0.getSampleSortedIndex();
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Split split0 = new Split();
      split0.leaves();
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Split split0 = new Split(0, 0, 0);
      boolean boolean0 = split0.isRoot();
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Split split0 = new Split();
      // Undeclared exception!
      try { 
        split0.split((double[]) null, 1495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Split split0 = new Split();
      double double0 = split0.getSumLabel();
      assertEquals(0.0, double0, 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Split split0 = null;
      try {
        split0 = new Split((int[][]) null, 0.0, 0.0, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Split split0 = new Split();
      double double0 = split0.getSqSumLabel();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Split split0 = new Split();
      split0.getLeft();
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Split split0 = new Split();
      double double0 = split0.getDeviance();
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Split split0 = new Split();
      split0.getRight();
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FeatureHistogram featureHistogram0 = new FeatureHistogram();
      Split split0 = null;
      try {
        split0 = new Split((int[]) null, featureHistogram0, 1.0F, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.Split", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Split split0 = new Split();
      split0.clearSamples();
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getOutput(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
      assertFalse(split0.isRoot());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Split split0 = new Split();
      double double0 = split0.getOutput();
      assertEquals(0.0, double0, 0.01);
      assertFalse(split0.isRoot());
      assertEquals(0.0, split0.getSqSumLabel(), 0.01);
      assertEquals(0.0, split0.getDeviance(), 0.01);
      assertEquals(0.0, split0.getSumLabel(), 0.01);
  }
}
