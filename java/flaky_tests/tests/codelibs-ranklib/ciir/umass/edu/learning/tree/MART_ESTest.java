/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:45:05 GMT 2022
 */

package ciir.umass.edu.learning.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.learning.Ranker;
import ciir.umass.edu.learning.tree.LambdaMART;
import ciir.umass.edu.learning.tree.MART;
import ciir.umass.edu.learning.tree.RegressionTree;
import ciir.umass.edu.learning.tree.Split;
import ciir.umass.edu.metric.NDCGScorer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MART_ESTest extends MART_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[][] intArray0 = new int[16][5];
      MART mART0 = new MART();
      Split split0 = new Split(intArray0, (-1), (-1), (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      mART0.pseudoResponses = doubleArray0;
      RegressionTree regressionTree0 = new RegressionTree(split0);
      mART0.updateTreeOutput(regressionTree0);
      assertEquals((-1.0), split0.getOutput(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MART mART0 = new MART();
      DataPoint[] dataPointArray0 = new DataPoint[1];
      double[] doubleArray0 = new double[1];
      mART0.pseudoResponses = doubleArray0;
      mART0.martSamples = dataPointArray0;
      // Undeclared exception!
      try { 
        mART0.computePseudoResponses();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.MART", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MART mART0 = new MART();
      int[][] intArray0 = new int[4][5];
      int[] intArray1 = new int[5];
      intArray1[0] = (-1);
      intArray0[0] = intArray1;
      double[] doubleArray0 = new double[5];
      mART0.pseudoResponses = doubleArray0;
      Split split0 = new Split(intArray0, (-1), (-1), (-1));
      RegressionTree regressionTree0 = new RegressionTree(split0);
      // Undeclared exception!
      try { 
        mART0.updateTreeOutput(regressionTree0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 5
         //
         verifyException("ciir.umass.edu.learning.tree.MART", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MART mART0 = new MART();
      int[][] intArray0 = new int[1][5];
      Split split0 = new Split(intArray0, 0.0, 0.0, 0.0);
      RegressionTree regressionTree0 = new RegressionTree(split0);
      // Undeclared exception!
      try { 
        mART0.updateTreeOutput(regressionTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.tree.MART", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MART mART0 = new MART();
      DataPoint[] dataPointArray0 = new DataPoint[0];
      mART0.martSamples = dataPointArray0;
      mART0.computePseudoResponses();
      assertEquals(0.1F, LambdaMART.learningRate, 0.01F);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[] intArray0 = new int[0];
      NDCGScorer nDCGScorer0 = new NDCGScorer();
      MART mART0 = new MART((List<RankList>) null, intArray0, nDCGScorer0);
      Ranker ranker0 = mART0.createNew();
      assertEquals(0.0, ranker0.getScoreOnValidationData(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MART mART0 = new MART();
      String string0 = mART0.name();
      assertEquals("MART", string0);
  }
}
