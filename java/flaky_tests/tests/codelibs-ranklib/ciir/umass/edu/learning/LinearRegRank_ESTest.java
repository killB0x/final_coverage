/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:07:39 GMT 2022
 */

package ciir.umass.edu.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.LinearRegRank;
import ciir.umass.edu.learning.RankList;
import ciir.umass.edu.learning.Ranker;
import ciir.umass.edu.metric.PrecisionScorer;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LinearRegRank_ESTest extends LinearRegRank_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Solving Ax=B: A is NOT a square matrix.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Solving Ax=B: A and B have different dimension.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.loadFromString("_j##");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in KeyValuePair(text) constructor
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[1];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      linearRegRank0.bestScoreOnValidationData = (-1508.940886);
      double[] doubleArray0 = new double[2];
      linearRegRank0.weight = doubleArray0;
      // Undeclared exception!
      try { 
        linearRegRank0.eval((DataPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[1];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      double[] doubleArray0 = new double[2];
      linearRegRank0.scoreOnTrainingData = (-290.3);
      linearRegRank0.weight = doubleArray0;
      // Undeclared exception!
      try { 
        linearRegRank0.eval((DataPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      double[] doubleArray0 = new double[1];
      linearRegRank0.weight = doubleArray0;
      // Undeclared exception!
      try { 
        linearRegRank0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.solve((double[][]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[] doubleArray0 = new double[0];
      linearRegRank0.weight = doubleArray0;
      // Undeclared exception!
      try { 
        linearRegRank0.model();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.loadFromString("0:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in LinearRegRank::load(): 
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.learn();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      String string0 = linearRegRank0.name();
      assertEquals("Linear Regression", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      double[] doubleArray2 = linearRegRank0.solve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Solving Ax=B: A is NOT a square matrix.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[3][5];
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Solving Ax=B: A and B have different dimension.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: some of the input arrays is empty.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: some of the input arrays is empty.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[6];
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      double[][] doubleArray0 = new double[0][0];
      double[] doubleArray1 = new double[5];
      // Undeclared exception!
      try { 
        linearRegRank0.solve(doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: some of the input arrays is empty.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      linearRegRank0.loadFromString("## Linear Regression\n## Lambda = 1.0E-10\n0:0.0 0:0.0 0:0.0 0:0.0 0:0.0");
      assertEquals(0.0, linearRegRank0.getScoreOnTrainingData(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.loadFromString(" ");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      double[] doubleArray0 = new double[4];
      linearRegRank0.weight = doubleArray0;
      String string0 = linearRegRank0.toString();
      assertEquals("0:0.0 0:0.0 0:0.0 0:0.0 0:0.0", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      double[] doubleArray0 = new double[9];
      linearRegRank0.weight = doubleArray0;
      String string0 = linearRegRank0.model();
      assertEquals("## Linear Regression\n## Lambda = 1.0E-10\n0:0.0 0:0.0 0:0.0 0:0.0 0:0.0 ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.init();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      // Undeclared exception!
      try { 
        linearRegRank0.printParameters();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<RankList> linkedList0 = new LinkedList<RankList>();
      int[] intArray0 = new int[4];
      PrecisionScorer precisionScorer0 = new PrecisionScorer();
      LinearRegRank linearRegRank0 = new LinearRegRank(linkedList0, intArray0, precisionScorer0);
      // Undeclared exception!
      try { 
        linearRegRank0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.LinearRegRank", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinearRegRank linearRegRank0 = new LinearRegRank();
      Ranker ranker0 = linearRegRank0.createNew();
      assertEquals("Linear Regression", ranker0.name());
  }
}
