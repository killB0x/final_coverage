/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 17:30:01 GMT 2022
 */

package ciir.umass.edu.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.learning.DataPoint;
import ciir.umass.edu.learning.DenseDataPoint;
import ciir.umass.edu.learning.SparseDataPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataPoint_ESTest extends DataPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      String string0 = denseDataPoint0.toString();
      assertEquals("0 qid:MqmD(sg%pS(  ", string0);
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = null;
      try {
        denseDataPoint0 = new DenseDataPoint("256");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DataPoint::parse()
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SparseDataPoint sparseDataPoint0 = null;
      try {
        sparseDataPoint0 = new SparseDataPoint("d(AD#UGIDx0^GvVB; O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DataPoint::parse()
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      float[] floatArray0 = denseDataPoint0.parse("0 MqmD(sg%pS(");
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("MqmD(sg%pS(", denseDataPoint0.getID());
      assertEquals(0, floatArray0.length);
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = DataPoint.isUnknown(Float.NaN);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = DataPoint.isUnknown((-1762.825F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = DataPoint.getValue("Cannot use feature numbering less than or equal to zero. Start your features at 1.");
      assertEquals("Cannot use feature numbering less than or equal to zero. Start your features at 1.", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = DataPoint.getValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = DataPoint.getKey("Error in DataPoint:parse(Y");
      assertEquals("Error in DataPoint", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = DataPoint.getKey(":");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.parse("0 qid:  1:0.0 2:0.0 3:0.0 4:0.0 5:-523.7 6:0.0 7:0.0 8:0.0 9:0.0 ");
      denseDataPoint0.getID();
      assertEquals("", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      float[] floatArray0 = new float[3];
      denseDataPoint0.fVals = floatArray0;
      denseDataPoint0.getFeatureVector();
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("MqmD(sg%pS(", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      float[] floatArray0 = denseDataPoint0.getFeatureVector();
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals(0, floatArray0.length);
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("MqmD(sg%pS(", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pv(");
      // Undeclared exception!
      try { 
        denseDataPoint0.getFeatureValue(42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DenseDataPoint::getFeatureValue(): requesting unspecified feature, fid=42
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.parse("0 qid:RANDOM 1:-455.33817 2:1554.0782 3:0.0 5:-523.7 6:2259.667 7:-2633.895 ");
      int int0 = denseDataPoint0.getFeatureCount();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 Mq\"m%Dog%pS(");
      denseDataPoint0.featureCount = (-1);
      int int0 = denseDataPoint0.getFeatureCount();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 1q`D(sg%pS(");
      denseDataPoint0.description = "?tm N2mY";
      denseDataPoint0.getDescription();
      assertEquals("?tm N2mY", denseDataPoint0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      
      denseDataPoint0.cached = 0.0;
      double double0 = denseDataPoint0.getCached();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 Mq\"cmD(sg%pS(");
      denseDataPoint0.cached = 832.031;
      double double0 = denseDataPoint0.getCached();
      assertEquals(832.031, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmrD(sg%pS(");
      denseDataPoint0.setFeatureVector((float[]) null);
      // Undeclared exception!
      try { 
        denseDataPoint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.DataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SparseDataPoint sparseDataPoint0 = new SparseDataPoint("0 MqmD(sg%pS(");
      // Undeclared exception!
      try { 
        sparseDataPoint0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.SparseDataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[3];
      SparseDataPoint sparseDataPoint0 = new SparseDataPoint("0 MqmD(sg%pS(");
      sparseDataPoint0.knownFeatures = (-1229);
      // Undeclared exception!
      try { 
        sparseDataPoint0.setFeatureVector(floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1229
         //
         verifyException("ciir.umass.edu.learning.SparseDataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[3];
      SparseDataPoint sparseDataPoint0 = new SparseDataPoint("0 MqmD(sg%pS(");
      // Undeclared exception!
      try { 
        sparseDataPoint0.setFeatureVector(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.SparseDataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      // Undeclared exception!
      try { 
        denseDataPoint0.setFeatureValue(24, 24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error in DenseDataPoint::setFeatureValue(): feature (id=24) not found.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataPoint.getValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.DataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataPoint.getKey("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataPoint.getKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.learning.DataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseDataPoint sparseDataPoint0 = new SparseDataPoint("0 MqmD(sg%pS:");
      // Undeclared exception!
      try { 
        sparseDataPoint0.getFeatureVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -1 out of bounds for length 0
         //
         verifyException("ciir.umass.edu.learning.SparseDataPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.featureCount = 1431655765;
      denseDataPoint0.parse("0 qid:RANDOM 1:-455.33817 2:1554.0782 3:0.0 5:-523.7 6:2259.667 7:2259.667 ");
      assertEquals("RANDOM", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      float[] floatArray0 = new float[8];
      floatArray0[4] = Float.NaN;
      denseDataPoint0.fVals = floatArray0;
      String string0 = denseDataPoint0.toString();
      assertEquals("0 qid:MqmD(sg%pS( 1:0.0 2:0.0 3:0.0 5:0.0 6:0.0 7:0.0 ", string0);
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals(0, denseDataPoint0.getFeatureCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparseDataPoint sparseDataPoint0 = null;
      try {
        sparseDataPoint0 = new SparseDataPoint("-1 qid:MqmD(sg%pS( 1:1587.343 2:0.0 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Relevance label cannot be negative. System will now exit.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      DenseDataPoint denseDataPoint1 = new DenseDataPoint(denseDataPoint0);
      assertEquals((-1.0), denseDataPoint1.getCached(), 0.01);
      assertEquals(0, denseDataPoint1.getFeatureCount());
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("MqmD(sg%pS(", denseDataPoint1.getID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.resetCached();
      assertEquals((-1.0E8), denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 qid:Mq\"m%Dog%pS( 1:0.0 2:0.0 3:0.0 4:0.0 5:0.0 6:0.0 7:0.0 8:0.0 9:0.0 10:0.0 11:0.0 12:0.0 13:0.0 14:0.0 15:0.0 16:0.0 17:0.0 18:0.0 19:0.0 20:0.0 21:0.0 22:0.0 23:0.0 24:0.0 25:0.0 26:0.0 27:0.0 28:0.0 29:0.0 30:0.0 31:0.0 32:0.0 33:0.0 34:0.0 35:0.0 36:0.0 37:0.0 38:0.0 39:0.0 40:0.0 41:0.0 42:0.0 43:0.0 44:0.0 45:0.0 46:0.0 47:0.0 48:0.0 49:0.0 50:0.0 51:0.0 52:0.0 53:0.0 54:0.0 55:0.0 56:0.0 57:0.0 58:0.0 59:0.0 ");
      float[] floatArray0 = denseDataPoint0.parse("0 qid:Mq\"m%Dog%pS( 1:0.0 2:0.0 3:0.0 4:0.0 5:0.0 6:0.0 7:0.0 8:0.0 9:0.0 10:0.0 11:0.0 12:0.0 13:0.0 14:0.0 15:0.0 16:0.0 17:0.0 18:0.0 19:0.0 20:0.0 21:0.0 22:0.0 23:0.0 24:0.0 25:0.0 26:0.0 27:0.0 28:0.0 29:0.0 30:0.0 31:0.0 32:0.0 33:0.0 34:0.0 35:0.0 36:0.0 37:0.0 38:0.0 39:0.0 40:0.0 41:0.0 42:0.0 43:0.0 44:0.0 45:0.0 46:0.0 47:0.0 48:0.0 49:0.0 50:0.0 51:0.0 52:0.0 53:0.0 54:0.0 55:0.0 56:0.0 57:0.0 58:0.0 59:0.0 ");
      assertEquals("Mq\"m%Dog%pS(", denseDataPoint0.getID());
      assertEquals(60, floatArray0.length);
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 Mq\"cmD(sg%pS(");
      double double0 = denseDataPoint0.getCached();
      assertEquals("Mq\"cmD(sg%pS(", denseDataPoint0.getID());
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      float float0 = denseDataPoint0.getLabel();
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("MqmD(sg%pS(", denseDataPoint0.getID());
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 Mq\"m%Dog%pS(");
      int int0 = denseDataPoint0.getFeatureCount();
      assertEquals(0, int0);
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals("Mq\"m%Dog%pS(", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 1q`D(sg%pS(");
      String string0 = denseDataPoint0.getDescription();
      assertEquals("1q`D(sg%pS(", denseDataPoint0.getID());
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      String string0 = denseDataPoint0.getID();
      assertEquals("MqmD(sg%pS(", string0);
      assertEquals(0, denseDataPoint0.getFeatureCount());
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      assertEquals((-1.0), denseDataPoint0.getCached(), 0.01);
      
      denseDataPoint0.setCached(0.0);
      assertEquals(0.0, denseDataPoint0.getCached(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.setLabel(1527.4253F);
      float float0 = denseDataPoint0.getLabel();
      assertEquals(1527.4253F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.setID("0 MqmD(sg%pS(");
      assertEquals("0 MqmD(sg%pS(", denseDataPoint0.getID());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DenseDataPoint denseDataPoint0 = new DenseDataPoint("0 MqmD(sg%pS(");
      denseDataPoint0.setDescription("Relevance label cannot be negative. System will now exit.");
      assertEquals("Relevance label cannot be negative. System will now exit.", denseDataPoint0.getDescription());
  }
}
