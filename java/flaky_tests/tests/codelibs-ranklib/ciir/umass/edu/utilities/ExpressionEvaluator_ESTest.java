/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 02 16:56:21 GMT 2022
 */

package ciir.umass.edu.utilities;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ciir.umass.edu.utilities.ExpressionEvaluator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpressionEvaluator_ESTest extends ExpressionEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown error in ExpressionEvaluator::eval() with \"/\"
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Stack expressionEvaluator_Stack0 = expressionEvaluator0.new Stack();
      expressionEvaluator_Stack0.push("");
      expressionEvaluator_Stack0.push("");
      String string0 = expressionEvaluator_Stack0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      String string0 = expressionEvaluator0.getRPN("+");
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      double double0 = expressionEvaluator0.eval("0d");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.getRPN("ciir.umass.edu.utilities.RankLibError");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: \"ciir.umass.edu.utilities.RankLibError\" is not a valid token.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.getRPN((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.utilities.ExpressionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ciir.umass.edu.utilities.ExpressionEvaluator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Stack expressionEvaluator_Stack0 = expressionEvaluator0.new Stack();
      expressionEvaluator_Stack0.push("");
      String string0 = expressionEvaluator_Stack0.pop();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Queue expressionEvaluator_Queue0 = expressionEvaluator0.new Queue();
      expressionEvaluator_Queue0.enqueue("7`?>W@GZ'");
      String string0 = expressionEvaluator_Queue0.toString();
      assertEquals("7`?>W@GZ'", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Queue expressionEvaluator_Queue0 = expressionEvaluator0.new Queue();
      int int0 = expressionEvaluator_Queue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Stack expressionEvaluator_Stack0 = expressionEvaluator0.new Stack();
      int int0 = expressionEvaluator_Stack0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown error in ExpressionEvaluator::eval() with \"-\"
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown error in ExpressionEvaluator::eval() with \"+\"
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator expressionEvaluator1 = new ExpressionEvaluator();
      assertFalse(expressionEvaluator1.equals((Object)expressionEvaluator0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Invalid expression: \"(\". Parentheses mismatched.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("ln*:FU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Invalid expression: \"ln*:FU\". Function specification requires parentheses.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("ln");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Invalid expression: \"ln\". Function specification requires parentheses.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("/7*'\"!A|Ikzt9a0'F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: \"'\"!A|Ikzt9a0'F\" is not a valid token.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("/0^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown error in ExpressionEvaluator::eval() with \"/0^\"
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("0 * -");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown error in ExpressionEvaluator::eval() with \"0 * -\"
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      double double0 = expressionEvaluator0.eval("sqrt(1)/exp(^2)");
      assertEquals(0.1353352832366127, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval(")/y`M|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: Invalid expression: \")/y`M|\". Parentheses mismatched.
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Stack expressionEvaluator_Stack0 = expressionEvaluator0.new Stack();
      String string0 = expressionEvaluator_Stack0.pop();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Queue expressionEvaluator_Queue0 = expressionEvaluator0.new Queue();
      String string0 = expressionEvaluator_Queue0.dequeue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      ExpressionEvaluator.Queue expressionEvaluator_Queue0 = expressionEvaluator0.new Queue();
      expressionEvaluator_Queue0.enqueue("");
      expressionEvaluator_Queue0.dequeue();
      assertEquals(0, expressionEvaluator_Queue0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      // Undeclared exception!
      try { 
        expressionEvaluator0.eval("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error: invalid expression: 
         //
         verifyException("ciir.umass.edu.utilities.RankLibError", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        ExpressionEvaluator.main(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExpressionEvaluator expressionEvaluator0 = new ExpressionEvaluator();
      String string0 = expressionEvaluator0.getRPN("");
      assertEquals("", string0);
  }
}
