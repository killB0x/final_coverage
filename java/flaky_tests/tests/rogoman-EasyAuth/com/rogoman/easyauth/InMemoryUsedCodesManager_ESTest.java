/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 07 13:46:23 GMT 2022
 */

package com.rogoman.easyauth;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.rogoman.easyauth.InMemoryUsedCodesManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InMemoryUsedCodesManager_ESTest extends InMemoryUsedCodesManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InMemoryUsedCodesManager inMemoryUsedCodesManager0 = new InMemoryUsedCodesManager();
      // Undeclared exception!
      try { 
        inMemoryUsedCodesManager0.isCodeUsed(0L, "", "|wAmyCocXt;");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("com.rogoman.easyauth.InMemoryUsedCodesManager$UsedCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryUsedCodesManager inMemoryUsedCodesManager0 = new InMemoryUsedCodesManager(60000L, 3394);
      // Undeclared exception!
      try { 
        inMemoryUsedCodesManager0.addCode((-361L), "&(H*'t5'jI]i", "_=;7GH 9^cjypDMX");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("com.rogoman.easyauth.InMemoryUsedCodesManager$UsedCode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InMemoryUsedCodesManager inMemoryUsedCodesManager0 = null;
      try {
        inMemoryUsedCodesManager0 = new InMemoryUsedCodesManager((-4988L), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }
}
