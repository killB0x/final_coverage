/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:29:51 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.config;

import org.junit.Test;
import static org.junit.Assert.*;
import com.contrastsecurity.cassandra.migration.config.Cluster;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cluster_ESTest extends Cluster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setUsername("CASSANDRA_MIGRATION_CLUSTER_PASSWORD");
      cluster0.getUsername();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setUsername("");
      cluster0.getUsername();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      assertEquals(9042, cluster0.getPort());
      
      cluster0.setPort(0);
      int int0 = cluster0.getPort();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setPassword("1nh1/$=iXl(z#u*0");
      cluster0.getPassword();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setPassword("");
      cluster0.getPassword();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setContactpoints((String[]) null);
      cluster0.getContactpoints();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      String[] stringArray0 = new String[0];
      cluster0.setContactpoints(stringArray0);
      cluster0.getContactpoints();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cluster.ClusterProperty cluster_ClusterProperty0 = Cluster.ClusterProperty.USERNAME;
      String string0 = cluster_ClusterProperty0.getEnvName();
      assertEquals("CASSANDRA_MIGRATION_CLUSTER_USERNAME", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cluster.ClusterProperty cluster_ClusterProperty0 = Cluster.ClusterProperty.USERNAME;
      String string0 = cluster_ClusterProperty0.getName();
      assertEquals("cassandra.migration.cluster.username", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cluster.ClusterProperty cluster_ClusterProperty0 = Cluster.ClusterProperty.PASSWORD;
      String string0 = cluster_ClusterProperty0.getDescription();
      assertEquals("Password for password authenticator", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.setPort((-431));
      int int0 = cluster0.getPort();
      assertEquals((-431), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.getUsername();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.getContactpoints();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      cluster0.getPassword();
      assertEquals(9042, cluster0.getPort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cluster cluster0 = new Cluster();
      int int0 = cluster0.getPort();
      assertEquals(9042, int0);
  }
}
