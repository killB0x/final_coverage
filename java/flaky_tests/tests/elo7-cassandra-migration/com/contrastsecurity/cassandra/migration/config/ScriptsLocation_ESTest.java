/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:28:33 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.ScriptsLocation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptsLocation_ESTest extends ScriptsLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = null;
      try {
        scriptsLocation0 = new ScriptsLocation("IpSKTN7: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown prefix for location. Must be classpath: or filesystem:.IpSKTN7:
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("u\nG");
      assertEquals("u\nG", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isParentOf(scriptsLocation0);
      assertTrue(boolean0);
      assertEquals("", scriptsLocation0.getPath());
      assertTrue(scriptsLocation0.isClassPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      boolean boolean0 = scriptsLocation0.isParentOf(scriptsLocation1);
      assertFalse(scriptsLocation0.isFileSystem());
      assertFalse(boolean0);
      assertEquals("", scriptsLocation1.getPath());
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      scriptsLocation0.isFileSystem();
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      String string0 = scriptsLocation0.getPath();
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      scriptsLocation0.compareTo(scriptsLocation0);
      assertEquals("", scriptsLocation0.getPath());
      assertFalse(scriptsLocation0.isFileSystem());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      int int0 = scriptsLocation1.compareTo(scriptsLocation0);
      assertFalse(scriptsLocation0.isFileSystem());
      assertEquals("", scriptsLocation1.getPath());
      assertEquals("", scriptsLocation0.getPath());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("y5sAW*");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("iLJ/rb@t[SkC");
      int int0 = scriptsLocation1.compareTo(scriptsLocation0);
      assertEquals((-16), int0);
      assertEquals("iLJ/rb@t[SkC", scriptsLocation1.getPath());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = null;
      try {
        scriptsLocation0 = new ScriptsLocation((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isClassPath();
      assertEquals("", scriptsLocation0.getPath());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      boolean boolean0 = scriptsLocation0.isFileSystem();
      assertFalse(boolean0);
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("'nQ^C,");
      String string0 = scriptsLocation0.getDescriptor();
      assertEquals("classpath:'nQ^C,", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("com.contrastsecurity.cassandra.migration.CassandraMigrationException");
      boolean boolean0 = scriptsLocation0.equals("com.contrastsecurity.cassandra.migration.CassandraMigrationException");
      assertFalse(boolean0);
      assertEquals("com/contrastsecurity/cassandra/migration/CassandraMigrationException", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("'nQ$^C,");
      boolean boolean0 = scriptsLocation0.equals((Object) null);
      assertEquals("'nQ$^C,", scriptsLocation0.getPath());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("u");
      boolean boolean0 = scriptsLocation0.equals(scriptsLocation0);
      assertTrue(boolean0);
      assertEquals("u", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("");
      ScriptsLocation scriptsLocation1 = new ScriptsLocation("filesystem:");
      boolean boolean0 = scriptsLocation0.equals(scriptsLocation1);
      assertEquals("", scriptsLocation1.getPath());
      assertEquals("", scriptsLocation0.getPath());
      assertFalse(boolean0);
      assertFalse(scriptsLocation0.isFileSystem());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("&@,/");
      assertEquals("&@,", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("//'nQ$^C,");
      assertEquals("/'nQ$^C,", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("filesystem:");
      scriptsLocation0.isClassPath();
      assertEquals("", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("'nQ$^C,");
      String string0 = scriptsLocation0.getPrefix();
      assertEquals("classpath:", string0);
      assertEquals("'nQ$^C,", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("com.contrastsecurity.cassandra.migration.CassandraMigrationException");
      scriptsLocation0.hashCode();
      assertEquals("com/contrastsecurity/cassandra/migration/CassandraMigrationException", scriptsLocation0.getPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("0aAC>Pp]");
      // Undeclared exception!
      try { 
        scriptsLocation0.compareTo((ScriptsLocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("0C,_NG,P");
      // Undeclared exception!
      try { 
        scriptsLocation0.isParentOf((ScriptsLocation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.config.ScriptsLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("RKuZ,w");
      String string0 = scriptsLocation0.getPath();
      assertEquals("RKuZ,w", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScriptsLocation scriptsLocation0 = new ScriptsLocation("RKuZ,w");
      String string0 = scriptsLocation0.toString();
      assertEquals("classpath:RKuZ,w", string0);
  }
}
