/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:09:35 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.info;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.config.MigrationType;
import com.contrastsecurity.cassandra.migration.info.AppliedMigration;
import com.contrastsecurity.cassandra.migration.info.MigrationInfo;
import com.contrastsecurity.cassandra.migration.info.MigrationInfoContext;
import com.contrastsecurity.cassandra.migration.info.MigrationState;
import com.contrastsecurity.cassandra.migration.info.MigrationVersion;
import com.contrastsecurity.cassandra.migration.info.ResolvedMigration;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MigrationInfo_ESTest extends MigrationInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      migrationInfoContext0.baseline = migrationVersion0;
      Integer integer0 = new Integer((-1807));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "-? |)BL}_.>", migrationType0, "-? |)BL}_.>", integer0, "-? |)BL}_.>", (-1807), false);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.baseline = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "com.contrastsecurity.cassandra.migration.info.MigrationInfo", migrationType0, "", (Integer) null, "", (-1192), false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.target = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      migrationInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationVersion migrationVersion0 = migrationInfo0.getVersion();
      assertNull(migrationVersion0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(2);
      MockDate mockDate0 = new MockDate((-2096L));
      AppliedMigration appliedMigration0 = new AppliedMigration((-3674), 2, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "bSH{/=", 2, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, (MigrationInfoContext) null);
      ResolvedMigration resolvedMigration1 = migrationInfo0.getResolvedMigration();
      assertNull(resolvedMigration1.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(2);
      MockDate mockDate0 = new MockDate((-2096L));
      AppliedMigration appliedMigration0 = new AppliedMigration((-3674), 2, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "bSH{/=", 2, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-305));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "current", migrationType0, "nHq(w", integer0, "nHq(w", 0, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-305));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "current", migrationType0, "current", integer0, "current", (-305), false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertEquals((-305), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, (MigrationInfoContext) null);
      String string0 = migrationInfo0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration(1292, 1292, migrationInfoContext0.schema, "", migrationType0, "", (Integer) null, mockDate0, "", 1292, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(2);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "t", migrationType0, "", integer0, "t", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      Integer integer0 = migrationInfo0.getChecksum();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-16));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "t", migrationType0, "t", integer0, "t", (-16), true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals((-16), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, (MigrationInfoContext) null);
      AppliedMigration appliedMigration0 = migrationInfo0.getAppliedMigration();
      assertNull(appliedMigration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(2);
      MockDate mockDate0 = new MockDate((-2096L));
      AppliedMigration appliedMigration0 = new AppliedMigration((-3674), 2, migrationVersion0, "", migrationType0, "", integer0, mockDate0, "bSH{/=", 2, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals((-3674), appliedMigration1.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration(1292, 1292, migrationInfoContext0.lastResolved, "", migrationType0, "", (Integer) null, mockDate0, "", 1292, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertFalse(appliedMigration1.isSuccess());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(3945);
      MockDate mockDate0 = new MockDate((-1419), 2397, 2, 2790, 2790, (-1041));
      AppliedMigration appliedMigration0 = new AppliedMigration(7, (-1419), migrationInfoContext0.target, "Rv=o", migrationType0, "Q{Zs4C=$", integer0, mockDate0, "Rv=o", 3216, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals((-1419), appliedMigration1.getInstalledRank());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(2);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "t", migrationType0, "", integer0, "t", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals(0, appliedMigration1.getVersionRank());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer((-444));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "f8iNG}\"T9HeQ!M,[4,G", integer0, "", (-444), false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = migrationInfo0.getAppliedMigration();
      assertEquals(0, appliedMigration1.getInstalledRank());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(27);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "n$?X[>P11(dC0Vka!=0", migrationType0, "n$?X[>P11(dC0Vka!=0", integer0, "n$?X[>P11(dC0Vka!=0", 3291, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      AppliedMigration appliedMigration1 = new AppliedMigration((MigrationVersion) null, " mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s", migrationType0, " mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s", integer0, " mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s", 27, true);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, appliedMigration1, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      MockDate mockDate0 = new MockDate();
      AppliedMigration appliedMigration0 = new AppliedMigration(Integer.MAX_VALUE, Integer.MAX_VALUE, migrationInfoContext0.lastResolved, (String) null, migrationType0, (String) null, integer0, mockDate0, (String) null, (-2212), true);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      int int0 = migrationInfo0.compareTo(migrationInfo1);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      // Undeclared exception!
      try { 
        migrationInfo0.getState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getScript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, (MigrationInfoContext) null);
      // Undeclared exception!
      try { 
        migrationInfo0.equals(migrationInfo1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(490);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "FAILED", migrationType0, "FAILED", integer0, "FAILED", 490, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.BASELINE, migrationState0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastResolved);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.ABOVE_TARGET, migrationState0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.baseline = migrationVersion0;
      resolvedMigration0.setVersion(migrationInfoContext0.lastResolved);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.BELOW_BASELINE, migrationState0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getVersion();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(2998);
      MockDate mockDate0 = new MockDate(2998, 0, (-3246));
      AppliedMigration appliedMigration0 = new AppliedMigration(0, 0, migrationVersion0, (String) null, migrationType0, (String) null, integer0, mockDate0, "%tu1", 571, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationVersion migrationVersion1 = migrationInfo0.getVersion();
      assertEquals("<< Latest Version >>", migrationVersion1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.BASELINE;
      resolvedMigration0.setType(migrationType0);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfoContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setVersion(migrationInfoContext0.lastResolved);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      ResolvedMigration resolvedMigration1 = new ResolvedMigration();
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration1, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      Integer integer0 = new Integer(1028);
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, "Hr z", integer0, "Hr z", (-1368), false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, (MigrationInfoContext) null);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(603);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "", migrationType0, "", integer0, "", 603, false);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo1.equals(migrationInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(2782);
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "<< Current Version >>", migrationType0, "<< Current Version >>", integer0, "<< Current Version >>", 2782, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", (Integer) null, "", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Object object0 = new Object();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", (Integer) null, "", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer((-1804));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "-? Y)B4}a.>", migrationType0, "-? Y)B4}a.>", integer0, "-? Y)B4}a.>", (-1804), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationInfo migrationInfo1 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      boolean boolean0 = migrationInfo0.equals(migrationInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", (Integer) null, "", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setDescription(" mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s");
      resolvedMigration0.setType(migrationType0);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Migration Description mismatch for migration << Latest Version >>\n-> Applied to database : \n-> Resolved locally    :  mismatch for migration %s\n-> Applied to database : %s\n-> Resolved locally    : %s", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", (Integer) null, "", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setDescription("");
      resolvedMigration0.setType(migrationType0);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "", (Integer) null, "", 0, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      resolvedMigration0.setType(migrationType0);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer((-728));
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastApplied, "QW,a", migrationType0, "QW,a", integer0, "QW,a", (-728), false);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      resolvedMigration0.setType(migrationType0);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertEquals("Migration Checksum mismatch for migration << Empty Schema >>\n-> Applied to database : -728\n-> Resolved locally    : null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      migrationInfoContext0.baseline = migrationInfoContext0.lastApplied;
      Integer integer0 = new Integer((-1807));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "-? |)BL}_.>", migrationType0, "-? |)BL}_.>", integer0, "-? |)BL}_.>", (-1807), false);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.target = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertEquals("Detected resolved migration not applied to database: << Current Version >>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.outOfOrder = true;
      migrationInfoContext0.target = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNotNull(string0);
      assertEquals("Detected resolved migration not applied to database: << Current Version >>", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(3);
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, (String) null, migrationType0, (String) null, integer0, (String) null, 3, false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertEquals("Detected applied migration not resolved locally: null", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-1828));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4PQ8L8gU'Z9d~", migrationType0, "4PQ8L8gU'Z9d~", integer0, "4PQ8L8gU'Z9d~", (-1828), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.pendingOrFuture = true;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.validate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(5);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 5, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getExecutionTime();
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      Integer integer0 = migrationInfo0.getExecutionTime();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer(5);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 5, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      Date date0 = migrationInfo0.getInstalledOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationType migrationType0 = MigrationType.BASELINE;
      Integer integer0 = new Integer(13);
      MockDate mockDate0 = new MockDate((-699));
      AppliedMigration appliedMigration0 = new AppliedMigration((-699), 13, migrationInfoContext0.lastApplied, (String) null, migrationType0, (String) null, integer0, mockDate0, (String) null, (-699), true);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.OUT_OF_ORDER, migrationState0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      AppliedMigration appliedMigration0 = new AppliedMigration((MigrationVersion) null, "A", migrationType0, "A", (Integer) null, "A", 4, true);
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertTrue(migrationState0.isResolved());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(1049);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 1049, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FUTURE_SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(1049);
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.CQL;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 1049, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FUTURE_FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(1028);
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 1028, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.MISSING_FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1049);
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, (String) null, migrationType0, (String) null, integer0, (String) null, 1049, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.MISSING_SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      Integer integer0 = new Integer((-1809));
      MigrationType migrationType0 = MigrationType.BASELINE;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, " mismatch for migration %s\n-> Applied t database : %s\n-> Resolved locally    : %s", migrationType0, " mismatch for migration %s\n-> Applied t database : %s\n-> Resolved locally    : %s", integer0, "com.contrastsecurity.cassandra.migration.info.MigrationInfo", (-1809), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-1813));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4Q8L68gU'Z9d~", migrationType0, "4Q8L68gU'Z9d~", integer0, "4Q8L68gU'Z9d~", (-1813), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.SUCCESS, migrationState0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-1828));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4Q8L68gU'Z9d~", migrationType0, "4Q8L68gU'Z9d~", integer0, "4Q8L68gU'Z9d~", (-1828), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.FAILED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.outOfOrder = true;
      migrationInfoContext0.target = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.PENDING, migrationState0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.target = migrationVersion0;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.PENDING, migrationState0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      resolvedMigration0.setVersion(migrationVersion0);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      migrationInfoContext0.target = migrationInfoContext0.lastResolved;
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      MigrationState migrationState0 = migrationInfo0.getState();
      assertEquals(MigrationState.IGNORED, migrationState0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-1828));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4PQ8L8gU'Z9d~", migrationType0, "4PQ8L8gU'Z9d~", integer0, "4PQ8L8gU'Z9d~", (-1828), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertEquals("4PQ8L8gU'Z9d~", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      String string0 = migrationInfo0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer((-1828));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4PQ8L8gU'Z9d~", migrationType0, "4PQ8L8gU'Z9d~", integer0, "4PQ8L8gU'Z9d~", (-1828), false);
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.getDescription();
      assertEquals("4PQ8L8gU'Z9d~", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      Integer integer0 = new Integer(0);
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "", migrationType0, "t", integer0, "", 411, true);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      Integer integer1 = migrationInfo0.getChecksum();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.getChecksum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MigrationType migrationType0 = MigrationType.CQL;
      Integer integer0 = new Integer(139);
      Instant instant0 = MockInstant.ofEpochSecond((long) 139, 0L);
      Date date0 = Date.from(instant0);
      AppliedMigration appliedMigration0 = new AppliedMigration(2228, 2228, (MigrationVersion) null, "GqTn", migrationType0, "GqTn", integer0, date0, "|]/vc'qr4~>[mi)y~2", 139, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      MigrationType migrationType1 = migrationInfo0.getType();
      assertSame(migrationType0, migrationType1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, (MigrationInfoContext) null);
      migrationInfo0.getType();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationType migrationType0 = MigrationType.JAVA_DRIVER;
      Integer integer0 = new Integer((-1828));
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationInfoContext0.lastResolved, "4Q8L68gU'Z9d~", migrationType0, "4Q8L68gU'Z9d~", integer0, "4Q8L68gU'Z9d~", (-1828), false);
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, appliedMigration0, migrationInfoContext0);
      String string0 = migrationInfo0.validate();
      assertEquals("Migration Type mismatch for migration << Empty Schema >>\n-> Applied to database : JAVA_DRIVER\n-> Resolved locally    : null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      MigrationType migrationType0 = MigrationType.SCHEMA;
      Integer integer0 = new Integer(27);
      AppliedMigration appliedMigration0 = new AppliedMigration(migrationVersion0, "n$?X[>P11(dC0Vka!=0", migrationType0, "n$?X[>P11(dC0Vka!=0", integer0, "n$?X[>P11(dC0Vka!=0", 3291, false);
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo((ResolvedMigration) null, appliedMigration0, migrationInfoContext0);
      ResolvedMigration resolvedMigration0 = migrationInfo0.getResolvedMigration();
      assertNull(resolvedMigration0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResolvedMigration resolvedMigration0 = new ResolvedMigration();
      MigrationInfoContext migrationInfoContext0 = new MigrationInfoContext();
      MigrationInfo migrationInfo0 = new MigrationInfo(resolvedMigration0, (AppliedMigration) null, migrationInfoContext0);
      // Undeclared exception!
      try { 
        migrationInfo0.compareTo(migrationInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationInfo", e);
      }
  }
}
