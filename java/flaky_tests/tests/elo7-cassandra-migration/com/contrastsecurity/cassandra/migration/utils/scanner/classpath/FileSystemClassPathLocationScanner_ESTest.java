/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:35:41 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.utils.scanner.classpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.utils.scanner.classpath.FileSystemClassPathLocationScanner;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileSystemClassPathLocationScanner_ESTest extends FileSystemClassPathLocationScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile(";)>y6GjPAaL", "~dJ", (File) mockFile0);
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem("Scanning for resources in path: ", "~dJ", mockFile0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem(" (", "%2b", mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.classpath.FileSystemClassPathLocationScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      MockFile mockFile0 = new MockFile("");
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames(".2+jtl`-?/n", uRL0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames("p", (URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, "=c%9Mv>~4twp%'0a{");
      // Undeclared exception!
      try { 
        fileSystemClassPathLocationScanner0.findResourceNames("=c%9Mv>~4twp%'0a{", uRL1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - Error at index 1 in: \"9M\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      MockFile mockFile0 = new MockFile("org.slf4j.Logger", "org.slf4j.Logger");
      MockFile.createTempFile("org.slf4j.Logger", "/home/u/", (File) mockFile0);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNamesFromFileSystem("6CTl", "Y", mockFile0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      MockFile mockFile0 = new MockFile(uRI0);
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      File file0 = MockFile.createTempFile("yf&&|9mfby@1L%?ZX'", (String) null, (File) mockFile0);
      file0.setReadable(false);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames(" (", uRL0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames("/home/us/", uRL0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      FileSystemClassPathLocationScanner fileSystemClassPathLocationScanner0 = new FileSystemClassPathLocationScanner();
      Set<String> set0 = fileSystemClassPathLocationScanner0.findResourceNames("~dJ", uRL0);
      assertEquals(0, set0.size());
  }
}
