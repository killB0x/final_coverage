/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:46:46 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.resolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MigrationInfoHelper_ESTest extends MigrationInfoHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("", "", "n", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong migration name format: (It should look like this: 1_2nDescription)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("", "", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: 
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("#@])+wwAxVf?/^1", "#@])+wwAxVf?/^1", "#@])+wwAxVf?/^1", "#@])+wwAxVf?/^1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription((String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("Gpj?9}oG_zP[vG?&}&", "wV5\"^/lR", "Gpj?9}oG_zP[vG?&}&", "wV5\"^/lR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Wrong migration name format: Gpj?9}oG_zP[vG?&}&(It should look like this: wV5\"^/lR1_2Gpj?9}oG_zP[vG?&}&DescriptionwV5\"^/lR)
         //
         verifyException("com.contrastsecurity.cassandra.migration.resolver.MigrationInfoHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationInfoHelper.extractVersionAndDescription("XE;@1A%7aRxVUGo d", " ", " ", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: E;@1A%7aRxVUGo
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }
}
