/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:49:26 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.utils.scanner.filesystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.utils.scanner.filesystem.FileSystemResource;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FileSystemResource_ESTest extends FileSystemResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xn7/oV>0F?Lh");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemResource fileSystemResource0 = new FileSystemResource("Xn7/oV>0F?Lh");
      byte[] byteArray1 = fileSystemResource0.loadAsBytes();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("7 @M)^");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemResource fileSystemResource0 = new FileSystemResource("7 @M)^");
      byte[] byteArray0 = fileSystemResource0.loadAsBytes();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("");
      String string0 = fileSystemResource0.getLocation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("z$/z");
      String string0 = fileSystemResource0.getFilename();
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("8MFd9<bqUk");
      FileSystemResource fileSystemResource1 = new FileSystemResource("/home/user/8MFd9<bqUk");
      int int0 = fileSystemResource0.compareTo(fileSystemResource1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource(" (encoding: ");
      int int0 = fileSystemResource0.compareTo(fileSystemResource0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("MIiv");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\uFEFF");
      FileSystemResource fileSystemResource0 = new FileSystemResource("MIiv");
      // Undeclared exception!
      try { 
        fileSystemResource0.loadAsString("MIiv");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // MIiv
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("7 @M)^");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemResource fileSystemResource0 = new FileSystemResource("7 @M)^");
      // Undeclared exception!
      try { 
        fileSystemResource0.loadAsString("7 @M)^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 7 @M)^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xn7/oV>0F?Lh");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemResource fileSystemResource0 = new FileSystemResource("Xn7/oV>0F?Lh");
      // Undeclared exception!
      try { 
        fileSystemResource0.loadAsString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("");
      // Undeclared exception!
      try { 
        fileSystemResource0.compareTo((FileSystemResource) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.filesystem.FileSystemResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemResource fileSystemResource0 = null;
      try {
        fileSystemResource0 = new FileSystemResource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("8MFd9<bqUk");
      int int0 = fileSystemResource0.compareTo(fileSystemResource0);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("8MFd9<bqUk");
      String string0 = fileSystemResource0.getLocation();
      assertEquals("8MFd9<bqUk", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("7 @M)^");
      // Undeclared exception!
      try { 
        fileSystemResource0.loadAsString("7 @M)^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to load filesystem resource: 7 @M)^ (encoding: 7 @M)^)
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.filesystem.FileSystemResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("7 @M)^");
      // Undeclared exception!
      try { 
        fileSystemResource0.loadAsBytes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to load filesystem resource: 7 @M)^
         //
         verifyException("com.contrastsecurity.cassandra.migration.utils.scanner.filesystem.FileSystemResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("8MFd9<bqUk");
      String string0 = fileSystemResource0.getLocationOnDisk();
      assertEquals("/home/user/8MFd9<bqUk", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemResource fileSystemResource0 = new FileSystemResource("");
      String string0 = fileSystemResource0.getFilename();
      assertEquals("", string0);
  }
}
