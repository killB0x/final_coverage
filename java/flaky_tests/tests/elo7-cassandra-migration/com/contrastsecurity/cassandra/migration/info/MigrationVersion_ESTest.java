/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 20:18:43 GMT 2022
 */

package com.contrastsecurity.cassandra.migration.info;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.contrastsecurity.cassandra.migration.info.MigrationVersion;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MigrationVersion_ESTest extends MigrationVersion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        MigrationVersion.fromVersion("Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: Invalid version containing non-numeric characters. Only 0..9 and . are allowed. Invalid version: 
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, (String) null);
      String string0 = migrationVersion0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "");
      String string0 = migrationVersion0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "");
      String string0 = migrationVersion0.getVersion();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      MigrationVersion migrationVersion1 = new MigrationVersion((BigInteger) null, "4");
      // Undeclared exception!
      try { 
        migrationVersion0.equals(migrationVersion1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MigrationVersion migrationVersion0 = new MigrationVersion((BigInteger) null, "crrenu");
      // Undeclared exception!
      try { 
        migrationVersion0.compareTo(migrationVersion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.contrastsecurity.cassandra.migration.info.MigrationVersion", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      int int0 = migrationVersion0.compareTo(migrationVersion0);
      assertEquals(0, int0);
      assertEquals("4", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, (String) null);
      MigrationVersion migrationVersion1 = MigrationVersion.LATEST;
      int int0 = migrationVersion0.compareTo(migrationVersion1);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, (String) null);
      MigrationVersion migrationVersion1 = MigrationVersion.LATEST;
      int int0 = migrationVersion1.compareTo(migrationVersion0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationVersion migrationVersion1 = MigrationVersion.fromVersion("4");
      int int0 = migrationVersion0.compareTo(migrationVersion1);
      assertEquals("4", migrationVersion1.toString());
      assertFalse(migrationVersion0.equals((Object)migrationVersion1));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationVersion migrationVersion1 = MigrationVersion.LATEST;
      boolean boolean0 = migrationVersion0.LATEST.equals(migrationVersion1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("5_9");
      MigrationVersion migrationVersion1 = MigrationVersion.EMPTY;
      int int0 = migrationVersion0.compareTo(migrationVersion1);
      assertFalse(migrationVersion1.equals((Object)migrationVersion0));
      assertEquals("5.9", migrationVersion0.toString());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      BigInteger bigInteger0 = BigInteger.TEN;
      MigrationVersion migrationVersion1 = new MigrationVersion(bigInteger0, "current");
      int int0 = migrationVersion1.compareTo(migrationVersion0);
      assertEquals(1, int0);
      assertFalse(migrationVersion0.equals((Object)migrationVersion1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      MigrationVersion migrationVersion1 = MigrationVersion.CURRENT;
      int int0 = migrationVersion0.compareTo(migrationVersion1);
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(migrationVersion1.equals((Object)migrationVersion0));
      assertEquals("4", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      String string0 = migrationVersion0.getVersion();
      assertNotNull(string0);
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      int int0 = migrationVersion0.compareTo(migrationVersion0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.CURRENT;
      int int0 = migrationVersion0.compareTo(migrationVersion0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      int int0 = migrationVersion0.compareTo(migrationVersion0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      MigrationVersion migrationVersion1 = MigrationVersion.fromVersion("4");
      boolean boolean0 = migrationVersion0.equals(migrationVersion1);
      assertEquals("4", migrationVersion1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.LATEST;
      int int0 = migrationVersion0.compareTo((MigrationVersion) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      migrationVersion0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      boolean boolean0 = migrationVersion0.EMPTY.equals("4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, (String) null);
      boolean boolean0 = migrationVersion0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      String string0 = migrationVersion0.EMPTY.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion((String) null);
      assertEquals("<< Empty Schema >>", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("9223372036854775807");
      assertEquals("<< Latest Version >>", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("current");
      assertEquals("<< Current Version >>", migrationVersion0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.fromVersion("4");
      MigrationVersion migrationVersion1 = MigrationVersion.fromVersion("4");
      boolean boolean0 = migrationVersion0.equals(migrationVersion1);
      assertTrue(boolean0);
      assertEquals("4", migrationVersion1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      MigrationVersion migrationVersion0 = new MigrationVersion(bigInteger0, "%FrAc7G~r-_KS]jzg.");
      String string0 = migrationVersion0.getTable();
      assertEquals("cassandra_migration_version", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MigrationVersion migrationVersion0 = MigrationVersion.EMPTY;
      String string0 = migrationVersion0.toString();
      assertEquals("<< Empty Schema >>", string0);
  }
}
