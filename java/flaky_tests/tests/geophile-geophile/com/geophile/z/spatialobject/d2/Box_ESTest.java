/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 07:21:02 GMT 2022
 */

package com.geophile.z.spatialobject.d2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.geophile.z.Space;
import com.geophile.z.space.Region;
import com.geophile.z.space.RegionComparison;
import com.geophile.z.spatialobject.d2.Box;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Box_ESTest extends Box_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Box box0 = new Box();
      Box box1 = new Box(0.0, 0.0, (-1.0), 0.0);
      boolean boolean0 = box1.equals(box0);
      assertEquals(0.0, box1.yHi(), 0.01);
      assertEquals(0.0, box1.xHi(), 0.01);
      assertFalse(box0.equals((Object)box1));
      assertEquals(0.0, box1.xLo(), 0.01);
      assertEquals((-1.0), box1.yLo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Box box0 = new Box(0.0, 2086.16, (-664.05077), 2086.16);
      Box box1 = new Box();
      boolean boolean0 = box0.equals(box1);
      assertEquals(2086.16, box0.yHi(), 0.01);
      assertEquals(0.0, box0.xLo(), 0.01);
      assertEquals(2086.16, box0.xHi(), 0.01);
      assertEquals((-664.05077), box0.yLo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Box box0 = new Box((-1.0), (-1.0), (-1256.917332786805), (-332.9533098605017));
      Box box1 = new Box();
      boolean boolean0 = box0.equals(box1);
      assertEquals((-1256.917332786805), box0.yLo(), 0.01);
      assertEquals((-1.0), box0.xHi(), 0.01);
      assertEquals((-1.0), box0.xLo(), 0.01);
      assertEquals((-332.9533098605017), box0.yHi(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Box box0 = new Box();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(470);
      box0.writeTo(byteBuffer0);
      assertEquals(0.0, box0.yLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Box box0 = new Box((-1.0), (-1.0), (-1256.917332786805), (-332.9533098605017));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1345);
      box0.readFrom(byteBuffer0);
      assertEquals(32, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Box box0 = new Box();
      double double0 = box0.yLo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Box box0 = new Box((-3973.41632812), (-972.09395465), (-2768.763), (-354.833193655052));
      double double0 = box0.yLo();
      assertEquals((-2768.763), double0, 0.01);
      assertEquals((-354.833193655052), box0.yHi(), 0.01);
      assertEquals((-972.09395465), box0.xHi(), 0.01);
      assertEquals((-3973.41632812), box0.xLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Box box0 = new Box();
      double double0 = box0.yHi();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Box box0 = new Box((-1.0), (-1.0), (-1256.917332786805), (-332.9533098605017));
      double double0 = box0.yHi();
      assertEquals((-1.0), box0.xLo(), 0.01);
      assertEquals((-1.0), box0.xHi(), 0.01);
      assertEquals((-332.9533098605017), double0, 0.01);
      assertEquals((-1256.917332786805), box0.yLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Box box0 = new Box(1100.907998002651, 1100.907998002651, 2272.05282, 2272.05282);
      double double0 = box0.xLo();
      assertEquals(1100.907998002651, box0.xHi(), 0.01);
      assertEquals(2272.05282, box0.yLo(), 0.01);
      assertEquals(2272.05282, box0.yHi(), 0.01);
      assertEquals(1100.907998002651, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Box box0 = new Box((-1.0), (-1.0), (-1256.917332786805), (-332.9533098605017));
      double double0 = box0.xLo();
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1256.917332786805), box0.yLo(), 0.01);
      assertEquals((-1.0), box0.xHi(), 0.01);
      assertEquals((-332.9533098605017), box0.yHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Box box0 = new Box(0.0, 0.0, 0.0, 0.0);
      double double0 = box0.xHi();
      assertEquals(0.0, box0.yLo(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, box0.xLo(), 0.01);
      assertEquals(0.0, box0.yHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Box box0 = new Box(0.0, 1691.724287594171, 0.0, 1691.724287594171);
      double double0 = box0.xHi();
      assertEquals(1691.724287594171, box0.yHi(), 0.01);
      assertEquals(0.0, box0.xLo(), 0.01);
      assertEquals(0.0, box0.yLo(), 0.01);
      assertEquals(1691.724287594171, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.writeTo((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.readFrom((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.containedBy((Region) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.containedBy((Space) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Box box0 = new Box();
      // Undeclared exception!
      try { 
        box0.compare((Region) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Box box0 = null;
      try {
        box0 = new Box(2735.05272973, 2735.05272973, 2735.05272973, (-480.362655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Box box0 = null;
      try {
        box0 = new Box(581.2241563205572, (-189.4019471835), 581.2241563205572, 581.2241563205572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialobject.d2.Box", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Box box0 = new Box((-270.129897), (-270.129897), (-2591.11), (-2591.11));
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(region0).hiLT(anyInt() , anyDouble());
      doReturn(false).when(region0).loGE(anyInt() , anyDouble());
      doReturn(false, true).when(region0).loGT(anyInt() , anyDouble());
      RegionComparison regionComparison0 = box0.compare(region0);
      assertEquals((-2591.11), box0.yHi(), 0.01);
      assertEquals((-270.129897), box0.xHi(), 0.01);
      assertEquals((-2591.11), box0.yLo(), 0.01);
      assertEquals(RegionComparison.REGION_OUTSIDE_OBJECT, regionComparison0);
      assertEquals((-270.129897), box0.xLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(region0).hiLT(anyInt() , anyDouble());
      doReturn(true, true).when(region0).loGE(anyInt() , anyDouble());
      doReturn(true).when(region0).loGT(anyInt() , anyDouble());
      RegionComparison regionComparison0 = box0.compare(region0);
      assertEquals(RegionComparison.REGION_OUTSIDE_OBJECT, regionComparison0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      String string0 = box0.toString();
      assertEquals("(0.0:0.0, 0.0:0.0)", string0);
      
      Region region1 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(region1).hiLT(anyInt() , anyDouble());
      doReturn(true, false).when(region1).loGE(anyInt() , anyDouble());
      RegionComparison regionComparison0 = box0.compare(region1);
      assertEquals(RegionComparison.REGION_OUTSIDE_OBJECT, regionComparison0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(region0).hiLT(anyInt() , anyDouble());
      doReturn(true).when(region0).loGE(anyInt() , anyDouble());
      doReturn(false).when(region0).loGT(anyInt() , anyDouble());
      RegionComparison regionComparison0 = box0.compare(region0);
      assertEquals(RegionComparison.REGION_OUTSIDE_OBJECT, regionComparison0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(region0).hiLT(anyInt() , anyDouble());
      doReturn(false).when(region0).loGE(anyInt() , anyDouble());
      doReturn(false, false).when(region0).loGT(anyInt() , anyDouble());
      RegionComparison regionComparison0 = box0.compare(region0);
      assertEquals(RegionComparison.REGION_OVERLAPS_OBJECT, regionComparison0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(region0).hiGE(anyInt() , anyDouble());
      doReturn(true, true).when(region0).loLE(anyInt() , anyDouble());
      boolean boolean0 = box0.containedBy(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(region0).hiGE(anyInt() , anyDouble());
      doReturn(true, false).when(region0).loLE(anyInt() , anyDouble());
      boolean boolean0 = box0.containedBy(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(region0).hiGE(anyInt() , anyDouble());
      doReturn(true).when(region0).loLE(anyInt() , anyDouble());
      boolean boolean0 = box0.containedBy(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Box box0 = new Box();
      Region region0 = mock(Region.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(region0).loLE(anyInt() , anyDouble());
      boolean boolean0 = box0.containedBy(region0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Box box0 = new Box();
      Box box1 = new Box(0.0, 0.0, 0.0, 1.30602027);
      boolean boolean0 = box0.equals(box1);
      assertEquals(0.0, box1.xHi(), 0.01);
      assertEquals(1.30602027, box1.yHi(), 0.01);
      assertFalse(box1.equals((Object)box0));
      assertEquals(0.0, box1.xLo(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, box1.yLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Box box0 = new Box();
      Box box1 = new Box(0.0, 0.0, (-1.0), (-1.0));
      boolean boolean0 = box0.equals(box1);
      assertEquals((-1.0), box1.yHi(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), box1.yLo(), 0.01);
      assertEquals(0.0, box1.xHi(), 0.01);
      assertEquals(0.0, box1.xLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Box box0 = new Box();
      Box box1 = new Box(0.0, 1085.3798117, 1085.3798117, 1085.3798117);
      boolean boolean0 = box0.equals(box1);
      assertEquals(1085.3798117, box1.yLo(), 0.01);
      assertEquals(1085.3798117, box1.xHi(), 0.01);
      assertEquals(0.0, box1.xLo(), 0.01);
      assertFalse(boolean0);
      assertEquals(1085.3798117, box1.yHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Box box0 = new Box(820.4, 820.4, 1600.05, 1600.05);
      Box box1 = new Box();
      boolean boolean0 = box0.equals(box1);
      assertFalse(boolean0);
      assertEquals(820.4, box0.xHi(), 0.01);
      assertEquals(820.4, box0.xLo(), 0.01);
      assertEquals(1600.05, box0.yLo(), 0.01);
      assertEquals(1600.05, box0.yHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Box box0 = new Box();
      Object object0 = new Object();
      boolean boolean0 = box0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Box box0 = new Box();
      boolean boolean0 = box0.equals(box0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Box box0 = new Box();
      boolean boolean0 = box0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Box box0 = new Box((-1328.611), (-1.0), (-1.0), 3056.92988058821);
      double[] doubleArray0 = box0.arbitraryPoint();
      assertEquals(3056.92988058821, box0.yHi(), 0.01);
      assertArrayEquals(new double[] {(-1328.611), (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1.0), box0.xHi(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Box box0 = new Box((-1.0), (-1.0), (-1256.917332786805), (-332.9533098605017));
      double double0 = box0.xHi();
      assertEquals((-1.0), box0.xLo(), 0.01);
      assertEquals((-1256.917332786805), box0.yLo(), 0.01);
      assertEquals((-332.9533098605017), box0.yHi(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Box box0 = new Box((-1328.611), (-1.0), (-1.0), 3056.92988058821);
      double double0 = box0.yHi();
      assertEquals((-1328.611), box0.xLo(), 0.01);
      assertEquals((-1.0), box0.xHi(), 0.01);
      assertEquals((-1.0), box0.yLo(), 0.01);
      assertEquals(3056.92988058821, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Box box0 = new Box(820.4, 820.4, 1600.05, 1600.05);
      double double0 = box0.yLo();
      assertEquals(820.4, box0.xLo(), 0.01);
      assertEquals(820.4, box0.xHi(), 0.01);
      assertEquals(1600.05, box0.yHi(), 0.01);
      assertEquals(1600.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Box box0 = new Box();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      // Undeclared exception!
      try { 
        box0.readFrom(byteBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Box box0 = new Box(740.754016, 740.754016, 2606.3513306031514, 2606.3513306031514);
      box0.hashCode();
      assertEquals(2606.3513306031514, box0.yHi(), 0.01);
      assertEquals(740.754016, box0.xHi(), 0.01);
      assertEquals(740.754016, box0.xLo(), 0.01);
      assertEquals(2606.3513306031514, box0.yLo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Box box0 = new Box();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        box0.writeTo(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Box box0 = new Box();
      int int0 = box0.maxZ();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Box box0 = new Box();
      double double0 = box0.xLo();
      assertEquals(0.0, double0, 0.01);
  }
}
