/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 07:27:40 GMT 2022
 */

package com.geophile.z.index.sortedarray;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.geophile.z.Record;
import com.geophile.z.index.RecordWithSpatialObject;
import com.geophile.z.index.sortedarray.SortedArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SortedArray_ESTest extends SortedArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      Object[] objectArray0 = new Object[2];
      sortedArray_OfBaseRecord0.records = objectArray0;
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      assertEquals("SortedArray(1286)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.deleteRecord(0);
      assertEquals("SortedArray(1206)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = sortedArray_OfBaseRecord0.newRecord();
      recordWithSpatialObject1.z((-1644L));
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject1);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0, record_Filter0);
      assertEquals("SortedArray(1127)", sortedArray_OfBaseRecord0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.newRecord();
      assertEquals("SortedArray(1125)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      int int0 = sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
      assertEquals("SortedArray(1073)", sortedArray_OfBaseRecord0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      int int0 = sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
      assertEquals("SortedArray(1013)", sortedArray_OfBaseRecord0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.cursor();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
      assertEquals("SortedArray(999)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.n = (-1);
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.remove((-1049L), (Record.Filter<RecordWithSpatialObject>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sortedArray_OfBaseRecord0;
      sortedArray_OfBaseRecord0.records = objectArray0;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.remove(1L, (Record.Filter<RecordWithSpatialObject>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord cannot be cast to class com.geophile.z.Record (com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord and com.geophile.z.Record are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @420b2293)
         //
         verifyException("com.geophile.z.index.sortedarray.SortedArray$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.n = 62;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.remove(0L, (Record.Filter<RecordWithSpatialObject>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 62
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      Object[] objectArray0 = new Object[1];
      sortedArray_OfBaseRecord0.records = objectArray0;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.deleteRecord(2676);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.n = 617;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.cursor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      Object[] objectArray0 = new Object[5];
      sortedArray_OfBaseRecord0.records = objectArray0;
      sortedArray_OfBaseRecord0.n = (-1959);
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.cursor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1959)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) sortedArray_OfBaseRecord0;
      sortedArray_OfBaseRecord0.records = objectArray0;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.cursor();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord cannot be cast to class com.geophile.z.Record (com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord and com.geophile.z.Record are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @420b2293)
         //
         verifyException("com.geophile.z.index.sortedarray.SortedArray$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      Object[] objectArray0 = new Object[0];
      sortedArray_OfBaseRecord0.records = objectArray0;
      sortedArray_OfBaseRecord0.n = 41;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.cursor();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 41
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.n = (-293);
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-293)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      Object[] objectArray0 = new Object[3];
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      objectArray0[0] = (Object) sortedArray_OfBaseRecord0;
      sortedArray_OfBaseRecord0.records = objectArray0;
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord cannot be cast to class com.geophile.z.Record (com.geophile.z.index.sortedarray.SortedArray$OfBaseRecord and com.geophile.z.Record are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @420b2293)
         //
         verifyException("com.geophile.z.index.sortedarray.SortedArray$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.cursor();
      sortedArray_OfBaseRecord0.n = 435;
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.binarySearch(recordWithSpatialObject0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 435
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.n = 2146023767;
      // Undeclared exception!
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.n = (-833);
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index -833 out of bounds for length 20
         //
         verifyException("com.geophile.z.index.sortedarray.SortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      boolean boolean0 = sortedArray_OfBaseRecord0.stableRecords();
      assertEquals("SortedArray(567)", sortedArray_OfBaseRecord0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = sortedArray_OfBaseRecord0.remove((-316L), record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(503)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.cursor();
      sortedArray_OfBaseRecord0.cursor();
      //  // Unstable assertion: assertEquals("SortedArray(489)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0, record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(412)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      RecordWithSpatialObject recordWithSpatialObject1 = new RecordWithSpatialObject();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      recordWithSpatialObject1.z(1000000033L);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject1);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0L, record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(334)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0L, record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(246)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0, record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(158)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.z((-213L));
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = sortedArray_OfBaseRecord0.newRecord();
      sortedArray_OfBaseRecord0.add(recordWithSpatialObject1);
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(record_Filter0).select(any(com.geophile.z.index.RecordWithSpatialObject.class));
      boolean boolean0 = sortedArray_OfBaseRecord0.remove(0L, record_Filter0);
      //  // Unstable assertion: assertEquals("SortedArray(59)", sortedArray_OfBaseRecord0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.deleteRecord((-2146884460));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      Record.Filter<RecordWithSpatialObject> record_Filter0 = (Record.Filter<RecordWithSpatialObject>) mock(Record.Filter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sortedArray_OfBaseRecord0.remove(0L, record_Filter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      String string0 = sortedArray_OfBaseRecord0.toString();
      //  // Unstable assertion: assertEquals("SortedArray(12)", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      sortedArray_OfBaseRecord0.reset();
      //  // Unstable assertion: assertEquals("SortedArray(7)", sortedArray_OfBaseRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SortedArray.OfBaseRecord sortedArray_OfBaseRecord0 = new SortedArray.OfBaseRecord();
      boolean boolean0 = sortedArray_OfBaseRecord0.blindUpdates();
      assertEquals("SortedArray(0)", sortedArray_OfBaseRecord0.toString());
      assertFalse(boolean0);
  }
}
