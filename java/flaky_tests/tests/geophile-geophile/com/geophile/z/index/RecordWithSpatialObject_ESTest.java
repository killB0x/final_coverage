/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 07:31:32 GMT 2022
 */

package com.geophile.z.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.geophile.z.Record;
import com.geophile.z.SpatialObject;
import com.geophile.z.index.RecordWithSpatialObject;
import com.geophile.z.spatialobject.d2.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecordWithSpatialObject_ESTest extends RecordWithSpatialObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory0 = new RecordWithSpatialObject.Factory();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Point point0 = new Point(0.0, 0.0);
      recordWithSpatialObject0.spatialObject((SpatialObject) point0);
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory1 = recordWithSpatialObject_Factory0.setup(point0);
      RecordWithSpatialObject recordWithSpatialObject1 = recordWithSpatialObject_Factory1.newRecord();
      boolean boolean0 = recordWithSpatialObject1.equals(recordWithSpatialObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory0 = new RecordWithSpatialObject.Factory();
      Point point0 = new Point(67.5944380714627, 0.0);
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory1 = recordWithSpatialObject_Factory0.setup(point0);
      RecordWithSpatialObject recordWithSpatialObject1 = recordWithSpatialObject_Factory1.newRecord();
      boolean boolean0 = recordWithSpatialObject0.equals(recordWithSpatialObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.z(522L);
      long long0 = recordWithSpatialObject0.z();
      assertEquals(522L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.z((-2283L));
      long long0 = recordWithSpatialObject0.z();
      assertEquals((-2283L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Point point0 = new Point(0.0, 0.0);
      recordWithSpatialObject0.spatialObject((SpatialObject) point0);
      SpatialObject spatialObject0 = recordWithSpatialObject0.spatialObject();
      assertEquals(1, spatialObject0.maxZ());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      // Undeclared exception!
      try { 
        recordWithSpatialObject0.copyTo((Record) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.index.RecordWithSpatialObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.spatialObject((SpatialObject) null);
      assertEquals(0L, recordWithSpatialObject0.z());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      // Undeclared exception!
      try { 
        recordWithSpatialObject0.copyTo(recordWithSpatialObject0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.index.RecordWithSpatialObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory0 = new RecordWithSpatialObject.Factory();
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      RecordWithSpatialObject recordWithSpatialObject1 = recordWithSpatialObject_Factory0.newRecord();
      recordWithSpatialObject0.copyTo(recordWithSpatialObject1);
      assertNotSame(recordWithSpatialObject0, recordWithSpatialObject1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      RecordWithSpatialObject.Factory recordWithSpatialObject_Factory0 = new RecordWithSpatialObject.Factory();
      Point point0 = new Point(0.0, 0.0);
      recordWithSpatialObject_Factory0.setup(point0);
      RecordWithSpatialObject recordWithSpatialObject1 = recordWithSpatialObject_Factory0.newRecord();
      boolean boolean0 = recordWithSpatialObject1.equals(recordWithSpatialObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      // Undeclared exception!
      try { 
        recordWithSpatialObject0.equals(recordWithSpatialObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.index.RecordWithSpatialObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Object object0 = new Object();
      boolean boolean0 = recordWithSpatialObject0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      boolean boolean0 = recordWithSpatialObject0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      long long0 = recordWithSpatialObject0.z();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      SpatialObject spatialObject0 = recordWithSpatialObject0.spatialObject();
      assertNull(spatialObject0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      String string0 = recordWithSpatialObject0.toString();
      assertEquals("(0x0000000000000000: null)", string0);
  }
}
