/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 07:32:31 GMT 2022
 */

package com.geophile.z;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.geophile.z.Pair;
import com.geophile.z.SpatialObject;
import com.geophile.z.index.RecordWithSpatialObject;
import com.geophile.z.spatialobject.d2.Box;
import com.geophile.z.spatialobject.d2.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      Point point0 = new Point(623.963197458, 623.963197458);
      recordWithSpatialObject0.spatialObject((SpatialObject) point0);
      pair0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      Box box0 = new Box(0.0, 697.3, 0.0, 697.3);
      recordWithSpatialObject0.spatialObject((SpatialObject) box0);
      boolean boolean0 = pair1.equals(pair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      // Undeclared exception!
      try { 
        pair1.equals(pair0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.index.RecordWithSpatialObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Box box0 = new Box(896.0, 1845.57, 0.0, 1845.57);
      recordWithSpatialObject0.spatialObject((SpatialObject) box0);
      RecordWithSpatialObject recordWithSpatialObject1 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject1, recordWithSpatialObject0);
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject1, recordWithSpatialObject1);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      RecordWithSpatialObject recordWithSpatialObject1 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject1, recordWithSpatialObject1);
      Box box0 = new Box(0.0, 697.3, 0.0, 697.3);
      recordWithSpatialObject1.spatialObject((SpatialObject) box0);
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>((RecordWithSpatialObject) null, (RecordWithSpatialObject) null);
      RecordWithSpatialObject recordWithSpatialObject0 = pair0.right();
      assertNull(recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      recordWithSpatialObject0.z(569L);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.right();
      assertSame(recordWithSpatialObject1, recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.z((-2331L));
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.right();
      assertEquals((-2331L), recordWithSpatialObject1.z());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>((RecordWithSpatialObject) null, (RecordWithSpatialObject) null);
      RecordWithSpatialObject recordWithSpatialObject0 = pair0.left();
      assertNull(recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      recordWithSpatialObject0.z(569L);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.left();
      assertSame(recordWithSpatialObject0, recordWithSpatialObject1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      recordWithSpatialObject0.z((-1213L));
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.left();
      assertSame(recordWithSpatialObject1, recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>((RecordWithSpatialObject) null, (RecordWithSpatialObject) null);
      // Undeclared exception!
      try { 
        pair0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject1);
      Box box0 = new Box();
      recordWithSpatialObject0.spatialObject((SpatialObject) box0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      Box box0 = new Box();
      recordWithSpatialObject0.spatialObject((SpatialObject) box0);
      RecordWithSpatialObject recordWithSpatialObject1 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair1 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject1, recordWithSpatialObject0);
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      boolean boolean0 = pair0.equals(recordWithSpatialObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>((RecordWithSpatialObject) null, (RecordWithSpatialObject) null);
      boolean boolean0 = pair0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.right();
      assertSame(recordWithSpatialObject0, recordWithSpatialObject1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      RecordWithSpatialObject recordWithSpatialObject1 = pair0.left();
      assertSame(recordWithSpatialObject1, recordWithSpatialObject0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RecordWithSpatialObject recordWithSpatialObject0 = new RecordWithSpatialObject();
      Pair<RecordWithSpatialObject, RecordWithSpatialObject> pair0 = new Pair<RecordWithSpatialObject, RecordWithSpatialObject>(recordWithSpatialObject0, recordWithSpatialObject0);
      String string0 = pair0.toString();
      assertEquals("((0x0000000000000000: null), (0x0000000000000000: null))", string0);
  }
}
