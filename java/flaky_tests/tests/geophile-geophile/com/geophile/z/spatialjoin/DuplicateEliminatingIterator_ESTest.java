/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 23 07:34:28 GMT 2022
 */

package com.geophile.z.spatialjoin;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.geophile.z.spatialjoin.DuplicateEliminatingIterator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DuplicateEliminatingIterator_ESTest extends DuplicateEliminatingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-3611));
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(integer0).when(iterator0).next();
      DuplicateEliminatingIterator<Object> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Object>(iterator0);
      duplicateEliminatingIterator0.next();
      // Undeclared exception!
      try { 
        duplicateEliminatingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialjoin.DuplicateEliminatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DuplicateEliminatingIterator<Integer> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Integer>((Iterator<Integer>) null);
      // Undeclared exception!
      try { 
        duplicateEliminatingIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialjoin.DuplicateEliminatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-3611));
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn(integer0).when(iterator0).next();
      DuplicateEliminatingIterator<Object> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Object>(iterator0);
      duplicateEliminatingIterator0.next();
      boolean boolean0 = duplicateEliminatingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DuplicateEliminatingIterator<Integer> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Integer>((Iterator<Integer>) null);
      // Undeclared exception!
      try { 
        duplicateEliminatingIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialjoin.DuplicateEliminatingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-3611));
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn(integer0).when(iterator0).next();
      DuplicateEliminatingIterator<Object> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Object>(iterator0);
      boolean boolean0 = duplicateEliminatingIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DuplicateEliminatingIterator<Integer> duplicateEliminatingIterator0 = new DuplicateEliminatingIterator<Integer>((Iterator<Integer>) null);
      // Undeclared exception!
      try { 
        duplicateEliminatingIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.geophile.z.spatialjoin.DuplicateEliminatingIterator", e);
      }
  }
}
