/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 17 20:00:16 GMT 2022
 */

package org.jeasy.states.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jeasy.states.api.Event;
import org.jeasy.states.api.EventHandler;
import org.jeasy.states.api.State;
import org.jeasy.states.core.TransitionImpl;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransitionImpl_ESTest extends TransitionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      Class<Event> class0 = Event.class;
      transitionImpl0.setEventType(class0);
      State state0 = new State("");
      transitionImpl0.setSourceState(state0);
      transitionImpl0.hashCode();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("=tO@'&aEN9=/7fi*x");
      transitionImpl0.setSourceState(state0);
      transitionImpl0.hashCode();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("");
      transitionImpl0.setTargetState(state0);
      transitionImpl0.getTargetState();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("=tO@'&aEN9=/7fi*x");
      transitionImpl0.setSourceState(state0);
      transitionImpl0.getSourceState();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.setName((String) null);
      String string0 = transitionImpl0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.setName("");
      String string0 = transitionImpl0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      EventHandler<Event> eventHandler0 = (EventHandler<Event>) mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      transitionImpl0.setEventHandler(eventHandler0);
      transitionImpl0.getEventHandler();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      // Undeclared exception!
      try { 
        transitionImpl0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeasy.states.core.TransitionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("");
      transitionImpl0.setSourceState(state0);
      transitionImpl0.setTargetState(state0);
      EventHandler<Event> eventHandler0 = (EventHandler<Event>) mock(EventHandler.class, new ViolatedAssumptionAnswer());
      transitionImpl0.setEventHandler(eventHandler0);
      String string0 = transitionImpl0.toString();
      //  // Unstable assertion: assertEquals("Transition{name='transition', sourceState=, targetState=, eventType=null, eventHandler=org.jeasy.states.api.EventHandler$MockitoMock$1726193092}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State(", timestamp=");
      transitionImpl0.setSourceState(state0);
      transitionImpl0.setTargetState(state0);
      String string0 = transitionImpl0.toString();
      assertEquals("Transition{name='transition', sourceState=, timestamp=, targetState=, timestamp=, eventType=null}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("o|VedVP*%Ex");
      transitionImpl0.setSourceState(state0);
      Class<Event> class0 = Event.class;
      transitionImpl0.setEventType(class0);
      Class<Event> class1 = transitionImpl0.getEventType();
      TransitionImpl<Event> transitionImpl1 = new TransitionImpl<Event>();
      transitionImpl1.setEventType(class1);
      assertFalse(transitionImpl0.equals((Object)transitionImpl1));
      
      transitionImpl1.setSourceState(state0);
      boolean boolean0 = transitionImpl0.equals(transitionImpl1);
      assertTrue(transitionImpl0.equals((Object)transitionImpl1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      Class<Event> class0 = Event.class;
      transitionImpl0.setEventType(class0);
      Class<Event> class1 = transitionImpl0.getEventType();
      TransitionImpl<Event> transitionImpl1 = new TransitionImpl<Event>();
      transitionImpl1.setEventType(class1);
      // Undeclared exception!
      try { 
        transitionImpl0.equals(transitionImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeasy.states.core.TransitionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      Class<Event> class0 = Event.class;
      boolean boolean0 = transitionImpl0.equals(class0);
      assertFalse(boolean0);
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      boolean boolean0 = transitionImpl0.equals((Object) null);
      assertEquals("transition", transitionImpl0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      boolean boolean0 = transitionImpl0.equals(transitionImpl0);
      assertTrue(boolean0);
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.getTargetState();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.getEventType();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.getEventHandler();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      Class<Event> class0 = Event.class;
      transitionImpl0.setEventType(class0);
      TransitionImpl<Event> transitionImpl1 = new TransitionImpl<Event>();
      boolean boolean0 = transitionImpl0.equals(transitionImpl1);
      assertFalse(boolean0);
      assertEquals("transition", transitionImpl1.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      State state0 = new State("o|VedVP*%Ex");
      transitionImpl0.setSourceState(state0);
      Class<Event> class0 = Event.class;
      transitionImpl0.setEventType(class0);
      Class<Event> class1 = transitionImpl0.getEventType();
      TransitionImpl<Event> transitionImpl1 = new TransitionImpl<Event>();
      transitionImpl1.setEventType(class1);
      boolean boolean0 = transitionImpl0.equals(transitionImpl1);
      assertEquals("transition", transitionImpl1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      String string0 = transitionImpl0.getName();
      assertEquals("transition", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      transitionImpl0.getSourceState();
      assertEquals("transition", transitionImpl0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransitionImpl<Event> transitionImpl0 = new TransitionImpl<Event>();
      // Undeclared exception!
      try { 
        transitionImpl0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jeasy.states.core.TransitionImpl", e);
      }
  }
}
