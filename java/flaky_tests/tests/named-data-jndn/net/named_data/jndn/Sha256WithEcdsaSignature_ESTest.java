/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:57:19 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.security.ValidityPeriod;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Sha256WithEcdsaSignature_ESTest extends Sha256WithEcdsaSignature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = new ValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod((-2653.743570709711), (-2653.743570709711));
      sha256WithEcdsaSignature0.setValidityPeriod(validityPeriod0);
      ValidityPeriod validityPeriod2 = sha256WithEcdsaSignature0.getValidityPeriod();
      assertNotSame(validityPeriod2, validityPeriod1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = new ValidityPeriod((-1.0), (-592.328));
      validityPeriod0.setPeriod((-1.0), 0.0);
      sha256WithEcdsaSignature0.setValidityPeriod(validityPeriod0);
      ValidityPeriod validityPeriod1 = sha256WithEcdsaSignature0.getValidityPeriod();
      assertEquals(0.0, validityPeriod1.getNotBefore(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      ValidityPeriod validityPeriod1 = validityPeriod0.setPeriod(218.48020113405, 1423.021116905);
      ValidityPeriod validityPeriod2 = sha256WithEcdsaSignature0.getValidityPeriod();
      assertSame(validityPeriod2, validityPeriod1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Blob blob0 = new Blob("&#4Xb(lYfofI>3^");
      sha256WithEcdsaSignature0.setSignature(blob0);
      Blob blob1 = sha256WithEcdsaSignature0.getSignature();
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = null;
      try {
        sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature((Sha256WithEcdsaSignature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Sha256WithEcdsaSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Sha256WithEcdsaSignature sha256WithEcdsaSignature1 = new Sha256WithEcdsaSignature(sha256WithEcdsaSignature0);
      assertFalse(sha256WithEcdsaSignature1.equals((Object)sha256WithEcdsaSignature0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.NONE;
      keyLocator0.setType(keyLocatorType0);
      long long0 = sha256WithEcdsaSignature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      long long0 = sha256WithEcdsaSignature0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      ValidityPeriod validityPeriod0 = sha256WithEcdsaSignature0.getValidityPeriod();
      validityPeriod0.setPeriod(0.0, 0.0);
      long long0 = sha256WithEcdsaSignature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      sha256WithEcdsaSignature0.setValidityPeriod((ValidityPeriod) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      sha256WithEcdsaSignature0.setKeyLocator((KeyLocator) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      sha256WithEcdsaSignature0.setSignature((Blob) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Object object0 = sha256WithEcdsaSignature0.clone();
      assertNotSame(object0, sha256WithEcdsaSignature0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      sha256WithEcdsaSignature0.setKeyLocator(keyLocator0);
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      Blob blob0 = sha256WithEcdsaSignature0.getSignature();
      sha256WithEcdsaSignature0.setSignature(blob0);
      assertTrue(blob0.isNull());
  }
}
