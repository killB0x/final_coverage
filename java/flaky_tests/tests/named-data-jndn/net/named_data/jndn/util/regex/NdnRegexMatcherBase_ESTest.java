/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:41:34 GMT 2022
 */

package net.named_data.jndn.util.regex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.util.regex.NdnRegexBackrefManager;
import net.named_data.jndn.util.regex.NdnRegexComponentMatcher;
import net.named_data.jndn.util.regex.NdnRegexMatcherBase;
import net.named_data.jndn.util.regex.NdnRegexPseudoMatcher;
import net.named_data.jndn.util.regex.NdnRegexTopMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NdnRegexMatcherBase_ESTest extends NdnRegexMatcherBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Name name0 = new Name();
      NdnRegexTopMatcher ndnRegexTopMatcher0 = new NdnRegexTopMatcher("<.*>*");
      boolean boolean0 = ndnRegexTopMatcher0.match(name0, (-557), 259);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Name name0 = new Name("");
      NdnRegexPseudoMatcher ndnRegexPseudoMatcher0 = new NdnRegexPseudoMatcher();
      boolean boolean0 = ndnRegexPseudoMatcher0.match(name0, 294, (-953));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Name name0 = new Name("}',:A");
      byte[] byteArray0 = new byte[9];
      name0.append(byteArray0);
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name0);
      boolean boolean0 = ndnRegexTopMatcher0.match(name0, 5, 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NdnRegexMatcherBase.Error ndnRegexMatcherBase_Error0 = new NdnRegexMatcherBase.Error("\"ny;]");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Name.Component> arrayList0 = new ArrayList<Name.Component>(8);
      Name name0 = new Name(arrayList0);
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name0, false);
      boolean boolean0 = ndnRegexTopMatcher0.match(name0, 56, (byte)63);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = hmacWithSha256Signature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name0, true);
      ArrayList<Name.Component> arrayList0 = ndnRegexTopMatcher0.getMatchResult();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NdnRegexPseudoMatcher ndnRegexPseudoMatcher0 = new NdnRegexPseudoMatcher();
      ndnRegexPseudoMatcher0.setMatchResult("xYhzDYU4BE~KvO");
      ArrayList<Name.Component> arrayList0 = ndnRegexPseudoMatcher0.getMatchResult();
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("xH\"_", ndnRegexBackrefManager0, false);
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      try { 
        ndnRegexComponentMatcher0.match(name0, (-590), (-590));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Non-exact component search is not supported yet
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("wulnhSV+8ZkY", (NdnRegexBackrefManager) null);
      // Undeclared exception!
      try { 
        ndnRegexComponentMatcher0.match((Name) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name name0 = new Name();
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("85<", ndnRegexBackrefManager0);
      // Undeclared exception!
      try { 
        ndnRegexComponentMatcher0.match(name0, (-547), (-547));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[0];
      Name name1 = name0.append(byteArray0);
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name1, true);
      name1.appendVersion(1735);
      boolean boolean0 = ndnRegexTopMatcher0.match(name1, 14, 14);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Name.Component> arrayList0 = new ArrayList<Name.Component>(8);
      Name name0 = new Name(arrayList0);
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name0, false);
      String string0 = ndnRegexTopMatcher0.getExpr();
      assertEquals("^", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NdnRegexPseudoMatcher ndnRegexPseudoMatcher0 = new NdnRegexPseudoMatcher();
      String string0 = ndnRegexPseudoMatcher0.getExpr();
      assertEquals("", string0);
  }
}
