/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:56:13 GMT 2022
 */

package net.named_data.jndn.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.util.RttEstimator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RttEstimator_ESTest extends RttEstimator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      rttEstimator0.addMeasurement((-1.0), 0);
      rttEstimator0.addMeasurement(0.0, 1);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(4, rttEstimator_Options0.k);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      
      rttEstimator_Options0.rtoBackoffMultiplier = 0;
      rttEstimator_Options0.minRto = 0.0;
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      rttEstimator0.backoffRto();
      double double0 = rttEstimator0.getEstimatedRto();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      
      rttEstimator_Options0.rtoBackoffMultiplier = (-698);
      rttEstimator_Options0.minRto = (double) (-1);
      rttEstimator0.backoffRto();
      double double0 = rttEstimator0.getEstimatedRto();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      rttEstimator0.addMeasurement(2, 2);
      double double0 = rttEstimator0.getAvgRtt();
      assertEquals(2.0, double0, 0.01);
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(4, rttEstimator_Options0.k);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      rttEstimator0.addMeasurement((-1.0), 0);
      double double0 = rttEstimator0.getAvgRtt();
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(4, rttEstimator_Options0.k);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RttEstimator rttEstimator0 = null;
      try {
        rttEstimator0 = new RttEstimator((RttEstimator.Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.RttEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      rttEstimator0.addMeasurement(0.0, 2);
      rttEstimator0.addMeasurement(1000.0, 1908874353);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(4, rttEstimator_Options0.k);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      double double0 = rttEstimator0.getMinRtt();
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(4, rttEstimator_Options0.k);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      double double0 = rttEstimator0.getMaxRtt();
      assertEquals(4, rttEstimator_Options0.k);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(4.9E-324, double0, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RttEstimator rttEstimator0 = new RttEstimator();
      rttEstimator0.addMeasurement(1932735300, 1932735300);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      double double0 = rttEstimator0.getAvgRtt();
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(1000.0, rttEstimator_Options0.initialRto, 0.01);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(4, rttEstimator_Options0.k);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RttEstimator.Options rttEstimator_Options0 = new RttEstimator.Options();
      RttEstimator rttEstimator0 = new RttEstimator(rttEstimator_Options0);
      double double0 = rttEstimator0.getEstimatedRto();
      assertEquals(2, rttEstimator_Options0.rtoBackoffMultiplier);
      assertEquals(0.125, rttEstimator_Options0.alpha, 0.01);
      assertEquals(200.0, rttEstimator_Options0.minRto, 0.01);
      assertEquals(1000.0, double0, 0.01);
      assertEquals(0.25, rttEstimator_Options0.beta, 0.01);
      assertEquals(60000.0, rttEstimator_Options0.maxRto, 0.01);
      assertEquals(4, rttEstimator_Options0.k);
  }
}
