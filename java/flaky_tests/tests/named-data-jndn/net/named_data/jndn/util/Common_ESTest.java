/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:08:13 GMT 2022
 */

package net.named_data.jndn.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.ByteBuffer;
import java.util.Date;
import java.util.Random;
import net.named_data.jndn.util.Common;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Common_ESTest extends Common_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[8];
      // Undeclared exception!
      try { 
        Common.computePbkdf2WithHmacSha1(byteArray1, byteArray0, 0, (-738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid iterationCount value
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Common.toHex(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      double double0 = Common.getNowMilliseconds();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(944331445);
      Common.digestSha256(byteBuffer0);
      assertEquals(944331445, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), 24, 24);
      long long0 = Common.dateToMillisecondsSince1970(mockDate0);
      assertEquals((-2243288160000L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[8];
      byte[] byteArray1 = Common.computePbkdf2WithHmacSha1(charArray0, byteArray0, 16, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Common.computePbkdf2WithHmacSha1(byteArray0, byteArray0, (int) (byte)64, (int) (byte)91);
      assertEquals(91, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Common.computeHmacWithSha256(byteArray0, byteBuffer0);
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Common.base64Encode(byteArray0, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Common.base64Decode("Mac OS X");
      String string0 = Common.base64Encode(byteArray0);
      assertEquals("MacO", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.toHex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.murmurHash3(16, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.digestSha256((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.dateToMillisecondsSince1970((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Common.computePbkdf2WithHmacSha1(charArray0, byteArray0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // the salt parameter must not be empty
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.computePbkdf2WithHmacSha1((byte[]) null, (byte[]) null, (-1003), 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Common.computeHmacWithSha256(byteArray0, (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.base64Encode((byte[]) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // base64Encode: Error invoking method: java.lang.reflect.InvocationTargetException
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.base64Encode((byte[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // base64Encode: Error invoking method: java.lang.reflect.InvocationTargetException
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.base64Decode((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // base64Decode: Error invoking method: java.lang.reflect.InvocationTargetException
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long long0 = Common.murmurHash3((-1629386551), byteArray0);
      assertEquals(2561439506L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Common.base64Decode("r qVm");
      long long0 = Common.murmurHash3((-5), byteArray0);
      assertEquals(955122879L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-850L));
      Common.setRandom(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = Common.murmurHash3((-1674), (long) (-1674));
      assertEquals(3038336568L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Common.base64Encode(byteArray0, false);
      assertEquals("AA==", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Common.base64Encode(byteArray0, true);
      assertEquals("AAAAAAAA\n", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Common.base64Decode("");
      String string0 = Common.base64Encode(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Common.toHex(byteArray0);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random random0 = Common.getRandom();
      // Undeclared exception!
      try { 
        Common.setRandom(random0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The random number generator may only be set once
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Random random0 = Common.getRandom();
      Random random1 = Common.getRandom();
      assertSame(random1, random0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Common common0 = new Common();
      assertFalse(common0.platformIsOSX());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        Common.computePbkdf2WithHmacSha1(charArray0, (byte[]) null, 1109, (-1899868278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // the salt parameter must be non-null
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Common.digestSha256(byteArray0);
      String string0 = Common.toHex(byteArray1);
      assertEquals("6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File file0 = Common.getHomeDirectory();
      assertEquals("/home/user", file0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Common.digestSha256((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Common", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = Common.getCurrentDirectory();
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Common.base64Decode("");
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        Common.computeHmacWithSha256(byteArray0, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = Common.getNowMilliseconds();
      assertEquals(1.39240928132E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Date date0 = Common.millisecondsSince1970ToDate(2852L);
      long long0 = Common.dateToMillisecondsSince1970(date0);
      assertEquals(2852L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = Common.platformIsOSX();
      assertFalse(boolean0);
  }
}
