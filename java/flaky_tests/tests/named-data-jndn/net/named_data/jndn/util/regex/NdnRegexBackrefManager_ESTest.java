/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 01:15:29 GMT 2022
 */

package net.named_data.jndn.util.regex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.util.regex.NdnRegexBackrefManager;
import net.named_data.jndn.util.regex.NdnRegexComponentMatcher;
import net.named_data.jndn.util.regex.NdnRegexMatcherBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NdnRegexBackrefManager_ESTest extends NdnRegexBackrefManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("", ndnRegexBackrefManager0);
      ndnRegexBackrefManager0.pushRef(ndnRegexComponentMatcher0);
      ndnRegexBackrefManager0.popRef();
      assertEquals(0, ndnRegexBackrefManager0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("", ndnRegexBackrefManager0);
      int int0 = ndnRegexBackrefManager0.pushRef(ndnRegexComponentMatcher0);
      assertEquals(0, int0);
      
      int int1 = ndnRegexBackrefManager0.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("", ndnRegexBackrefManager0);
      ndnRegexBackrefManager0.pushRef(ndnRegexComponentMatcher0);
      int int0 = ndnRegexBackrefManager0.pushRef(ndnRegexComponentMatcher0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentMatcher ndnRegexComponentMatcher0 = new NdnRegexComponentMatcher("", ndnRegexBackrefManager0);
      ndnRegexBackrefManager0.pushRef(ndnRegexComponentMatcher0);
      NdnRegexMatcherBase ndnRegexMatcherBase0 = ndnRegexBackrefManager0.getBackref(0);
      assertSame(ndnRegexMatcherBase0, ndnRegexComponentMatcher0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      // Undeclared exception!
      try { 
        ndnRegexBackrefManager0.getBackref(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      // Undeclared exception!
      try { 
        ndnRegexBackrefManager0.popRef();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      ndnRegexBackrefManager0.pushRef((NdnRegexMatcherBase) null);
      NdnRegexMatcherBase ndnRegexMatcherBase0 = ndnRegexBackrefManager0.getBackref(0);
      assertNull(ndnRegexMatcherBase0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      int int0 = ndnRegexBackrefManager0.size();
      assertEquals(0, int0);
  }
}
