/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:43:51 GMT 2022
 */

package net.named_data.jndn.util.regex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import net.named_data.jndn.Name;
import net.named_data.jndn.util.regex.NdnRegexBackrefManager;
import net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher;
import net.named_data.jndn.util.regex.NdnRegexPatternListMatcher;
import net.named_data.jndn.util.regex.NdnRegexTopMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NdnRegexComponentSetMatcher_ESTest extends NdnRegexComponentSetMatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexPatternListMatcher ndnRegexPatternListMatcher0 = null;
      try {
        ndnRegexPatternListMatcher0 = new NdnRegexPatternListMatcher("['=]4~", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Component expr error ['=]
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[[}ZUpLM:CbCV0d", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Regexp compile error (no matching ']' in [[}ZUpLM:CbCV0d)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("sha256digest=", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Regexp compile error (cannot parse sha256digest=)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher(".W_>", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Regexp compile error (cannot parse .W_>)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("<2x_/ @>", ndnRegexBackrefManager0);
      ndnRegexComponentSetMatcher0.compile();
      assertEquals("<2x_/ @>", ndnRegexComponentSetMatcher0.getExpr());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[]", ndnRegexBackrefManager0);
      Name name0 = new Name("[]");
      name0.appendSequenceNumber(256L);
      ndnRegexComponentSetMatcher0.isInclusion_ = false;
      boolean boolean0 = ndnRegexComponentSetMatcher0.match(name0, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[]", ndnRegexBackrefManager0);
      Name name0 = new Name("[]");
      boolean boolean0 = ndnRegexComponentSetMatcher0.match(name0, (-124), 104);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[]", ndnRegexBackrefManager0);
      ndnRegexComponentSetMatcher0.isInclusion_ = false;
      // Undeclared exception!
      try { 
        ndnRegexComponentSetMatcher0.match((Name) null, (-493), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("<2J6x/ {>", ndnRegexBackrefManager0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // 2J6x/ {
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher((String) null, ndnRegexBackrefManager0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexPatternListMatcher ndnRegexPatternListMatcher0 = null;
      try {
        ndnRegexPatternListMatcher0 = new NdnRegexPatternListMatcher("[}=]6~", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Component expr error [}=]
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("<.*>*", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Component expr error <.*>*
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("<VE,d:?')D!|<nGn", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Error: angle brackets mismatch
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[_H^Wu_Ee-", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Regexp compile error (no matching ']' in [_H^Wu_Ee-)
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = null;
      try {
        ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("", ndnRegexBackrefManager0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Regexp compile error (cannot parse )
         //
         verifyException("net.named_data.jndn.util.regex.NdnRegexComponentSetMatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Name name0 = new Name("[[}ZLMCb0d");
      NdnRegexTopMatcher ndnRegexTopMatcher0 = NdnRegexTopMatcher.fromName(name0);
      name0.set("EvE");
      boolean boolean0 = ndnRegexTopMatcher0.match(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Name name0 = new Name("[]");
      NdnRegexTopMatcher ndnRegexTopMatcher0 = new NdnRegexTopMatcher("[]", "[]");
      boolean boolean0 = ndnRegexTopMatcher0.match(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NdnRegexBackrefManager ndnRegexBackrefManager0 = new NdnRegexBackrefManager();
      Name name0 = new Name("6B /");
      NdnRegexComponentSetMatcher ndnRegexComponentSetMatcher0 = new NdnRegexComponentSetMatcher("[^]", ndnRegexBackrefManager0);
      // Undeclared exception!
      try { 
        ndnRegexComponentSetMatcher0.match(name0, (-488), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }
}
