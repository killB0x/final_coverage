/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:11:47 GMT 2022
 */

package net.named_data.jndn.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import net.named_data.jndn.Data;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.OnData;
import net.named_data.jndn.OnNetworkNack;
import net.named_data.jndn.OnTimeout;
import net.named_data.jndn.impl.PendingInterestTable;
import net.named_data.jndn.security.v2.CertificateV2;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import net.named_data.jndn.util.ExponentialReExpress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PendingInterestTable_ESTest extends PendingInterestTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout((Face) null, onData0, onTimeout0);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      pendingInterestTable0.add(2399L, interest0, onData0, onTimeout1, onNetworkNack0);
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack1 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      pendingInterestTable0.add(4L, interest0, onData1, onTimeout1, onNetworkNack1);
      pendingInterestTable0.removePendingInterest(2399L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      // Undeclared exception!
      try { 
        pendingInterestTable0.removePendingInterest(10000L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interest interest0 = new Interest("S!QXy964T");
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout((Face) null, (OnData) null, (OnTimeout) null);
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(onNetworkNack0).toString();
      pendingInterestTable0.add(2179L, (Interest) null, (OnData) null, onTimeout0, onNetworkNack0);
      OnNetworkNack onNetworkNack1 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(onNetworkNack1).toString();
      pendingInterestTable0.add(0L, interest0, (OnData) null, onTimeout0, onNetworkNack1);
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      // Undeclared exception!
      try { 
        pendingInterestTable0.extractEntriesForNackInterest(interest0, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.impl.PendingInterestTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout((Face) null, onData0, onTimeout0);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      pendingInterestTable0.add(2399L, interest0, (OnData) null, onTimeout1, onNetworkNack0);
      pendingInterestTable0.add(2399L, interest0, (OnData) null, onTimeout1, (OnNetworkNack) null);
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      // Undeclared exception!
      try { 
        pendingInterestTable0.extractEntriesForExpressedInterest((Data) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Face face0 = new Face(udpTransport0, transport_ConnectionInfo0);
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData1, onTimeout0, 0.0);
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(0L, (Interest) null, onData0, onTimeout1, onNetworkNack0);
      // Undeclared exception!
      try { 
        pendingInterestTable_Entry0.callTimeout();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(onNetworkNack0).toString();
      pendingInterestTable0.add(1, interest0, onData0, (OnTimeout) null, onNetworkNack0);
      pendingInterestTable0.extractEntriesForNackInterest(interest0, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      // Undeclared exception!
      try { 
        pendingInterestTable0.removeEntry((PendingInterestTable.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.impl.PendingInterestTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interest interest0 = new Interest();
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      pendingInterestTable0.add(715L, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      // Undeclared exception!
      try { 
        pendingInterestTable0.extractEntriesForExpressedInterest((Data) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Interest", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interest interest0 = new Interest(";~6Bke9D>S:$r");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face("}{m3s-{sKcr.");
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 0);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry((-1582L), interest0, onData0, onTimeout1, (OnNetworkNack) null);
      boolean boolean0 = pendingInterestTable_Entry0.getIsRemoved();
      assertFalse(boolean0);
      assertEquals((-1582L), pendingInterestTable_Entry0.getPendingInterestId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interest interest0 = new Interest(";~6Bke9D>S:$r");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face("}{m3s-{sKcr.");
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 0);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry((-1582L), interest0, onData0, onTimeout1, (OnNetworkNack) null);
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      
      pendingInterestTable_Entry0.setIsRemoved();
      assertTrue(pendingInterestTable_Entry0.getIsRemoved());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interest interest0 = new Interest(";~6Bke9D>S:$r");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face("}{m3s-{sKcr.");
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 0);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry((-1582L), interest0, onData0, onTimeout1, (OnNetworkNack) null);
      pendingInterestTable_Entry0.getOnNetworkNack();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals((-1582L), pendingInterestTable_Entry0.getPendingInterestId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interest interest0 = new Interest(";~6Bke9D>S:$r");
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      Face face0 = new Face("}{m3s-{sKcr.");
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout(face0, onData0, onTimeout0, (double) 0);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry((-1582L), interest0, onData0, onTimeout1, (OnNetworkNack) null);
      long long0 = pendingInterestTable_Entry0.getPendingInterestId();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals((-1582L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = mock(OnTimeout.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout1 = ExponentialReExpress.makeOnTimeout((Face) null, onData0, onTimeout0);
      OnData onData1 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(0, interest0, onData1, onTimeout1, onNetworkNack0);
      pendingInterestTable_Entry0.getInterest();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry(0, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      boolean boolean0 = pendingInterestTable0.removeEntry(pendingInterestTable_Entry0);
      assertFalse(boolean0);
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      pendingInterestTable0.add(1, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      // Undeclared exception!
      try { 
        pendingInterestTable0.removePendingInterest(0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      Interest interest1 = new Interest(interest0);
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(onNetworkNack0).toString();
      pendingInterestTable0.add(1, interest1, onData0, (OnTimeout) null, onNetworkNack0);
      pendingInterestTable0.extractEntriesForNackInterest(interest0, (ArrayList<PendingInterestTable.Entry>) null);
      assertFalse(interest0.getDidSetCanBePrefix_());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interest interest0 = new Interest();
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(1, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      assertEquals(1L, pendingInterestTable_Entry0.getPendingInterestId());
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      
      pendingInterestTable0.extractEntriesForNackInterest(interest0, arrayList0);
      assertFalse(arrayList0.contains(pendingInterestTable_Entry0));
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest("tJx~Z5r]L");
      Face face0 = new Face("Expecting <rule.for> in rule: ", 1);
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, onData0, (OnTimeout) null, 1581.1634906);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(1, interest0, (OnData) null, onTimeout0, (OnNetworkNack) null);
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals(1L, pendingInterestTable_Entry0.getPendingInterestId());
      
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      CertificateV2 certificateV2_0 = new CertificateV2();
      pendingInterestTable0.extractEntriesForExpressedInterest(certificateV2_0, arrayList0);
      assertFalse(arrayList0.contains(pendingInterestTable_Entry0));
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(1, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      Data data0 = new Data();
      ArrayList<PendingInterestTable.Entry> arrayList0 = new ArrayList<PendingInterestTable.Entry>();
      pendingInterestTable0.extractEntriesForExpressedInterest(data0, arrayList0);
      assertTrue(arrayList0.contains(pendingInterestTable_Entry0));
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interest interest0 = new Interest();
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Face face0 = new Face(")", 1);
      OnTimeout onTimeout0 = ExponentialReExpress.makeOnTimeout(face0, (OnData) null, (OnTimeout) null);
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add((-1L), interest0, (OnData) null, onTimeout0, (OnNetworkNack) null);
      pendingInterestTable_Entry0.callTimeout();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals((-1L), pendingInterestTable_Entry0.getPendingInterestId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      Interest interest0 = new Interest();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(1, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      pendingInterestTable_Entry0.callTimeout();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals(1L, pendingInterestTable_Entry0.getPendingInterestId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interest interest0 = new Interest();
      OnData onData0 = mock(OnData.class, new ViolatedAssumptionAnswer());
      doReturn("?R~miP{{s%61w0T&L").when(onData0).toString();
      OnNetworkNack onNetworkNack0 = mock(OnNetworkNack.class, new ViolatedAssumptionAnswer());
      PendingInterestTable.Entry pendingInterestTable_Entry0 = new PendingInterestTable.Entry(1, interest0, onData0, (OnTimeout) null, onNetworkNack0);
      pendingInterestTable_Entry0.getOnData();
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      assertEquals(1L, pendingInterestTable_Entry0.getPendingInterestId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interest interest0 = new Interest();
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(0, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      boolean boolean0 = pendingInterestTable0.removeEntry(pendingInterestTable_Entry0);
      assertTrue(pendingInterestTable_Entry0.getIsRemoved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interest interest0 = new Interest();
      PendingInterestTable pendingInterestTable0 = new PendingInterestTable();
      PendingInterestTable.Entry pendingInterestTable_Entry0 = pendingInterestTable0.add(0, interest0, (OnData) null, (OnTimeout) null, (OnNetworkNack) null);
      assertFalse(pendingInterestTable_Entry0.getIsRemoved());
      
      pendingInterestTable0.removePendingInterest(0);
      boolean boolean0 = pendingInterestTable0.removeEntry(pendingInterestTable_Entry0);
      assertTrue(pendingInterestTable_Entry0.getIsRemoved());
      assertFalse(boolean0);
  }
}
