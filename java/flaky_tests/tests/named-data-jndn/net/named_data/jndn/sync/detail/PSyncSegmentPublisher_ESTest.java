/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:07:14 GMT 2022
 */

package net.named_data.jndn.sync.detail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.DelegationSet;
import net.named_data.jndn.Face;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.Name;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.pib.PibMemory;
import net.named_data.jndn.security.tpm.TpmBackEndFile;
import net.named_data.jndn.sync.detail.PSyncSegmentPublisher;
import net.named_data.jndn.util.Blob;
import net.named_data.jndn.util.SignedBlob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PSyncSegmentPublisher_ESTest extends PSyncSegmentPublisher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Face face0 = new Face();
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, (KeyChain) null);
      Name name0 = new Name();
      Name name1 = name0.appendSegment(100);
      Name name2 = new Name("&'#ce`,");
      DelegationSet delegationSet0 = new DelegationSet();
      Blob blob0 = delegationSet0.wireEncode();
      // Undeclared exception!
      try { 
        pSyncSegmentPublisher0.publish(name1, name2, blob0, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.PSyncSegmentPublisher", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Face face0 = new Face();
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, (KeyChain) null);
      Name name0 = new Name();
      Name name1 = new Name("&'#ce`,");
      DelegationSet delegationSet0 = new DelegationSet();
      Blob blob0 = delegationSet0.wireEncode();
      // Undeclared exception!
      try { 
        pSyncSegmentPublisher0.publish(name0, name1, blob0, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = new Name();
      Name name1 = name0.appendSegmentOffset((-2234L));
      Blob blob0 = Name.fromEscapedString("net.named_data.jndn.sync.detail.PSyncSegmentPublisher$1");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("net.named_data.jndn.sync.detail.PSyncSegmentPublisher$1");
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.ID;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0, (-3557));
      try { 
        pSyncSegmentPublisher0.publish(name1, name0, blob0, 1528.3410194221, signingInfo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Signing identity `/` does not exist
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Face face0 = new Face();
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, (KeyChain) null);
      Name name0 = new Name();
      KeyLocator keyLocator0 = new KeyLocator();
      Blob blob0 = keyLocator0.getKeyData();
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        pSyncSegmentPublisher0.publish(name0, name0, blob0, (double) 100, signingInfo0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Face face0 = new Face();
      Blob blob0 = Name.fromEscapedString("5_V-HcGqR_v}jf");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.KEY;
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0);
      // Undeclared exception!
      try { 
        pSyncSegmentPublisher0.publish(name0, name0, blob0, 1.0, signingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key name `/` does not follow the naming conventions
         //
         verifyException("net.named_data.jndn.security.pib.PibKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = new Name();
      Name name1 = name0.appendSegmentOffset((-2210L));
      Blob blob0 = Name.fromEscapedString("net.named_data.jndn.sync.detail.PSyncSegmentPublisher$1");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      pibMemory0.setDefaultIdentity(name0);
      try { 
        pSyncSegmentPublisher0.publish(name1, name1, blob0, (double) (-2210L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Signing identity `/%FB%00` does not have default certificate
         //
         verifyException("net.named_data.jndn.security.KeyChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      Blob blob0 = new Blob("CREATE UNIQUE INDEX IF NOT EXISTS                  \n  certIndex ON certificates(certificate_name);     \n");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("\" does not match the nameRegex \"");
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)48;
      ComponentType componentType0 = ComponentType.GENERIC;
      name0.append(byteArray0, componentType0, 114);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0, 0);
      SigningInfo signingInfo0 = new SigningInfo("");
      pSyncSegmentPublisher0.publish(name0, name0, blob0, (double) 1, signingInfo0);
      assertEquals(5L, name0.getChangeCount());
      assertEquals(4, name0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Face face0 = new Face();
      Blob blob0 = Name.fromEscapedString("5_V-HcGqR_v}jf");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      SigningInfo signingInfo0 = new SigningInfo();
      try { 
        pSyncSegmentPublisher0.publish(name0, name0, blob0, (double) 100, signingInfo0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Face face0 = new Face();
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, (KeyChain) null);
      Name name0 = SigningInfo.getDigestSha256Identity();
      Interest interest0 = new Interest(name0);
      ComponentType componentType0 = ComponentType.GENERIC;
      name0.appendNumber((-714L), componentType0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      SignedBlob signedBlob0 = interest0.wireEncode(wireFormat0);
      SigningInfo signingInfo0 = new SigningInfo();
      // Undeclared exception!
      try { 
        pSyncSegmentPublisher0.publish(name0, name0, (Blob) signedBlob0, 1066.355087105, signingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.PSyncSegmentPublisher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Face face0 = new Face();
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile();
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      Name name0 = SigningInfo.getDigestSha256Identity();
      boolean boolean0 = pSyncSegmentPublisher0.replyFromStore(name0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      Blob blob0 = new Blob("CREATE UNIQUE INDEX IF NOT EXISTS                  \n  certIndex ON certificates(certificate_name);     \n");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("CREATE UNIQUE INDEX IF NOT EXISTS                  \n  certIndex ON certificates(certificate_name);     \n");
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)48;
      ComponentType componentType0 = ComponentType.GENERIC;
      Name name1 = name0.append(byteArray0, componentType0, (int) (byte)48);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      pSyncSegmentPublisher0.publish(name0, name1, blob0, (double) 1);
      try { 
        pSyncSegmentPublisher0.replyFromStore(name0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      Blob blob0 = new Blob("CREATE UNIQUE INDEX IF NOT EXISTS                  \n  certIndex ON certificates(certificate_name);     \n");
      PibMemory pibMemory0 = new PibMemory();
      TpmBackEndFile tpmBackEndFile0 = new TpmBackEndFile("CREATE UNIQUE INDEX IF NOT EXISTS                  \n  certIndex ON certificates(certificate_name);     \n");
      KeyChain keyChain0 = new KeyChain(pibMemory0, tpmBackEndFile0);
      PSyncSegmentPublisher pSyncSegmentPublisher0 = new PSyncSegmentPublisher(face0, keyChain0);
      try { 
        pSyncSegmentPublisher0.publish(name0, name0, blob0, (double) 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot send because the socket is not open.  Use connect.
         //
         verifyException("net.named_data.jndn.transport.TcpTransport", e);
      }
  }
}
