/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:05:59 GMT 2022
 */

package net.named_data.jndn.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.sync.DigestTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DigestTree_ESTest extends DigestTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("", (-1997L), 768L);
      boolean boolean0 = digestTree0.update("", (-1997L), (-1997L));
      assertEquals(1, digestTree0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update(">g dM|GV", 0L, 0L);
      boolean boolean0 = digestTree0.update(">g dM|GV", 0L, 1L);
      assertEquals(1, digestTree0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("", (-1960L), 3L);
      digestTree0.update("", 133L, 133L);
      boolean boolean0 = digestTree0.update("", 133L, 133L);
      assertEquals(2, digestTree0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("new comer {0}, session {1}, sequence {2}", 1617L, (-5510L));
      digestTree0.size();
      assertEquals("10700f7d3823942db4fc44d476b629b5080b82ea6df526be2b01d90eb247c0e0", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("", 0, 0);
      digestTree0.get(0);
      assertEquals("1067349f17a2f544cb032d826bbce9e87162a81ffdbedb129ce1363e32352b9d", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("L[4&39", (-1475L), (-4211L));
      digestTree0.update("@QUOE9x7F~P)vf", 618L, 1811L);
      digestTree0.get(1);
      assertEquals("9e5ad5dbb66d252286487ed454c58ad3cd106d12515bc9b5ccd77e787a186ec3", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update(">g dM|GV", 0L, 0L);
      digestTree0.update(">g dM|GV", 1890L, 0L);
      int int0 = digestTree0.find(">g dM|GV", 1890L);
      assertEquals(2, digestTree0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      // Undeclared exception!
      try { 
        digestTree0.update((String) null, 3731L, 3731L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.DigestTree$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("", (-2784L), (-2784L));
      digestTree0.find("", 1L);
      assertEquals("25097400e1f99b66b4bcbb03640d29befab5598894a50f280b0a104686b8a7a7", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("kpuG&k(W56w6#Gk", 1L, 1L);
      int int0 = digestTree0.find("`:9JQhC#_!3`{O!3", 1);
      assertEquals("f75f895dfa8e8e7c3a60748f3d3d044863581bb495b24990ec250806602b6b28", digestTree0.getRoot());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("decode", 383L, 383L);
      int int0 = digestTree0.find("decode", 383L);
      assertEquals("657e284c967873eb8df087cc7e8eb726b3d41f5bc9548d260c24da0f4a33a541", digestTree0.getRoot());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node("n6$FyM+>", 1182L, (-1618L));
      DigestTree.Node digestTree_Node1 = new DigestTree.Node("n6$FyM+>", 1223L, 1182L);
      boolean boolean0 = digestTree_Node0.lessThan(digestTree_Node1);
      assertTrue(boolean0);
      assertEquals("5b16b72d2206e07efd376ea8da02e325915f2d5a3034f925bcd40c756f5cd95c", digestTree_Node0.getDigest());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node(">g dM|GV", 0L, 0L);
      DigestTree.Node digestTree_Node1 = new DigestTree.Node("Dx", (-3605L), 0L);
      boolean boolean0 = digestTree_Node1.lessThan(digestTree_Node0);
      assertEquals("aa523c107b57c260c745a949b4006dfc5c9f2b9d6ad748154279451a8ae81a6e", digestTree_Node1.getDigest());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node(">g dM|GV", 0L, 0L);
      DigestTree.Node digestTree_Node1 = new DigestTree.Node("Dx", 1L, (-3605L));
      boolean boolean0 = digestTree_Node0.lessThan(digestTree_Node1);
      assertTrue(boolean0);
      assertEquals("b9a6ec844c29aa8bf71af40f4c9ee70411713eb170e4bcf8e105642c788422b8", digestTree_Node1.getDigest());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node("5mkRd}(F@S!(h#&", (-1338L), (-1338L));
      boolean boolean0 = digestTree_Node0.lessThan(digestTree_Node0);
      assertEquals("839ad2f8e65b215b9a5dbb68ff3021cd87461fe98c8eb763300a532674de9502", digestTree_Node0.getDigest());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("", 831L, 831L);
      DigestTree.Node digestTree_Node0 = digestTree0.get(0);
      digestTree_Node0.getSequenceNo();
      assertEquals("b05b8bb0b3163a2e137a93b3625bd4f0a0f2570bbc338b9153956f2dd6fde7bf", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node("aI=wEg", 2395L, 1223L);
      String string0 = digestTree_Node0.getDigest();
      assertEquals("58cc9affab605be57adf6385c4ce3eea4adefc36e1fedd8e99e6f069828cfe3c", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node(">g dM|GV", 0L, 0L);
      digestTree_Node0.getDataPrefix();
      assertEquals("cd0062ee4d433d88632ad9ede784c6ca0b4f21555982ddd464900931c5472a60", digestTree_Node0.getDigest());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node(">g dM|GV", 0L, 0L);
      digestTree_Node0.getSessionNo();
      assertEquals("cd0062ee4d433d88632ad9ede784c6ca0b4f21555982ddd464900931c5472a60", digestTree_Node0.getDigest());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.update("00", 1890L, (-943L));
      digestTree0.update("00", (-1), (-943L));
      assertEquals("2eaa953f2dca265dc01b22b25dfc2451b7eaae366919036511a573cca73bcebb", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      // Undeclared exception!
      try { 
        digestTree0.get(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      String string0 = digestTree0.getRoot();
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DigestTree digestTree0 = new DigestTree();
      digestTree0.size();
      assertEquals("00", digestTree0.getRoot());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DigestTree.Node digestTree_Node0 = new DigestTree.Node("aI=wEg", 2395L, 1223L);
      digestTree_Node0.setSequenceNo(1223L);
      assertEquals("58cc9affab605be57adf6385c4ce3eea4adefc36e1fedd8e99e6f069828cfe3c", digestTree_Node0.getDigest());
  }
}
