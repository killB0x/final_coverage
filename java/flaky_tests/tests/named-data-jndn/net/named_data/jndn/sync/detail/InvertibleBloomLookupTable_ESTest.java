/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:27:32 GMT 2022
 */

package net.named_data.jndn.sync.detail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.nio.ByteBuffer;
import java.util.HashSet;
import java.util.zip.ZipException;
import net.named_data.jndn.sync.detail.InvertibleBloomLookupTable;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InvertibleBloomLookupTable_ESTest extends InvertibleBloomLookupTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1277;
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(11);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.equals((InvertibleBloomLookupTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(2836);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(1540);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(28);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable0.listEntries(hashSet0, hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = null;
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.difference((InvertibleBloomLookupTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)123;
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = new InvertibleBloomLookupTable(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      boolean boolean0 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertFalse(boolean0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      Blob blob0 = new Blob((Blob) null);
      assertTrue(blob0.isNull());
      assertNotNull(blob0);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.initialize(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable1.listEntries(hashSet0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable0.erase((-1047L));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet1 = new HashSet<Long>();
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(hashSet1.contains((-1047L)));
      
      boolean boolean1 = invertibleBloomLookupTable0.listEntries(hashSet0, hashSet1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertFalse(hashSet0.contains((-1047L)));
      assertTrue(hashSet1.contains((-1047L)));
      
      invertibleBloomLookupTable1.erase(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable1.erase(0L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable3 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable4 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable4);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable4.erase(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable3.insert(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean2 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable4));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable4);
      assertFalse(boolean2);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable5 = invertibleBloomLookupTable3.difference(invertibleBloomLookupTable2);
      assertNotNull(invertibleBloomLookupTable5);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable4.erase(0L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      boolean boolean3 = invertibleBloomLookupTable2.listEntries(hashSet1, hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable4));
      assertTrue(hashSet0.equals((Object)hashSet1));
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable4);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertFalse(hashSet0.contains(0L));
      assertFalse(hashSet1.contains(0L));
      
      invertibleBloomLookupTable3.insert(3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable1.encode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(3543);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(3932);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      invertibleBloomLookupTable0.initialize(blob0);
      assertFalse(blob0.isNull());
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(1390208809);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1296);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.erase(1296);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      Blob blob1 = new Blob(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(blob1.isNull());
      assertNotNull(blob1);
      assertFalse(blob1.equals((Object)blob0));
      
      try { 
        invertibleBloomLookupTable0.initialize(blob1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.difference(invertibleBloomLookupTable1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // IBLT difference: Both tables must be the same size
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable2.difference(invertibleBloomLookupTable0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // IBLT difference: Both tables must be the same size
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(10);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable0.difference(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable1.insert(4078592089L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(4078592089L));
      
      boolean boolean0 = invertibleBloomLookupTable1.equals(invertibleBloomLookupTable0);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertFalse(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable((-1));
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.encode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1840);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(1916);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean0 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertTrue(boolean0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = new InvertibleBloomLookupTable(11);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable3 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable1.listEntries(hashSet0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable3.erase((-1047L));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet1 = new HashSet<Long>();
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(hashSet1.contains((-1047L)));
      
      boolean boolean1 = invertibleBloomLookupTable3.listEntries(hashSet0, hashSet1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(hashSet0, hashSet1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertFalse(hashSet0.contains((-1047L)));
      assertTrue(hashSet1.contains((-1047L)));
      
      invertibleBloomLookupTable1.erase(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable3.erase(0L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable4 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable4);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable5 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable5);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable5.erase(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable4.insert(11);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean2 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable4);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertTrue(boolean2);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable6 = invertibleBloomLookupTable4.difference(invertibleBloomLookupTable2);
      assertNotNull(invertibleBloomLookupTable6);
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable6.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable6, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable5.erase(0L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean3 = invertibleBloomLookupTable2.equals(invertibleBloomLookupTable0);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable6));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable6);
      assertTrue(boolean3);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable4.insert(3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable4, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable7 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable5);
      assertNotNull(invertibleBloomLookupTable7);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable7.insert(488L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean4 = invertibleBloomLookupTable7.listEntries(hashSet1, hashSet1);
      assertFalse(hashSet1.isEmpty());
      assertEquals(3, hashSet1.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable5));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable4));
      assertFalse(invertibleBloomLookupTable7.equals((Object)invertibleBloomLookupTable6));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable7));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable6));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable5.equals((Object)invertibleBloomLookupTable4));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable5);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable4);
      assertNotSame(invertibleBloomLookupTable7, invertibleBloomLookupTable6);
      assertNotSame(hashSet1, hashSet0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable7);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable6);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable5, invertibleBloomLookupTable4);
      assertTrue(boolean4);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertTrue(hashSet1.contains(0L));
      assertFalse(hashSet1.contains((-1047L)));
      
      Blob blob0 = new Blob("net.named_data.jndn.util.Common$Base64ConverterType");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      try { 
        invertibleBloomLookupTable0.initialize(blob0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // incorrect header check
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      Blob blob0 = new Blob();
      assertTrue(blob0.isNull());
      assertNotNull(blob0);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.initialize(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = null;
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = null;
      try {
        invertibleBloomLookupTable1 = new InvertibleBloomLookupTable((InvertibleBloomLookupTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable3 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable1.listEntries(hashSet0, hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable3.erase((-1047L));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable4 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable4);
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable4.equals((Object)invertibleBloomLookupTable1));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable4.initialize(blob0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The received Invertible Bloom Filter cannot be decoded
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable((-1));
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.initialize(blob0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // The received Invertible Bloom Filter cannot be decoded
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      String string0 = "";
      Blob blob0 = new Blob("");
      assertFalse(blob0.isNull());
      assertNotNull(blob0);
      
      invertibleBloomLookupTable0.initialize(blob0);
      assertFalse(blob0.isNull());
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable1.erase(11);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.erase(1277);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet1 = new HashSet<Long>();
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.listEntries((HashSet<Long>) null, hashSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      boolean boolean0 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable1.insert(359L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = new InvertibleBloomLookupTable(643);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.difference(invertibleBloomLookupTable2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // IBLT difference: Both tables must be the same size
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(5);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable1.difference(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1606);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable0.erase(1606);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      HashSet<Long> hashSet1 = new HashSet<Long>();
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      
      boolean boolean0 = invertibleBloomLookupTable0.listEntries(hashSet0, hashSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(hashSet0.equals((Object)hashSet1));
      assertNotSame(hashSet0, hashSet1);
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(255);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.insert(255);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.erase((-3056L));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(255);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      boolean boolean0 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertFalse(boolean0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains((-3056L)));
      
      boolean boolean1 = invertibleBloomLookupTable1.listEntries(hashSet0, hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertTrue(boolean1);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertFalse(hashSet0.contains((-3056L)));
      
      HashSet<Long> hashSet1 = new HashSet<Long>();
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      assertNotNull(hashSet1);
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertFalse(hashSet1.contains((-3056L)));
      
      boolean boolean2 = hashSet1.add((Long) null);
      assertFalse(hashSet1.isEmpty());
      assertEquals(1, hashSet1.size());
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean2);
      assertFalse(hashSet1.contains((-3056L)));
      
      boolean boolean3 = invertibleBloomLookupTable0.listEntries(hashSet1, hashSet1);
      assertFalse(hashSet1.isEmpty());
      assertEquals(2, hashSet1.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(hashSet1, hashSet0);
      assertTrue(boolean3);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertTrue(hashSet1.contains((-3056L)));
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable0.difference(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.encode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable0.difference(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(2);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.insert(2);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable0.listEntries(hashSet0, hashSet0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.encode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(10);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(3);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable0.erase(4269L);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean0 = invertibleBloomLookupTable0.equals(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertFalse(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(6);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(10);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = invertibleBloomLookupTable0.listEntries(hashSet0, hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(boolean0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(16);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable1.erase(3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      invertibleBloomLookupTable1.insert((-1924L));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      HashSet<Long> hashSet0 = new HashSet<Long>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains((-1924L)));
      
      InvertibleBloomLookupTable invertibleBloomLookupTable2 = invertibleBloomLookupTable0.difference(invertibleBloomLookupTable1);
      assertNotNull(invertibleBloomLookupTable2);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable2.equals((Object)invertibleBloomLookupTable1));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable2, invertibleBloomLookupTable1);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      boolean boolean0 = invertibleBloomLookupTable1.listEntries(hashSet0, hashSet0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertTrue(boolean0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertTrue(hashSet0.contains((-1924L)));
      
      InvertibleBloomLookupTable invertibleBloomLookupTable3 = new InvertibleBloomLookupTable(11);
      assertNotNull(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      boolean boolean1 = invertibleBloomLookupTable1.equals(invertibleBloomLookupTable3);
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable0.equals((Object)invertibleBloomLookupTable1));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable3));
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable2));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable0));
      assertFalse(invertibleBloomLookupTable3.equals((Object)invertibleBloomLookupTable1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable0, invertibleBloomLookupTable1);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable3);
      assertNotSame(invertibleBloomLookupTable1, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable2);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable0);
      assertNotSame(invertibleBloomLookupTable3, invertibleBloomLookupTable1);
      assertFalse(boolean1);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      HashSet<Long> hashSet1 = null;
      HashSet<Long> hashSet2 = new HashSet<Long>();
      assertEquals(0, hashSet2.size());
      assertTrue(hashSet2.isEmpty());
      assertNotNull(hashSet2);
      assertFalse(hashSet2.equals((Object)hashSet0));
      assertFalse(hashSet2.contains((-1924L)));
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable3.listEntries((HashSet<Long>) null, hashSet2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(4);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      invertibleBloomLookupTable0.erase(0L);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.encode();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.zip.Deflater
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.erase(1897L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      assertNotNull(invertibleBloomLookupTable0);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      assertNotNull(invertibleBloomLookupTable1);
      assertFalse(invertibleBloomLookupTable1.equals((Object)invertibleBloomLookupTable0));
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
      assertEquals(3, InvertibleBloomLookupTable.N_HASH);
      
      // Undeclared exception!
      try { 
        invertibleBloomLookupTable0.insert(11);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("net.named_data.jndn.sync.detail.InvertibleBloomLookupTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(32);
      assertEquals(11, InvertibleBloomLookupTable.N_HASHCHECK);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(1277);
      Blob blob0 = new Blob("IBLT difference: Both tables must be the same size");
      Blob blob1 = new Blob(blob0);
      try { 
        invertibleBloomLookupTable0.initialize(blob1);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // incorrect header check
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(0);
      InvertibleBloomLookupTable invertibleBloomLookupTable1 = new InvertibleBloomLookupTable(invertibleBloomLookupTable0);
      HashSet<Long> hashSet0 = new HashSet<Long>();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-120);
      Blob blob0 = new Blob(byteArray0, false);
      try { 
        invertibleBloomLookupTable0.initialize(blob0);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // incorrect header check
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 203;
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = new InvertibleBloomLookupTable(203);
      long long0 = 653L;
      invertibleBloomLookupTable0.insert(653L);
      invertibleBloomLookupTable0.erase(203);
      invertibleBloomLookupTable0.erase(203);
      Blob blob0 = new Blob();
      Long.getLong("E\"Mb2@hwUpg2mxe7Zg");
      // Undeclared exception!
      try { 
        blob0.CompareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = null;
      try {
        invertibleBloomLookupTable0 = new InvertibleBloomLookupTable((-862048943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1293073410
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-213);
      InvertibleBloomLookupTable invertibleBloomLookupTable0 = null;
      try {
        invertibleBloomLookupTable0 = new InvertibleBloomLookupTable((-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -315
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
