/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:41:35 GMT 2022
 */

package net.named_data.jndn.sync;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.Face;
import net.named_data.jndn.Name;
import net.named_data.jndn.security.KeyChain;
import net.named_data.jndn.security.SigningInfo;
import net.named_data.jndn.security.identity.FilePrivateKeyStorage;
import net.named_data.jndn.security.identity.IdentityManager;
import net.named_data.jndn.security.identity.MemoryIdentityStorage;
import net.named_data.jndn.security.pib.PibKey;
import net.named_data.jndn.sync.FullPSync2017WithUsers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FullPSync2017WithUsers_ESTest extends FullPSync2017WithUsers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("");
      IdentityManager identityManager0 = new IdentityManager(memoryIdentityStorage0, filePrivateKeyStorage0);
      KeyChain keyChain0 = new KeyChain(identityManager0);
      Name name1 = PibKey.constructKeyName(name0, (Name.Component) null);
      FullPSync2017WithUsers.OnUpdate fullPSync2017WithUsers_OnUpdate0 = mock(FullPSync2017WithUsers.OnUpdate.class, new ViolatedAssumptionAnswer());
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(4417, face0, name0, name1, fullPSync2017WithUsers_OnUpdate0, keyChain0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      FullPSync2017WithUsers.OnUpdate fullPSync2017WithUsers_OnUpdate0 = mock(FullPSync2017WithUsers.OnUpdate.class, new ViolatedAssumptionAnswer());
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("");
      IdentityManager identityManager0 = new IdentityManager(memoryIdentityStorage0, filePrivateKeyStorage0);
      KeyChain keyChain0 = new KeyChain(identityManager0);
      Name name1 = memoryIdentityStorage0.getNewKeyName(name0, false);
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(4417, face0, name0, name1, fullPSync2017WithUsers_OnUpdate0, keyChain0, 4417, 0.0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Face face0 = new Face();
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      Name name0 = new Name();
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0, name0);
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers((-496), face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, 960.3090608753237, (-1028.8019), signingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -744
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Face face0 = new Face();
      Name name0 = SigningInfo.getDigestSha256Identity();
      FullPSync2017WithUsers.OnUpdate fullPSync2017WithUsers_OnUpdate0 = mock(FullPSync2017WithUsers.OnUpdate.class, new ViolatedAssumptionAnswer());
      MemoryIdentityStorage memoryIdentityStorage0 = new MemoryIdentityStorage();
      FilePrivateKeyStorage filePrivateKeyStorage0 = new FilePrivateKeyStorage("");
      IdentityManager identityManager0 = new IdentityManager(memoryIdentityStorage0, filePrivateKeyStorage0);
      KeyChain keyChain0 = new KeyChain(identityManager0);
      SigningInfo.SignerType signingInfo_SignerType0 = SigningInfo.SignerType.CERT;
      Name name1 = new Name();
      SigningInfo signingInfo0 = new SigningInfo(signingInfo_SignerType0, name0);
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(0, face0, name1, name0, fullPSync2017WithUsers_OnUpdate0, keyChain0, 0, 0, signingInfo0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // registerPrefix: The command KeyChain has not been set. You must call setCommandSigningInfo.
         //
         verifyException("net.named_data.jndn.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Face face0 = new Face();
      SigningInfo signingInfo0 = new SigningInfo();
      Name name0 = SigningInfo.getDigestSha256Identity();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = new FullPSync2017WithUsers(8800, face0, name0, name0, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, 8800, 8800, signingInfo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Face face0 = new Face();
      SigningInfo signingInfo0 = new SigningInfo();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(1032, face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, 1032, 1032, signingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = new FullPSync2017WithUsers(10023, face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, 10023, 10023);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(59, face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, 59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers((-2067), face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null, (-2067), (-2067));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3096
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = new FullPSync2017WithUsers(10000, face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers(59, face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Face face0 = new Face();
      FullPSync2017WithUsers fullPSync2017WithUsers0 = null;
      try {
        fullPSync2017WithUsers0 = new FullPSync2017WithUsers((-351), face0, (Name) null, (Name) null, (FullPSync2017WithUsers.OnUpdate) null, (KeyChain) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -522
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
