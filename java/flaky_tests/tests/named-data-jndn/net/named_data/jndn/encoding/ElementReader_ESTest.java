/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:48:03 GMT 2022
 */

package net.named_data.jndn.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.Node;
import net.named_data.jndn.encoding.ElementListener;
import net.named_data.jndn.encoding.ElementReader;
import net.named_data.jndn.transport.TcpTransport;
import net.named_data.jndn.transport.Transport;
import net.named_data.jndn.transport.UdpTransport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ElementReader_ESTest extends ElementReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Node node0 = new Node(tcpTransport0, transport_ConnectionInfo0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ElementReader elementReader0 = new ElementReader(node0);
      elementReader0.onReceivedData(byteBuffer0);
      try { 
        elementReader0.onReceivedData(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decoding a 64-bit VAR-NUMBER is not supported
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Node node0 = new Node(tcpTransport0, transport_ConnectionInfo0);
      ElementReader elementReader0 = new ElementReader(node0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3708);
      elementReader0.onReceivedData(byteBuffer0);
      elementReader0.onReceivedData(byteBuffer0);
      // Undeclared exception!
      elementReader0.onReceivedData(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TcpTransport tcpTransport0 = new TcpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Node node0 = new Node(tcpTransport0, transport_ConnectionInfo0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ElementReader elementReader0 = new ElementReader(node0);
      elementReader0.onReceivedData(byteBuffer0);
      elementReader0.onReceivedData(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UdpTransport udpTransport0 = new UdpTransport();
      Transport.ConnectionInfo transport_ConnectionInfo0 = new Transport.ConnectionInfo();
      Node node0 = new Node(udpTransport0, transport_ConnectionInfo0);
      ElementReader elementReader0 = new ElementReader(node0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(125);
      elementReader0.onReceivedData(byteBuffer0);
      elementReader0.onReceivedData(byteBuffer0);
      assertEquals(125, byteBuffer0.limit());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ElementReader elementReader0 = new ElementReader((ElementListener) null);
      // Undeclared exception!
      try { 
        elementReader0.onReceivedData(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.ElementReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ElementReader elementReader0 = new ElementReader((ElementListener) null);
      elementReader0.onReceivedData(byteBuffer0);
      assertEquals(0, byteBuffer0.limit());
  }
}
