/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:24:07 GMT 2022
 */

package net.named_data.jndn.encoding.tlv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import net.named_data.jndn.encoding.tlv.TlvDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TlvDecoder_ESTest extends TlvDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)5;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.skipTlv((byte)0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putChar('j');
      boolean boolean0 = tlvDecoder0.readBooleanTlv(0, 254);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)33;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.readBooleanTlv((byte)33, 227);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putShort((short)2);
      ByteBuffer byteBuffer1 = tlvDecoder0.readBlobTlv((byte)0);
      assertEquals(2, byteBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)25;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readNonNegativeIntegerTlv((byte)25);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length for a TLV nonNegativeInteger
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putChar(']');
      long long0 = tlvDecoder0.readNonNegativeInteger(8);
      assertEquals(26177172834091008L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putShort(2, (short) (-5781));
      long long0 = tlvDecoder0.readNonNegativeInteger(4);
      assertEquals(59755L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-56);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      long long0 = tlvDecoder0.readNonNegativeInteger((byte)2);
      assertEquals(200L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      long long0 = tlvDecoder0.readNonNegativeInteger(2);
      assertEquals(64512L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.peekType((byte)28, 1761);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readExtendedVarNumber(254);
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer1 = tlvDecoder0.readOptionalBlobTlv(0, 254);
      assertEquals(6, byteBuffer1.arrayOffset());
      assertEquals(0, byteBuffer1.remaining());
      assertNotNull(byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.peekType((byte)0, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs(50, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized critical type code 31
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(56);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs((-508), true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TLV length does not equal the total length of the nested TLVs
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      byteBuffer0.limit(2);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readTypeAndLength((byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readBlobTlv((-855638016));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putInt(254);
      int int0 = tlvDecoder0.readExtendedVarNumber(254);
      assertEquals(254, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-2);
      byteArray0[4] = (byte)4;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs((int) (byte)72, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TLV length exceeds the buffer length
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-2);
      byteArray0[3] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs((int) (byte)72, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TLV length exceeds the buffer length
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.skipTlv((byte) (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decoding a 64-bit VAR-NUMBER is not supported
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-3);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.getFloat();
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readTypeAndLength((byte) (-4));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readNonNegativeInteger(8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.putLong((-1L));
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readExtendedVarNumber(254);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      ByteBuffer byteBuffer1 = tlvDecoder0.getSlice(254, 254);
      assertEquals("java.nio.HeapByteBuffer[pos=254 lim=254 cap=254]", byteBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      // Undeclared exception!
      try { 
        tlvDecoder0.getSlice((-990), 254);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition < 0: (-990 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readVarNumber();
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-107);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readVarNumber();
      assertEquals((-1795162112), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putShort((short) (-1));
      long long0 = tlvDecoder0.readNonNegativeInteger(4);
      assertEquals(4294901760L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      long long0 = tlvDecoder0.readNonNegativeInteger(8);
      assertEquals((-3746994889972252672L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readNestedTlvsStart((byte)37);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.put((byte) (-51));
      int int0 = tlvDecoder0.readExtendedVarNumber(254);
      assertEquals((-855638016), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.readVarNumber();
      int int1 = tlvDecoder0.getOffset();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.readNonNegativeInteger(4);
      try { 
        tlvDecoder0.skipOptionalTlv(4, 268);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(56);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      // Undeclared exception!
      try { 
        tlvDecoder0.seek((-2376));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition < 0: (-2376 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readVarNumber();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readOptionalBlobTlv(26, 26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readBooleanTlv(0, 154);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.peekType(1151, 1151);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-1);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      // Undeclared exception!
      try { 
        tlvDecoder0.finishNestedTlvs((int) (byte)72, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newPosition < 0: (-16777210 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(544);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs(544);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized critical type code 0
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TlvDecoder tlvDecoder0 = null;
      try {
        tlvDecoder0 = new TlvDecoder((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(544);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.peekType((short)0, 544);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.peekType(8, 40);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(31);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.peekType(31, (-171));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.finishNestedTlvs((int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readTypeAndLength((byte)19);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TLV length exceeds the buffer length
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readTypeAndLength(4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      boolean boolean0 = tlvDecoder0.readBooleanTlv((byte) (-39), (byte) (-107));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      ByteBuffer byteBuffer1 = tlvDecoder0.readOptionalBlobTlv(8, 8);
      assertNull(byteBuffer1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(544);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readOptionalNonNegativeIntegerTlv(0, 544);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length for a TLV nonNegativeInteger
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readNonNegativeInteger(254);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid length for a TLV nonNegativeInteger
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      long long0 = tlvDecoder0.readNonNegativeInteger(1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.skipOptionalTlv(4, 4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      long long0 = tlvDecoder0.readOptionalNonNegativeIntegerTlv(214, (byte) (-107));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putChar('j');
      try { 
        tlvDecoder0.finishNestedTlvs(64, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // TLV length does not equal the total length of the nested TLVs
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)44;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.finishNestedTlvs((int) (byte)44, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Read past the end of the input
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(467);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      byteBuffer0.putInt((-3197));
      tlvDecoder0.readExtendedVarNumber(253);
      try { 
        tlvDecoder0.finishNestedTlvs(2456, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized critical type code 243
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.finishNestedTlvs(64, true);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readExtendedVarNumber(8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Decoding a 64-bit VAR-NUMBER is not supported
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.skipOptionalTlv(0, 8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.seek(0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      tlvDecoder0.finishNestedTlvs((int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(8);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      try { 
        tlvDecoder0.readNestedTlvsStart(8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(254);
      TlvDecoder tlvDecoder0 = new TlvDecoder(byteBuffer0);
      int int0 = tlvDecoder0.getOffset();
      assertEquals(0, int0);
  }
}
