/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:29:33 GMT 2022
 */

package net.named_data.jndn.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.encoding.OID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OID_ESTest extends OID_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      OID oID0 = new OID(intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 5105;
      OID oID1 = new OID(intArray1);
      boolean boolean0 = oID0.equals(oID1);
      assertFalse(oID1.equals((Object)oID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      OID oID0 = new OID(intArray0);
      OID oID1 = new OID("0.0.0.0");
      boolean boolean0 = oID0.equals(oID1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      OID oID0 = new OID(intArray0);
      String string0 = oID0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      OID oID0 = new OID(intArray0);
      int[] intArray1 = oID0.getIntegerList();
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OID oID0 = new OID(".");
      // Undeclared exception!
      try { 
        oID0.setIntegerList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.OID", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OID oID0 = null;
      try {
        oID0 = new OID((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.OID", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OID oID0 = null;
      try {
        oID0 = new OID("Cgsm3J_My$(q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cgsm3J_My$(q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OID oID0 = null;
      try {
        oID0 = new OID((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.OID", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      oID0.setIntegerList(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      OID oID0 = new OID(intArray0);
      Object object0 = new Object();
      boolean boolean0 = oID0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      boolean boolean0 = oID0.equals((Object) oID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      OID oID1 = new OID(intArray1);
      boolean boolean0 = oID0.equals(oID1);
      assertFalse(oID1.equals((Object)oID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      OID oID0 = new OID(intArray0);
      int[] intArray1 = new int[0];
      OID oID1 = new OID(intArray1);
      boolean boolean0 = oID0.equals(oID1);
      assertFalse(oID1.equals((Object)oID0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      boolean boolean0 = oID0.equals(oID0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      OID oID0 = new OID(intArray0);
      boolean boolean0 = oID0.equals((OID) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      String string0 = oID0.toString();
      assertEquals("0.0.0.0", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      OID oID0 = new OID(intArray0);
      int[] intArray1 = oID0.getIntegerList();
      assertNotSame(intArray0, intArray1);
  }
}
