/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 21:38:28 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.ControlParameters;
import net.named_data.jndn.GenericSignature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.Interest;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.MetaInfo;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.encoding.WireFormat;
import net.named_data.jndn.lp.LpPacket;
import net.named_data.jndn.util.Blob;
import net.named_data.jndn.util.SignedBlob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Name_ESTest extends Name_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Name name0 = new Name(" zWP&)l7Nb");
      name0.set("glh|o%f\fOf5i+rp!M$");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Name.fromEscapedString("/B%28k%23S+%7EL.i/%FD%0A");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Name name0 = new Name("`5-_>7w9%9DF~4d ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      name0.toString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Name name0 = new Name("re$a/ A2z");
      name0.toUri(true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)57;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name.toEscapedString(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Name name0 = new Name("Comonens: Blob value ma/ not be null");
      name0.compare(name0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Name name0 = new Name("B(k#S+~L.i");
      name0.appendSegment((-2464L));
      name0.match(name0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      Name name1 = new Name();
      name1.match(name0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Name name0 = new Name("@W(/t'tS");
      name0.hashCode();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Name name0 = new Name("net.named_data.jndn.Name");
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append("", componentType0);
      name0.equals(name0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Name name0 = new Name("net.named_data.jndn.Name");
      Name name1 = new Name(name0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append("", componentType0);
      name0.equals(name1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[4];
      Name name0 = new Name(name_ComponentArray0);
      name0.getPrefix(0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Name name0 = new Name();
      name0.set("/c");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name(":VX)B|=V9");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Can't parse decimal Name Component type: VX)B| in URI VX)B|=V9
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)58);
      Name.Component name_Component1 = new Name.Component(byteArray0, componentType0, 6527);
      name_Component1.equals(name_Component0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromNumber(255L);
      name_Component0.getSuccessor();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("params-sha256=r code, call fromNumber(value, ComponentType.OTHER_CODE, otherTypeCode)");
      try { 
        Name.Component.fromParametersSha256Digest(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("sha256digest=er code, call Name.Component(value, ComponentType.OTHER_CODE, otherTypeCode)");
      try { 
        Name.Component.fromImplicitSha256Digest(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      Name.Component name_Component0 = new Name.Component(byteArray0);
      try { 
        name_Component0.toVersion();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name component does not begin with the expected marker.
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      Name.Component name_Component0 = new Name.Component(byteArray0);
      name_Component0.isTimestamp();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(0);
      name_Component0.isVersion();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (-978));
      name_Component0.isSegmentOffset();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component("...", componentType0, 0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(1748);
      name_Component0.toSegmentOffset();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Blob blob0 = new Blob(byteArray0, false);
      Name.Component name_Component0 = new Name.Component(blob0);
      name_Component0.toSegment();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = Name.Component.fromNumber(2120L, componentType0, 0);
      name_Component0.compareTo(name_Component0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromNumber(0L);
      try { 
        name_Component0.toNumberWithMarker((-1826));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name component does not begin with the expected marker.
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      name_Component0.isGeneric();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component("/");
      name_Component0.getValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      name_Component0.getType();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = Name.Component.fromNumber(0L, componentType0, 0);
      name_Component0.getOtherTypeCode();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      Name name0 = new Name(arrayList0);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Blob blob0 = wireFormat0.encodeName(name0);
      name0.wireDecode(blob0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      name0.wireEncode(wireFormat0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Name name0 = new Name();
      name0.size();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.getSuccessor();
      name1.size();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Name name0 = new Name();
      name0.appendSegmentOffset(1080L);
      KeyLocator keyLocator0 = new KeyLocator();
      Name name1 = keyLocator0.getKeyName();
      name0.isPrefixOf(name1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.appendSegment(0);
      name1.getSubName(0, 107);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Name name0 = new Name();
      MetaInfo metaInfo0 = new MetaInfo();
      Name.Component name_Component0 = metaInfo0.getFinalBlockId();
      name0.append(name_Component0);
      name0.getSubName((-1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Name name0 = new Name();
      name0.getSubName(800);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      name0.set("net.named_data.jndn.DelegationSet");
      name0.getPrefix(2721);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Name name0 = new Name();
      name0.getChangeCount();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Name name0 = new Name("");
      name0.getChangeCount();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[20];
      Name name0 = new Name(name_ComponentArray0);
      name0.get(10);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Name name0 = new Name("Read past the end of the input");
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      name0.appendNumber((-1235L), componentType0, 40);
      name0.get(1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Name name0 = new Name("/sha256digest=0000000000000000000000000000000000000000000000000000000000000000");
      name0.appendSegmentOffset(4330L);
      name0.get((-2));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Name name0 = new Name("3=)Uvd$Bm+WyJQT");
      name0.get(0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Name name0 = new Name("Comonens: Blob value ma/ not be null");
      name0.get(0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Name.fromEscapedString("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[0];
      Name name0 = new Name(name_ComponentArray0);
      name0.compareTo(name0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Name name0 = new Name("Vd3O&:t");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name1 = new Name(arrayList0);
      name0.compareTo(name1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append("F9)i`vN;qp$)h6w@", componentType0);
      Name name1 = name0.getSubName(929, 929);
      name1.compareTo(name0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      name0.compare(48, (-2), name0, 48);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Name name0 = new Name();
      name0.compare(1, 46, name0, 3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Name name0 = new Name();
      name0.compare((-5), (-5), name0, (-5));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name1 = new Name(arrayList0);
      name0.compare((-3834), 0, name1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Name name0 = new Name("pT8aLlqBcp");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name1 = new Name(arrayList0);
      name0.compare((-411), 22, name1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      name0.compare(1, (-53), name0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32);
      Blob blob0 = new Blob(byteBuffer0, true);
      Name name0 = new Name();
      name0.appendParametersSha256Digest(blob0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Name name0 = new Name("1Nq[nEGudxCkOZg4X?");
      Interest interest0 = new Interest(name0, (-2119.309569));
      SignedBlob signedBlob0 = interest0.wireEncode();
      name0.appendImplicitSha256Digest((Blob) signedBlob0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[5];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      name0.append(byteArray0, componentType0, 2125);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[0];
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      name0.append(byteArray0, componentType0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[0];
      name0.append(byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob();
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append(blob0, componentType0, (-2));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Name name0 = new Name();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      Blob blob0 = new Blob(byteBuffer0, true);
      name0.append(blob0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Name name0 = new Name();
      name0.append(name0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Name name0 = new Name();
      name0.CompareTo(name0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Name name0 = new Name();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        name0.wireEncode(wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeName is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        name0.wireEncode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // encodeName is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name0 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        name0.wireEncode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.Tlv0_3WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.wireEncode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Name name0 = new Name();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      ControlParameters controlParameters0 = new ControlParameters();
      Blob blob0 = wireFormat0.encodeControlParameters(controlParameters0);
      try { 
        name0.wireDecode(blob0, wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Name name0 = new Name();
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      Blob blob0 = sha256WithRsaSignature0.getSignature();
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        name0.wireDecode(blob0, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeName is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Name name0 = new Name();
      LpPacket lpPacket0 = new LpPacket();
      Blob blob0 = lpPacket0.getFragmentWireEncoding();
      // Undeclared exception!
      try { 
        name0.wireDecode(blob0, (WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = Name.fromEscapedString("d-HE0G/62GoLm4");
      try { 
        name0.wireDecode(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Name name0 = new Name();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(45);
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      try { 
        name0.wireDecode(byteBuffer0, wireFormat0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      // Undeclared exception!
      try { 
        name0.wireDecode((ByteBuffer) null, wireFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Name name0 = new Name();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2160);
      try { 
        name0.wireDecode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Did not get the expected TLV type
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Name name0 = new Name();
      WireFormat wireFormat0 = new WireFormat();
      WireFormat.setDefaultWireFormat(wireFormat0);
      // Undeclared exception!
      try { 
        name0.wireDecode((ByteBuffer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeName is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name0 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        name0.toUri(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      arrayList0.add((Object) name0);
      Name name1 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name1.toUri(true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name0 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        name0.toUri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.toUri();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(65535);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "encodeData is not implemented");
      // Undeclared exception!
      Name.toEscapedString(byteBuffer0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(32767);
      // Undeclared exception!
      Name.toEscapedString(byteBuffer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.set((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Name name0 = new Name("Lp.");
      // Undeclared exception!
      try { 
        name0.match((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Name name0 = new Name("z");
      // Undeclared exception!
      try { 
        name0.isPrefixOf((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[1];
      Name name0 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        name0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[12];
      Name name0 = new Name(name_ComponentArray0);
      // Undeclared exception!
      try { 
        name0.getSuccessor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name0 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.getSuccessor();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromHex("Blob value ma", 54, 77);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromHex((String) null, 0, 417);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromHex("Blob value ma", 54, 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity < 0: (-3 < 0)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromEscapedString("Qfce4U}btVy+K", 5035, 5035);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromEscapedString((String) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.fromEscapedString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.equals((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      arrayList0.add((Object) name0);
      Name name1 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name1.equals(name1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.compare((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Name name0 = new Name("Comonens: Blob value ma/ not be null");
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      arrayList0.add(name0);
      Name name1 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.compare(name1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("0='}{_@+87])", 0, 0);
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append(blob0, componentType0);
      // Undeclared exception!
      try { 
        name0.compare((-312), 1865, name0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = new Name("net.named_data.jndn.Name$Component");
      // Undeclared exception!
      try { 
        name0.compare((-2935), 1095, name1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[0];
      try { 
        name0.appendParametersSha256Digest(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob("rc~Zxmo(_~HN;");
      try { 
        name0.appendParametersSha256Digest(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Name name0 = new Name();
      byte[] byteArray0 = new byte[0];
      try { 
        name0.appendImplicitSha256Digest(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Name name0 = new Name();
      Blob blob0 = new Blob("Unrecognized KeyLocatorType ");
      try { 
        name0.appendImplicitSha256Digest(blob0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Name name0 = new Name();
      Interest interest0 = new Interest();
      SignedBlob signedBlob0 = interest0.getDefaultWireEncoding();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append((Blob) signedBlob0, componentType0, (-2025));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.GENERIC;
      // Undeclared exception!
      try { 
        name0.append((String) null, componentType0, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      // Undeclared exception!
      try { 
        name0.append((String) null, componentType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Name name0 = new Name();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        name0.CompareTo(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name((Name.Component[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name("wH%:");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Blob blob0 = Name.fromHex("decodeDelegati", 7, 109);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Blob blob0 = Name.fromHex("decodeLpPacket is not implemented", 0, 3);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Blob blob0 = Name.fromHex("Can't parse decimal Name Component type: ", 5, 12);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Blob blob0 = Name.fromHex((String) null, 3621, 3621);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)119;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(22, stringBuffer0.length());
      assertEquals("%00%00%00w%00%00%00%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)95;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("%00%00%00%00_", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("+%00%00%00%00%00%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(".%00%00%00", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-60);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("%00%C4%00%00%00%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)48;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("%00%00%00%00%000%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)45;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals(16, stringBuffer0.length());
      assertEquals("%00%00%00-%00%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals("E%00%00%00%00%00", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(36);
      // Undeclared exception!
      try { 
        Name.toEscapedString(byteBuffer0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("Can't parse decimal Name Component type: ", 7, 15);
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      int int0 = name0.compare(1, 1, name0, 14, 45);
      assertEquals(2L, name0.getChangeCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Name name0 = new Name("net.named_data.jndn.Name");
      int int0 = name0.compare((-69), (-945), name0, 109, 109);
      assertEquals((-1), int0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Name name0 = new Name("dn^:/");
      // Undeclared exception!
      try { 
        name0.compare(107, 107, (Name) null, 107, 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Name name0 = new Name();
      String string0 = name0.toUri(false);
      assertEquals("/", string0);
      assertEquals(0L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.getPrefix((-1079));
      assertEquals(0L, name1.getChangeCount());
      assertNotSame(name1, name0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.getSubName((-4455), (-4455));
      assertEquals(0L, name1.getChangeCount());
      assertNotSame(name1, name0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Name name0 = new Name("0='}{4_+8>S])");
      // Undeclared exception!
      try { 
        name0.getSubName((-2147483645), (-2147483645));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Name name0 = new Name("F`N3+]zEzj'}%");
      Name name1 = name0.getSubName(554, 7);
      assertEquals(2L, name0.getChangeCount());
      assertEquals(0L, name1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Name name0 = new Name();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Object object0 = new Object();
      arrayList0.add(object0);
      Name name1 = new Name(arrayList0);
      // Undeclared exception!
      try { 
        name0.append(name1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class net.named_data.jndn.Name$Component (java.lang.Object is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name$Component is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.append((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Name name0 = new Name();
      name0.set("/8=%8D");
      assertEquals(1, name0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Name name0 = new Name("5=\"3G<!|GOVF~T");
      name0.set("5=\"3G<!|GOVF~T");
      assertEquals(4L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Name name0 = new Name("%JDM3iX`}U{q%Cj");
      // Undeclared exception!
      try { 
        name0.set("6S.nV/Z}94p=~uU+");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Can't parse decimal Name Component type: Z}94p in URI 6S.nV/Z}94p=~uU+
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Name name0 = new Name("rc~Zxmo(_~HN;~;Dj");
      // Undeclared exception!
      try { 
        name0.set("params-sha256=6_DIGEST");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.set("sha256digest=H");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Name name0 = new Name();
      name0.set("/");
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      name0.set("ndn:/%00%01");
      assertEquals(1, name0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Name name0 = new Name("TqE,,");
      name0.set("//!~:I*v=xJ");
      assertEquals(3L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.set("Can't parse decimal Name Component type: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Name name0 = new Name("Name.Component other type code must be non-negative");
      name0.set("");
      assertEquals(3L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Name name0 = new Name();
      name0.set("&&S8'+Por1AG//;");
      assertEquals(3L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.get((-276));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      int int0 = name_Component0.compare(name_Component0);
      assertEquals(0, int0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component1 = new Name.Component("rc~Zxmo_~KHN;~", componentType0, 32);
      int int0 = name_Component0.compare(name_Component1);
      assertEquals((-1), int0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertEquals(32, name_Component1.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component1 = new Name.Component("decodeDelegationSet is not implemented", componentType0, 32);
      int int0 = name_Component1.compare(name_Component0);
      assertEquals(1, int0);
      assertEquals(32, name_Component1.getOtherTypeCode());
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      byte[] byteArray0 = new byte[0];
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, 105);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00");
      stringBuffer0.append((Object) name_Component0);
      assertEquals(353, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegment(587L);
      StringBuffer stringBuffer0 = new StringBuffer(251);
      stringBuffer0.append((Object) name_Component0);
      assertEquals(40, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Name name0 = new Name("8-_iQ$YmU{H*{#Gz T");
      Interest interest0 = new Interest(name0);
      SignedBlob signedBlob0 = interest0.wireEncode();
      Name.Component name_Component0 = Name.Component.fromImplicitSha256Digest((Blob) signedBlob0);
      name_Component0.isSegment();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.Component.fromNumberWithMarker((-1261L), (-2399));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // TLV integer value may not be negative
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromNumberWithMarker(2800L, 1);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        Name.Component.fromNumber(451L, componentType0, (-4861));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = Name.Component.fromNumber((-1L), componentType0, 31);
      assertEquals(31, name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegment(587L);
      StringBuffer stringBuffer0 = new StringBuffer(251);
      name_Component0.toEscapedString(stringBuffer0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("%00%02K", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = Name.Component.fromNumber(2091L, componentType0, 3833);
      StringBuffer stringBuffer0 = new StringBuffer("");
      name_Component0.toEscapedString(stringBuffer0);
      assertEquals(18, stringBuffer0.length());
      assertEquals("params-sha256=082b", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[2];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)41);
      name_Component0.toEscapedString(stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("41=%00%00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      name_Component0.toEscapedString(stringBuffer0);
      assertEquals(27, stringBuffer0.length());
      assertEquals("sha256digest=00000000000000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component("sha256digest=TLV ContentType", componentType0, (byte) (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component((byte[]) null, componentType0, (-2833));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LpPacket lpPacket0 = new LpPacket();
      Blob blob0 = lpPacket0.getFragmentWireEncoding();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(blob0, componentType0, 1);
      assertEquals(1, name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      GenericSignature genericSignature0 = new GenericSignature();
      Blob blob0 = genericSignature0.getSignatureInfoEncoding();
      ComponentType componentType0 = ComponentType.GENERIC;
      Name.Component name_Component0 = new Name.Component(blob0, componentType0, 19);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component((Blob) null, componentType0, 2490);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("/6=%05%C7");
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(blob0, componentType0);
      name_Component0.isSequenceNumber();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component((Blob) null, componentType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Name name0 = new Name();
      name0.clear();
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Name name0 = new Name("");
      WireFormat wireFormat0 = new WireFormat();
      // Undeclared exception!
      try { 
        name0.wireDecode((ByteBuffer) null, wireFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // decodeName is not implemented
         //
         verifyException("net.named_data.jndn.encoding.WireFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.compare(801, (-1550), (Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Name name0 = new Name("5=\"3G<!|GOVF~T");
      // Undeclared exception!
      try { 
        name0.wireEncode((WireFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        Name.Component.fromImplicitSha256Digest(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromImplicitSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        Name.Component.fromParametersSha256Digest(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name.Component.fromParametersSha256Digest: The digest length must be 32 bytes
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Name name0 = new Name("nk4n:/");
      WireFormat wireFormat0 = WireFormat.getDefaultWireFormat();
      Blob blob0 = wireFormat0.encodeName(name0);
      name0.wireDecode(blob0, wireFormat0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Name name0 = new Name("}YBM+&v^] '");
      String string0 = name0.toUri();
      assertEquals(2L, name0.getChangeCount());
      assertEquals("/%7DYBM+%26v%5E%5D%20%27", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Name.toEscapedString(byteBuffer0, stringBuffer0);
      assertEquals("....", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Name name0 = new Name("/.{8KBvD");
      String string0 = name0.toUri(false);
      assertEquals("/.%7B8KBvD", string0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Name name0 = new Name("...");
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.getSuccessor();
      int int0 = name1.CompareTo(name0);
      assertEquals(0L, name0.getChangeCount());
      assertEquals(2L, name1.getChangeCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Name name0 = new Name();
      Name name1 = name0.getSuccessor();
      int int0 = name0.CompareTo(name1);
      assertEquals(0L, name0.getChangeCount());
      assertEquals((-1), int0);
      assertEquals(2L, name1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Name name0 = new Name("^c!?%5i&");
      // Undeclared exception!
      try { 
        name0.compare((-341), 1318, name0, (-341), 1318);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Name name0 = new Name();
      int int0 = name0.compare((-947), 0, name0, 0, 0);
      assertEquals(0, int0);
      assertEquals(0L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Name name0 = new Name("Name.Component other type code must be non-negative");
      Name name1 = name0.getSuccessor();
      boolean boolean0 = name1.match(name0);
      assertFalse(boolean0);
      assertEquals(2L, name0.getChangeCount());
      assertEquals(1L, name1.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Name name0 = new Name();
      name0.append("1onZ~]3HEW%q{u");
      boolean boolean0 = name0.match(name0);
      assertEquals(1L, name0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ArrayList<Name> arrayList0 = new ArrayList<Name>();
      Name name0 = new Name(arrayList0);
      Name name1 = name0.getSuccessor();
      boolean boolean0 = name1.match(name0);
      assertEquals(2L, name1.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Name name0 = new Name();
      name0.hashCode();
      name0.hashCode();
      assertEquals(0L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Name name0 = new Name("");
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      boolean boolean0 = name0.equals((Object) hmacWithSha256Signature0);
      assertFalse(boolean0);
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Name name0 = new Name();
      boolean boolean0 = name0.equals((Object) name0);
      assertEquals(0L, name0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Name name0 = new Name(arrayList0);
      name0.appendNumber(2148L);
      Name name1 = new Name("8A-IQ2s*jO8Fl,;~+");
      boolean boolean0 = name1.equals(name0);
      assertEquals(1L, name0.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Name name0 = new Name("");
      Name name1 = new Name(name0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.append("", componentType0);
      boolean boolean0 = name1.equals(name0);
      assertEquals(2L, name0.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.appendNumber((-1388L), componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call appendNumber(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      name0.appendNumber(1358L, componentType0);
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Name name0 = new Name();
      String string0 = name0.toUri(true);
      assertEquals("ndn:/", string0);
      assertEquals(0L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append("os.name", componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call append(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Name name0 = new Name("JAVAX");
      name0.append(name0);
      assertEquals(2, name0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append((Blob) null, componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call append(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append((byte[]) null, componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call append(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Name name0 = new Name("//K+/n");
      Interest interest0 = new Interest(name0, 1.0);
      interest0.wireEncode();
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = new Name.Component(byteArray0);
      int int0 = name_Component1.compare(name_Component0);
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = Name.Component.fromSegment(0L);
      int int0 = name_Component0.compare(name_Component1);
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertEquals((-1), int0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Name name0 = new Name("l`V22B)WZ#");
      Name name1 = new Name("0='}{_@+87])");
      int int0 = name0.compare(name1);
      assertEquals(2L, name1.getChangeCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Name name0 = new Name("0='h}{426z8S])");
      Name name1 = new Name("Cj+:nSao{");
      int int0 = name0.compare(name1);
      assertEquals(2L, name1.getChangeCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ComponentType componentType0 = ComponentType.GENERIC;
      byte[] byteArray0 = new byte[0];
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      boolean boolean0 = name_Component0.equals((Object) sha256WithRsaSignature0);
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MetaInfo metaInfo0 = new MetaInfo();
      Name.Component name_Component0 = metaInfo0.getFinalBlockID();
      boolean boolean0 = name_Component0.equals((Object) name_Component0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component1 = new Name.Component(byteArray0, componentType0, 58);
      boolean boolean0 = name_Component0.equals(name_Component1);
      assertFalse(boolean0);
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Name.Component name_Component0 = new Name.Component(byteArray0);
      Name.Component name_Component1 = name_Component0.getSuccessor();
      boolean boolean0 = name_Component1.equals(name_Component0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)0);
      Name.Component name_Component1 = new Name.Component(byteArray0, componentType0, 6527);
      boolean boolean0 = name_Component0.equals(name_Component1);
      assertEquals(6527, name_Component1.getOtherTypeCode());
      assertFalse(boolean0);
      assertFalse(name_Component1.equals((Object)name_Component0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)29);
      ComponentType componentType1 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component1 = new Name.Component(byteArray0, componentType1, 2140);
      boolean boolean0 = name_Component0.equals(name_Component1);
      assertFalse(boolean0);
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertEquals(29, name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)58);
      Name.Component name_Component1 = new Name.Component();
      boolean boolean0 = name_Component0.equals(name_Component1);
      assertEquals((-1), name_Component1.getOtherTypeCode());
      assertFalse(boolean0);
      assertEquals(58, name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, 84);
      boolean boolean0 = name_Component0.equals(name_Component0);
      assertTrue(boolean0);
      assertEquals(84, name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Blob blob0 = new Blob("Did not getthe expected TLV type");
      Name.Component name_Component0 = Name.Component.fromParametersSha256Digest(blob0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.appendNumber((-431L), componentType0, (-533366998));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        Name.Component.fromNumber((-640L), componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call fromNumber(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = Name.Component.fromNumber(1224L, componentType0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Blob blob0 = new Blob();
      Name.Component name_Component0 = new Name.Component(blob0);
      try { 
        name_Component0.toSegment();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name component does not begin with the expected marker.
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Blob blob0 = Name.fromHex("To use an other code, call append(value, ComponentType.OTHER_CODE, otherTypeCode)", 56, 130);
      Name.Component name_Component0 = new Name.Component(blob0);
      long long0 = name_Component0.toNumber();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertEquals(0L, long0);
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSequenceNumber(4L);
      long long0 = name_Component0.toNumber();
      assertEquals(65028L, long0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (byte)0);
      boolean boolean0 = name_Component0.isParametersSha256Digest();
      assertTrue(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(983L);
      boolean boolean0 = name_Component0.isParametersSha256Digest();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component("@W(/t'tS", componentType0, 52);
      boolean boolean0 = name_Component0.isImplicitSha256Digest();
      assertTrue(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(255L);
      boolean boolean0 = name_Component0.isImplicitSha256Digest();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0);
      boolean boolean0 = name_Component0.isSequenceNumber();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp((-1078L));
      boolean boolean0 = name_Component0.isSequenceNumber();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSequenceNumber(0L);
      boolean boolean0 = name_Component0.isSequenceNumber();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      boolean boolean0 = name_Component0.isSequenceNumber();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp((-1329L));
      boolean boolean0 = name_Component0.isTimestamp();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component("sha256digest=t");
      boolean boolean0 = name_Component0.isTimestamp();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      boolean boolean0 = name_Component0.isTimestamp();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, (-890));
      boolean boolean0 = name_Component0.isVersion();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromVersion((-1505L));
      boolean boolean0 = name_Component0.isVersion();
      assertTrue(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSequenceNumber(4L);
      boolean boolean0 = name_Component0.isVersion();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      boolean boolean0 = name_Component0.isVersion();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegmentOffset(3455L);
      boolean boolean0 = name_Component0.isSegmentOffset();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromSegment((-656L));
      boolean boolean0 = name_Component0.isSegmentOffset();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      boolean boolean0 = name_Component0.isSegmentOffset();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component(byteArray0, componentType0, 137);
      boolean boolean0 = name_Component0.isSegment();
      assertFalse(boolean0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp(514L);
      boolean boolean0 = name_Component0.isSegment();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component("", componentType0);
      boolean boolean0 = name_Component0.isSegment();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Name.Component[] name_ComponentArray0 = new Name.Component[2];
      Name.Component name_Component0 = Name.Component.fromSegmentOffset((-1L));
      name_ComponentArray0[0] = name_Component0;
      name_ComponentArray0[1] = name_Component0;
      Name name0 = new Name(name_ComponentArray0);
      name0.appendNumber(2699L, (ComponentType) null, 959);
      // Undeclared exception!
      try { 
        name0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component0 = new Name.Component("To use an other code, call Name.Component(value, ComponentType.OTHER_CODE, otherTypeCode)", componentType0);
      String string0 = name_Component0.toEscapedString();
      assertEquals("params-sha256=546f2075736520616e206f7468657220636f64652c2063616c6c204e616d652e436f6d706f6e656e742876616c75652c20436f6d706f6e656e74547970652e4f544845525f434f44452c206f7468657254797065436f646529", string0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append("MH5'`", componentType0, (-920));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Name name0 = new Name("");
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      name0.append("", componentType0, 0);
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component("B(kS+~L.i", componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call Name.Component(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      // Undeclared exception!
      try { 
        name0.append((byte[]) null, componentType0, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component((byte[]) null, componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call Name.Component(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.GENERIC;
      // Undeclared exception!
      try { 
        name0.append((byte[]) null, componentType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("M5+Oyp7^p+iem>&U]");
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component(blob0, componentType0, (-5));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.GENERIC;
      // Undeclared exception!
      try { 
        name0.append((Blob) null, componentType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("Name component does not begin with the expected marker.");
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      Name.Component name_Component0 = null;
      try {
        name_Component0 = new Name.Component(blob0, componentType0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // To use an other code, call Name.Component(value, ComponentType.OTHER_CODE, otherTypeCode)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Name name0 = new Name();
      Name.Component name_Component0 = new Name.Component();
      // Undeclared exception!
      try { 
        name_Component0.CompareTo(name0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class net.named_data.jndn.Name cannot be cast to class net.named_data.jndn.Name$Component (net.named_data.jndn.Name and net.named_data.jndn.Name$Component are in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Name name0 = new Name("0='}{_@ay87*N");
      name0.wireEncode();
      assertEquals(2L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromNumber((long) (byte) (-1));
      boolean boolean0 = name_Component0.isSegment();
      assertEquals((-1), name_Component0.getOtherTypeCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromTimestamp((-1043L));
      long long0 = name_Component0.toTimestamp();
      assertEquals(0L, long0);
      assertEquals((-1), name_Component0.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = new Name.Component(name_Component0);
      assertTrue(name_Component1.isGeneric());
      assertEquals((-1), name_Component1.getOtherTypeCode());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      try { 
        name_Component0.toSegment();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name component does not begin with the expected marker.
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      try { 
        name_Component0.toSequenceNumber();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Name component does not begin with the expected marker.
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      // Undeclared exception!
      try { 
        Name.toEscapedString((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Name name0 = new Name();
      name0.appendVersion(0L);
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.appendParametersSha256Digest((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.append((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.compare(36, 36, (Name) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Blob blob0 = Name.fromEscapedString("wH%:");
      assertFalse(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Name name0 = new Name("..");
      // Undeclared exception!
      try { 
        name0.appendParametersSha256Digest((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.appendImplicitSha256Digest((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Name name0 = new Name();
      name0.appendTimestamp(97);
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Name name0 = new Name();
      boolean boolean0 = name0.isPrefixOf(name0);
      assertEquals(0L, name0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name((ArrayList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.append((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.util.Blob", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.wireDecode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Name name0 = new Name();
      name0.appendSequenceNumber(1152L);
      assertEquals(1L, name0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.appendImplicitSha256Digest((Blob) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Name name1 = new Name("net.named_data.jndn.DelegationSet");
      name0.append(name1);
      assertEquals(1, name0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Name name0 = new Name();
      ComponentType componentType0 = ComponentType.GENERIC;
      // Undeclared exception!
      try { 
        name0.append((Blob) null, componentType0, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Component: Blob value may not be null
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.CompareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Name name0 = new Name("m2z%RTy/K(C");
      // Undeclared exception!
      try { 
        name0.getSubName((-3029));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Name name0 = null;
      try {
        name0 = new Name((Name) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Name name0 = new Name("3=6?+Fd-BmWyJ");
      ComponentType componentType0 = ComponentType.OTHER_CODE;
      // Undeclared exception!
      try { 
        name0.append((byte[]) null, componentType0, (-1690));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Name.Component other type code must be non-negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Blob blob0 = new Blob();
      Name name0 = new Name();
      // Undeclared exception!
      try { 
        name0.wireDecode(blob0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.encoding.tlv.TlvDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Name name0 = new Name("H?g^3't.S72");
      // Undeclared exception!
      try { 
        name0.compareTo("H?g^3't.S72");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.String cannot be cast to class net.named_data.jndn.Name (java.lang.String is in module java.base of loader 'bootstrap'; net.named_data.jndn.Name is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @12c7a560)
         //
         verifyException("net.named_data.jndn.Name", e);
      }
  }
}
