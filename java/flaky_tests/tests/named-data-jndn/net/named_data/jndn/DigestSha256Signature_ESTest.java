/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 09 00:54:44 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.DigestSha256Signature;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DigestSha256Signature_ESTest extends DigestSha256Signature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      byte[] byteArray0 = new byte[8];
      Blob blob0 = new Blob(byteArray0);
      digestSha256Signature0.setSignature(blob0);
      digestSha256Signature0.getSignature();
      assertEquals(1L, digestSha256Signature0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      byte[] byteArray0 = new byte[8];
      Blob blob0 = new Blob(byteArray0);
      digestSha256Signature0.setSignature(blob0);
      long long0 = digestSha256Signature0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = null;
      try {
        digestSha256Signature0 = new DigestSha256Signature((DigestSha256Signature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.DigestSha256Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      DigestSha256Signature digestSha256Signature1 = new DigestSha256Signature(digestSha256Signature0);
      assertEquals(0L, digestSha256Signature1.getChangeCount());
      assertEquals(0L, digestSha256Signature0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      digestSha256Signature0.setSignature((Blob) null);
      assertEquals(1L, digestSha256Signature0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      Blob blob0 = digestSha256Signature0.getSignature();
      digestSha256Signature0.setSignature(blob0);
      assertEquals(1L, digestSha256Signature0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      long long0 = digestSha256Signature0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DigestSha256Signature digestSha256Signature0 = new DigestSha256Signature();
      DigestSha256Signature digestSha256Signature1 = (DigestSha256Signature)digestSha256Signature0.clone();
      assertEquals(0L, digestSha256Signature0.getChangeCount());
      assertEquals(0L, digestSha256Signature1.getChangeCount());
  }
}
