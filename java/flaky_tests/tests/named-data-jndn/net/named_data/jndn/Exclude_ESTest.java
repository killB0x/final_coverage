/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 22:46:06 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.ComponentType;
import net.named_data.jndn.Exclude;
import net.named_data.jndn.Name;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Exclude_ESTest extends Exclude_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component();
      Exclude exclude1 = exclude0.appendAny();
      exclude1.appendComponent(name_Component0);
      Name.Component name_Component1 = Name.Component.fromTimestamp(2614L);
      boolean boolean0 = exclude0.matches(name_Component1);
      assertEquals(2L, exclude0.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = Name.Component.fromTimestamp(0L);
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Exclude exclude2 = exclude0.appendAny();
      exclude2.appendComponent(name_Component0);
      boolean boolean0 = exclude1.matches(name_Component1);
      assertEquals(3L, exclude1.getChangeCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = Name.Component.fromNumber((-1879L));
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      Exclude exclude2 = exclude1.appendAny();
      byte[] byteArray0 = new byte[0];
      ComponentType componentType0 = ComponentType.PARAMETERS_SHA256_DIGEST;
      Name.Component name_Component1 = new Name.Component(byteArray0, componentType0);
      exclude0.appendAny();
      // Undeclared exception!
      try { 
        exclude2.matches(name_Component1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Name$Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      exclude0.size();
      assertEquals(1L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      long long0 = exclude0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      ComponentType componentType0 = ComponentType.GENERIC;
      Name.Component name_Component0 = Name.Component.fromNumber((-889L), componentType0);
      exclude0.appendComponent(name_Component0);
      exclude0.appendComponent(name_Component0);
      exclude0.get(1);
      assertEquals(2L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.appendComponent((Name.Component) null);
      // Undeclared exception!
      try { 
        exclude0.toUri();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Exclude", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Exclude exclude0 = null;
      try {
        exclude0 = new Exclude((Exclude) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.Exclude", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Exclude.Entry exclude_Entry0 = new Exclude.Entry();
      Name.Component name_Component0 = exclude_Entry0.getComponent();
      assertNull(name_Component0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Name.Component name_Component0 = Name.Component.fromVersion(1L);
      Exclude.Entry exclude_Entry0 = new Exclude.Entry(name_Component0);
      assertEquals(Exclude.Type.COMPONENT, exclude_Entry0.getType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Exclude.Entry exclude_Entry0 = new Exclude.Entry();
      Exclude.Type exclude_Type0 = exclude_Entry0.getType();
      assertEquals(Exclude.Type.ANY, exclude_Type0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      // Undeclared exception!
      try { 
        exclude0.get((-4511));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component();
      exclude0.appendComponent(name_Component0);
      exclude0.toUri();
      assertEquals(1L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendAny();
      exclude1.appendAny();
      exclude0.toUri();
      assertEquals(2L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.toUri();
      assertEquals(0L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      Name.Component name_Component0 = new Name.Component("*");
      exclude0.appendComponent(name_Component0);
      Name.Component name_Component1 = new Name.Component();
      boolean boolean0 = exclude0.matches(name_Component1);
      assertEquals(2L, exclude0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = Name.Component.fromSegmentOffset(22L);
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      exclude0.appendAny();
      exclude0.appendComponent(name_Component1);
      Name.Component name_Component2 = Name.Component.fromNumber(22L);
      boolean boolean0 = exclude1.matches(name_Component2);
      assertEquals(3L, exclude1.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = Name.Component.fromTimestamp(0L);
      exclude0.appendComponent(name_Component0);
      Exclude exclude1 = exclude0.appendAny();
      exclude1.appendComponent(name_Component1);
      boolean boolean0 = exclude1.matches(name_Component1);
      assertEquals(3L, exclude1.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = new Name.Component();
      Name.Component name_Component1 = Name.Component.fromSegment(0L);
      Exclude exclude1 = exclude0.appendComponent(name_Component1);
      Exclude exclude2 = exclude1.appendAny();
      Exclude exclude3 = exclude2.appendComponent(name_Component0);
      boolean boolean0 = exclude3.matches(name_Component0);
      assertEquals(3L, exclude2.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.appendAny();
      Name.Component name_Component0 = new Name.Component();
      Exclude exclude1 = exclude0.appendComponent(name_Component0);
      boolean boolean0 = exclude1.matches(name_Component0);
      assertEquals(2L, exclude0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = Name.Component.fromNumber((-1879L));
      ComponentType componentType0 = ComponentType.IMPLICIT_SHA256_DIGEST;
      Name.Component name_Component1 = Name.Component.fromNumber((-1879L), componentType0);
      Exclude exclude1 = exclude0.appendComponent(name_Component1);
      exclude0.appendAny();
      boolean boolean0 = exclude1.matches(name_Component0);
      assertEquals(2L, exclude1.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Name.Component name_Component0 = Name.Component.fromNumber((-1879L));
      exclude0.appendAny();
      boolean boolean0 = exclude0.matches(name_Component0);
      assertEquals(1L, exclude0.getChangeCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.clear();
      assertEquals(1L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      exclude0.size();
      assertEquals(0L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      Exclude exclude1 = new Exclude(exclude0);
      assertEquals(0L, exclude1.getChangeCount());
      assertEquals(0L, exclude0.getChangeCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Exclude exclude0 = new Exclude();
      long long0 = exclude0.getChangeCount();
      assertEquals(0L, long0);
  }
}
