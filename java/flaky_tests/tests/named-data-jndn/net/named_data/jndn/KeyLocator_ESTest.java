/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 08 23:03:45 GMT 2022
 */

package net.named_data.jndn;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.named_data.jndn.GenericSignature;
import net.named_data.jndn.HmacWithSha256Signature;
import net.named_data.jndn.KeyLocator;
import net.named_data.jndn.KeyLocatorType;
import net.named_data.jndn.Name;
import net.named_data.jndn.Sha256WithEcdsaSignature;
import net.named_data.jndn.Sha256WithRsaSignature;
import net.named_data.jndn.Signature;
import net.named_data.jndn.util.Blob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeyLocator_ESTest extends KeyLocator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      keyLocator0.setType((KeyLocatorType) null);
      keyLocator0.getType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEYNAME;
      keyLocator0.setType(keyLocatorType0);
      KeyLocatorType keyLocatorType1 = keyLocator0.getType();
      assertEquals(KeyLocatorType.KEYNAME, keyLocatorType1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      Name name0 = keyLocator0.getKeyName();
      Name name1 = name0.appendTimestamp(1L);
      Name name2 = keyLocator0.getKeyName();
      assertSame(name2, name1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = sha256WithEcdsaSignature0.getKeyLocator();
      int[] intArray0 = new int[2];
      Blob blob0 = new Blob(intArray0);
      keyLocator0.setKeyData(blob0);
      Blob blob1 = keyLocator0.getKeyData();
      assertFalse(blob1.isNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      long long0 = keyLocator0.getChangeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      // Undeclared exception!
      try { 
        keyLocator0.equals((KeyLocator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.KeyLocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeyLocator keyLocator0 = null;
      try {
        keyLocator0 = new KeyLocator((KeyLocator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.named_data.jndn.KeyLocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      Name name0 = keyLocator0.getKeyName();
      name0.appendTimestamp(0L);
      long long0 = keyLocator0.getChangeCount();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericSignature genericSignature0 = new GenericSignature();
      // Undeclared exception!
      try { 
        KeyLocator.getFromSignature(genericSignature0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // KeyLocator.getFromSignature: Signature type does not have a KeyLocator
         //
         verifyException("net.named_data.jndn.KeyLocator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithEcdsaSignature0);
      Blob blob0 = keyLocator0.getKeyData();
      assertTrue(blob0.isNull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(sha256WithRsaSignature0);
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = KeyLocator.canGetFromSignature((Signature) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sha256WithEcdsaSignature sha256WithEcdsaSignature0 = new Sha256WithEcdsaSignature();
      boolean boolean0 = KeyLocator.canGetFromSignature(sha256WithEcdsaSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      boolean boolean0 = KeyLocator.canGetFromSignature(hmacWithSha256Signature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      boolean boolean0 = KeyLocator.canGetFromSignature(sha256WithRsaSignature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      boolean boolean0 = keyLocator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HmacWithSha256Signature hmacWithSha256Signature0 = new HmacWithSha256Signature();
      KeyLocator keyLocator0 = KeyLocator.getFromSignature(hmacWithSha256Signature0);
      boolean boolean0 = keyLocator0.equals((Object) keyLocator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEY_LOCATOR_DIGEST;
      keyLocator0.setType(keyLocatorType0);
      KeyLocator keyLocator1 = new KeyLocator(keyLocator0);
      assertTrue(keyLocator1.equals((Object)keyLocator0));
      
      int[] intArray0 = new int[8];
      Blob blob0 = new Blob(intArray0);
      keyLocator1.setKeyData(blob0);
      boolean boolean0 = keyLocator1.equals(keyLocator0);
      assertFalse(keyLocator1.equals((Object)keyLocator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      boolean boolean0 = keyLocator0.equals(keyLocator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEYNAME;
      keyLocator0.setType(keyLocatorType0);
      Name name0 = new Name("PwZ?<~hUR+tY");
      keyLocator0.setKeyName(name0);
      KeyLocator keyLocator1 = new KeyLocator(keyLocator0);
      assertTrue(keyLocator1.equals((Object)keyLocator0));
      
      keyLocator1.setKeyName((Name) null);
      boolean boolean0 = keyLocator1.equals(keyLocator0);
      assertFalse(keyLocator1.equals((Object)keyLocator0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      keyLocator0.setType((KeyLocatorType) null);
      KeyLocator keyLocator1 = new KeyLocator();
      boolean boolean0 = keyLocator0.equals(keyLocator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KeyLocator keyLocator0 = new KeyLocator();
      keyLocator0.setKeyData((Blob) null);
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      keyLocator0.clear();
      assertEquals(KeyLocatorType.NONE, keyLocator0.getType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEY_LOCATOR_DIGEST;
      keyLocator0.setType(keyLocatorType0);
      boolean boolean0 = keyLocator0.equals(keyLocator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = keyLocator0.getType();
      assertEquals(KeyLocatorType.NONE, keyLocatorType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Sha256WithRsaSignature sha256WithRsaSignature0 = new Sha256WithRsaSignature();
      KeyLocator keyLocator0 = sha256WithRsaSignature0.getKeyLocator();
      KeyLocatorType keyLocatorType0 = KeyLocatorType.KEYNAME;
      keyLocator0.setType(keyLocatorType0);
      boolean boolean0 = keyLocator0.equals(keyLocator0);
      assertTrue(boolean0);
  }
}
